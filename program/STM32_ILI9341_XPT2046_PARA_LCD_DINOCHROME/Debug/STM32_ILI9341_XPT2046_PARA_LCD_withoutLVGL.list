
STM32_ILI9341_XPT2046_PARA_LCD_withoutLVGL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a7c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  08004c14  08004c14  00005c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005820  08005820  000070a8  2**0
                  CONTENTS
  4 .ARM          00000008  08005820  08005820  00006820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005828  08005828  000070a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005828  08005828  00006828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800582c  0800582c  0000682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08005830  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000070a8  2**0
                  CONTENTS
 10 .bss          00000170  200000a8  200000a8  000070a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000218  20000218  000070a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005d9f  00000000  00000000  000070d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001884  00000000  00000000  0000ce77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000668  00000000  00000000  0000e700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004af  00000000  00000000  0000ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002853  00000000  00000000  0000f217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008a35  00000000  00000000  00011a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc24d  00000000  00000000  0001a49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d66ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b78  00000000  00000000  000d6730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000d82a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a8 	.word	0x200000a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004bfc 	.word	0x08004bfc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000ac 	.word	0x200000ac
 80001d4:	08004bfc 	.word	0x08004bfc

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	@ 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2uiz>:
 8000ac0:	004a      	lsls	r2, r1, #1
 8000ac2:	d211      	bcs.n	8000ae8 <__aeabi_d2uiz+0x28>
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac8:	d211      	bcs.n	8000aee <__aeabi_d2uiz+0x2e>
 8000aca:	d50d      	bpl.n	8000ae8 <__aeabi_d2uiz+0x28>
 8000acc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d40e      	bmi.n	8000af4 <__aeabi_d2uiz+0x34>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_d2uiz+0x3a>
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0000 	mov.w	r0, #0
 8000afe:	4770      	bx	lr

08000b00 <LCD_write>:
u16 DeviceCode;	 



void LCD_write(u16 VAL)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
	LCD_CS_CLR;  
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <LCD_write+0x34>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	629a      	str	r2, [r3, #40]	@ 0x28
	DATAOUT(VAL);
 8000b10:	4a09      	ldr	r2, [pc, #36]	@ (8000b38 <LCD_write+0x38>)
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	6153      	str	r3, [r2, #20]
	LCD_WR_CLR;
 8000b16:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <LCD_write+0x34>)
 8000b18:	2208      	movs	r2, #8
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
	LCD_WR_SET;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <LCD_write+0x34>)
 8000b1e:	2208      	movs	r2, #8
 8000b20:	619a      	str	r2, [r3, #24]
	LCD_CS_SET;
 8000b22:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <LCD_write+0x34>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	619a      	str	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	48000800 	.word	0x48000800
 8000b38:	48000400 	.word	0x48000400

08000b3c <LCD_WR_REG>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u16 data)
{ 
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
   LCD_RS_CLR;     
 8000b46:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <LCD_WR_REG+0x20>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ffd6 	bl	8000b00 <LCD_write>
	 #endif
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	48000800 	.word	0x48000800

08000b60 <LCD_WR_DATA>:
 * @function   :Write an 16-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u16 data)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
	 LCD_RS_SET;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <LCD_WR_DATA+0x20>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	619a      	str	r2, [r3, #24]
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ffc4 	bl	8000b00 <LCD_write>
	 #endif
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	48000800 	.word	0x48000800

08000b84 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{	
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	80fb      	strh	r3, [r7, #6]
 8000b90:	4613      	mov	r3, r2
 8000b92:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ffd0 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 8000b9c:	88bb      	ldrh	r3, [r7, #4]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffde 	bl	8000b60 <LCD_WR_DATA>
}	   
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000bb0:	4b03      	ldr	r3, [pc, #12]	@ (8000bc0 <LCD_WriteRAM_Prepare+0x14>)
 8000bb2:	891b      	ldrh	r3, [r3, #8]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ffc1 	bl	8000b3c <LCD_WR_REG>
}	 
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200000c4 	.word	0x200000c4

08000bc4 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
   LCD_RS_SET; 
 8000bce:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <Lcd_WriteData_16Bit+0x20>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	619a      	str	r2, [r3, #24]
		LCD_WR_SET;
		LCD_CS_SET;
 //  LCD_write(Data&0xFF00);
//	 LCD_write(Data<<8);
	 #else
	 LCD_write(Data);
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff92 	bl	8000b00 <LCD_write>
	 #endif
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	48000800 	.word	0x48000800

08000be8 <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	80fb      	strh	r3, [r7, #6]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 8000bf8:	88ba      	ldrh	r2, [r7, #4]
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f9c0 	bl	8000f84 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <LCD_DrawPoint+0x30>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ffdb 	bl	8000bc4 <Lcd_WriteData_16Bit>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200000d4 	.word	0x200000d4

08000c1c <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
  unsigned int i;//,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 8000c26:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <LCD_Clear+0x58>)
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <LCD_Clear+0x58>)
 8000c30:	885b      	ldrh	r3, [r3, #2]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	2100      	movs	r1, #0
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 f951 	bl	8000ee0 <LCD_SetWindows>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	e006      	b.n	8000c52 <LCD_Clear+0x36>
	{
 //   for(m=0;m<lcddev.width;m++)
  //  {	
			Lcd_WriteData_16Bit(Color);
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ffbc 	bl	8000bc4 <Lcd_WriteData_16Bit>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <LCD_Clear+0x58>)
 8000c54:	885b      	ldrh	r3, [r3, #2]
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <LCD_Clear+0x58>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	fb02 f303 	mul.w	r3, r2, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d3ed      	bcc.n	8000c44 <LCD_Clear+0x28>
	//	}
	}
} 
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000c4 	.word	0x200000c4

08000c78 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <LCD_RESET+0x20>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	629a      	str	r2, [r3, #40]	@ 0x28
	delay_ms(100);	
 8000c82:	2064      	movs	r0, #100	@ 0x64
 8000c84:	f001 fe56 	bl	8002934 <delay_ms>
	LCD_RST_SET;
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <LCD_RESET+0x20>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	619a      	str	r2, [r3, #24]
	delay_ms(50);
 8000c8e:	2032      	movs	r0, #50	@ 0x32
 8000c90:	f001 fe50 	bl	8002934 <delay_ms>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	48000800 	.word	0x48000800

08000c9c <ILI9341_paradriver_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void ILI9341_paradriver_Init(void)
{  
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	//LCD_GPIOInit();	// already done with CUBE MX
 	LCD_RESET(); //LCD ��λ
 8000ca0:	f7ff ffea 	bl	8000c78 <LCD_RESET>
//*************2.4inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 8000ca4:	20cf      	movs	r0, #207	@ 0xcf
 8000ca6:	f7ff ff49 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff ff58 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0xD9); //0xC1 
 8000cb0:	20d9      	movs	r0, #217	@ 0xd9
 8000cb2:	f7ff ff55 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0X30); 
 8000cb6:	2030      	movs	r0, #48	@ 0x30
 8000cb8:	f7ff ff52 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xED);  
 8000cbc:	20ed      	movs	r0, #237	@ 0xed
 8000cbe:	f7ff ff3d 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 8000cc2:	2064      	movs	r0, #100	@ 0x64
 8000cc4:	f7ff ff4c 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x03); 
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f7ff ff49 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0X12); 
 8000cce:	2012      	movs	r0, #18
 8000cd0:	f7ff ff46 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0X81); 
 8000cd4:	2081      	movs	r0, #129	@ 0x81
 8000cd6:	f7ff ff43 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);  
 8000cda:	20e8      	movs	r0, #232	@ 0xe8
 8000cdc:	f7ff ff2e 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8000ce0:	2085      	movs	r0, #133	@ 0x85
 8000ce2:	f7ff ff3d 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 8000ce6:	2010      	movs	r0, #16
 8000ce8:	f7ff ff3a 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A); 
 8000cec:	207a      	movs	r0, #122	@ 0x7a
 8000cee:	f7ff ff37 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);  
 8000cf2:	20cb      	movs	r0, #203	@ 0xcb
 8000cf4:	f7ff ff22 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 8000cf8:	2039      	movs	r0, #57	@ 0x39
 8000cfa:	f7ff ff31 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C); 
 8000cfe:	202c      	movs	r0, #44	@ 0x2c
 8000d00:	f7ff ff2e 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff ff2b 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x34); 
 8000d0a:	2034      	movs	r0, #52	@ 0x34
 8000d0c:	f7ff ff28 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff ff25 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);  
 8000d16:	20f7      	movs	r0, #247	@ 0xf7
 8000d18:	f7ff ff10 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 8000d1c:	2020      	movs	r0, #32
 8000d1e:	f7ff ff1f 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);  
 8000d22:	20ea      	movs	r0, #234	@ 0xea
 8000d24:	f7ff ff0a 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff ff19 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff ff16 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control 
 8000d34:	20c0      	movs	r0, #192	@ 0xc0
 8000d36:	f7ff ff01 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 8000d3a:	201b      	movs	r0, #27
 8000d3c:	f7ff ff10 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control 
 8000d40:	20c1      	movs	r0, #193	@ 0xc1
 8000d42:	f7ff fefb 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] 0x01
 8000d46:	2012      	movs	r0, #18
 8000d48:	f7ff ff0a 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control 
 8000d4c:	20c5      	movs	r0, #197	@ 0xc5
 8000d4e:	f7ff fef5 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x08); 	 //30
 8000d52:	2008      	movs	r0, #8
 8000d54:	f7ff ff04 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x26); 	 //30
 8000d58:	2026      	movs	r0, #38	@ 0x26
 8000d5a:	f7ff ff01 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2 
 8000d5e:	20c7      	movs	r0, #199	@ 0xc7
 8000d60:	f7ff feec 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 8000d64:	20b7      	movs	r0, #183	@ 0xb7
 8000d66:	f7ff fefb 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control 
 8000d6a:	2036      	movs	r0, #54	@ 0x36
 8000d6c:	f7ff fee6 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 8000d70:	2008      	movs	r0, #8
 8000d72:	f7ff fef5 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);   
 8000d76:	203a      	movs	r0, #58	@ 0x3a
 8000d78:	f7ff fee0 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 8000d7c:	2055      	movs	r0, #85	@ 0x55
 8000d7e:	f7ff feef 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);   
 8000d82:	20b1      	movs	r0, #177	@ 0xb1
 8000d84:	f7ff feda 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff fee9 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 8000d8e:	201a      	movs	r0, #26
 8000d90:	f7ff fee6 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control 
 8000d94:	20b6      	movs	r0, #182	@ 0xb6
 8000d96:	f7ff fed1 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 8000d9a:	200a      	movs	r0, #10
 8000d9c:	f7ff fee0 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2); 
 8000da0:	20a2      	movs	r0, #162	@ 0xa2
 8000da2:	f7ff fedd 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8000da6:	20f2      	movs	r0, #242	@ 0xf2
 8000da8:	f7ff fec8 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fed7 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected 
 8000db2:	2026      	movs	r0, #38	@ 0x26
 8000db4:	f7ff fec2 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff fed1 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma 
 8000dbe:	20e0      	movs	r0, #224	@ 0xe0
 8000dc0:	f7ff febc 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 8000dc4:	200f      	movs	r0, #15
 8000dc6:	f7ff fecb 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x1D); 
 8000dca:	201d      	movs	r0, #29
 8000dcc:	f7ff fec8 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 8000dd0:	201a      	movs	r0, #26
 8000dd2:	f7ff fec5 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A); 
 8000dd6:	200a      	movs	r0, #10
 8000dd8:	f7ff fec2 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D); 
 8000ddc:	200d      	movs	r0, #13
 8000dde:	f7ff febf 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 8000de2:	2007      	movs	r0, #7
 8000de4:	f7ff febc 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x49); 
 8000de8:	2049      	movs	r0, #73	@ 0x49
 8000dea:	f7ff feb9 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0X66); 
 8000dee:	2066      	movs	r0, #102	@ 0x66
 8000df0:	f7ff feb6 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x3B); 
 8000df4:	203b      	movs	r0, #59	@ 0x3b
 8000df6:	f7ff feb3 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 8000dfa:	2007      	movs	r0, #7
 8000dfc:	f7ff feb0 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x11); 
 8000e00:	2011      	movs	r0, #17
 8000e02:	f7ff fead 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x01); 
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff feaa 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x09); 
 8000e0c:	2009      	movs	r0, #9
 8000e0e:	f7ff fea7 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x05); 
 8000e12:	2005      	movs	r0, #5
 8000e14:	f7ff fea4 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x04); 		 
 8000e18:	2004      	movs	r0, #4
 8000e1a:	f7ff fea1 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma 
 8000e1e:	20e1      	movs	r0, #225	@ 0xe1
 8000e20:	f7ff fe8c 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fe9b 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x18); 
 8000e2a:	2018      	movs	r0, #24
 8000e2c:	f7ff fe98 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x1D); 
 8000e30:	201d      	movs	r0, #29
 8000e32:	f7ff fe95 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8000e36:	2002      	movs	r0, #2
 8000e38:	f7ff fe92 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 8000e3c:	200f      	movs	r0, #15
 8000e3e:	f7ff fe8f 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x04); 
 8000e42:	2004      	movs	r0, #4
 8000e44:	f7ff fe8c 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x36); 
 8000e48:	2036      	movs	r0, #54	@ 0x36
 8000e4a:	f7ff fe89 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x13); 
 8000e4e:	2013      	movs	r0, #19
 8000e50:	f7ff fe86 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x4C); 
 8000e54:	204c      	movs	r0, #76	@ 0x4c
 8000e56:	f7ff fe83 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f7ff fe80 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x13); 
 8000e60:	2013      	movs	r0, #19
 8000e62:	f7ff fe7d 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 8000e66:	200f      	movs	r0, #15
 8000e68:	f7ff fe7a 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x2E); 
 8000e6c:	202e      	movs	r0, #46	@ 0x2e
 8000e6e:	f7ff fe77 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x2F); 
 8000e72:	202f      	movs	r0, #47	@ 0x2f
 8000e74:	f7ff fe74 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x05); 
 8000e78:	2005      	movs	r0, #5
 8000e7a:	f7ff fe71 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0x2B); 
 8000e7e:	202b      	movs	r0, #43	@ 0x2b
 8000e80:	f7ff fe5c 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fe6b 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fe68 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff fe65 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000e96:	203f      	movs	r0, #63	@ 0x3f
 8000e98:	f7ff fe62 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0x2A); 
 8000e9c:	202a      	movs	r0, #42	@ 0x2a
 8000e9e:	f7ff fe4d 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fe5c 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fe59 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fe56 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);	 
 8000eb4:	20ef      	movs	r0, #239	@ 0xef
 8000eb6:	f7ff fe53 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8000eba:	2011      	movs	r0, #17
 8000ebc:	f7ff fe3e 	bl	8000b3c <LCD_WR_REG>
	delay_ms(120);
 8000ec0:	2078      	movs	r0, #120	@ 0x78
 8000ec2:	f001 fd37 	bl	8002934 <delay_ms>
	LCD_WR_REG(0x29); //display on		
 8000ec6:	2029      	movs	r0, #41	@ 0x29
 8000ec8:	f7ff fe38 	bl	8000b3c <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 f86b 	bl	8000fa8 <LCD_direction>
//	LCD_LED=1;//��������	 
	LCD_Clear(WHITE);//��ȫ����ɫ
 8000ed2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ed6:	f7ff fea1 	bl	8000c1c <LCD_Clear>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	4608      	mov	r0, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	4623      	mov	r3, r4
 8000ef0:	80fb      	strh	r3, [r7, #6]
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80bb      	strh	r3, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	807b      	strh	r3, [r7, #2]
 8000efa:	4613      	mov	r3, r2
 8000efc:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <LCD_SetWindows+0xa0>)
 8000f00:	899b      	ldrh	r3, [r3, #12]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fe1a 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	0a1b      	lsrs	r3, r3, #8
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fe26 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fe20 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fe1a 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fe14 	bl	8000b60 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <LCD_SetWindows+0xa0>)
 8000f3a:	89db      	ldrh	r3, [r3, #14]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fdfd 	bl	8000b3c <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8000f42:	88bb      	ldrh	r3, [r7, #4]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fe09 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fe03 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 8000f5a:	883b      	ldrh	r3, [r7, #0]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fdfd 	bl	8000b60 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 8000f66:	883b      	ldrh	r3, [r7, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fdf7 	bl	8000b60 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 8000f72:	f7ff fe1b 	bl	8000bac <LCD_WriteRAM_Prepare>
}   
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd90      	pop	{r4, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000c4 	.word	0x200000c4

08000f84 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	80fb      	strh	r3, [r7, #6]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 8000f94:	88bb      	ldrh	r3, [r7, #4]
 8000f96:	88fa      	ldrh	r2, [r7, #6]
 8000f98:	88b9      	ldrh	r1, [r7, #4]
 8000f9a:	88f8      	ldrh	r0, [r7, #6]
 8000f9c:	f7ff ffa0 	bl	8000ee0 <LCD_SetWindows>
} 
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <LCD_direction+0xac>)
 8000fb4:	222a      	movs	r2, #42	@ 0x2a
 8000fb6:	819a      	strh	r2, [r3, #12]
			lcddev.setycmd=0x2B;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <LCD_direction+0xac>)
 8000fba:	222b      	movs	r2, #43	@ 0x2b
 8000fbc:	81da      	strh	r2, [r3, #14]
			lcddev.wramcmd=0x2C;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <LCD_direction+0xac>)
 8000fc0:	222c      	movs	r2, #44	@ 0x2c
 8000fc2:	811a      	strh	r2, [r3, #8]
			lcddev.rramcmd=0x2E;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <LCD_direction+0xac>)
 8000fc6:	222e      	movs	r2, #46	@ 0x2e
 8000fc8:	815a      	strh	r2, [r3, #10]
	switch(direction){		  
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d83b      	bhi.n	8001048 <LCD_direction+0xa0>
 8000fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd8 <LCD_direction+0x30>)
 8000fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd6:	bf00      	nop
 8000fd8:	08000fe9 	.word	0x08000fe9
 8000fdc:	08001001 	.word	0x08001001
 8000fe0:	08001019 	.word	0x08001019
 8000fe4:	08001031 	.word	0x08001031
		case 0:						 	 		
			lcddev.width=LCD_W;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <LCD_direction+0xac>)
 8000fea:	22f0      	movs	r2, #240	@ 0xf0
 8000fec:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <LCD_direction+0xac>)
 8000ff0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ff4:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3));
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	2036      	movs	r0, #54	@ 0x36
 8000ffa:	f7ff fdc3 	bl	8000b84 <LCD_WriteReg>
		break;
 8000ffe:	e024      	b.n	800104a <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <LCD_direction+0xac>)
 8001002:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001006:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <LCD_direction+0xac>)
 800100a:	22f0      	movs	r2, #240	@ 0xf0
 800100c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6));
 800100e:	2168      	movs	r1, #104	@ 0x68
 8001010:	2036      	movs	r0, #54	@ 0x36
 8001012:	f7ff fdb7 	bl	8000b84 <LCD_WriteReg>
		break;
 8001016:	e018      	b.n	800104a <LCD_direction+0xa2>
		case 2:						 	 		
			lcddev.width=LCD_W;
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <LCD_direction+0xac>)
 800101a:	22f0      	movs	r2, #240	@ 0xf0
 800101c:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <LCD_direction+0xac>)
 8001020:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001024:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<4)|(1<<6));
 8001026:	21d8      	movs	r1, #216	@ 0xd8
 8001028:	2036      	movs	r0, #54	@ 0x36
 800102a:	f7ff fdab 	bl	8000b84 <LCD_WriteReg>
		break;
 800102e:	e00c      	b.n	800104a <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <LCD_direction+0xac>)
 8001032:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001036:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <LCD_direction+0xac>)
 800103a:	22f0      	movs	r2, #240	@ 0xf0
 800103c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5)|(1<<4));
 800103e:	21b8      	movs	r1, #184	@ 0xb8
 8001040:	2036      	movs	r0, #54	@ 0x36
 8001042:	f7ff fd9f 	bl	8000b84 <LCD_WriteReg>
		break;	
 8001046:	e000      	b.n	800104a <LCD_direction+0xa2>
		default:break;
 8001048:	bf00      	nop
	}		
}	 
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000c4 	.word	0x200000c4

08001058 <GUI_DrawPoint>:
                y:the y coordinate of the point
								color:the color value of the point
 * @retvalue   :None
********************************************************************/
void GUI_DrawPoint(u16 x,u16 y,u16 color)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
 8001062:	460b      	mov	r3, r1
 8001064:	80bb      	strh	r3, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	807b      	strh	r3, [r7, #2]
	LCD_SetCursor(x,y);//���ù��λ��
 800106a:	88ba      	ldrh	r2, [r7, #4]
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff87 	bl	8000f84 <LCD_SetCursor>
	Lcd_WriteData_16Bit(color);
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fda3 	bl	8000bc4 <Lcd_WriteData_16Bit>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	4604      	mov	r4, r0
 8001090:	4608      	mov	r0, r1
 8001092:	4611      	mov	r1, r2
 8001094:	461a      	mov	r2, r3
 8001096:	4623      	mov	r3, r4
 8001098:	80fb      	strh	r3, [r7, #6]
 800109a:	4603      	mov	r3, r0
 800109c:	80bb      	strh	r3, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	807b      	strh	r3, [r7, #2]
 80010a2:	4613      	mov	r3, r2
 80010a4:	803b      	strh	r3, [r7, #0]
	u16 i,j;
	u16 width=ex-sx+1; 		//�õ����Ŀ��
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	3301      	adds	r3, #1
 80010b0:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;		//�߶�
 80010b2:	883a      	ldrh	r2, [r7, #0]
 80010b4:	88bb      	ldrh	r3, [r7, #4]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	3301      	adds	r3, #1
 80010bc:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);//������ʾ����
 80010be:	883b      	ldrh	r3, [r7, #0]
 80010c0:	887a      	ldrh	r2, [r7, #2]
 80010c2:	88b9      	ldrh	r1, [r7, #4]
 80010c4:	88f8      	ldrh	r0, [r7, #6]
 80010c6:	f7ff ff0b 	bl	8000ee0 <LCD_SetWindows>
	for(i=0;i<height;i++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	81fb      	strh	r3, [r7, #14]
 80010ce:	e010      	b.n	80010f2 <LCD_Fill+0x6a>
	{
		for(j=0;j<width;j++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	81bb      	strh	r3, [r7, #12]
 80010d4:	e006      	b.n	80010e4 <LCD_Fill+0x5c>
		Lcd_WriteData_16Bit(color);	//д������
 80010d6:	8c3b      	ldrh	r3, [r7, #32]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fd73 	bl	8000bc4 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 80010de:	89bb      	ldrh	r3, [r7, #12]
 80010e0:	3301      	adds	r3, #1
 80010e2:	81bb      	strh	r3, [r7, #12]
 80010e4:	89ba      	ldrh	r2, [r7, #12]
 80010e6:	897b      	ldrh	r3, [r7, #10]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3f4      	bcc.n	80010d6 <LCD_Fill+0x4e>
	for(i=0;i<height;i++)
 80010ec:	89fb      	ldrh	r3, [r7, #14]
 80010ee:	3301      	adds	r3, #1
 80010f0:	81fb      	strh	r3, [r7, #14]
 80010f2:	89fa      	ldrh	r2, [r7, #14]
 80010f4:	893b      	ldrh	r3, [r7, #8]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d3ea      	bcc.n	80010d0 <LCD_Fill+0x48>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ���������Ϊȫ��
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <LCD_Fill+0x94>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	3b01      	subs	r3, #1
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <LCD_Fill+0x94>)
 8001104:	885b      	ldrh	r3, [r3, #2]
 8001106:	3b01      	subs	r3, #1
 8001108:	b29b      	uxth	r3, r3
 800110a:	2100      	movs	r1, #0
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fee7 	bl	8000ee0 <LCD_SetWindows>
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}
 800111a:	bf00      	nop
 800111c:	200000c4 	.word	0x200000c4

08001120 <LCD_DrawLine>:
								x2:the ending x coordinate of the line
								y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b08d      	sub	sp, #52	@ 0x34
 8001124:	af00      	add	r7, sp, #0
 8001126:	4604      	mov	r4, r0
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	4623      	mov	r3, r4
 8001130:	80fb      	strh	r3, [r7, #6]
 8001132:	4603      	mov	r3, r0
 8001134:	80bb      	strh	r3, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]
 800113a:	4613      	mov	r3, r2
 800113c:	803b      	strh	r3, [r7, #0]
	u16 t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;

	delta_x=x2-x1; //������������
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 800114e:	883a      	ldrh	r2, [r7, #0]
 8001150:	88bb      	ldrh	r3, [r7, #4]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 800115a:	88bb      	ldrh	r3, [r7, #4]
 800115c:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //���õ�������
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	2b00      	cmp	r3, #0
 8001162:	dd02      	ble.n	800116a <LCD_DrawLine+0x4a>
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	e00b      	b.n	8001182 <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//��ֱ��
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <LCD_DrawLine+0x56>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	e005      	b.n	8001182 <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	425b      	negs	r3, r3
 8001180:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	2b00      	cmp	r3, #0
 8001186:	dd02      	ble.n	800118e <LCD_DrawLine+0x6e>
 8001188:	2301      	movs	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	e00b      	b.n	80011a6 <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//ˮƽ��
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <LCD_DrawLine+0x7a>
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	e005      	b.n	80011a6 <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	425b      	negs	r3, r3
 80011a4:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //ѡȡ��������������
 80011a6:	6a3a      	ldr	r2, [r7, #32]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd02      	ble.n	80011b4 <LCD_DrawLine+0x94>
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	e001      	b.n	80011b8 <LCD_DrawLine+0x98>
	else distance=delta_y;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//�������
 80011b8:	2300      	movs	r3, #0
 80011ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80011bc:	e02a      	b.n	8001214 <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//����
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	b292      	uxth	r2, r2
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fd0d 	bl	8000be8 <LCD_DrawPoint>
		xerr+=delta_x ;
 80011ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	4413      	add	r3, r2
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y ;
 80011d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	4413      	add	r3, r2
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 80011de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dd07      	ble.n	80011f6 <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 80011e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80011f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dd07      	ble.n	800120e <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 80011fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4413      	add	r3, r2
 800120c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//�������
 800120e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001210:	3301      	adds	r3, #1
 8001212:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001214:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	3301      	adds	r3, #1
 800121a:	429a      	cmp	r2, r3
 800121c:	ddcf      	ble.n	80011be <LCD_DrawLine+0x9e>
		}
	}
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3734      	adds	r7, #52	@ 0x34
 8001224:	46bd      	mov	sp, r7
 8001226:	bd90      	pop	{r4, r7, pc}

08001228 <_draw_circle_8>:
								y:the y coordinate relative to the Circular center
								c:the color value of the circle
 * @retvalue   :None
******************************************************************************/
void _draw_circle_8(int xc, int yc, int x, int y, u16 c)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
	GUI_DrawPoint(xc + x, yc + y, c);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4413      	add	r3, r2
 8001240:	b298      	uxth	r0, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	b29a      	uxth	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b29b      	uxth	r3, r3
 800124e:	8b3a      	ldrh	r2, [r7, #24]
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff ff01 	bl	8001058 <GUI_DrawPoint>

	GUI_DrawPoint(xc - x, yc + y, c);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b29b      	uxth	r3, r3
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b298      	uxth	r0, r3
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	b29a      	uxth	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4413      	add	r3, r2
 800126c:	b29b      	uxth	r3, r3
 800126e:	8b3a      	ldrh	r2, [r7, #24]
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fef1 	bl	8001058 <GUI_DrawPoint>

	GUI_DrawPoint(xc + x, yc - y, c);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	b29a      	uxth	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	b29b      	uxth	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b298      	uxth	r0, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	b29a      	uxth	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	b29b      	uxth	r3, r3
 800128e:	8b3a      	ldrh	r2, [r7, #24]
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fee1 	bl	8001058 <GUI_DrawPoint>

	GUI_DrawPoint(xc - x, yc - y, c);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	b29a      	uxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	b29b      	uxth	r3, r3
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	b298      	uxth	r0, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	8b3a      	ldrh	r2, [r7, #24]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fed1 	bl	8001058 <GUI_DrawPoint>

	GUI_DrawPoint(xc + y, yc + x, c);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4413      	add	r3, r2
 80012c0:	b298      	uxth	r0, r3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	8b3a      	ldrh	r2, [r7, #24]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fec1 	bl	8001058 <GUI_DrawPoint>

	GUI_DrawPoint(xc - y, yc + x, c);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	b298      	uxth	r0, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	8b3a      	ldrh	r2, [r7, #24]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff feb1 	bl	8001058 <GUI_DrawPoint>

	GUI_DrawPoint(xc + y, yc - x, c);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	b298      	uxth	r0, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	b29b      	uxth	r3, r3
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	8b3a      	ldrh	r2, [r7, #24]
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fea1 	bl	8001058 <GUI_DrawPoint>

	GUI_DrawPoint(xc - y, yc - x, c);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	b29a      	uxth	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b298      	uxth	r0, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	b29a      	uxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	b29b      	uxth	r3, r3
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	8b3a      	ldrh	r2, [r7, #24]
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fe91 	bl	8001058 <GUI_DrawPoint>
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <gui_circle>:
								r:Circular radius
								fill:1-filling,0-no filling
 * @retvalue   :None
******************************************************************************/
void gui_circle(int xc, int yc,u16 c,int r, int fill)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b08a      	sub	sp, #40	@ 0x28
 8001342:	af02      	add	r7, sp, #8
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4613      	mov	r3, r2
 800134c:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	f1c3 0303 	rsb	r3, r3, #3
 800135e:	613b      	str	r3, [r7, #16]


	if (fill)
 8001360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001362:	2b00      	cmp	r3, #0
 8001364:	d04f      	beq.n	8001406 <gui_circle+0xc8>
	{
		// �����䣨��ʵ��Բ��
		while (x <= y) {
 8001366:	e029      	b.n	80013bc <gui_circle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e00a      	b.n	8001384 <gui_circle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff ff55 	bl	8001228 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	429a      	cmp	r2, r3
 800138a:	ddf0      	ble.n	800136e <gui_circle+0x30>

			if (d < 0) {
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2b00      	cmp	r3, #0
 8001390:	da06      	bge.n	80013a0 <gui_circle+0x62>
				d = d + 4 * x + 6;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	009a      	lsls	r2, r3, #2
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4413      	add	r3, r2
 800139a:	3306      	adds	r3, #6
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	e00a      	b.n	80013b6 <gui_circle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	009a      	lsls	r2, r3, #2
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4413      	add	r3, r2
 80013ac:	330a      	adds	r3, #10
 80013ae:	613b      	str	r3, [r7, #16]
				y--;
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	ddd1      	ble.n	8001368 <gui_circle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80013c4:	e023      	b.n	800140e <gui_circle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff ff29 	bl	8001228 <_draw_circle_8>
			if (d < 0) {
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da06      	bge.n	80013ea <gui_circle+0xac>
				d = d + 4 * x + 6;
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	009a      	lsls	r2, r3, #2
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4413      	add	r3, r2
 80013e4:	3306      	adds	r3, #6
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	e00a      	b.n	8001400 <gui_circle+0xc2>
				d = d + 4 * (x - y) + 10;
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	009a      	lsls	r2, r3, #2
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4413      	add	r3, r2
 80013f6:	330a      	adds	r3, #10
 80013f8:	613b      	str	r3, [r7, #16]
				y--;
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
			x++;
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	3301      	adds	r3, #1
 8001404:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	429a      	cmp	r2, r3
 800140c:	dddb      	ble.n	80013c6 <gui_circle+0x88>
}
 800140e:	bf00      	nop
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	4604      	mov	r4, r0
 8001420:	4608      	mov	r0, r1
 8001422:	4611      	mov	r1, r2
 8001424:	461a      	mov	r2, r3
 8001426:	4623      	mov	r3, r4
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	4603      	mov	r3, r0
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	807b      	strh	r3, [r7, #2]
 8001432:	4613      	mov	r3, r2
 8001434:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;
 8001436:	4b62      	ldr	r3, [pc, #392]	@ (80015c0 <LCD_ShowChar+0x1a8>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	817b      	strh	r3, [r7, #10]

	num=num-' ';//�õ�ƫ�ƺ��ֵ
 800143c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001440:	3b20      	subs	r3, #32
 8001442:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 8001446:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4413      	add	r3, r2
 8001454:	b29b      	uxth	r3, r3
 8001456:	3b01      	subs	r3, #1
 8001458:	b29c      	uxth	r4, r3
 800145a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800145e:	b29a      	uxth	r2, r3
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	b29b      	uxth	r3, r3
 8001466:	3b01      	subs	r3, #1
 8001468:	b29b      	uxth	r3, r3
 800146a:	88b9      	ldrh	r1, [r7, #4]
 800146c:	88f8      	ldrh	r0, [r7, #6]
 800146e:	4622      	mov	r2, r4
 8001470:	f7ff fd36 	bl	8000ee0 <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 8001474:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001478:	2b00      	cmp	r3, #0
 800147a:	d143      	bne.n	8001504 <LCD_ShowChar+0xec>
	{
		for(pos=0;pos<size;pos++)
 800147c:	2300      	movs	r3, #0
 800147e:	73bb      	strb	r3, [r7, #14]
 8001480:	e03a      	b.n	80014f8 <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8001482:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001486:	2b0c      	cmp	r3, #12
 8001488:	d10c      	bne.n	80014a4 <LCD_ShowChar+0x8c>
 800148a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800148e:	7bb9      	ldrb	r1, [r7, #14]
 8001490:	484c      	ldr	r0, [pc, #304]	@ (80015c4 <LCD_ShowChar+0x1ac>)
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4403      	add	r3, r0
 800149c:	440b      	add	r3, r1
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e008      	b.n	80014b6 <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 80014a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	4947      	ldr	r1, [pc, #284]	@ (80015c8 <LCD_ShowChar+0x1b0>)
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	440a      	add	r2, r1
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	737b      	strb	r3, [r7, #13]
 80014ba:	e013      	b.n	80014e4 <LCD_ShowChar+0xcc>
		    {
		        if(temp&0x01)Lcd_WriteData_16Bit(fc);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d004      	beq.n	80014d0 <LCD_ShowChar+0xb8>
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fb7b 	bl	8000bc4 <Lcd_WriteData_16Bit>
 80014ce:	e003      	b.n	80014d8 <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc);
 80014d0:	883b      	ldrh	r3, [r7, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fb76 	bl	8000bc4 <Lcd_WriteData_16Bit>
				temp>>=1;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	085b      	lsrs	r3, r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80014de:	7b7b      	ldrb	r3, [r7, #13]
 80014e0:	3301      	adds	r3, #1
 80014e2:	737b      	strb	r3, [r7, #13]
 80014e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	7b7a      	ldrb	r2, [r7, #13]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d3e4      	bcc.n	80014bc <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	3301      	adds	r3, #1
 80014f6:	73bb      	strb	r3, [r7, #14]
 80014f8:	7bba      	ldrb	r2, [r7, #14]
 80014fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014fe:	429a      	cmp	r2, r3
 8001500:	d3bf      	bcc.n	8001482 <LCD_ShowChar+0x6a>
 8001502:	e049      	b.n	8001598 <LCD_ShowChar+0x180>
		    }

		}
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 8001504:	2300      	movs	r3, #0
 8001506:	73bb      	strb	r3, [r7, #14]
 8001508:	e041      	b.n	800158e <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 800150a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d10c      	bne.n	800152c <LCD_ShowChar+0x114>
 8001512:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001516:	7bb9      	ldrb	r1, [r7, #14]
 8001518:	482a      	ldr	r0, [pc, #168]	@ (80015c4 <LCD_ShowChar+0x1ac>)
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4403      	add	r3, r0
 8001524:	440b      	add	r3, r1
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e008      	b.n	800153e <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 800152c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	4925      	ldr	r1, [pc, #148]	@ (80015c8 <LCD_ShowChar+0x1b0>)
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	440a      	add	r2, r1
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 800153e:	2300      	movs	r3, #0
 8001540:	737b      	strb	r3, [r7, #13]
 8001542:	e01a      	b.n	800157a <LCD_ShowChar+0x162>
		    {
				POINT_COLOR=fc;
 8001544:	4a1e      	ldr	r2, [pc, #120]	@ (80015c0 <LCD_ShowChar+0x1a8>)
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00c      	beq.n	800156e <LCD_ShowChar+0x156>
 8001554:	7b7b      	ldrb	r3, [r7, #13]
 8001556:	b29a      	uxth	r2, r3
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	4413      	add	r3, r2
 800155c:	b298      	uxth	r0, r3
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	b29a      	uxth	r2, r3
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	b29b      	uxth	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fb3d 	bl	8000be8 <LCD_DrawPoint>
		        temp>>=1;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	085b      	lsrs	r3, r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001574:	7b7b      	ldrb	r3, [r7, #13]
 8001576:	3301      	adds	r3, #1
 8001578:	737b      	strb	r3, [r7, #13]
 800157a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	7b7a      	ldrb	r2, [r7, #13]
 8001584:	429a      	cmp	r2, r3
 8001586:	d3dd      	bcc.n	8001544 <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	3301      	adds	r3, #1
 800158c:	73bb      	strb	r3, [r7, #14]
 800158e:	7bba      	ldrb	r2, [r7, #14]
 8001590:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001594:	429a      	cmp	r2, r3
 8001596:	d3b8      	bcc.n	800150a <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;
 8001598:	4a09      	ldr	r2, [pc, #36]	@ (80015c0 <LCD_ShowChar+0x1a8>)
 800159a:	897b      	ldrh	r3, [r7, #10]
 800159c:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <LCD_ShowChar+0x1b4>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <LCD_ShowChar+0x1b4>)
 80015a8:	885b      	ldrh	r3, [r3, #2]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	2100      	movs	r1, #0
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff fc95 	bl	8000ee0 <LCD_SetWindows>
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}
 80015be:	bf00      	nop
 80015c0:	200000d4 	.word	0x200000d4
 80015c4:	08004d8c 	.word	0x08004d8c
 80015c8:	08005200 	.word	0x08005200
 80015cc:	200000c4 	.word	0x200000c4

080015d0 <LCD_ShowString>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowString(u16 x,u16 y,u8 size,u8 *p,u8 mode)
{
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af04      	add	r7, sp, #16
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	4603      	mov	r3, r0
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	460b      	mov	r3, r1
 80015de:	81bb      	strh	r3, [r7, #12]
 80015e0:	4613      	mov	r3, r2
 80015e2:	72fb      	strb	r3, [r7, #11]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80015e4:	e025      	b.n	8001632 <LCD_ShowString+0x62>
    {
		if(x>(lcddev.width-1)||y>(lcddev.height-1))
 80015e6:	4b19      	ldr	r3, [pc, #100]	@ (800164c <LCD_ShowString+0x7c>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	89fa      	ldrh	r2, [r7, #14]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d229      	bcs.n	8001644 <LCD_ShowString+0x74>
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <LCD_ShowString+0x7c>)
 80015f2:	885b      	ldrh	r3, [r3, #2]
 80015f4:	89ba      	ldrh	r2, [r7, #12]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d224      	bcs.n	8001644 <LCD_ShowString+0x74>
		return;
        LCD_ShowChar(x,y,POINT_COLOR,BACK_COLOR,*p,size,mode);
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <LCD_ShowString+0x80>)
 80015fc:	881c      	ldrh	r4, [r3, #0]
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <LCD_ShowString+0x84>)
 8001600:	881d      	ldrh	r5, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	89b9      	ldrh	r1, [r7, #12]
 8001608:	89f8      	ldrh	r0, [r7, #14]
 800160a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800160e:	9202      	str	r2, [sp, #8]
 8001610:	7afa      	ldrb	r2, [r7, #11]
 8001612:	9201      	str	r2, [sp, #4]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	462b      	mov	r3, r5
 8001618:	4622      	mov	r2, r4
 800161a:	f7ff fefd 	bl	8001418 <LCD_ShowChar>
        x+=size/2;
 800161e:	7afb      	ldrb	r3, [r7, #11]
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	89fb      	ldrh	r3, [r7, #14]
 8001628:	4413      	add	r3, r2
 800162a:	81fb      	strh	r3, [r7, #14]
        p++;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3301      	adds	r3, #1
 8001630:	607b      	str	r3, [r7, #4]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b7e      	cmp	r3, #126	@ 0x7e
 8001638:	d805      	bhi.n	8001646 <LCD_ShowString+0x76>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b1f      	cmp	r3, #31
 8001640:	d8d1      	bhi.n	80015e6 <LCD_ShowString+0x16>
 8001642:	e000      	b.n	8001646 <LCD_ShowString+0x76>
		return;
 8001644:	bf00      	nop
    }
}
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bdb0      	pop	{r4, r5, r7, pc}
 800164c:	200000c4 	.word	0x200000c4
 8001650:	200000d4 	.word	0x200000d4
 8001654:	20000000 	.word	0x20000000

08001658 <mypow>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
u32 mypow(u8 m,u8 n)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	460a      	mov	r2, r1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	4613      	mov	r3, r2
 8001666:	71bb      	strb	r3, [r7, #6]
	u32 result=1;
 8001668:	2301      	movs	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800166c:	e004      	b.n	8001678 <mypow+0x20>
 800166e:	79fa      	ldrb	r2, [r7, #7]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	79bb      	ldrb	r3, [r7, #6]
 800167a:	1e5a      	subs	r2, r3, #1
 800167c:	71ba      	strb	r2, [r7, #6]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f5      	bne.n	800166e <mypow+0x16>
	return result;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LCD_ShowNum>:
								len:the length of the display number
								size:the size of display number
 * @retvalue   :None
******************************************************************************/
void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,u8 size)
{
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b08a      	sub	sp, #40	@ 0x28
 8001694:	af04      	add	r7, sp, #16
 8001696:	60ba      	str	r2, [r7, #8]
 8001698:	461a      	mov	r2, r3
 800169a:	4603      	mov	r3, r0
 800169c:	81fb      	strh	r3, [r7, #14]
 800169e:	460b      	mov	r3, r1
 80016a0:	81bb      	strh	r3, [r7, #12]
 80016a2:	4613      	mov	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
	u8 t,temp;
	u8 enshow=0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75bb      	strb	r3, [r7, #22]
	for(t=0;t<len;t++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]
 80016ae:	e064      	b.n	800177a <LCD_ShowNum+0xea>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	4619      	mov	r1, r3
 80016be:	200a      	movs	r0, #10
 80016c0:	f7ff ffca 	bl	8001658 <mypow>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80016cc:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <LCD_ShowNum+0xfc>)
 80016ce:	fba3 2301 	umull	r2, r3, r3, r1
 80016d2:	08da      	lsrs	r2, r3, #3
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	1aca      	subs	r2, r1, r3
 80016de:	4613      	mov	r3, r2
 80016e0:	757b      	strb	r3, [r7, #21]
		if(enshow==0&&t<(len-1))
 80016e2:	7dbb      	ldrb	r3, [r7, #22]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d126      	bne.n	8001736 <LCD_ShowNum+0xa6>
 80016e8:	7dfa      	ldrb	r2, [r7, #23]
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	429a      	cmp	r2, r3
 80016f0:	da21      	bge.n	8001736 <LCD_ShowNum+0xa6>
		{
			if(temp==0)
 80016f2:	7d7b      	ldrb	r3, [r7, #21]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d11c      	bne.n	8001732 <LCD_ShowNum+0xa2>
			{
				LCD_ShowChar(x+(size/2)*t,y,POINT_COLOR,BACK_COLOR,' ',size,0);
 80016f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016fc:	085b      	lsrs	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	b29b      	uxth	r3, r3
 8001706:	fb12 f303 	smulbb	r3, r2, r3
 800170a:	b29a      	uxth	r2, r3
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	4413      	add	r3, r2
 8001710:	b298      	uxth	r0, r3
 8001712:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <LCD_ShowNum+0x100>)
 8001714:	881a      	ldrh	r2, [r3, #0]
 8001716:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <LCD_ShowNum+0x104>)
 8001718:	881c      	ldrh	r4, [r3, #0]
 800171a:	89b9      	ldrh	r1, [r7, #12]
 800171c:	2300      	movs	r3, #0
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	2320      	movs	r3, #32
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	4623      	mov	r3, r4
 800172c:	f7ff fe74 	bl	8001418 <LCD_ShowChar>
				continue;
 8001730:	e020      	b.n	8001774 <LCD_ShowNum+0xe4>
			}else enshow=1;
 8001732:	2301      	movs	r3, #1
 8001734:	75bb      	strb	r3, [r7, #22]

		}
	 	LCD_ShowChar(x+(size/2)*t,y,POINT_COLOR,BACK_COLOR,temp+'0',size,0);
 8001736:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	b29b      	uxth	r3, r3
 8001744:	fb12 f303 	smulbb	r3, r2, r3
 8001748:	b29a      	uxth	r2, r3
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	4413      	add	r3, r2
 800174e:	b298      	uxth	r0, r3
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <LCD_ShowNum+0x100>)
 8001752:	881c      	ldrh	r4, [r3, #0]
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <LCD_ShowNum+0x104>)
 8001756:	881d      	ldrh	r5, [r3, #0]
 8001758:	7d7b      	ldrb	r3, [r7, #21]
 800175a:	3330      	adds	r3, #48	@ 0x30
 800175c:	b2db      	uxtb	r3, r3
 800175e:	89b9      	ldrh	r1, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	9202      	str	r2, [sp, #8]
 8001764:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001768:	9201      	str	r2, [sp, #4]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	462b      	mov	r3, r5
 800176e:	4622      	mov	r2, r4
 8001770:	f7ff fe52 	bl	8001418 <LCD_ShowChar>
	for(t=0;t<len;t++)
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	3301      	adds	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
 800177a:	7dfa      	ldrb	r2, [r7, #23]
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	429a      	cmp	r2, r3
 8001780:	d396      	bcc.n	80016b0 <LCD_ShowNum+0x20>
	}
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bdb0      	pop	{r4, r5, r7, pc}
 800178c:	cccccccd 	.word	0xcccccccd
 8001790:	200000d4 	.word	0x200000d4
 8001794:	20000000 	.word	0x20000000

08001798 <Show_Str>:
								size:the size of English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af04      	add	r7, sp, #16
 800179e:	4604      	mov	r4, r0
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4623      	mov	r3, r4
 80017a8:	80fb      	strh	r3, [r7, #6]
 80017aa:	4603      	mov	r3, r0
 80017ac:	80bb      	strh	r3, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]
 80017b2:	4613      	mov	r3, r2
 80017b4:	803b      	strh	r3, [r7, #0]
	u16 x0=x;
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ���������
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 80017be:	e061      	b.n	8001884 <Show_Str+0xec>
    {
        if(!bHz)
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d15e      	bne.n	8001884 <Show_Str+0xec>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size))
 80017c6:	88fa      	ldrh	r2, [r7, #6]
 80017c8:	4b33      	ldr	r3, [pc, #204]	@ (8001898 <Show_Str+0x100>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	1acb      	subs	r3, r1, r3
 80017d8:	429a      	cmp	r2, r3
 80017da:	dc58      	bgt.n	800188e <Show_Str+0xf6>
 80017dc:	88ba      	ldrh	r2, [r7, #4]
 80017de:	4b2e      	ldr	r3, [pc, #184]	@ (8001898 <Show_Str+0x100>)
 80017e0:	885b      	ldrh	r3, [r3, #2]
 80017e2:	4619      	mov	r1, r3
 80017e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017e8:	1acb      	subs	r3, r1, r3
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dc4f      	bgt.n	800188e <Show_Str+0xf6>
			return;
	        if(*str>0x80)bHz=1;//����
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b80      	cmp	r3, #128	@ 0x80
 80017f4:	d902      	bls.n	80017fc <Show_Str+0x64>
 80017f6:	2301      	movs	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	e043      	b.n	8001884 <Show_Str+0xec>
	        else              //�ַ�
	        {
		        if(*str==0x0D)//���з���
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b0d      	cmp	r3, #13
 8001802:	d10b      	bne.n	800181c <Show_Str+0x84>
		        {
		            y+=size;
 8001804:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001808:	b29a      	uxth	r2, r3
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	80bb      	strh	r3, [r7, #4]
					x=x0;
 8001810:	89bb      	ldrh	r3, [r7, #12]
 8001812:	80fb      	strh	r3, [r7, #6]
		            str++;
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	3301      	adds	r3, #1
 8001818:	623b      	str	r3, [r7, #32]
 800181a:	e030      	b.n	800187e <Show_Str+0xe6>
		        }
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 800181c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001820:	2b10      	cmp	r3, #16
 8001822:	d913      	bls.n	800184c <Show_Str+0xb4>
					{
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	883d      	ldrh	r5, [r7, #0]
 800182a:	887c      	ldrh	r4, [r7, #2]
 800182c:	88b9      	ldrh	r1, [r7, #4]
 800182e:	88f8      	ldrh	r0, [r7, #6]
 8001830:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001834:	9202      	str	r2, [sp, #8]
 8001836:	2210      	movs	r2, #16
 8001838:	9201      	str	r2, [sp, #4]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	462b      	mov	r3, r5
 800183e:	4622      	mov	r2, r4
 8001840:	f7ff fdea 	bl	8001418 <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ��
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	3308      	adds	r3, #8
 8001848:	80fb      	strh	r3, [r7, #6]
 800184a:	e018      	b.n	800187e <Show_Str+0xe6>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	883d      	ldrh	r5, [r7, #0]
 8001852:	887c      	ldrh	r4, [r7, #2]
 8001854:	88b9      	ldrh	r1, [r7, #4]
 8001856:	88f8      	ldrh	r0, [r7, #6]
 8001858:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800185c:	9202      	str	r2, [sp, #8]
 800185e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001862:	9201      	str	r2, [sp, #4]
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	462b      	mov	r3, r5
 8001868:	4622      	mov	r2, r4
 800186a:	f7ff fdd5 	bl	8001418 <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ��
 800186e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4413      	add	r3, r2
 800187c:	80fb      	strh	r3, [r7, #6]
					}
				}
				str++;
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	3301      	adds	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
    while(*str!=0)//����δ����
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d199      	bne.n	80017c0 <Show_Str+0x28>
 800188c:	e000      	b.n	8001890 <Show_Str+0xf8>
			return;
 800188e:	bf00      	nop

	        }
        }
    }
}
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bdb0      	pop	{r4, r5, r7, pc}
 8001896:	bf00      	nop
 8001898:	200000c4 	.word	0x200000c4

0800189c <Gui_StrCenter>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Gui_StrCenter(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af04      	add	r7, sp, #16
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	4603      	mov	r3, r0
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	807b      	strh	r3, [r7, #2]
 80018b6:	4613      	mov	r3, r2
 80018b8:	803b      	strh	r3, [r7, #0]
	u16 len=strlen((const char *)str);
 80018ba:	6a38      	ldr	r0, [r7, #32]
 80018bc:	f7fe fc8c 	bl	80001d8 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	81fb      	strh	r3, [r7, #14]
	u16 x1=(lcddev.width-len*8)/2;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <Gui_StrCenter+0x64>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	89fb      	ldrh	r3, [r7, #14]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	0fda      	lsrs	r2, r3, #31
 80018d2:	4413      	add	r3, r2
 80018d4:	105b      	asrs	r3, r3, #1
 80018d6:	81bb      	strh	r3, [r7, #12]
	Show_Str(x1,y,fc,bc,str,size,mode);
 80018d8:	883c      	ldrh	r4, [r7, #0]
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	88b9      	ldrh	r1, [r7, #4]
 80018de:	89b8      	ldrh	r0, [r7, #12]
 80018e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	4623      	mov	r3, r4
 80018f2:	f7ff ff51 	bl	8001798 <Show_Str>
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}
 80018fe:	bf00      	nop
 8001900:	200000c4 	.word	0x200000c4

08001904 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/  	 			    					   
void TP_Write_Byte(u8 num)    
{  
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
	u8 count=0;   
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)  
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	e01d      	b.n	8001954 <TP_Write_Byte+0x50>
	{ 	  
		//if(num&0x80)TDIN=1;
		if(num&0x80) TOUCH_TDIN_SET;
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	da04      	bge.n	800192a <TP_Write_Byte+0x26>
 8001920:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001924:	2280      	movs	r2, #128	@ 0x80
 8001926:	619a      	str	r2, [r3, #24]
 8001928:	e003      	b.n	8001932 <TP_Write_Byte+0x2e>
		//else TDIN=0;
		else TOUCH_TDIN_CLR;
 800192a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800192e:	2280      	movs	r2, #128	@ 0x80
 8001930:	629a      	str	r2, [r3, #40]	@ 0x28
		num<<=1;    
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	71fb      	strb	r3, [r7, #7]
		//TCLK=0;
		TOUCH_TCLK_CLR;
 8001938:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800193c:	2202      	movs	r2, #2
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28
		delay_us(1);
 8001940:	2001      	movs	r0, #1
 8001942:	f000 ffb9 	bl	80028b8 <delay_us>
		//TCLK=1;		//Valid on rising edge
		TOUCH_TCLK_SET;
 8001946:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800194a:	2202      	movs	r2, #2
 800194c:	629a      	str	r2, [r3, #40]	@ 0x28
	for(count=0;count<8;count++)  
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	3301      	adds	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2b07      	cmp	r3, #7
 8001958:	d9de      	bls.n	8001918 <TP_Write_Byte+0x14>
	}		 			    
}
 800195a:	bf00      	nop
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <TP_Read_AD>:
 * @function   :Reading adc values from touch screen IC with SPI bus
 * @parameters :CMD:Read command,0xD0 for x,0x90 for y
 * @retvalue   :Read data
******************************************************************************/    
u16 TP_Read_AD(u8 CMD)	  
{ 	 
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
	u8 count=0; 	  
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
	u16 Num=0; 
 8001972:	2300      	movs	r3, #0
 8001974:	81bb      	strh	r3, [r7, #12]
	//TCLK=0;		//Pull down the clock first
	TOUCH_TCLK_CLR;
 8001976:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800197a:	2202      	movs	r2, #2
 800197c:	629a      	str	r2, [r3, #40]	@ 0x28
	//TDIN=0; 	//Pull the data line low
	TOUCH_TDIN_CLR;;
 800197e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001982:	2280      	movs	r2, #128	@ 0x80
 8001984:	629a      	str	r2, [r3, #40]	@ 0x28
	//TCS=0; 		//Select touch screen ic
	TOUCH_TCS_CLR;
 8001986:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800198a:	2208      	movs	r2, #8
 800198c:	629a      	str	r2, [r3, #40]	@ 0x28
	TP_Write_Byte(CMD);	//Send command words
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ffb7 	bl	8001904 <TP_Write_Byte>
	delay_us(6);	//The conversion time of ADS7846 is up to 6us
 8001996:	2006      	movs	r0, #6
 8001998:	f000 ff8e 	bl	80028b8 <delay_us>
	//TCLK=0;
	TOUCH_TCLK_CLR;
 800199c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019a0:	2202      	movs	r2, #2
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
	delay_us(1);    	   
 80019a4:	2001      	movs	r0, #1
 80019a6:	f000 ff87 	bl	80028b8 <delay_us>
	//TCLK=1;			//Give 1 clock and clear busy
	TOUCH_TCLK_SET;
 80019aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019ae:	2202      	movs	r2, #2
 80019b0:	629a      	str	r2, [r3, #40]	@ 0x28
	delay_us(1);    
 80019b2:	2001      	movs	r0, #1
 80019b4:	f000 ff80 	bl	80028b8 <delay_us>
	//TCLK=0;
	TOUCH_TCLK_CLR;
 80019b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019bc:	2202      	movs	r2, #2
 80019be:	629a      	str	r2, [r3, #40]	@ 0x28
	for(count=0;count<16;count++)	//Read out 16-bit data, only the upper 12 bits are valid
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
 80019c4:	e01b      	b.n	80019fe <TP_Read_AD+0x9a>
	{ 				  
		Num<<=1; 	 
 80019c6:	89bb      	ldrh	r3, [r7, #12]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	81bb      	strh	r3, [r7, #12]
		//TCLK=0;			//Valid on falling edge
		TOUCH_TCLK_CLR;
 80019cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019d0:	2202      	movs	r2, #2
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28
		delay_us(1);    
 80019d4:	2001      	movs	r0, #1
 80019d6:	f000 ff6f 	bl	80028b8 <delay_us>
 		//TCLK=1;
		TOUCH_TCLK_SET;
 80019da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019de:	2202      	movs	r2, #2
 80019e0:	629a      	str	r2, [r3, #40]	@ 0x28
 		if(DOUT)Num++; 		 
 80019e2:	2104      	movs	r1, #4
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e8:	f001 fd7c 	bl	80034e4 <HAL_GPIO_ReadPin>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <TP_Read_AD+0x94>
 80019f2:	89bb      	ldrh	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)	//Read out 16-bit data, only the upper 12 bits are valid
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	3301      	adds	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d9e0      	bls.n	80019c6 <TP_Read_AD+0x62>
	}  	
	Num>>=4;   		//Only the upper 12 bits are valid.
 8001a04:	89bb      	ldrh	r3, [r7, #12]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	81bb      	strh	r3, [r7, #12]
	//TCS=1;			//release film selection
	TOUCH_TCS_SET;
 8001a0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a0e:	2208      	movs	r2, #8
 8001a10:	619a      	str	r2, [r3, #24]
	return(Num);  
 8001a12:	89bb      	ldrh	r3, [r7, #12]
//#endif
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/  
u16 TP_Read_XOY(u8 xy)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	u16 i, j;
	u16 buf[READ_TIMES];
	u16 sum=0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	837b      	strh	r3, [r7, #26]
	u16 temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);		 		    
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	83fb      	strh	r3, [r7, #30]
 8001a2e:	e00e      	b.n	8001a4e <TP_Read_XOY+0x32>
 8001a30:	8bfc      	ldrh	r4, [r7, #30]
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff95 	bl	8001964 <TP_Read_AD>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	0063      	lsls	r3, r4, #1
 8001a40:	3320      	adds	r3, #32
 8001a42:	443b      	add	r3, r7
 8001a44:	f823 2c14 	strh.w	r2, [r3, #-20]
 8001a48:	8bfb      	ldrh	r3, [r7, #30]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	83fb      	strh	r3, [r7, #30]
 8001a4e:	8bfb      	ldrh	r3, [r7, #30]
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d9ed      	bls.n	8001a30 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)	//sort
 8001a54:	2300      	movs	r3, #0
 8001a56:	83fb      	strh	r3, [r7, #30]
 8001a58:	e035      	b.n	8001ac6 <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8001a5a:	8bfb      	ldrh	r3, [r7, #30]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	83bb      	strh	r3, [r7, #28]
 8001a60:	e02b      	b.n	8001aba <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])	//Ascending order
 8001a62:	8bfb      	ldrh	r3, [r7, #30]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	3320      	adds	r3, #32
 8001a68:	443b      	add	r3, r7
 8001a6a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8001a6e:	8bbb      	ldrh	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	3320      	adds	r3, #32
 8001a74:	443b      	add	r3, r7
 8001a76:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d91a      	bls.n	8001ab4 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 8001a7e:	8bfb      	ldrh	r3, [r7, #30]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	3320      	adds	r3, #32
 8001a84:	443b      	add	r3, r7
 8001a86:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001a8a:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8001a8c:	8bbb      	ldrh	r3, [r7, #28]
 8001a8e:	8bfa      	ldrh	r2, [r7, #30]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	3320      	adds	r3, #32
 8001a94:	443b      	add	r3, r7
 8001a96:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8001a9a:	0053      	lsls	r3, r2, #1
 8001a9c:	3320      	adds	r3, #32
 8001a9e:	443b      	add	r3, r7
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8001aa6:	8bbb      	ldrh	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	3320      	adds	r3, #32
 8001aac:	443b      	add	r3, r7
 8001aae:	8b3a      	ldrh	r2, [r7, #24]
 8001ab0:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8001ab4:	8bbb      	ldrh	r3, [r7, #28]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	83bb      	strh	r3, [r7, #28]
 8001aba:	8bbb      	ldrh	r3, [r7, #28]
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d9d0      	bls.n	8001a62 <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)	//sort
 8001ac0:	8bfb      	ldrh	r3, [r7, #30]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	83fb      	strh	r3, [r7, #30]
 8001ac6:	8bfb      	ldrh	r3, [r7, #30]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d9c6      	bls.n	8001a5a <TP_Read_XOY+0x3e>
			}
		}
	}	  
	sum=0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	83fb      	strh	r3, [r7, #30]
 8001ad4:	e00b      	b.n	8001aee <TP_Read_XOY+0xd2>
 8001ad6:	8bfb      	ldrh	r3, [r7, #30]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	3320      	adds	r3, #32
 8001adc:	443b      	add	r3, r7
 8001ade:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8001ae2:	8b7b      	ldrh	r3, [r7, #26]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	837b      	strh	r3, [r7, #26]
 8001ae8:	8bfb      	ldrh	r3, [r7, #30]
 8001aea:	3301      	adds	r3, #1
 8001aec:	83fb      	strh	r3, [r7, #30]
 8001aee:	8bfb      	ldrh	r3, [r7, #30]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d9f0      	bls.n	8001ad6 <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8001af4:	8b7b      	ldrh	r3, [r7, #26]
 8001af6:	4a05      	ldr	r2, [pc, #20]	@ (8001b0c <TP_Read_XOY+0xf0>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	833b      	strh	r3, [r7, #24]
	return temp;   
 8001b00:	8b3b      	ldrh	r3, [r7, #24]
} 
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	@ 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	aaaaaaab 	.word	0xaaaaaaab

08001b10 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/ 
u8 TP_Read_XY(u16 *x,u16 *y)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
	u16 xtemp,ytemp;			 	 		  
	xtemp=TP_Read_XOY(CMD_RDX);
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <TP_Read_XY+0x3c>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff7c 	bl	8001a1c <TP_Read_XOY>
 8001b24:	4603      	mov	r3, r0
 8001b26:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);	  												   
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <TP_Read_XY+0x40>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff75 	bl	8001a1c <TP_Read_XOY>
 8001b32:	4603      	mov	r3, r0
 8001b34:	81bb      	strh	r3, [r7, #12]
	//if(xtemp<100||ytemp<100)return 0; //Reading failed
	*x=xtemp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	89fa      	ldrh	r2, [r7, #14]
 8001b3a:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	89ba      	ldrh	r2, [r7, #12]
 8001b40:	801a      	strh	r2, [r3, #0]
	return 1;	//Reading successful
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000002c 	.word	0x2000002c
 8001b50:	2000002d 	.word	0x2000002d

08001b54 <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/ 
u8 TP_Read_XY2(u16 *x,u16 *y) 
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
	u16 x1,y1;
 	u16 x2,y2;
 	u8 flag;    
    flag=TP_Read_XY(&x1,&y1);   
 8001b5e:	f107 0212 	add.w	r2, r7, #18
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ffd1 	bl	8001b10 <TP_Read_XY>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	75fb      	strb	r3, [r7, #23]
    if(flag==0)return(0);
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <TP_Read_XY2+0x28>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e049      	b.n	8001c10 <TP_Read_XY2+0xbc>
    flag=TP_Read_XY(&x2,&y2);	   
 8001b7c:	f107 020e 	add.w	r2, r7, #14
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ffc2 	bl	8001b10 <TP_Read_XY>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	75fb      	strb	r3, [r7, #23]
    if(flag==0)return(0);   
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <TP_Read_XY2+0x46>
 8001b96:	2300      	movs	r3, #0
 8001b98:	e03a      	b.n	8001c10 <TP_Read_XY2+0xbc>
    if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))	//The two samples before and after are within +50
 8001b9a:	8a3a      	ldrh	r2, [r7, #16]
 8001b9c:	8abb      	ldrh	r3, [r7, #20]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d804      	bhi.n	8001bac <TP_Read_XY2+0x58>
 8001ba2:	8a3b      	ldrh	r3, [r7, #16]
 8001ba4:	3331      	adds	r3, #49	@ 0x31
 8001ba6:	8aba      	ldrh	r2, [r7, #20]
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	da08      	bge.n	8001bbe <TP_Read_XY2+0x6a>
 8001bac:	8aba      	ldrh	r2, [r7, #20]
 8001bae:	8a3b      	ldrh	r3, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d82c      	bhi.n	8001c0e <TP_Read_XY2+0xba>
 8001bb4:	8abb      	ldrh	r3, [r7, #20]
 8001bb6:	3331      	adds	r3, #49	@ 0x31
 8001bb8:	8a3a      	ldrh	r2, [r7, #16]
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	db27      	blt.n	8001c0e <TP_Read_XY2+0xba>
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8001bbe:	89fa      	ldrh	r2, [r7, #14]
 8001bc0:	8a7b      	ldrh	r3, [r7, #18]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d804      	bhi.n	8001bd0 <TP_Read_XY2+0x7c>
 8001bc6:	89fb      	ldrh	r3, [r7, #14]
 8001bc8:	3331      	adds	r3, #49	@ 0x31
 8001bca:	8a7a      	ldrh	r2, [r7, #18]
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	da08      	bge.n	8001be2 <TP_Read_XY2+0x8e>
 8001bd0:	8a7a      	ldrh	r2, [r7, #18]
 8001bd2:	89fb      	ldrh	r3, [r7, #14]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d81a      	bhi.n	8001c0e <TP_Read_XY2+0xba>
 8001bd8:	8a7b      	ldrh	r3, [r7, #18]
 8001bda:	3331      	adds	r3, #49	@ 0x31
 8001bdc:	89fa      	ldrh	r2, [r7, #14]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	db15      	blt.n	8001c0e <TP_Read_XY2+0xba>
    {
        *x=(x1+x2)/2;
 8001be2:	8abb      	ldrh	r3, [r7, #20]
 8001be4:	461a      	mov	r2, r3
 8001be6:	8a3b      	ldrh	r3, [r7, #16]
 8001be8:	4413      	add	r3, r2
 8001bea:	0fda      	lsrs	r2, r3, #31
 8001bec:	4413      	add	r3, r2
 8001bee:	105b      	asrs	r3, r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	801a      	strh	r2, [r3, #0]
        *y=(y1+y2)/2;
 8001bf6:	8a7b      	ldrh	r3, [r7, #18]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	0fda      	lsrs	r2, r3, #31
 8001c00:	4413      	add	r3, r2
 8001c02:	105b      	asrs	r3, r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	801a      	strh	r2, [r3, #0]
        return 1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <TP_Read_XY2+0xbc>
    }else return 0;	  
 8001c0e:	2300      	movs	r3, #0
} 
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <TP_Drow_Touch_Point>:
								y:Read y coordinate of the touch screen
								color:the color value of the touch point
 * @retvalue   :None
******************************************************************************/  
void TP_Drow_Touch_Point(u16 x,u16 y,u16 color)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
 8001c22:	460b      	mov	r3, r1
 8001c24:	80bb      	strh	r3, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	807b      	strh	r3, [r7, #2]
	POINT_COLOR=color;
 8001c2a:	4a26      	ldr	r2, [pc, #152]	@ (8001cc4 <TP_Drow_Touch_Point+0xac>)
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	8013      	strh	r3, [r2, #0]
	LCD_DrawLine(x-12,y,x+13,y);	//horizontal line
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	3b0c      	subs	r3, #12
 8001c34:	b298      	uxth	r0, r3
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	330d      	adds	r3, #13
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	88bb      	ldrh	r3, [r7, #4]
 8001c3e:	88b9      	ldrh	r1, [r7, #4]
 8001c40:	f7ff fa6e 	bl	8001120 <LCD_DrawLine>
	LCD_DrawLine(x,y-12,x,y+13);	//vertical line
 8001c44:	88bb      	ldrh	r3, [r7, #4]
 8001c46:	3b0c      	subs	r3, #12
 8001c48:	b299      	uxth	r1, r3
 8001c4a:	88bb      	ldrh	r3, [r7, #4]
 8001c4c:	330d      	adds	r3, #13
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	88fa      	ldrh	r2, [r7, #6]
 8001c52:	88f8      	ldrh	r0, [r7, #6]
 8001c54:	f7ff fa64 	bl	8001120 <LCD_DrawLine>
	LCD_DrawPoint(x+1,y+1);
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	88bb      	ldrh	r3, [r7, #4]
 8001c60:	3301      	adds	r3, #1
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f7fe ffbe 	bl	8000be8 <LCD_DrawPoint>
	LCD_DrawPoint(x-1,y+1);
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	3301      	adds	r3, #1
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f7fe ffb4 	bl	8000be8 <LCD_DrawPoint>
	LCD_DrawPoint(x+1,y-1);
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f7fe ffaa 	bl	8000be8 <LCD_DrawPoint>
	LCD_DrawPoint(x-1,y-1);
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	88bb      	ldrh	r3, [r7, #4]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f7fe ffa0 	bl	8000be8 <LCD_DrawPoint>
	gui_circle(x,y,POINT_COLOR,6,0);	//draw center circle
 8001ca8:	88f8      	ldrh	r0, [r7, #6]
 8001caa:	88b9      	ldrh	r1, [r7, #4]
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <TP_Drow_Touch_Point+0xac>)
 8001cae:	881a      	ldrh	r2, [r3, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2306      	movs	r3, #6
 8001cb6:	f7ff fb42 	bl	800133e <gui_circle>
}	
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200000d4 	.word	0x200000d4

08001cc8 <TP_Draw_Big_Point>:
								y:Read y coordinate of the point
								color:the color value of the point
 * @retvalue   :None
******************************************************************************/   
void TP_Draw_Big_Point(u16 x,u16 y,u16 color)
{	    
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	80bb      	strh	r3, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	807b      	strh	r3, [r7, #2]
	POINT_COLOR=color;
 8001cda:	4a13      	ldr	r2, [pc, #76]	@ (8001d28 <TP_Draw_Big_Point+0x60>)
 8001cdc:	887b      	ldrh	r3, [r7, #2]
 8001cde:	8013      	strh	r3, [r2, #0]
	LCD_DrawPoint(x,y);	//center point
 8001ce0:	88ba      	ldrh	r2, [r7, #4]
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe ff7e 	bl	8000be8 <LCD_DrawPoint>
	LCD_DrawPoint(x+1,y);
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	88ba      	ldrh	r2, [r7, #4]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe ff76 	bl	8000be8 <LCD_DrawPoint>
	LCD_DrawPoint(x,y+1);
 8001cfc:	88bb      	ldrh	r3, [r7, #4]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe ff6e 	bl	8000be8 <LCD_DrawPoint>
	LCD_DrawPoint(x+1,y+1);	 	  	
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	88bb      	ldrh	r3, [r7, #4]
 8001d14:	3301      	adds	r3, #1
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f7fe ff64 	bl	8000be8 <LCD_DrawPoint>
}	
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200000d4 	.word	0x200000d4

08001d2c <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/  					  
u8 TP_Scan(u8 tp)
{			   
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
	if(PEN==0)	//A button is pressed
 8001d36:	2110      	movs	r1, #16
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3c:	f001 fbd2 	bl	80034e4 <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d155      	bne.n	8001df2 <TP_Scan+0xc6>
	{
		if(tp)TP_Read_XY2(&tp_dev.x,&tp_dev.y);		//Read physical coordinates
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <TP_Scan+0x2a>
 8001d4c:	493b      	ldr	r1, [pc, #236]	@ (8001e3c <TP_Scan+0x110>)
 8001d4e:	483c      	ldr	r0, [pc, #240]	@ (8001e40 <TP_Scan+0x114>)
 8001d50:	f7ff ff00 	bl	8001b54 <TP_Read_XY2>
 8001d54:	e03c      	b.n	8001dd0 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))	//Read screen coordinates
 8001d56:	4939      	ldr	r1, [pc, #228]	@ (8001e3c <TP_Scan+0x110>)
 8001d58:	4839      	ldr	r0, [pc, #228]	@ (8001e40 <TP_Scan+0x114>)
 8001d5a:	f7ff fefb 	bl	8001b54 <TP_Read_XY2>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d035      	beq.n	8001dd0 <TP_Scan+0xa4>
		{
	 		tp_dev.x=tp_dev.xfac*tp_dev.x+tp_dev.xoff;	//Convert the result to screen coordinates
 8001d64:	4b37      	ldr	r3, [pc, #220]	@ (8001e44 <TP_Scan+0x118>)
 8001d66:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d6a:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <TP_Scan+0x118>)
 8001d6c:	8a1b      	ldrh	r3, [r3, #16]
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7a:	4b32      	ldr	r3, [pc, #200]	@ (8001e44 <TP_Scan+0x118>)
 8001d7c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d90:	ee17 3a90 	vmov	r3, s15
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <TP_Scan+0x118>)
 8001d98:	821a      	strh	r2, [r3, #16]
			tp_dev.y=tp_dev.yfac*tp_dev.y+tp_dev.yoff;  
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e44 <TP_Scan+0x118>)
 8001d9c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001da0:	4b28      	ldr	r3, [pc, #160]	@ (8001e44 <TP_Scan+0x118>)
 8001da2:	8a5b      	ldrh	r3, [r3, #18]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db0:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <TP_Scan+0x118>)
 8001db2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc6:	ee17 3a90 	vmov	r3, s15
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <TP_Scan+0x118>)
 8001dce:	825a      	strh	r2, [r3, #18]
	 	} 
		if((tp_dev.sta&TP_PRES_DOWN)==0)	//has not been pressed before
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <TP_Scan+0x118>)
 8001dd2:	7d1b      	ldrb	r3, [r3, #20]
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db26      	blt.n	8001e28 <TP_Scan+0xfc>
		{		 
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;	//button pressed
 8001dda:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <TP_Scan+0x118>)
 8001ddc:	22c0      	movs	r2, #192	@ 0xc0
 8001dde:	751a      	strb	r2, [r3, #20]
			tp_dev.x0=tp_dev.x;	//Record the coordinates when first pressed
 8001de0:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <TP_Scan+0x118>)
 8001de2:	8a1a      	ldrh	r2, [r3, #16]
 8001de4:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <TP_Scan+0x118>)
 8001de6:	819a      	strh	r2, [r3, #12]
			tp_dev.y0=tp_dev.y;  	   			 
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <TP_Scan+0x118>)
 8001dea:	8a5a      	ldrh	r2, [r3, #18]
 8001dec:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <TP_Scan+0x118>)
 8001dee:	81da      	strh	r2, [r3, #14]
 8001df0:	e01a      	b.n	8001e28 <TP_Scan+0xfc>
		}			   
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)		//It was pressed before
 8001df2:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <TP_Scan+0x118>)
 8001df4:	7d1b      	ldrb	r3, [r3, #20]
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da07      	bge.n	8001e0c <TP_Scan+0xe0>
		{
			tp_dev.sta&=~(1<<7);	//Mark button released
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <TP_Scan+0x118>)
 8001dfe:	7d1b      	ldrb	r3, [r3, #20]
 8001e00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <TP_Scan+0x118>)
 8001e08:	751a      	strb	r2, [r3, #20]
 8001e0a:	e00d      	b.n	8001e28 <TP_Scan+0xfc>
		}else	//Never been pressed before
		{
			tp_dev.x0=0;
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <TP_Scan+0x118>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	819a      	strh	r2, [r3, #12]
			tp_dev.y0=0;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <TP_Scan+0x118>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	81da      	strh	r2, [r3, #14]
			tp_dev.x=0xffff;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <TP_Scan+0x118>)
 8001e1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e1e:	821a      	strh	r2, [r3, #16]
			tp_dev.y=0xffff;
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <TP_Scan+0x118>)
 8001e22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e26:	825a      	strh	r2, [r3, #18]
		}	    
	}
	return tp_dev.sta&TP_PRES_DOWN; ////Return to current touch screen state
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <TP_Scan+0x118>)
 8001e2a:	7d1b      	ldrb	r3, [r3, #20]
 8001e2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001e30:	b2db      	uxtb	r3, r3
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000016 	.word	0x20000016
 8001e40:	20000014 	.word	0x20000014
 8001e44:	20000004 	.word	0x20000004

08001e48 <TP_Save_Adjdata>:
 * @function   :Save calibration parameters		
 * @parameters :None
 * @retvalue   :None
******************************************************************************/ 										    
void TP_Save_Adjdata(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
	//Save touch screen type
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE+12,tp_dev.touchtype);	
	temp=0X0A;	//Marker calibrated
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE+13,temp); 
*/
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <TP_Get_Adjdata>:
 * @parameters :None
 * @retvalue   :1-get the calibration values successfully
								0-get the calibration values unsuccessfully and Need to recalibrate
******************************************************************************/ 	
u8 TP_Get_Adjdata(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
		}		 
		return 1;	 
	}
	return 0;
*/
}	
 8001e5a:	bf00      	nop
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <TP_Adj_Info_Show>:
								y3:the y coordinates of fourth calibration point
								fac:calibration factor 
 * @retvalue   :None
******************************************************************************/ 	 					  
void TP_Adj_Info_Show(u16 x0,u16 y0,u16 x1,u16 y1,u16 x2,u16 y2,u16 x3,u16 y3,u16 fac)
{	  
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	4604      	mov	r4, r0
 8001e70:	4608      	mov	r0, r1
 8001e72:	4611      	mov	r1, r2
 8001e74:	461a      	mov	r2, r3
 8001e76:	4623      	mov	r3, r4
 8001e78:	80fb      	strh	r3, [r7, #6]
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80bb      	strh	r3, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	807b      	strh	r3, [r7, #2]
 8001e82:	4613      	mov	r3, r2
 8001e84:	803b      	strh	r3, [r7, #0]
	POINT_COLOR=RED;
 8001e86:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb8 <TP_Adj_Info_Show+0x150>)
 8001e88:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e8c:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(40,140,16,"x1:",1);
 8001e8e:	2301      	movs	r3, #1
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	4b4a      	ldr	r3, [pc, #296]	@ (8001fbc <TP_Adj_Info_Show+0x154>)
 8001e94:	2210      	movs	r2, #16
 8001e96:	218c      	movs	r1, #140	@ 0x8c
 8001e98:	2028      	movs	r0, #40	@ 0x28
 8001e9a:	f7ff fb99 	bl	80015d0 <LCD_ShowString>
 	LCD_ShowString(40+80,140,16,"y1:",1);
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	4b47      	ldr	r3, [pc, #284]	@ (8001fc0 <TP_Adj_Info_Show+0x158>)
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	218c      	movs	r1, #140	@ 0x8c
 8001ea8:	2078      	movs	r0, #120	@ 0x78
 8001eaa:	f7ff fb91 	bl	80015d0 <LCD_ShowString>
 	LCD_ShowString(40,160,16,"x2:",1);
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4b44      	ldr	r3, [pc, #272]	@ (8001fc4 <TP_Adj_Info_Show+0x15c>)
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	21a0      	movs	r1, #160	@ 0xa0
 8001eb8:	2028      	movs	r0, #40	@ 0x28
 8001eba:	f7ff fb89 	bl	80015d0 <LCD_ShowString>
 	LCD_ShowString(40+80,160, 16,"y2:",1);
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	4b41      	ldr	r3, [pc, #260]	@ (8001fc8 <TP_Adj_Info_Show+0x160>)
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	21a0      	movs	r1, #160	@ 0xa0
 8001ec8:	2078      	movs	r0, #120	@ 0x78
 8001eca:	f7ff fb81 	bl	80015d0 <LCD_ShowString>
	LCD_ShowString(40,180, 16,"x3:",1);
 8001ece:	2301      	movs	r3, #1
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fcc <TP_Adj_Info_Show+0x164>)
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	21b4      	movs	r1, #180	@ 0xb4
 8001ed8:	2028      	movs	r0, #40	@ 0x28
 8001eda:	f7ff fb79 	bl	80015d0 <LCD_ShowString>
 	LCD_ShowString(40+80,180, 16,"y3:",1);
 8001ede:	2301      	movs	r3, #1
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd0 <TP_Adj_Info_Show+0x168>)
 8001ee4:	2210      	movs	r2, #16
 8001ee6:	21b4      	movs	r1, #180	@ 0xb4
 8001ee8:	2078      	movs	r0, #120	@ 0x78
 8001eea:	f7ff fb71 	bl	80015d0 <LCD_ShowString>
	LCD_ShowString(40,200, 16,"x4:",1);
 8001eee:	2301      	movs	r3, #1
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	4b38      	ldr	r3, [pc, #224]	@ (8001fd4 <TP_Adj_Info_Show+0x16c>)
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	21c8      	movs	r1, #200	@ 0xc8
 8001ef8:	2028      	movs	r0, #40	@ 0x28
 8001efa:	f7ff fb69 	bl	80015d0 <LCD_ShowString>
 	LCD_ShowString(40+80,200, 16,"y4:",1);  
 8001efe:	2301      	movs	r3, #1
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	4b35      	ldr	r3, [pc, #212]	@ (8001fd8 <TP_Adj_Info_Show+0x170>)
 8001f04:	2210      	movs	r2, #16
 8001f06:	21c8      	movs	r1, #200	@ 0xc8
 8001f08:	2078      	movs	r0, #120	@ 0x78
 8001f0a:	f7ff fb61 	bl	80015d0 <LCD_ShowString>
 	LCD_ShowString(40,220, 16,"fac is:",1);     
 8001f0e:	2301      	movs	r3, #1
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	4b32      	ldr	r3, [pc, #200]	@ (8001fdc <TP_Adj_Info_Show+0x174>)
 8001f14:	2210      	movs	r2, #16
 8001f16:	21dc      	movs	r1, #220	@ 0xdc
 8001f18:	2028      	movs	r0, #40	@ 0x28
 8001f1a:	f7ff fb59 	bl	80015d0 <LCD_ShowString>
	LCD_ShowNum(40+24,140,x0,4,16);		//Display value
 8001f1e:	88fa      	ldrh	r2, [r7, #6]
 8001f20:	2310      	movs	r3, #16
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2304      	movs	r3, #4
 8001f26:	218c      	movs	r1, #140	@ 0x8c
 8001f28:	2040      	movs	r0, #64	@ 0x40
 8001f2a:	f7ff fbb1 	bl	8001690 <LCD_ShowNum>
	LCD_ShowNum(40+24+80,140,y0,4,16);	//Display value
 8001f2e:	88ba      	ldrh	r2, [r7, #4]
 8001f30:	2310      	movs	r3, #16
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2304      	movs	r3, #4
 8001f36:	218c      	movs	r1, #140	@ 0x8c
 8001f38:	2090      	movs	r0, #144	@ 0x90
 8001f3a:	f7ff fba9 	bl	8001690 <LCD_ShowNum>
	LCD_ShowNum(40+24,160,x1,4,16);		//Display value
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	2310      	movs	r3, #16
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2304      	movs	r3, #4
 8001f46:	21a0      	movs	r1, #160	@ 0xa0
 8001f48:	2040      	movs	r0, #64	@ 0x40
 8001f4a:	f7ff fba1 	bl	8001690 <LCD_ShowNum>
	LCD_ShowNum(40+24+80,160,y1,4,16);	//Display value
 8001f4e:	883a      	ldrh	r2, [r7, #0]
 8001f50:	2310      	movs	r3, #16
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2304      	movs	r3, #4
 8001f56:	21a0      	movs	r1, #160	@ 0xa0
 8001f58:	2090      	movs	r0, #144	@ 0x90
 8001f5a:	f7ff fb99 	bl	8001690 <LCD_ShowNum>
	LCD_ShowNum(40+24,180,x2,4,16);		//Display value
 8001f5e:	8b3a      	ldrh	r2, [r7, #24]
 8001f60:	2310      	movs	r3, #16
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2304      	movs	r3, #4
 8001f66:	21b4      	movs	r1, #180	@ 0xb4
 8001f68:	2040      	movs	r0, #64	@ 0x40
 8001f6a:	f7ff fb91 	bl	8001690 <LCD_ShowNum>
	LCD_ShowNum(40+24+80,180,y2,4,16);	//Display value
 8001f6e:	8bba      	ldrh	r2, [r7, #28]
 8001f70:	2310      	movs	r3, #16
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2304      	movs	r3, #4
 8001f76:	21b4      	movs	r1, #180	@ 0xb4
 8001f78:	2090      	movs	r0, #144	@ 0x90
 8001f7a:	f7ff fb89 	bl	8001690 <LCD_ShowNum>
	LCD_ShowNum(40+24,200,x3,4,16);		//Display value
 8001f7e:	8c3a      	ldrh	r2, [r7, #32]
 8001f80:	2310      	movs	r3, #16
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2304      	movs	r3, #4
 8001f86:	21c8      	movs	r1, #200	@ 0xc8
 8001f88:	2040      	movs	r0, #64	@ 0x40
 8001f8a:	f7ff fb81 	bl	8001690 <LCD_ShowNum>
	LCD_ShowNum(40+24+80,200,y3,4,16);	//Display value
 8001f8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f90:	2310      	movs	r3, #16
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2304      	movs	r3, #4
 8001f96:	21c8      	movs	r1, #200	@ 0xc8
 8001f98:	2090      	movs	r0, #144	@ 0x90
 8001f9a:	f7ff fb79 	bl	8001690 <LCD_ShowNum>
 	LCD_ShowNum(40+56,220,fac,3,16); 	//Display a numerical value, which must be within the range of 95~105.
 8001f9e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	21dc      	movs	r1, #220	@ 0xdc
 8001fa8:	2060      	movs	r0, #96	@ 0x60
 8001faa:	f7ff fb71 	bl	8001690 <LCD_ShowNum>
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200000d4 	.word	0x200000d4
 8001fbc:	08004c90 	.word	0x08004c90
 8001fc0:	08004c94 	.word	0x08004c94
 8001fc4:	08004c98 	.word	0x08004c98
 8001fc8:	08004c9c 	.word	0x08004c9c
 8001fcc:	08004ca0 	.word	0x08004ca0
 8001fd0:	08004ca4 	.word	0x08004ca4
 8001fd4:	08004ca8 	.word	0x08004ca8
 8001fd8:	08004cac 	.word	0x08004cac
 8001fdc:	08004cb0 	.word	0x08004cb0

08001fe0 <TP_Adjust>:
 * @function   :Calibration touch screen and Get 4 calibration parameters
 * @parameters :None
 * @retvalue   :None
******************************************************************************/ 		 
void TP_Adjust(void)
{								 
 8001fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe4:	b093      	sub	sp, #76	@ 0x4c
 8001fe6:	af06      	add	r7, sp, #24
	u16 pos_temp[4][2];	//Coordinate cache value
	u8  cnt=0;	
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	u16 d1,d2;
	u32 tem1,tem2;
	double fac; 	
	u16 outtime=0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 	cnt=0;				
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	POINT_COLOR=BLUE;
 8001ff8:	4b64      	ldr	r3, [pc, #400]	@ (800218c <TP_Adjust+0x1ac>)
 8001ffa:	221f      	movs	r2, #31
 8001ffc:	801a      	strh	r2, [r3, #0]
	BACK_COLOR =WHITE;
 8001ffe:	4b64      	ldr	r3, [pc, #400]	@ (8002190 <TP_Adjust+0x1b0>)
 8002000:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002004:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);	//clear screen
 8002006:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800200a:	f7fe fe07 	bl	8000c1c <LCD_Clear>
	POINT_COLOR=RED;	//red
 800200e:	4b5f      	ldr	r3, [pc, #380]	@ (800218c <TP_Adjust+0x1ac>)
 8002010:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002014:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);	//clear screen
 8002016:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800201a:	f7fe fdff 	bl	8000c1c <LCD_Clear>
	POINT_COLOR=BLACK;
 800201e:	4b5b      	ldr	r3, [pc, #364]	@ (800218c <TP_Adjust+0x1ac>)
 8002020:	2200      	movs	r2, #0
 8002022:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(10,40,16,"Please use the stylus click",1);	//Show prompt information
 8002024:	2301      	movs	r3, #1
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4b5a      	ldr	r3, [pc, #360]	@ (8002194 <TP_Adjust+0x1b4>)
 800202a:	2210      	movs	r2, #16
 800202c:	2128      	movs	r1, #40	@ 0x28
 800202e:	200a      	movs	r0, #10
 8002030:	f7ff face 	bl	80015d0 <LCD_ShowString>
	LCD_ShowString(10,56,16,"the cross on the screen.",1);	//Show prompt information
 8002034:	2301      	movs	r3, #1
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	4b57      	ldr	r3, [pc, #348]	@ (8002198 <TP_Adjust+0x1b8>)
 800203a:	2210      	movs	r2, #16
 800203c:	2138      	movs	r1, #56	@ 0x38
 800203e:	200a      	movs	r0, #10
 8002040:	f7ff fac6 	bl	80015d0 <LCD_ShowString>
	LCD_ShowString(10,72,16,"The cross will always move",1);	//Show prompt information
 8002044:	2301      	movs	r3, #1
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4b54      	ldr	r3, [pc, #336]	@ (800219c <TP_Adjust+0x1bc>)
 800204a:	2210      	movs	r2, #16
 800204c:	2148      	movs	r1, #72	@ 0x48
 800204e:	200a      	movs	r0, #10
 8002050:	f7ff fabe 	bl	80015d0 <LCD_ShowString>
	LCD_ShowString(10,88,16,"until the screen adjustment",1);	//Show prompt information
 8002054:	2301      	movs	r3, #1
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	4b51      	ldr	r3, [pc, #324]	@ (80021a0 <TP_Adjust+0x1c0>)
 800205a:	2210      	movs	r2, #16
 800205c:	2158      	movs	r1, #88	@ 0x58
 800205e:	200a      	movs	r0, #10
 8002060:	f7ff fab6 	bl	80015d0 <LCD_ShowString>
	LCD_ShowString(10,104,16,"is completed.",1);	//Show prompt information
 8002064:	2301      	movs	r3, #1
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4b4e      	ldr	r3, [pc, #312]	@ (80021a4 <TP_Adjust+0x1c4>)
 800206a:	2210      	movs	r2, #16
 800206c:	2168      	movs	r1, #104	@ 0x68
 800206e:	200a      	movs	r0, #10
 8002070:	f7ff faae 	bl	80015d0 <LCD_ShowString>
	 
	TP_Drow_Touch_Point(20,20,RED);	//Paint point 1
 8002074:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002078:	2114      	movs	r1, #20
 800207a:	2014      	movs	r0, #20
 800207c:	f7ff fdcc 	bl	8001c18 <TP_Drow_Touch_Point>
	tp_dev.sta=0;	//Eliminate trigger signals
 8002080:	4b49      	ldr	r3, [pc, #292]	@ (80021a8 <TP_Adjust+0x1c8>)
 8002082:	2200      	movs	r2, #0
 8002084:	751a      	strb	r2, [r3, #20]
	tp_dev.xfac=0;	//Xfac is used to mark whether it has been calibrated, so it must be cleared before calibration! To avoid errors
 8002086:	4b48      	ldr	r3, [pc, #288]	@ (80021a8 <TP_Adjust+0x1c8>)
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
	while(1)	//If it is not pressed for 10 consecutive seconds, it will automatically exit.
	{
		tp_dev.scan(1);	//Scan physical coordinates
 800208e:	4b46      	ldr	r3, [pc, #280]	@ (80021a8 <TP_Adjust+0x1c8>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2001      	movs	r0, #1
 8002094:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)	//The button was pressed once (the button was released at this time.)
 8002096:	4b44      	ldr	r3, [pc, #272]	@ (80021a8 <TP_Adjust+0x1c8>)
 8002098:	7d1b      	ldrb	r3, [r3, #20]
 800209a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800209e:	2b40      	cmp	r3, #64	@ 0x40
 80020a0:	f040 83ac 	bne.w	80027fc <TP_Adjust+0x81c>
		{	
			outtime=0;		
 80020a4:	2300      	movs	r3, #0
 80020a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			tp_dev.sta&=~(1<<6);	//Mark keys have been processed.
 80020a8:	4b3f      	ldr	r3, [pc, #252]	@ (80021a8 <TP_Adjust+0x1c8>)
 80020aa:	7d1b      	ldrb	r3, [r3, #20]
 80020ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b3d      	ldr	r3, [pc, #244]	@ (80021a8 <TP_Adjust+0x1c8>)
 80020b4:	751a      	strb	r2, [r3, #20]
						   			   
			pos_temp[cnt][0]=tp_dev.x;
 80020b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020ba:	4a3b      	ldr	r2, [pc, #236]	@ (80021a8 <TP_Adjust+0x1c8>)
 80020bc:	8a12      	ldrh	r2, [r2, #16]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	3328      	adds	r3, #40	@ 0x28
 80020c2:	f107 0108 	add.w	r1, r7, #8
 80020c6:	440b      	add	r3, r1
 80020c8:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y;
 80020cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020d0:	4a35      	ldr	r2, [pc, #212]	@ (80021a8 <TP_Adjust+0x1c8>)
 80020d2:	8a52      	ldrh	r2, [r2, #18]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	3328      	adds	r3, #40	@ 0x28
 80020d8:	f107 0108 	add.w	r1, r7, #8
 80020dc:	440b      	add	r3, r1
 80020de:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;	  
 80020e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020e6:	3301      	adds	r3, #1
 80020e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			switch(cnt)
 80020ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020f0:	3b01      	subs	r3, #1
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	f200 8382 	bhi.w	80027fc <TP_Adjust+0x81c>
 80020f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002100 <TP_Adjust+0x120>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002111 	.word	0x08002111
 8002104:	08002133 	.word	0x08002133
 8002108:	0800215d 	.word	0x0800215d
 800210c:	080021b1 	.word	0x080021b1
			{			   
				case 1:						 
					TP_Drow_Touch_Point(20,20,WHITE);				//Clear point 1
 8002110:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002114:	2114      	movs	r1, #20
 8002116:	2014      	movs	r0, #20
 8002118:	f7ff fd7e 	bl	8001c18 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);	//Paint point 2
 800211c:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <TP_Adjust+0x1cc>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	3b14      	subs	r3, #20
 8002122:	b29b      	uxth	r3, r3
 8002124:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002128:	2114      	movs	r1, #20
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fd74 	bl	8001c18 <TP_Drow_Touch_Point>
					break;
 8002130:	e364      	b.n	80027fc <TP_Adjust+0x81c>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);	//Clear point 2
 8002132:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <TP_Adjust+0x1cc>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	3b14      	subs	r3, #20
 8002138:	b29b      	uxth	r3, r3
 800213a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800213e:	2114      	movs	r1, #20
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fd69 	bl	8001c18 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);	//Paint point 3
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <TP_Adjust+0x1cc>)
 8002148:	885b      	ldrh	r3, [r3, #2]
 800214a:	3b14      	subs	r3, #20
 800214c:	b29b      	uxth	r3, r3
 800214e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002152:	4619      	mov	r1, r3
 8002154:	2014      	movs	r0, #20
 8002156:	f7ff fd5f 	bl	8001c18 <TP_Drow_Touch_Point>
					break;
 800215a:	e34f      	b.n	80027fc <TP_Adjust+0x81c>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);			//Clear point 3
 800215c:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <TP_Adjust+0x1cc>)
 800215e:	885b      	ldrh	r3, [r3, #2]
 8002160:	3b14      	subs	r3, #20
 8002162:	b29b      	uxth	r3, r3
 8002164:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002168:	4619      	mov	r1, r3
 800216a:	2014      	movs	r0, #20
 800216c:	f7ff fd54 	bl	8001c18 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);	//Paint point 4
 8002170:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <TP_Adjust+0x1cc>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	3b14      	subs	r3, #20
 8002176:	b298      	uxth	r0, r3
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <TP_Adjust+0x1cc>)
 800217a:	885b      	ldrh	r3, [r3, #2]
 800217c:	3b14      	subs	r3, #20
 800217e:	b29b      	uxth	r3, r3
 8002180:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002184:	4619      	mov	r1, r3
 8002186:	f7ff fd47 	bl	8001c18 <TP_Drow_Touch_Point>
					break;
 800218a:	e337      	b.n	80027fc <TP_Adjust+0x81c>
 800218c:	200000d4 	.word	0x200000d4
 8002190:	20000000 	.word	0x20000000
 8002194:	08004cb8 	.word	0x08004cb8
 8002198:	08004cd4 	.word	0x08004cd4
 800219c:	08004cf0 	.word	0x08004cf0
 80021a0:	08004d0c 	.word	0x08004d0c
 80021a4:	08004d28 	.word	0x08004d28
 80021a8:	20000004 	.word	0x20000004
 80021ac:	200000c4 	.word	0x200000c4
				case 4:	  //All four points have been obtained
					//Opposite sides are equal
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);//x1-x2
 80021b0:	893b      	ldrh	r3, [r7, #8]
 80021b2:	461a      	mov	r2, r3
 80021b4:	89bb      	ldrh	r3, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bfb8      	it	lt
 80021bc:	425b      	neglt	r3, r3
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);//y1-y2
 80021c0:	897b      	ldrh	r3, [r7, #10]
 80021c2:	461a      	mov	r2, r3
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bfb8      	it	lt
 80021cc:	425b      	neglt	r3, r3
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 80021d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d2:	fb03 f303 	mul.w	r3, r3, r3
 80021d6:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	fb03 f303 	mul.w	r3, r3, r3
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
					d1=sqrt(tem1+tem2);//Get the distance of 1,2
 80021e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	4413      	add	r3, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f940 	bl	800046c <__aeabi_ui2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	ec43 2b10 	vmov	d0, r2, r3
 80021f4:	f002 fbfc 	bl	80049f0 <sqrt>
 80021f8:	ec53 2b10 	vmov	r2, r3, d0
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fc5e 	bl	8000ac0 <__aeabi_d2uiz>
 8002204:	4603      	mov	r3, r0
 8002206:	847b      	strh	r3, [r7, #34]	@ 0x22
					
					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);//x3-x4
 8002208:	8a3b      	ldrh	r3, [r7, #16]
 800220a:	461a      	mov	r2, r3
 800220c:	8abb      	ldrh	r3, [r7, #20]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	bfb8      	it	lt
 8002214:	425b      	neglt	r3, r3
 8002216:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);//y3-y4
 8002218:	8a7b      	ldrh	r3, [r7, #18]
 800221a:	461a      	mov	r2, r3
 800221c:	8afb      	ldrh	r3, [r7, #22]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	bfb8      	it	lt
 8002224:	425b      	neglt	r3, r3
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 8002228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222a:	fb03 f303 	mul.w	r3, r3, r3
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 8002230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002232:	fb03 f303 	mul.w	r3, r3, r3
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
					d2=sqrt(tem1+tem2);	//Get the distance of 3,4
 8002238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	4413      	add	r3, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f914 	bl	800046c <__aeabi_ui2d>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	ec43 2b10 	vmov	d0, r2, r3
 800224c:	f002 fbd0 	bl	80049f0 <sqrt>
 8002250:	ec53 2b10 	vmov	r2, r3, d0
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	f7fe fc32 	bl	8000ac0 <__aeabi_d2uiz>
 800225c:	4603      	mov	r3, r0
 800225e:	843b      	strh	r3, [r7, #32]
					fac=(float)d1/d2;
 8002260:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800226a:	8c3b      	ldrh	r3, [r7, #32]
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002274:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002278:	ee16 0a90 	vmov	r0, s13
 800227c:	f7fe f918 	bl	80004b0 <__aeabi_f2d>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	e9c7 2306 	strd	r2, r3, [r7, #24]
					if(fac<0.95||fac>1.05||d1==0||d2==0)	//Unqualified
 8002288:	a38b      	add	r3, pc, #556	@ (adr r3, 80024b8 <TP_Adjust+0x4d8>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002292:	f7fe fbd7 	bl	8000a44 <__aeabi_dcmplt>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10f      	bne.n	80022bc <TP_Adjust+0x2dc>
 800229c:	a388      	add	r3, pc, #544	@ (adr r3, 80024c0 <TP_Adjust+0x4e0>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022a6:	f7fe fbeb 	bl	8000a80 <__aeabi_dcmpgt>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d105      	bne.n	80022bc <TP_Adjust+0x2dc>
 80022b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <TP_Adjust+0x2dc>
 80022b6:	8c3b      	ldrh	r3, [r7, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d13e      	bne.n	800233a <TP_Adjust+0x35a>
					{
						cnt=0;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 				    	TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);	//Clear point 4
 80022c2:	4b81      	ldr	r3, [pc, #516]	@ (80024c8 <TP_Adjust+0x4e8>)
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	3b14      	subs	r3, #20
 80022c8:	b298      	uxth	r0, r3
 80022ca:	4b7f      	ldr	r3, [pc, #508]	@ (80024c8 <TP_Adjust+0x4e8>)
 80022cc:	885b      	ldrh	r3, [r3, #2]
 80022ce:	3b14      	subs	r3, #20
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7ff fc9e 	bl	8001c18 <TP_Drow_Touch_Point>
   	 					TP_Drow_Touch_Point(20,20,RED);								//Paint point 1
 80022dc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80022e0:	2114      	movs	r1, #20
 80022e2:	2014      	movs	r0, #20
 80022e4:	f7ff fc98 	bl	8001c18 <TP_Drow_Touch_Point>
 						TP_Adj_Info_Show(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);//��ʾ����   
 80022e8:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 80022ec:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 80022f0:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 80022f4:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 80022f8:	8a3c      	ldrh	r4, [r7, #16]
 80022fa:	8a7d      	ldrh	r5, [r7, #18]
 80022fc:	8abe      	ldrh	r6, [r7, #20]
 80022fe:	8afb      	ldrh	r3, [r7, #22]
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	4b71      	ldr	r3, [pc, #452]	@ (80024cc <TP_Adjust+0x4ec>)
 8002308:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800230c:	f7fe f928 	bl	8000560 <__aeabi_dmul>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	f7fe fbd2 	bl	8000ac0 <__aeabi_d2uiz>
 800231c:	4603      	mov	r3, r0
 800231e:	b29b      	uxth	r3, r3
 8002320:	9304      	str	r3, [sp, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	9303      	str	r3, [sp, #12]
 8002326:	9602      	str	r6, [sp, #8]
 8002328:	9501      	str	r5, [sp, #4]
 800232a:	9400      	str	r4, [sp, #0]
 800232c:	465b      	mov	r3, fp
 800232e:	4652      	mov	r2, sl
 8002330:	4649      	mov	r1, r9
 8002332:	4640      	mov	r0, r8
 8002334:	f7ff fd98 	bl	8001e68 <TP_Adj_Info_Show>
 						continue;
 8002338:	e26e      	b.n	8002818 <TP_Adjust+0x838>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);//x1-x3
 800233a:	893b      	ldrh	r3, [r7, #8]
 800233c:	461a      	mov	r2, r3
 800233e:	8a3b      	ldrh	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	bfb8      	it	lt
 8002346:	425b      	neglt	r3, r3
 8002348:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);//y1-y3
 800234a:	897b      	ldrh	r3, [r7, #10]
 800234c:	461a      	mov	r2, r3
 800234e:	8a7b      	ldrh	r3, [r7, #18]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	bfb8      	it	lt
 8002356:	425b      	neglt	r3, r3
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 800235a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235c:	fb03 f303 	mul.w	r3, r3, r3
 8002360:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	fb03 f303 	mul.w	r3, r3, r3
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
					d1=sqrt(tem1+tem2);	//Get the distance of 1,3
 800236a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	4413      	add	r3, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f87b 	bl	800046c <__aeabi_ui2d>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	ec43 2b10 	vmov	d0, r2, r3
 800237e:	f002 fb37 	bl	80049f0 <sqrt>
 8002382:	ec53 2b10 	vmov	r2, r3, d0
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	f7fe fb99 	bl	8000ac0 <__aeabi_d2uiz>
 800238e:	4603      	mov	r3, r0
 8002390:	847b      	strh	r3, [r7, #34]	@ 0x22
					
					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);//x2-x4
 8002392:	89bb      	ldrh	r3, [r7, #12]
 8002394:	461a      	mov	r2, r3
 8002396:	8abb      	ldrh	r3, [r7, #20]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	bfb8      	it	lt
 800239e:	425b      	neglt	r3, r3
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);//y2-y4
 80023a2:	89fb      	ldrh	r3, [r7, #14]
 80023a4:	461a      	mov	r2, r3
 80023a6:	8afb      	ldrh	r3, [r7, #22]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bfb8      	it	lt
 80023ae:	425b      	neglt	r3, r3
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 80023b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b4:	fb03 f303 	mul.w	r3, r3, r3
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	fb03 f303 	mul.w	r3, r3, r3
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
					d2=sqrt(tem1+tem2);	//Get the distance of 2,4
 80023c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	4413      	add	r3, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f84f 	bl	800046c <__aeabi_ui2d>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	ec43 2b10 	vmov	d0, r2, r3
 80023d6:	f002 fb0b 	bl	80049f0 <sqrt>
 80023da:	ec53 2b10 	vmov	r2, r3, d0
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	f7fe fb6d 	bl	8000ac0 <__aeabi_d2uiz>
 80023e6:	4603      	mov	r3, r0
 80023e8:	843b      	strh	r3, [r7, #32]
					fac=(float)d1/d2;
 80023ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023f4:	8c3b      	ldrh	r3, [r7, #32]
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002402:	ee16 0a90 	vmov	r0, s13
 8002406:	f7fe f853 	bl	80004b0 <__aeabi_f2d>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	e9c7 2306 	strd	r2, r3, [r7, #24]
					if(fac<0.95||fac>1.05)	//Unqualified
 8002412:	a329      	add	r3, pc, #164	@ (adr r3, 80024b8 <TP_Adjust+0x4d8>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800241c:	f7fe fb12 	bl	8000a44 <__aeabi_dcmplt>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <TP_Adjust+0x45a>
 8002426:	a326      	add	r3, pc, #152	@ (adr r3, 80024c0 <TP_Adjust+0x4e0>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002430:	f7fe fb26 	bl	8000a80 <__aeabi_dcmpgt>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d04a      	beq.n	80024d0 <TP_Adjust+0x4f0>
					{
						cnt=0;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 				    	TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);	//Clear point 4
 8002440:	4b21      	ldr	r3, [pc, #132]	@ (80024c8 <TP_Adjust+0x4e8>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	3b14      	subs	r3, #20
 8002446:	b298      	uxth	r0, r3
 8002448:	4b1f      	ldr	r3, [pc, #124]	@ (80024c8 <TP_Adjust+0x4e8>)
 800244a:	885b      	ldrh	r3, [r3, #2]
 800244c:	3b14      	subs	r3, #20
 800244e:	b29b      	uxth	r3, r3
 8002450:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002454:	4619      	mov	r1, r3
 8002456:	f7ff fbdf 	bl	8001c18 <TP_Drow_Touch_Point>
   	 					TP_Drow_Touch_Point(20,20,RED);								//Paint point 1
 800245a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800245e:	2114      	movs	r1, #20
 8002460:	2014      	movs	r0, #20
 8002462:	f7ff fbd9 	bl	8001c18 <TP_Drow_Touch_Point>
 						TP_Adj_Info_Show(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);//��ʾ����   
 8002466:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 800246a:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 800246e:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8002472:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8002476:	8a3c      	ldrh	r4, [r7, #16]
 8002478:	8a7d      	ldrh	r5, [r7, #18]
 800247a:	8abe      	ldrh	r6, [r7, #20]
 800247c:	8afb      	ldrh	r3, [r7, #22]
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <TP_Adjust+0x4ec>)
 8002486:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800248a:	f7fe f869 	bl	8000560 <__aeabi_dmul>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4610      	mov	r0, r2
 8002494:	4619      	mov	r1, r3
 8002496:	f7fe fb13 	bl	8000ac0 <__aeabi_d2uiz>
 800249a:	4603      	mov	r3, r0
 800249c:	b29b      	uxth	r3, r3
 800249e:	9304      	str	r3, [sp, #16]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	9303      	str	r3, [sp, #12]
 80024a4:	9602      	str	r6, [sp, #8]
 80024a6:	9501      	str	r5, [sp, #4]
 80024a8:	9400      	str	r4, [sp, #0]
 80024aa:	465b      	mov	r3, fp
 80024ac:	4652      	mov	r2, sl
 80024ae:	4649      	mov	r1, r9
 80024b0:	4640      	mov	r0, r8
 80024b2:	f7ff fcd9 	bl	8001e68 <TP_Adj_Info_Show>
						continue;
 80024b6:	e1af      	b.n	8002818 <TP_Adjust+0x838>
 80024b8:	66666666 	.word	0x66666666
 80024bc:	3fee6666 	.word	0x3fee6666
 80024c0:	cccccccd 	.word	0xcccccccd
 80024c4:	3ff0cccc 	.word	0x3ff0cccc
 80024c8:	200000c4 	.word	0x200000c4
 80024cc:	40590000 	.word	0x40590000
					}	//Correct
								   
					//Diagonals are equal
					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);//x1-x3
 80024d0:	89bb      	ldrh	r3, [r7, #12]
 80024d2:	461a      	mov	r2, r3
 80024d4:	8a3b      	ldrh	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bfb8      	it	lt
 80024dc:	425b      	neglt	r3, r3
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);//y1-y3
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	461a      	mov	r2, r3
 80024e4:	8a7b      	ldrh	r3, [r7, #18]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bfb8      	it	lt
 80024ec:	425b      	neglt	r3, r3
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 80024f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f2:	fb03 f303 	mul.w	r3, r3, r3
 80024f6:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	fb03 f303 	mul.w	r3, r3, r3
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
					d1=sqrt(tem1+tem2);	//get the distance of 1,4
 8002500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	4413      	add	r3, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ffb0 	bl	800046c <__aeabi_ui2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	ec43 2b10 	vmov	d0, r2, r3
 8002514:	f002 fa6c 	bl	80049f0 <sqrt>
 8002518:	ec53 2b10 	vmov	r2, r3, d0
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f7fe face 	bl	8000ac0 <__aeabi_d2uiz>
 8002524:	4603      	mov	r3, r0
 8002526:	847b      	strh	r3, [r7, #34]	@ 0x22
	
					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);//x2-x4
 8002528:	893b      	ldrh	r3, [r7, #8]
 800252a:	461a      	mov	r2, r3
 800252c:	8abb      	ldrh	r3, [r7, #20]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	bfb8      	it	lt
 8002534:	425b      	neglt	r3, r3
 8002536:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);//y2-y4
 8002538:	897b      	ldrh	r3, [r7, #10]
 800253a:	461a      	mov	r2, r3
 800253c:	8afb      	ldrh	r3, [r7, #22]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	bfb8      	it	lt
 8002544:	425b      	neglt	r3, r3
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 8002548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254a:	fb03 f303 	mul.w	r3, r3, r3
 800254e:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	fb03 f303 	mul.w	r3, r3, r3
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
					d2=sqrt(tem1+tem2);	//Get the distance of 2,3
 8002558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	4413      	add	r3, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd ff84 	bl	800046c <__aeabi_ui2d>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	ec43 2b10 	vmov	d0, r2, r3
 800256c:	f002 fa40 	bl	80049f0 <sqrt>
 8002570:	ec53 2b10 	vmov	r2, r3, d0
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f7fe faa2 	bl	8000ac0 <__aeabi_d2uiz>
 800257c:	4603      	mov	r3, r0
 800257e:	843b      	strh	r3, [r7, #32]
					fac=(float)d1/d2;
 8002580:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800258a:	8c3b      	ldrh	r3, [r7, #32]
 800258c:	ee07 3a90 	vmov	s15, r3
 8002590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002594:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002598:	ee16 0a90 	vmov	r0, s13
 800259c:	f7fd ff88 	bl	80004b0 <__aeabi_f2d>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
					if(fac<0.95||fac>1.05)	//Unqualified
 80025a8:	a3a7      	add	r3, pc, #668	@ (adr r3, 8002848 <TP_Adjust+0x868>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025b2:	f7fe fa47 	bl	8000a44 <__aeabi_dcmplt>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <TP_Adjust+0x5f0>
 80025bc:	a3a4      	add	r3, pc, #656	@ (adr r3, 8002850 <TP_Adjust+0x870>)
 80025be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025c6:	f7fe fa5b 	bl	8000a80 <__aeabi_dcmpgt>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d03e      	beq.n	800264e <TP_Adjust+0x66e>
					{
						cnt=0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 				    	TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);	//Clear point 4
 80025d6:	4b94      	ldr	r3, [pc, #592]	@ (8002828 <TP_Adjust+0x848>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	3b14      	subs	r3, #20
 80025dc:	b298      	uxth	r0, r3
 80025de:	4b92      	ldr	r3, [pc, #584]	@ (8002828 <TP_Adjust+0x848>)
 80025e0:	885b      	ldrh	r3, [r3, #2]
 80025e2:	3b14      	subs	r3, #20
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7ff fb14 	bl	8001c18 <TP_Drow_Touch_Point>
   	 					TP_Drow_Touch_Point(20,20,RED);								//Paint point 1
 80025f0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80025f4:	2114      	movs	r1, #20
 80025f6:	2014      	movs	r0, #20
 80025f8:	f7ff fb0e 	bl	8001c18 <TP_Drow_Touch_Point>
 						TP_Adj_Info_Show(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);//��ʾ����   
 80025fc:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8002600:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 8002604:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8002608:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 800260c:	8a3c      	ldrh	r4, [r7, #16]
 800260e:	8a7d      	ldrh	r5, [r7, #18]
 8002610:	8abe      	ldrh	r6, [r7, #20]
 8002612:	8afb      	ldrh	r3, [r7, #22]
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	4b84      	ldr	r3, [pc, #528]	@ (800282c <TP_Adjust+0x84c>)
 800261c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002620:	f7fd ff9e 	bl	8000560 <__aeabi_dmul>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	f7fe fa48 	bl	8000ac0 <__aeabi_d2uiz>
 8002630:	4603      	mov	r3, r0
 8002632:	b29b      	uxth	r3, r3
 8002634:	9304      	str	r3, [sp, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	9303      	str	r3, [sp, #12]
 800263a:	9602      	str	r6, [sp, #8]
 800263c:	9501      	str	r5, [sp, #4]
 800263e:	9400      	str	r4, [sp, #0]
 8002640:	465b      	mov	r3, fp
 8002642:	4652      	mov	r2, sl
 8002644:	4649      	mov	r1, r9
 8002646:	4640      	mov	r0, r8
 8002648:	f7ff fc0e 	bl	8001e68 <TP_Adj_Info_Show>
						continue;
 800264c:	e0e4      	b.n	8002818 <TP_Adjust+0x838>
					}	//Correct
					//Calculation result
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);	//getxfac
 800264e:	4b76      	ldr	r3, [pc, #472]	@ (8002828 <TP_Adjust+0x848>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	3b28      	subs	r3, #40	@ 0x28
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800265c:	89bb      	ldrh	r3, [r7, #12]
 800265e:	461a      	mov	r2, r3
 8002660:	893b      	ldrh	r3, [r7, #8]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	ee07 3a90 	vmov	s15, r3
 8002668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800266c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002670:	4b6f      	ldr	r3, [pc, #444]	@ (8002830 <TP_Adjust+0x850>)
 8002672:	edc3 7a06 	vstr	s15, [r3, #24]
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;	//getxoff
 8002676:	4b6c      	ldr	r3, [pc, #432]	@ (8002828 <TP_Adjust+0x848>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002682:	4b6b      	ldr	r3, [pc, #428]	@ (8002830 <TP_Adjust+0x850>)
 8002684:	edd3 6a06 	vldr	s13, [r3, #24]
 8002688:	89bb      	ldrh	r3, [r7, #12]
 800268a:	461a      	mov	r2, r3
 800268c:	893b      	ldrh	r3, [r7, #8]
 800268e:	4413      	add	r3, r2
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80026a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ac:	ee17 3a90 	vmov	r3, s15
 80026b0:	b21a      	sxth	r2, r3
 80026b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002830 <TP_Adjust+0x850>)
 80026b4:	841a      	strh	r2, [r3, #32]
						  
					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);	//getyfac
 80026b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002828 <TP_Adjust+0x848>)
 80026b8:	885b      	ldrh	r3, [r3, #2]
 80026ba:	3b28      	subs	r3, #40	@ 0x28
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026c4:	8a7b      	ldrh	r3, [r7, #18]
 80026c6:	461a      	mov	r2, r3
 80026c8:	897b      	ldrh	r3, [r7, #10]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026d8:	4b55      	ldr	r3, [pc, #340]	@ (8002830 <TP_Adjust+0x850>)
 80026da:	edc3 7a07 	vstr	s15, [r3, #28]
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;	//getyoff
 80026de:	4b52      	ldr	r3, [pc, #328]	@ (8002828 <TP_Adjust+0x848>)
 80026e0:	885b      	ldrh	r3, [r3, #2]
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ea:	4b51      	ldr	r3, [pc, #324]	@ (8002830 <TP_Adjust+0x850>)
 80026ec:	edd3 6a07 	vldr	s13, [r3, #28]
 80026f0:	8a7b      	ldrh	r3, [r7, #18]
 80026f2:	461a      	mov	r2, r3
 80026f4:	897b      	ldrh	r3, [r7, #10]
 80026f6:	4413      	add	r3, r2
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002704:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002708:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800270c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002714:	ee17 3a90 	vmov	r3, s15
 8002718:	b21a      	sxth	r2, r3
 800271a:	4b45      	ldr	r3, [pc, #276]	@ (8002830 <TP_Adjust+0x850>)
 800271c:	845a      	strh	r2, [r3, #34]	@ 0x22
					if(abs(tp_dev.xfac)>2||abs(tp_dev.yfac)>2)	//The touch screen is the opposite of the default.
 800271e:	4b44      	ldr	r3, [pc, #272]	@ (8002830 <TP_Adjust+0x850>)
 8002720:	edd3 7a06 	vldr	s15, [r3, #24]
 8002724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002728:	ee17 3a90 	vmov	r3, s15
 800272c:	2b00      	cmp	r3, #0
 800272e:	bfb8      	it	lt
 8002730:	425b      	neglt	r3, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	dc0b      	bgt.n	800274e <TP_Adjust+0x76e>
 8002736:	4b3e      	ldr	r3, [pc, #248]	@ (8002830 <TP_Adjust+0x850>)
 8002738:	edd3 7a07 	vldr	s15, [r3, #28]
 800273c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002740:	ee17 3a90 	vmov	r3, s15
 8002744:	2b00      	cmp	r3, #0
 8002746:	bfb8      	it	lt
 8002748:	425b      	neglt	r3, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	dd3c      	ble.n	80027c8 <TP_Adjust+0x7e8>
					{
						cnt=0;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 				    	TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);	//Clear point 4
 8002754:	4b34      	ldr	r3, [pc, #208]	@ (8002828 <TP_Adjust+0x848>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	3b14      	subs	r3, #20
 800275a:	b298      	uxth	r0, r3
 800275c:	4b32      	ldr	r3, [pc, #200]	@ (8002828 <TP_Adjust+0x848>)
 800275e:	885b      	ldrh	r3, [r3, #2]
 8002760:	3b14      	subs	r3, #20
 8002762:	b29b      	uxth	r3, r3
 8002764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002768:	4619      	mov	r1, r3
 800276a:	f7ff fa55 	bl	8001c18 <TP_Drow_Touch_Point>
   	 					TP_Drow_Touch_Point(20,20,RED);								//Paint point 1
 800276e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002772:	2114      	movs	r1, #20
 8002774:	2014      	movs	r0, #20
 8002776:	f7ff fa4f 	bl	8001c18 <TP_Drow_Touch_Point>
						LCD_ShowString(40,26, 16,"TP Need readjust!",1);
 800277a:	2301      	movs	r3, #1
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <TP_Adjust+0x854>)
 8002780:	2210      	movs	r2, #16
 8002782:	211a      	movs	r1, #26
 8002784:	2028      	movs	r0, #40	@ 0x28
 8002786:	f7fe ff23 	bl	80015d0 <LCD_ShowString>
						tp_dev.touchtype=!tp_dev.touchtype;	//Modify the touch screen type.
 800278a:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <TP_Adjust+0x850>)
 800278c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <TP_Adjust+0x850>)
 800279e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
						if(tp_dev.touchtype)	//The X and y directions are opposite to the screen
 80027a2:	4b23      	ldr	r3, [pc, #140]	@ (8002830 <TP_Adjust+0x850>)
 80027a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d006      	beq.n	80027ba <TP_Adjust+0x7da>
						{
							CMD_RDX=0X90;
 80027ac:	4b22      	ldr	r3, [pc, #136]	@ (8002838 <TP_Adjust+0x858>)
 80027ae:	2290      	movs	r2, #144	@ 0x90
 80027b0:	701a      	strb	r2, [r3, #0]
							CMD_RDY=0XD0;	 
 80027b2:	4b22      	ldr	r3, [pc, #136]	@ (800283c <TP_Adjust+0x85c>)
 80027b4:	22d0      	movs	r2, #208	@ 0xd0
 80027b6:	701a      	strb	r2, [r3, #0]
						}else				   //The X and y directions are the same as the screen
						{
							CMD_RDX=0XD0;
							CMD_RDY=0X90;	 
						}			    
						continue;
 80027b8:	e02e      	b.n	8002818 <TP_Adjust+0x838>
							CMD_RDX=0XD0;
 80027ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002838 <TP_Adjust+0x858>)
 80027bc:	22d0      	movs	r2, #208	@ 0xd0
 80027be:	701a      	strb	r2, [r3, #0]
							CMD_RDY=0X90;	 
 80027c0:	4b1e      	ldr	r3, [pc, #120]	@ (800283c <TP_Adjust+0x85c>)
 80027c2:	2290      	movs	r2, #144	@ 0x90
 80027c4:	701a      	strb	r2, [r3, #0]
						continue;
 80027c6:	e027      	b.n	8002818 <TP_Adjust+0x838>
					}		
					POINT_COLOR=BLUE;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <TP_Adjust+0x860>)
 80027ca:	221f      	movs	r2, #31
 80027cc:	801a      	strh	r2, [r3, #0]
					LCD_Clear(WHITE);	//clear screen
 80027ce:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80027d2:	f7fe fa23 	bl	8000c1c <LCD_Clear>
					LCD_ShowString(35,110, 16,"Touch Screen Adjust OK!",1);	//Calibration completed
 80027d6:	2301      	movs	r3, #1
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <TP_Adjust+0x864>)
 80027dc:	2210      	movs	r2, #16
 80027de:	216e      	movs	r1, #110	@ 0x6e
 80027e0:	2023      	movs	r0, #35	@ 0x23
 80027e2:	f7fe fef5 	bl	80015d0 <LCD_ShowString>
					delay_ms(1000);
 80027e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027ea:	f000 f8a3 	bl	8002934 <delay_ms>
					TP_Save_Adjdata();  
 80027ee:	f7ff fb2b 	bl	8001e48 <TP_Save_Adjdata>
 					LCD_Clear(WHITE);	//clear screen
 80027f2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80027f6:	f7fe fa11 	bl	8000c1c <LCD_Clear>
 80027fa:	e00e      	b.n	800281a <TP_Adjust+0x83a>
					return;	//Calibration completed
			}
		}
		delay_ms(10);
 80027fc:	200a      	movs	r0, #10
 80027fe:	f000 f899 	bl	8002934 <delay_ms>
		outtime++;
 8002802:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002804:	3301      	adds	r3, #1
 8002806:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		if(outtime>1000)
 8002808:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800280a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800280e:	f67f ac3e 	bls.w	800208e <TP_Adjust+0xae>
		{
			TP_Get_Adjdata();
 8002812:	f7ff fb20 	bl	8001e56 <TP_Get_Adjdata>
			break;
 8002816:	e000      	b.n	800281a <TP_Adjust+0x83a>
		tp_dev.scan(1);	//Scan physical coordinates
 8002818:	e439      	b.n	800208e <TP_Adjust+0xae>
	 	} 
 	}
}		
 800281a:	3734      	adds	r7, #52	@ 0x34
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	f3af 8000 	nop.w
 8002828:	200000c4 	.word	0x200000c4
 800282c:	40590000 	.word	0x40590000
 8002830:	20000004 	.word	0x20000004
 8002834:	08004d38 	.word	0x08004d38
 8002838:	2000002c 	.word	0x2000002c
 800283c:	2000002d 	.word	0x2000002d
 8002840:	200000d4 	.word	0x200000d4
 8002844:	08004d4c 	.word	0x08004d4c
 8002848:	66666666 	.word	0x66666666
 800284c:	3fee6666 	.word	0x3fee6666
 8002850:	cccccccd 	.word	0xcccccccd
 8002854:	3ff0cccc 	.word	0x3ff0cccc

08002858 <TP_Init>:
 * @parameters :None
 * @retvalue   :0-no calibration
								1-Has been calibrated
******************************************************************************/  
u8 TP_Init(void)
{			    		   
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
		GPIO_Initure.Pin=GPIO_PIN_10|GPIO_PIN_11;           
		GPIO_Initure.Mode=GPIO_MODE_INPUT;      //input
		HAL_GPIO_Init(GPIOH,&GPIO_Initure);     //initialization
 */
		    		     
  	TP_Read_XY(&tp_dev.x,&tp_dev.y);	//First read initialization
 800285c:	490b      	ldr	r1, [pc, #44]	@ (800288c <TP_Init+0x34>)
 800285e:	480c      	ldr	r0, [pc, #48]	@ (8002890 <TP_Init+0x38>)
 8002860:	f7ff f956 	bl	8001b10 <TP_Read_XY>
 	//AT24CXX_Init();	//initialize24cxx
	if(TP_Get_Adjdata())return 0;	//Already calibrated
 8002864:	f7ff faf7 	bl	8001e56 <TP_Get_Adjdata>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <TP_Init+0x1a>
 800286e:	2300      	movs	r3, #0
 8002870:	e00a      	b.n	8002888 <TP_Init+0x30>
	else			   //Not calibrated?
	{ 										    
		LCD_Clear(WHITE);	//clear screen
 8002872:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002876:	f7fe f9d1 	bl	8000c1c <LCD_Clear>
	    TP_Adjust();   		//Screen calibration
 800287a:	f7ff fbb1 	bl	8001fe0 <TP_Adjust>
		TP_Save_Adjdata();	 
 800287e:	f7ff fae3 	bl	8001e48 <TP_Save_Adjdata>
	}			
	TP_Get_Adjdata();	
 8002882:	f7ff fae8 	bl	8001e56 <TP_Get_Adjdata>
	return 1; 									 
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000016 	.word	0x20000016
 8002890:	20000014 	.word	0x20000014

08002894 <delay_init>:
// Initialize delay function
// When using uC/OS, this function initializes the uC/OS clock tick.
// The SYSTICK clock is fixed to the AHB clock.
// SYSCLK: System clock frequency
void delay_init(u8 SYSCLK)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS                         // If OS support is needed
    u32 reload;
#endif
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); // SysTick frequency is HCLK
 800289e:	2004      	movs	r0, #4
 80028a0:	f000 fc7a 	bl	8003198 <HAL_SYSTICK_CLKSourceConfig>
    fac_us=SYSCLK;                        // fac_us is used regardless of OS usage
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	4a03      	ldr	r2, [pc, #12]	@ (80028b4 <delay_init+0x20>)
 80028a8:	6013      	str	r3, [r2, #0]
    SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk; // Enable SysTick interrupt
    SysTick->LOAD=reload;                   // Interrupt every 1/OS_TICKS_PER_SEC second
    SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; // Enable SysTick
#else
#endif
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200000d8 	.word	0x200000d8

080028b8 <delay_us>:

// Delay for nus microseconds
// nus: Number of microseconds to delay
// nus: 0~190887435 (maximum value is 2^32/fac_us when fac_us=22.5)
void delay_us(u32 nus)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	@ 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told,tnow,tcnt=0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
    u32 reload=SysTick->LOAD;                // Value of LOAD
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <delay_us+0x74>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	617b      	str	r3, [r7, #20]
    ticks=nus*fac_us;                        // Number of ticks needed
 80028ca:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <delay_us+0x78>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	613b      	str	r3, [r7, #16]
    told=SysTick->VAL;                        // Counter value upon entry
 80028d6:	4b15      	ldr	r3, [pc, #84]	@ (800292c <delay_us+0x74>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61fb      	str	r3, [r7, #28]
    while(1)
    {
        tnow=SysTick->VAL;
 80028dc:	4b13      	ldr	r3, [pc, #76]	@ (800292c <delay_us+0x74>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	60fb      	str	r3, [r7, #12]
        if(tnow!=told)
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d0f8      	beq.n	80028dc <delay_us+0x24>
        {
            if(tnow<told)tcnt+=told-tnow;    // Note that SYSTICK is a decrementing counter.
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d206      	bcs.n	8002900 <delay_us+0x48>
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	e007      	b.n	8002910 <delay_us+0x58>
            else tcnt+=reload-tnow+told;
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad2      	subs	r2, r2, r3
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	4413      	add	r3, r2
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
            told=tnow;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	61fb      	str	r3, [r7, #28]
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	429a      	cmp	r2, r3
 800291a:	d200      	bcs.n	800291e <delay_us+0x66>
        tnow=SysTick->VAL;
 800291c:	e7de      	b.n	80028dc <delay_us+0x24>
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 800291e:	bf00      	nop
        }
    };
}
 8002920:	bf00      	nop
 8002922:	3724      	adds	r7, #36	@ 0x24
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000e010 	.word	0xe000e010
 8002930:	200000d8 	.word	0x200000d8

08002934 <delay_ms>:

// Delay for nms milliseconds
// nms: Number of milliseconds to delay
void delay_ms(u16 nms)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
    u32 i;
    for(i=0;i<nms;i++) delay_us(1000);
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	e006      	b.n	8002952 <delay_ms+0x1e>
 8002944:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002948:	f7ff ffb6 	bl	80028b8 <delay_us>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3301      	adds	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	429a      	cmp	r2, r3
 8002958:	d3f4      	bcc.n	8002944 <delay_ms+0x10>
}
 800295a:	bf00      	nop
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002968:	f000 faca 	bl	8002f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800296c:	f000 f80a 	bl	8002984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002970:	f000 f844 	bl	80029fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  delay_init(72);			// delay initialization (System Clock [MHz])
 8002974:	2048      	movs	r0, #72	@ 0x48
 8002976:	f7ff ff8d 	bl	8002894 <delay_init>
  ILI9341_paradriver_Init();			// initialization of LCD driver
 800297a:	f7fe f98f 	bl	8000c9c <ILI9341_paradriver_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Touch_Test();
 800297e:	f000 f983 	bl	8002c88 <Touch_Test>
 8002982:	e7fc      	b.n	800297e <main+0x1a>

08002984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b090      	sub	sp, #64	@ 0x40
 8002988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800298a:	f107 0318 	add.w	r3, r7, #24
 800298e:	2228      	movs	r2, #40	@ 0x28
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fffa 	bl	800498c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029a6:	2302      	movs	r3, #2
 80029a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029aa:	2301      	movs	r3, #1
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ae:	2310      	movs	r3, #16
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fdc2 	bl	8003544 <HAL_RCC_OscConfig>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80029c6:	f000 f8a9 	bl	8002b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ca:	230f      	movs	r3, #15
 80029cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fe02 	bl	80045ec <HAL_RCC_ClockConfig>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80029ee:	f000 f895 	bl	8002b1c <Error_Handler>
  }
}
 80029f2:	bf00      	nop
 80029f4:	3740      	adds	r7, #64	@ 0x40
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a12:	4b3f      	ldr	r3, [pc, #252]	@ (8002b10 <MX_GPIO_Init+0x114>)
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	4a3e      	ldr	r2, [pc, #248]	@ (8002b10 <MX_GPIO_Init+0x114>)
 8002a18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a1c:	6153      	str	r3, [r2, #20]
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b10 <MX_GPIO_Init+0x114>)
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b39      	ldr	r3, [pc, #228]	@ (8002b10 <MX_GPIO_Init+0x114>)
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	4a38      	ldr	r2, [pc, #224]	@ (8002b10 <MX_GPIO_Init+0x114>)
 8002a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a34:	6153      	str	r3, [r2, #20]
 8002a36:	4b36      	ldr	r3, [pc, #216]	@ (8002b10 <MX_GPIO_Init+0x114>)
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	4b33      	ldr	r3, [pc, #204]	@ (8002b10 <MX_GPIO_Init+0x114>)
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4a32      	ldr	r2, [pc, #200]	@ (8002b10 <MX_GPIO_Init+0x114>)
 8002a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a4c:	6153      	str	r3, [r2, #20]
 8002a4e:	4b30      	ldr	r3, [pc, #192]	@ (8002b10 <MX_GPIO_Init+0x114>)
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	211f      	movs	r1, #31
 8002a5e:	482d      	ldr	r0, [pc, #180]	@ (8002b14 <MX_GPIO_Init+0x118>)
 8002a60:	f000 fd58 	bl	8003514 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 8002a64:	2200      	movs	r2, #0
 8002a66:	218a      	movs	r1, #138	@ 0x8a
 8002a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a6c:	f000 fd52 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002a70:	2201      	movs	r2, #1
 8002a72:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002a76:	4828      	ldr	r0, [pc, #160]	@ (8002b18 <MX_GPIO_Init+0x11c>)
 8002a78:	f000 fd4c 	bl	8003514 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a86:	2301      	movs	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4820      	ldr	r0, [pc, #128]	@ (8002b14 <MX_GPIO_Init+0x118>)
 8002a92:	f000 fb9d 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a96:	231f      	movs	r3, #31
 8002a98:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4819      	ldr	r0, [pc, #100]	@ (8002b14 <MX_GPIO_Init+0x118>)
 8002aae:	f000 fb8f 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 8002ab2:	238a      	movs	r3, #138	@ 0x8a
 8002ab4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aba:	2301      	movs	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002acc:	f000 fb80 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8002ad0:	2354      	movs	r3, #84	@ 0x54
 8002ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ae6:	f000 fb73 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002aea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002aee:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	4619      	mov	r1, r3
 8002b02:	4805      	ldr	r0, [pc, #20]	@ (8002b18 <MX_GPIO_Init+0x11c>)
 8002b04:	f000 fb64 	bl	80031d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b08:	bf00      	nop
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	48000800 	.word	0x48000800
 8002b18:	48000400 	.word	0x48000400

08002b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b20:	b672      	cpsid	i
}
 8002b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <Error_Handler+0x8>

08002b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <HAL_MspInit+0x44>)
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	4a0e      	ldr	r2, [pc, #56]	@ (8002b6c <HAL_MspInit+0x44>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6193      	str	r3, [r2, #24]
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <HAL_MspInit+0x44>)
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <HAL_MspInit+0x44>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	4a08      	ldr	r2, [pc, #32]	@ (8002b6c <HAL_MspInit+0x44>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	61d3      	str	r3, [r2, #28]
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_MspInit+0x44>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000

08002b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <NMI_Handler+0x4>

08002b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <HardFault_Handler+0x4>

08002b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b84:	bf00      	nop
 8002b86:	e7fd      	b.n	8002b84 <MemManage_Handler+0x4>

08002b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <BusFault_Handler+0x4>

08002b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <UsageFault_Handler+0x4>

08002b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bc6:	f000 f9e1 	bl	8002f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <SystemInit+0x20>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bda:	4a05      	ldr	r2, [pc, #20]	@ (8002bf0 <SystemInit+0x20>)
 8002bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <DrawTestPage>:
 * @function   :Drawing test interface
 * @parameters :str:the start address of the Chinese and English strings
 * @retvalue   :None
******************************************************************************/ 
void DrawTestPage(u8 *str)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af04      	add	r7, sp, #16
 8002bfa:	6078      	str	r0, [r7, #4]
//���ƹ̶���up
LCD_Clear(WHITE);
 8002bfc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c00:	f7fe f80c 	bl	8000c1c <LCD_Clear>
LCD_Fill(0,0,lcddev.width,20,BLUE);
 8002c04:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <DrawTestPage+0x88>)
 8002c06:	881a      	ldrh	r2, [r3, #0]
 8002c08:	231f      	movs	r3, #31
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2314      	movs	r3, #20
 8002c0e:	2100      	movs	r1, #0
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fe fa39 	bl	8001088 <LCD_Fill>
//���ƹ̶���down
LCD_Fill(0,lcddev.height-20,lcddev.width,lcddev.height,BLUE);
 8002c16:	4b19      	ldr	r3, [pc, #100]	@ (8002c7c <DrawTestPage+0x88>)
 8002c18:	885b      	ldrh	r3, [r3, #2]
 8002c1a:	3b14      	subs	r3, #20
 8002c1c:	b299      	uxth	r1, r3
 8002c1e:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <DrawTestPage+0x88>)
 8002c20:	881a      	ldrh	r2, [r3, #0]
 8002c22:	4b16      	ldr	r3, [pc, #88]	@ (8002c7c <DrawTestPage+0x88>)
 8002c24:	885b      	ldrh	r3, [r3, #2]
 8002c26:	201f      	movs	r0, #31
 8002c28:	9000      	str	r0, [sp, #0]
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7fe fa2c 	bl	8001088 <LCD_Fill>
POINT_COLOR=WHITE;
 8002c30:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <DrawTestPage+0x8c>)
 8002c32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c36:	801a      	strh	r2, [r3, #0]
Gui_StrCenter(0,2,WHITE,BLUE,str,16,1);//������ʾ
 8002c38:	2301      	movs	r3, #1
 8002c3a:	9302      	str	r3, [sp, #8]
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	231f      	movs	r3, #31
 8002c46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fe fe25 	bl	800189c <Gui_StrCenter>
Gui_StrCenter(0,lcddev.height-18,WHITE,BLUE,"http://www.lcdwiki.com",16,1);//������ʾ
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <DrawTestPage+0x88>)
 8002c54:	885b      	ldrh	r3, [r3, #2]
 8002c56:	3b12      	subs	r3, #18
 8002c58:	b299      	uxth	r1, r3
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	9302      	str	r3, [sp, #8]
 8002c5e:	2310      	movs	r3, #16
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <DrawTestPage+0x90>)
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	231f      	movs	r3, #31
 8002c68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fe fe15 	bl	800189c <Gui_StrCenter>
//���Ʋ�������
//LCD_Fill(0,20,lcddev.width,lcddev.height-20,WHITE);
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200000c4 	.word	0x200000c4
 8002c80:	200000d4 	.word	0x200000d4
 8002c84:	08004d64 	.word	0x08004d64

08002c88 <Touch_Test>:
 * @function   :touch test
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void Touch_Test(void)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af02      	add	r7, sp, #8
	u8 key=0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	707b      	strb	r3, [r7, #1]
	u16 i=0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	80fb      	strh	r3, [r7, #6]
	u16 j=0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	80bb      	strh	r3, [r7, #4]
	u16 colorTemp=0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	807b      	strh	r3, [r7, #2]
	TP_Init();
 8002c9e:	f7ff fddb 	bl	8002858 <TP_Init>
	//KEY_Init();
	//LED_Init();
	DrawTestPage("Touch test");
 8002ca2:	487a      	ldr	r0, [pc, #488]	@ (8002e8c <Touch_Test+0x204>)
 8002ca4:	f7ff ffa6 	bl	8002bf4 <DrawTestPage>
	LCD_ShowString(lcddev.width-24,0,16,"RST",1);	//Show clear screen area
 8002ca8:	4b79      	ldr	r3, [pc, #484]	@ (8002e90 <Touch_Test+0x208>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	3b18      	subs	r3, #24
 8002cae:	b298      	uxth	r0, r3
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	4b77      	ldr	r3, [pc, #476]	@ (8002e94 <Touch_Test+0x20c>)
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	2100      	movs	r1, #0
 8002cba:	f7fe fc89 	bl	80015d0 <LCD_ShowString>
	POINT_COLOR=RED;
 8002cbe:	4b76      	ldr	r3, [pc, #472]	@ (8002e98 <Touch_Test+0x210>)
 8002cc0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002cc4:	801a      	strh	r2, [r3, #0]
	LCD_Fill(lcddev.width-52,2,lcddev.width-50+20,18,RED); 
 8002cc6:	4b72      	ldr	r3, [pc, #456]	@ (8002e90 <Touch_Test+0x208>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	3b34      	subs	r3, #52	@ 0x34
 8002ccc:	b298      	uxth	r0, r3
 8002cce:	4b70      	ldr	r3, [pc, #448]	@ (8002e90 <Touch_Test+0x208>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	3b1e      	subs	r3, #30
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2312      	movs	r3, #18
 8002cde:	2102      	movs	r1, #2
 8002ce0:	f7fe f9d2 	bl	8001088 <LCD_Fill>

	while(1)
	{
	 	//key=KEY_Scan(1);
		tp_dev.scan(0); 		 
 8002ce4:	4b6d      	ldr	r3, [pc, #436]	@ (8002e9c <Touch_Test+0x214>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2000      	movs	r0, #0
 8002cea:	4798      	blx	r3
		if(tp_dev.sta&TP_PRES_DOWN)			//Touch screen is pressed
 8002cec:	4b6b      	ldr	r3, [pc, #428]	@ (8002e9c <Touch_Test+0x214>)
 8002cee:	7d1b      	ldrb	r3, [r3, #20]
 8002cf0:	b25b      	sxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f280 808c 	bge.w	8002e10 <Touch_Test+0x188>
		{	
		 	if(tp_dev.x<lcddev.width&&tp_dev.y<lcddev.height)
 8002cf8:	4b68      	ldr	r3, [pc, #416]	@ (8002e9c <Touch_Test+0x214>)
 8002cfa:	8a1a      	ldrh	r2, [r3, #16]
 8002cfc:	4b64      	ldr	r3, [pc, #400]	@ (8002e90 <Touch_Test+0x208>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f080 8088 	bcs.w	8002e16 <Touch_Test+0x18e>
 8002d06:	4b65      	ldr	r3, [pc, #404]	@ (8002e9c <Touch_Test+0x214>)
 8002d08:	8a5a      	ldrh	r2, [r3, #18]
 8002d0a:	4b61      	ldr	r3, [pc, #388]	@ (8002e90 <Touch_Test+0x208>)
 8002d0c:	885b      	ldrh	r3, [r3, #2]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	f080 8081 	bcs.w	8002e16 <Touch_Test+0x18e>
			{	
				if(tp_dev.x>(lcddev.width-24)&&tp_dev.y<16)
 8002d14:	4b5e      	ldr	r3, [pc, #376]	@ (8002e90 <Touch_Test+0x208>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	3b17      	subs	r3, #23
 8002d1a:	4a60      	ldr	r2, [pc, #384]	@ (8002e9c <Touch_Test+0x214>)
 8002d1c:	8a12      	ldrh	r2, [r2, #16]
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	dc24      	bgt.n	8002d6c <Touch_Test+0xe4>
 8002d22:	4b5e      	ldr	r3, [pc, #376]	@ (8002e9c <Touch_Test+0x214>)
 8002d24:	8a5b      	ldrh	r3, [r3, #18]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	d820      	bhi.n	8002d6c <Touch_Test+0xe4>
				{
					DrawTestPage("Touch test");	//Clear
 8002d2a:	4858      	ldr	r0, [pc, #352]	@ (8002e8c <Touch_Test+0x204>)
 8002d2c:	f7ff ff62 	bl	8002bf4 <DrawTestPage>
					LCD_ShowString(lcddev.width-24,0,16,"RST",1);	//Show clear screen area
 8002d30:	4b57      	ldr	r3, [pc, #348]	@ (8002e90 <Touch_Test+0x208>)
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	3b18      	subs	r3, #24
 8002d36:	b298      	uxth	r0, r3
 8002d38:	2301      	movs	r3, #1
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	4b55      	ldr	r3, [pc, #340]	@ (8002e94 <Touch_Test+0x20c>)
 8002d3e:	2210      	movs	r2, #16
 8002d40:	2100      	movs	r1, #0
 8002d42:	f7fe fc45 	bl	80015d0 <LCD_ShowString>
					POINT_COLOR=colorTemp;
 8002d46:	4a54      	ldr	r2, [pc, #336]	@ (8002e98 <Touch_Test+0x210>)
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	8013      	strh	r3, [r2, #0]
					LCD_Fill(lcddev.width-52,2,lcddev.width-50+20,18,POINT_COLOR); 
 8002d4c:	4b50      	ldr	r3, [pc, #320]	@ (8002e90 <Touch_Test+0x208>)
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	3b34      	subs	r3, #52	@ 0x34
 8002d52:	b298      	uxth	r0, r3
 8002d54:	4b4e      	ldr	r3, [pc, #312]	@ (8002e90 <Touch_Test+0x208>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	3b1e      	subs	r3, #30
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	4b4e      	ldr	r3, [pc, #312]	@ (8002e98 <Touch_Test+0x210>)
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	2312      	movs	r3, #18
 8002d64:	2102      	movs	r1, #2
 8002d66:	f7fe f98f 	bl	8001088 <LCD_Fill>
 8002d6a:	e054      	b.n	8002e16 <Touch_Test+0x18e>
				}
				else if((tp_dev.x>(lcddev.width-60)&&tp_dev.x<(lcddev.width-50+20))&&tp_dev.y<20)
 8002d6c:	4b48      	ldr	r3, [pc, #288]	@ (8002e90 <Touch_Test+0x208>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	3b3b      	subs	r3, #59	@ 0x3b
 8002d72:	4a4a      	ldr	r2, [pc, #296]	@ (8002e9c <Touch_Test+0x214>)
 8002d74:	8a12      	ldrh	r2, [r2, #16]
 8002d76:	4293      	cmp	r3, r2
 8002d78:	dc40      	bgt.n	8002dfc <Touch_Test+0x174>
 8002d7a:	4b48      	ldr	r3, [pc, #288]	@ (8002e9c <Touch_Test+0x214>)
 8002d7c:	8a1b      	ldrh	r3, [r3, #16]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4b43      	ldr	r3, [pc, #268]	@ (8002e90 <Touch_Test+0x208>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	3b1e      	subs	r3, #30
 8002d86:	429a      	cmp	r2, r3
 8002d88:	da38      	bge.n	8002dfc <Touch_Test+0x174>
 8002d8a:	4b44      	ldr	r3, [pc, #272]	@ (8002e9c <Touch_Test+0x214>)
 8002d8c:	8a5b      	ldrh	r3, [r3, #18]
 8002d8e:	2b13      	cmp	r3, #19
 8002d90:	d834      	bhi.n	8002dfc <Touch_Test+0x174>
				{
				LCD_Fill(lcddev.width-52,2,lcddev.width-50+20,18,ColorTab[j%5]); 
 8002d92:	4b3f      	ldr	r3, [pc, #252]	@ (8002e90 <Touch_Test+0x208>)
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	3b34      	subs	r3, #52	@ 0x34
 8002d98:	b298      	uxth	r0, r3
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e90 <Touch_Test+0x208>)
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	3b1e      	subs	r3, #30
 8002da0:	b29c      	uxth	r4, r3
 8002da2:	88ba      	ldrh	r2, [r7, #4]
 8002da4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea0 <Touch_Test+0x218>)
 8002da6:	fba3 1302 	umull	r1, r3, r3, r2
 8002daa:	0899      	lsrs	r1, r3, #2
 8002dac:	460b      	mov	r3, r1
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ea4 <Touch_Test+0x21c>)
 8002dba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	2312      	movs	r3, #18
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	f7fe f95f 	bl	8001088 <LCD_Fill>
				POINT_COLOR=ColorTab[(j++)%5];
 8002dca:	88ba      	ldrh	r2, [r7, #4]
 8002dcc:	1c53      	adds	r3, r2, #1
 8002dce:	80bb      	strh	r3, [r7, #4]
 8002dd0:	4b33      	ldr	r3, [pc, #204]	@ (8002ea0 <Touch_Test+0x218>)
 8002dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd6:	0899      	lsrs	r1, r3, #2
 8002dd8:	460b      	mov	r3, r1
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea4 <Touch_Test+0x21c>)
 8002de6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002dea:	4b2b      	ldr	r3, [pc, #172]	@ (8002e98 <Touch_Test+0x210>)
 8002dec:	801a      	strh	r2, [r3, #0]
				colorTemp=POINT_COLOR;
 8002dee:	4b2a      	ldr	r3, [pc, #168]	@ (8002e98 <Touch_Test+0x210>)
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	807b      	strh	r3, [r7, #2]
				delay_ms(10);
 8002df4:	200a      	movs	r0, #10
 8002df6:	f7ff fd9d 	bl	8002934 <delay_ms>
 8002dfa:	e00c      	b.n	8002e16 <Touch_Test+0x18e>
				}

				else TP_Draw_Big_Point(tp_dev.x,tp_dev.y,POINT_COLOR);		//Draw a picture
 8002dfc:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <Touch_Test+0x214>)
 8002dfe:	8a1b      	ldrh	r3, [r3, #16]
 8002e00:	4a26      	ldr	r2, [pc, #152]	@ (8002e9c <Touch_Test+0x214>)
 8002e02:	8a51      	ldrh	r1, [r2, #18]
 8002e04:	4a24      	ldr	r2, [pc, #144]	@ (8002e98 <Touch_Test+0x210>)
 8002e06:	8812      	ldrh	r2, [r2, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe ff5d 	bl	8001cc8 <TP_Draw_Big_Point>
 8002e0e:	e002      	b.n	8002e16 <Touch_Test+0x18e>
			}
		}else delay_ms(10);	//When no button is pressed
 8002e10:	200a      	movs	r0, #10
 8002e12:	f7ff fd8f 	bl	8002934 <delay_ms>
		if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == (GPIO_PIN_RESET))	//If Key right is pressed, the calibration procedure will be executed.
 8002e16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e1a:	4823      	ldr	r0, [pc, #140]	@ (8002ea8 <Touch_Test+0x220>)
 8002e1c:	f000 fb62 	bl	80034e4 <HAL_GPIO_ReadPin>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d127      	bne.n	8002e76 <Touch_Test+0x1ee>
		{

			LCD_Clear(WHITE);	//clear screen
 8002e26:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002e2a:	f7fd fef7 	bl	8000c1c <LCD_Clear>
		    TP_Adjust();  		//Screen calibration
 8002e2e:	f7ff f8d7 	bl	8001fe0 <TP_Adjust>
			TP_Save_Adjdata();	 
 8002e32:	f7ff f809 	bl	8001e48 <TP_Save_Adjdata>
			DrawTestPage("Touch test");
 8002e36:	4815      	ldr	r0, [pc, #84]	@ (8002e8c <Touch_Test+0x204>)
 8002e38:	f7ff fedc 	bl	8002bf4 <DrawTestPage>
			LCD_ShowString(lcddev.width-24,0,16,"RST",1);	//Show clear screen area
 8002e3c:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <Touch_Test+0x208>)
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	3b18      	subs	r3, #24
 8002e42:	b298      	uxth	r0, r3
 8002e44:	2301      	movs	r3, #1
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <Touch_Test+0x20c>)
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	f7fe fbbf 	bl	80015d0 <LCD_ShowString>
			POINT_COLOR=colorTemp;
 8002e52:	4a11      	ldr	r2, [pc, #68]	@ (8002e98 <Touch_Test+0x210>)
 8002e54:	887b      	ldrh	r3, [r7, #2]
 8002e56:	8013      	strh	r3, [r2, #0]
			LCD_Fill(lcddev.width-52,2,lcddev.width-50+20,18,POINT_COLOR); 
 8002e58:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <Touch_Test+0x208>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	3b34      	subs	r3, #52	@ 0x34
 8002e5e:	b298      	uxth	r0, r3
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <Touch_Test+0x208>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	3b1e      	subs	r3, #30
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <Touch_Test+0x210>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2312      	movs	r3, #18
 8002e70:	2102      	movs	r1, #2
 8002e72:	f7fe f909 	bl	8001088 <LCD_Fill>
		}
		i++;
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	80fb      	strh	r3, [r7, #6]
		if(i==30)
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	2b1e      	cmp	r3, #30
 8002e80:	f47f af30 	bne.w	8002ce4 <Touch_Test+0x5c>
		{
			i=0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	80fb      	strh	r3, [r7, #6]
		tp_dev.scan(0); 		 
 8002e88:	e72c      	b.n	8002ce4 <Touch_Test+0x5c>
 8002e8a:	bf00      	nop
 8002e8c:	08004d7c 	.word	0x08004d7c
 8002e90:	200000c4 	.word	0x200000c4
 8002e94:	08004d88 	.word	0x08004d88
 8002e98:	200000d4 	.word	0x200000d4
 8002e9c:	20000004 	.word	0x20000004
 8002ea0:	cccccccd 	.word	0xcccccccd
 8002ea4:	20000034 	.word	0x20000034
 8002ea8:	48000800 	.word	0x48000800

08002eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002eac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ee4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002eb0:	f7ff fe8e 	bl	8002bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb4:	480c      	ldr	r0, [pc, #48]	@ (8002ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eb6:	490d      	ldr	r1, [pc, #52]	@ (8002eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef0 <LoopForever+0xe>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ebc:	e002      	b.n	8002ec4 <LoopCopyDataInit>

08002ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec2:	3304      	adds	r3, #4

08002ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec8:	d3f9      	bcc.n	8002ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ef8 <LoopForever+0x16>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed0:	e001      	b.n	8002ed6 <LoopFillZerobss>

08002ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed4:	3204      	adds	r2, #4

08002ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed8:	d3fb      	bcc.n	8002ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eda:	f001 fd65 	bl	80049a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ede:	f7ff fd41 	bl	8002964 <main>

08002ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ee2:	e7fe      	b.n	8002ee2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ee4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002ef0:	08005830 	.word	0x08005830
  ldr r2, =_sbss
 8002ef4:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002ef8:	20000218 	.word	0x20000218

08002efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC1_2_IRQHandler>
	...

08002f00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f04:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <HAL_Init+0x28>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a07      	ldr	r2, [pc, #28]	@ (8002f28 <HAL_Init+0x28>)
 8002f0a:	f043 0310 	orr.w	r3, r3, #16
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f10:	2003      	movs	r0, #3
 8002f12:	f000 f90d 	bl	8003130 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f16:	200f      	movs	r0, #15
 8002f18:	f000 f808 	bl	8002f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f1c:	f7ff fe04 	bl	8002b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40022000 	.word	0x40022000

08002f2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f34:	4b12      	ldr	r3, [pc, #72]	@ (8002f80 <HAL_InitTick+0x54>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <HAL_InitTick+0x58>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f917 	bl	800317e <HAL_SYSTICK_Config>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00e      	b.n	8002f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b0f      	cmp	r3, #15
 8002f5e:	d80a      	bhi.n	8002f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f60:	2200      	movs	r2, #0
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	f000 f8ed 	bl	8003146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f6c:	4a06      	ldr	r2, [pc, #24]	@ (8002f88 <HAL_InitTick+0x5c>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e000      	b.n	8002f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000030 	.word	0x20000030
 8002f84:	20000044 	.word	0x20000044
 8002f88:	20000040 	.word	0x20000040

08002f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f90:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <HAL_IncTick+0x20>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_IncTick+0x24>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <HAL_IncTick+0x24>)
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000044 	.word	0x20000044
 8002fb0:	200000dc 	.word	0x200000dc

08002fb4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002fb8:	4b03      	ldr	r3, [pc, #12]	@ (8002fc8 <HAL_GetTick+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	200000dc 	.word	0x200000dc

08002fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffe:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60d3      	str	r3, [r2, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003018:	4b04      	ldr	r3, [pc, #16]	@ (800302c <__NVIC_GetPriorityGrouping+0x18>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 0307 	and.w	r3, r3, #7
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	6039      	str	r1, [r7, #0]
 800303a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003040:	2b00      	cmp	r3, #0
 8003042:	db0a      	blt.n	800305a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	490c      	ldr	r1, [pc, #48]	@ (800307c <__NVIC_SetPriority+0x4c>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	0112      	lsls	r2, r2, #4
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	440b      	add	r3, r1
 8003054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003058:	e00a      	b.n	8003070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4908      	ldr	r1, [pc, #32]	@ (8003080 <__NVIC_SetPriority+0x50>)
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	3b04      	subs	r3, #4
 8003068:	0112      	lsls	r2, r2, #4
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	440b      	add	r3, r1
 800306e:	761a      	strb	r2, [r3, #24]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000e100 	.word	0xe000e100
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	@ 0x24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f1c3 0307 	rsb	r3, r3, #7
 800309e:	2b04      	cmp	r3, #4
 80030a0:	bf28      	it	cs
 80030a2:	2304      	movcs	r3, #4
 80030a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d902      	bls.n	80030b4 <NVIC_EncodePriority+0x30>
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3b03      	subs	r3, #3
 80030b2:	e000      	b.n	80030b6 <NVIC_EncodePriority+0x32>
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	401a      	ands	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030cc:	f04f 31ff 	mov.w	r1, #4294967295
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	43d9      	mvns	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	4313      	orrs	r3, r2
         );
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	@ 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030fc:	d301      	bcc.n	8003102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fe:	2301      	movs	r3, #1
 8003100:	e00f      	b.n	8003122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003102:	4a0a      	ldr	r2, [pc, #40]	@ (800312c <SysTick_Config+0x40>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800310a:	210f      	movs	r1, #15
 800310c:	f04f 30ff 	mov.w	r0, #4294967295
 8003110:	f7ff ff8e 	bl	8003030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003114:	4b05      	ldr	r3, [pc, #20]	@ (800312c <SysTick_Config+0x40>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800311a:	4b04      	ldr	r3, [pc, #16]	@ (800312c <SysTick_Config+0x40>)
 800311c:	2207      	movs	r2, #7
 800311e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	e000e010 	.word	0xe000e010

08003130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ff47 	bl	8002fcc <__NVIC_SetPriorityGrouping>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	4603      	mov	r3, r0
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003158:	f7ff ff5c 	bl	8003014 <__NVIC_GetPriorityGrouping>
 800315c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	6978      	ldr	r0, [r7, #20]
 8003164:	f7ff ff8e 	bl	8003084 <NVIC_EncodePriority>
 8003168:	4602      	mov	r2, r0
 800316a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff5d 	bl	8003030 <__NVIC_SetPriority>
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffb0 	bl	80030ec <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d106      	bne.n	80031b4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80031a6:	4b09      	ldr	r3, [pc, #36]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a08      	ldr	r2, [pc, #32]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80031b2:	e005      	b.n	80031c0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80031b4:	4b05      	ldr	r3, [pc, #20]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a04      	ldr	r2, [pc, #16]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80031ba:	f023 0304 	bic.w	r3, r3, #4
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000e010 	.word	0xe000e010

080031d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031de:	e160      	b.n	80034a2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	2101      	movs	r1, #1
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	4013      	ands	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8152 	beq.w	800349c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d005      	beq.n	8003210 <HAL_GPIO_Init+0x40>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d130      	bne.n	8003272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003246:	2201      	movs	r2, #1
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	f003 0201 	and.w	r2, r3, #1
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b03      	cmp	r3, #3
 800327c:	d017      	beq.n	80032ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	2203      	movs	r2, #3
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d123      	bne.n	8003302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	08da      	lsrs	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3208      	adds	r2, #8
 80032c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	220f      	movs	r2, #15
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4013      	ands	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	08da      	lsrs	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3208      	adds	r2, #8
 80032fc:	6939      	ldr	r1, [r7, #16]
 80032fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	2203      	movs	r2, #3
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0203 	and.w	r2, r3, #3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80ac 	beq.w	800349c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003344:	4b5e      	ldr	r3, [pc, #376]	@ (80034c0 <HAL_GPIO_Init+0x2f0>)
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	4a5d      	ldr	r2, [pc, #372]	@ (80034c0 <HAL_GPIO_Init+0x2f0>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6193      	str	r3, [r2, #24]
 8003350:	4b5b      	ldr	r3, [pc, #364]	@ (80034c0 <HAL_GPIO_Init+0x2f0>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800335c:	4a59      	ldr	r2, [pc, #356]	@ (80034c4 <HAL_GPIO_Init+0x2f4>)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	3302      	adds	r3, #2
 8003364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	220f      	movs	r2, #15
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4013      	ands	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003386:	d025      	beq.n	80033d4 <HAL_GPIO_Init+0x204>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a4f      	ldr	r2, [pc, #316]	@ (80034c8 <HAL_GPIO_Init+0x2f8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d01f      	beq.n	80033d0 <HAL_GPIO_Init+0x200>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a4e      	ldr	r2, [pc, #312]	@ (80034cc <HAL_GPIO_Init+0x2fc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d019      	beq.n	80033cc <HAL_GPIO_Init+0x1fc>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a4d      	ldr	r2, [pc, #308]	@ (80034d0 <HAL_GPIO_Init+0x300>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <HAL_GPIO_Init+0x1f8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a4c      	ldr	r2, [pc, #304]	@ (80034d4 <HAL_GPIO_Init+0x304>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00d      	beq.n	80033c4 <HAL_GPIO_Init+0x1f4>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a4b      	ldr	r2, [pc, #300]	@ (80034d8 <HAL_GPIO_Init+0x308>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d007      	beq.n	80033c0 <HAL_GPIO_Init+0x1f0>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a4a      	ldr	r2, [pc, #296]	@ (80034dc <HAL_GPIO_Init+0x30c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_GPIO_Init+0x1ec>
 80033b8:	2306      	movs	r3, #6
 80033ba:	e00c      	b.n	80033d6 <HAL_GPIO_Init+0x206>
 80033bc:	2307      	movs	r3, #7
 80033be:	e00a      	b.n	80033d6 <HAL_GPIO_Init+0x206>
 80033c0:	2305      	movs	r3, #5
 80033c2:	e008      	b.n	80033d6 <HAL_GPIO_Init+0x206>
 80033c4:	2304      	movs	r3, #4
 80033c6:	e006      	b.n	80033d6 <HAL_GPIO_Init+0x206>
 80033c8:	2303      	movs	r3, #3
 80033ca:	e004      	b.n	80033d6 <HAL_GPIO_Init+0x206>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e002      	b.n	80033d6 <HAL_GPIO_Init+0x206>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_GPIO_Init+0x206>
 80033d4:	2300      	movs	r3, #0
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	f002 0203 	and.w	r2, r2, #3
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	4093      	lsls	r3, r2
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033e6:	4937      	ldr	r1, [pc, #220]	@ (80034c4 <HAL_GPIO_Init+0x2f4>)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	3302      	adds	r3, #2
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f4:	4b3a      	ldr	r3, [pc, #232]	@ (80034e0 <HAL_GPIO_Init+0x310>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003418:	4a31      	ldr	r2, [pc, #196]	@ (80034e0 <HAL_GPIO_Init+0x310>)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800341e:	4b30      	ldr	r3, [pc, #192]	@ (80034e0 <HAL_GPIO_Init+0x310>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003442:	4a27      	ldr	r2, [pc, #156]	@ (80034e0 <HAL_GPIO_Init+0x310>)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003448:	4b25      	ldr	r3, [pc, #148]	@ (80034e0 <HAL_GPIO_Init+0x310>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	43db      	mvns	r3, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800346c:	4a1c      	ldr	r2, [pc, #112]	@ (80034e0 <HAL_GPIO_Init+0x310>)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003472:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <HAL_GPIO_Init+0x310>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	43db      	mvns	r3, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003496:	4a12      	ldr	r2, [pc, #72]	@ (80034e0 <HAL_GPIO_Init+0x310>)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3301      	adds	r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f47f ae97 	bne.w	80031e0 <HAL_GPIO_Init+0x10>
  }
}
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010000 	.word	0x40010000
 80034c8:	48000400 	.word	0x48000400
 80034cc:	48000800 	.word	0x48000800
 80034d0:	48000c00 	.word	0x48000c00
 80034d4:	48001000 	.word	0x48001000
 80034d8:	48001400 	.word	0x48001400
 80034dc:	48001800 	.word	0x48001800
 80034e0:	40010400 	.word	0x40010400

080034e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	887b      	ldrh	r3, [r7, #2]
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	e001      	b.n	8003506 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003506:	7bfb      	ldrb	r3, [r7, #15]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003530:	e002      	b.n	8003538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800354a:	af00      	add	r7, sp, #0
 800354c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003550:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003554:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003556:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800355a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f001 b83a 	b.w	80045de <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800356e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 816f 	beq.w	800385e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003580:	4bb5      	ldr	r3, [pc, #724]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b04      	cmp	r3, #4
 800358a:	d00c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800358c:	4bb2      	ldr	r3, [pc, #712]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d15c      	bne.n	8003652 <HAL_RCC_OscConfig+0x10e>
 8003598:	4baf      	ldr	r3, [pc, #700]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a4:	d155      	bne.n	8003652 <HAL_RCC_OscConfig+0x10e>
 80035a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035aa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d102      	bne.n	80035d8 <HAL_RCC_OscConfig+0x94>
 80035d2:	4ba1      	ldr	r3, [pc, #644]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	e015      	b.n	8003604 <HAL_RCC_OscConfig+0xc0>
 80035d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035dc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80035ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035f0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80035f4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003600:	4b95      	ldr	r3, [pc, #596]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003608:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800360c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003610:	fa92 f2a2 	rbit	r2, r2
 8003614:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8003618:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800361c:	fab2 f282 	clz	r2, r2
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f042 0220 	orr.w	r2, r2, #32
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	f002 021f 	and.w	r2, r2, #31
 800362c:	2101      	movs	r1, #1
 800362e:	fa01 f202 	lsl.w	r2, r1, r2
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8111 	beq.w	800385c <HAL_RCC_OscConfig+0x318>
 800363a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800363e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 8108 	bne.w	800385c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f000 bfc6 	b.w	80045de <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003656:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003662:	d106      	bne.n	8003672 <HAL_RCC_OscConfig+0x12e>
 8003664:	4b7c      	ldr	r3, [pc, #496]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a7b      	ldr	r2, [pc, #492]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 800366a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	e036      	b.n	80036e0 <HAL_RCC_OscConfig+0x19c>
 8003672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003676:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x158>
 8003682:	4b75      	ldr	r3, [pc, #468]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a74      	ldr	r2, [pc, #464]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 8003688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b72      	ldr	r3, [pc, #456]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a71      	ldr	r2, [pc, #452]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 8003694:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e021      	b.n	80036e0 <HAL_RCC_OscConfig+0x19c>
 800369c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x184>
 80036ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a69      	ldr	r2, [pc, #420]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 80036b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b67      	ldr	r3, [pc, #412]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a66      	ldr	r2, [pc, #408]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0x19c>
 80036c8:	4b63      	ldr	r3, [pc, #396]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a62      	ldr	r2, [pc, #392]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 80036ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b60      	ldr	r3, [pc, #384]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5f      	ldr	r2, [pc, #380]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 80036da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036de:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d059      	beq.n	80037a4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7ff fc60 	bl	8002fb4 <HAL_GetTick>
 80036f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036fa:	f7ff fc5b 	bl	8002fb4 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	@ 0x64
 8003708:	d902      	bls.n	8003710 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	f000 bf67 	b.w	80045de <HAL_RCC_OscConfig+0x109a>
 8003710:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003714:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003724:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <HAL_RCC_OscConfig+0x1fe>
 800373c:	4b46      	ldr	r3, [pc, #280]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	e015      	b.n	800376e <HAL_RCC_OscConfig+0x22a>
 8003742:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003746:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003756:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800375a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800375e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800376a:	4b3b      	ldr	r3, [pc, #236]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003772:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003776:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800377a:	fa92 f2a2 	rbit	r2, r2
 800377e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8003782:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003786:	fab2 f282 	clz	r2, r2
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	f042 0220 	orr.w	r2, r2, #32
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	f002 021f 	and.w	r2, r2, #31
 8003796:	2101      	movs	r1, #1
 8003798:	fa01 f202 	lsl.w	r2, r1, r2
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ab      	beq.n	80036fa <HAL_RCC_OscConfig+0x1b6>
 80037a2:	e05c      	b.n	800385e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7ff fc06 	bl	8002fb4 <HAL_GetTick>
 80037a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ae:	f7ff fc01 	bl	8002fb4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	@ 0x64
 80037bc:	d902      	bls.n	80037c4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	f000 bf0d 	b.w	80045de <HAL_RCC_OscConfig+0x109a>
 80037c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037c8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80037d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_OscConfig+0x2b2>
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0x2de>
 80037f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037fa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800380a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800380e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003812:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800381e:	4b0e      	ldr	r3, [pc, #56]	@ (8003858 <HAL_RCC_OscConfig+0x314>)
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003826:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800382a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800382e:	fa92 f2a2 	rbit	r2, r2
 8003832:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003836:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800383a:	fab2 f282 	clz	r2, r2
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	f042 0220 	orr.w	r2, r2, #32
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	f002 021f 	and.w	r2, r2, #31
 800384a:	2101      	movs	r1, #1
 800384c:	fa01 f202 	lsl.w	r2, r1, r2
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ab      	bne.n	80037ae <HAL_RCC_OscConfig+0x26a>
 8003856:	e002      	b.n	800385e <HAL_RCC_OscConfig+0x31a>
 8003858:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003862:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 817f 	beq.w	8003b72 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003874:	4ba7      	ldr	r3, [pc, #668]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00c      	beq.n	800389a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003880:	4ba4      	ldr	r3, [pc, #656]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 030c 	and.w	r3, r3, #12
 8003888:	2b08      	cmp	r3, #8
 800388a:	d173      	bne.n	8003974 <HAL_RCC_OscConfig+0x430>
 800388c:	4ba1      	ldr	r3, [pc, #644]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003898:	d16c      	bne.n	8003974 <HAL_RCC_OscConfig+0x430>
 800389a:	2302      	movs	r3, #2
 800389c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80038ac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b0:	fab3 f383 	clz	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d102      	bne.n	80038ca <HAL_RCC_OscConfig+0x386>
 80038c4:	4b93      	ldr	r3, [pc, #588]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	e013      	b.n	80038f2 <HAL_RCC_OscConfig+0x3ae>
 80038ca:	2302      	movs	r3, #2
 80038cc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80038dc:	2302      	movs	r3, #2
 80038de:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80038e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80038ee:	4b89      	ldr	r3, [pc, #548]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	2202      	movs	r2, #2
 80038f4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80038f8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80038fc:	fa92 f2a2 	rbit	r2, r2
 8003900:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003904:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003908:	fab2 f282 	clz	r2, r2
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	f042 0220 	orr.w	r2, r2, #32
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	f002 021f 	and.w	r2, r2, #31
 8003918:	2101      	movs	r1, #1
 800391a:	fa01 f202 	lsl.w	r2, r1, r2
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCC_OscConfig+0x3f6>
 8003924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003928:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d002      	beq.n	800393a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f000 be52 	b.w	80045de <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393a:	4b76      	ldr	r3, [pc, #472]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003942:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003946:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	21f8      	movs	r1, #248	@ 0xf8
 8003950:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003958:	fa91 f1a1 	rbit	r1, r1
 800395c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003960:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003964:	fab1 f181 	clz	r1, r1
 8003968:	b2c9      	uxtb	r1, r1
 800396a:	408b      	lsls	r3, r1
 800396c:	4969      	ldr	r1, [pc, #420]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e0fe      	b.n	8003b72 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003978:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8088 	beq.w	8003a96 <HAL_RCC_OscConfig+0x552>
 8003986:	2301      	movs	r3, #1
 8003988:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003990:	fa93 f3a3 	rbit	r3, r3
 8003994:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003998:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399c:	fab3 f383 	clz	r3, r3
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039a6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	461a      	mov	r2, r3
 80039ae:	2301      	movs	r3, #1
 80039b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b2:	f7ff faff 	bl	8002fb4 <HAL_GetTick>
 80039b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039bc:	f7ff fafa 	bl	8002fb4 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d902      	bls.n	80039d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	f000 be06 	b.w	80045de <HAL_RCC_OscConfig+0x109a>
 80039d2:	2302      	movs	r3, #2
 80039d4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80039e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d102      	bne.n	8003a02 <HAL_RCC_OscConfig+0x4be>
 80039fc:	4b45      	ldr	r3, [pc, #276]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	e013      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e6>
 8003a02:	2302      	movs	r3, #2
 8003a04:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003a14:	2302      	movs	r3, #2
 8003a16:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003a1a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003a26:	4b3b      	ldr	r3, [pc, #236]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003a30:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003a34:	fa92 f2a2 	rbit	r2, r2
 8003a38:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003a3c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003a40:	fab2 f282 	clz	r2, r2
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	f042 0220 	orr.w	r2, r2, #32
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	f002 021f 	and.w	r2, r2, #31
 8003a50:	2101      	movs	r1, #1
 8003a52:	fa01 f202 	lsl.w	r2, r1, r2
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0af      	beq.n	80039bc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	21f8      	movs	r1, #248	@ 0xf8
 8003a72:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003a7a:	fa91 f1a1 	rbit	r1, r1
 8003a7e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003a82:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003a86:	fab1 f181 	clz	r1, r1
 8003a8a:	b2c9      	uxtb	r1, r1
 8003a8c:	408b      	lsls	r3, r1
 8003a8e:	4921      	ldr	r1, [pc, #132]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	600b      	str	r3, [r1, #0]
 8003a94:	e06d      	b.n	8003b72 <HAL_RCC_OscConfig+0x62e>
 8003a96:	2301      	movs	r3, #1
 8003a98:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003aa8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ab6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	461a      	mov	r2, r3
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac2:	f7ff fa77 	bl	8002fb4 <HAL_GetTick>
 8003ac6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003acc:	f7ff fa72 	bl	8002fb4 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d902      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	f000 bd7e 	b.w	80045de <HAL_RCC_OscConfig+0x109a>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003af4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af8:	fab3 f383 	clz	r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d105      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5d4>
 8003b0c:	4b01      	ldr	r3, [pc, #4]	@ (8003b14 <HAL_RCC_OscConfig+0x5d0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	e016      	b.n	8003b40 <HAL_RCC_OscConfig+0x5fc>
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003b30:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003b3c:	4bbf      	ldr	r3, [pc, #764]	@ (8003e3c <HAL_RCC_OscConfig+0x8f8>)
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	2202      	movs	r2, #2
 8003b42:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003b46:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003b4a:	fa92 f2a2 	rbit	r2, r2
 8003b4e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003b52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003b56:	fab2 f282 	clz	r2, r2
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f042 0220 	orr.w	r2, r2, #32
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f002 021f 	and.w	r2, r2, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1ac      	bne.n	8003acc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8113 	beq.w	8003dae <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d07c      	beq.n	8003c92 <HAL_RCC_OscConfig+0x74e>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003baa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4ba2      	ldr	r3, [pc, #648]	@ (8003e40 <HAL_RCC_OscConfig+0x8fc>)
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7ff f9f7 	bl	8002fb4 <HAL_GetTick>
 8003bc6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7ff f9f2 	bl	8002fb4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d902      	bls.n	8003be2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	f000 bcfe 	b.w	80045de <HAL_RCC_OscConfig+0x109a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bec:	fa93 f2a3 	rbit	r2, r3
 8003bf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bf4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c02:	2202      	movs	r2, #2
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fa93 f2a3 	rbit	r2, r3
 8003c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c26:	2202      	movs	r2, #2
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	fa93 f2a3 	rbit	r2, r3
 8003c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003c40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c42:	4b7e      	ldr	r3, [pc, #504]	@ (8003e3c <HAL_RCC_OscConfig+0x8f8>)
 8003c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c4e:	2102      	movs	r1, #2
 8003c50:	6019      	str	r1, [r3, #0]
 8003c52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c56:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	fa93 f1a3 	rbit	r1, r3
 8003c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c64:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c68:	6019      	str	r1, [r3, #0]
  return result;
 8003c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c6e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d09d      	beq.n	8003bcc <HAL_RCC_OscConfig+0x688>
 8003c90:	e08d      	b.n	8003dae <HAL_RCC_OscConfig+0x86a>
 8003c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ca2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	fa93 f2a3 	rbit	r2, r3
 8003cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003cb4:	601a      	str	r2, [r3, #0]
  return result;
 8003cb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003cbe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc0:	fab3 f383 	clz	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4b5d      	ldr	r3, [pc, #372]	@ (8003e40 <HAL_RCC_OscConfig+0x8fc>)
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd4:	f7ff f96e 	bl	8002fb4 <HAL_GetTick>
 8003cd8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cdc:	e00a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cde:	f7ff f969 	bl	8002fb4 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d902      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	f000 bc75 	b.w	80045de <HAL_RCC_OscConfig+0x109a>
 8003cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cf8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d04:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	fa93 f2a3 	rbit	r2, r3
 8003d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003d20:	2202      	movs	r2, #2
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	fa93 f2a3 	rbit	r2, r3
 8003d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d40:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d44:	2202      	movs	r2, #2
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d4c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	fa93 f2a3 	rbit	r2, r3
 8003d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d5a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d5e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d60:	4b36      	ldr	r3, [pc, #216]	@ (8003e3c <HAL_RCC_OscConfig+0x8f8>)
 8003d62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d68:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	6019      	str	r1, [r3, #0]
 8003d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d74:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	fa93 f1a3 	rbit	r1, r3
 8003d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d82:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003d86:	6019      	str	r1, [r3, #0]
  return result;
 8003d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d8c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	2101      	movs	r1, #1
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d197      	bne.n	8003cde <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003db2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 81a5 	beq.w	800410e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dca:	4b1c      	ldr	r3, [pc, #112]	@ (8003e3c <HAL_RCC_OscConfig+0x8f8>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d116      	bne.n	8003e04 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	4b19      	ldr	r3, [pc, #100]	@ (8003e3c <HAL_RCC_OscConfig+0x8f8>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4a18      	ldr	r2, [pc, #96]	@ (8003e3c <HAL_RCC_OscConfig+0x8f8>)
 8003ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de0:	61d3      	str	r3, [r2, #28]
 8003de2:	4b16      	ldr	r3, [pc, #88]	@ (8003e3c <HAL_RCC_OscConfig+0x8f8>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003dea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003df8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dfc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e04:	4b0f      	ldr	r3, [pc, #60]	@ (8003e44 <HAL_RCC_OscConfig+0x900>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d121      	bne.n	8003e54 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e10:	4b0c      	ldr	r3, [pc, #48]	@ (8003e44 <HAL_RCC_OscConfig+0x900>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0b      	ldr	r2, [pc, #44]	@ (8003e44 <HAL_RCC_OscConfig+0x900>)
 8003e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e1a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1c:	f7ff f8ca 	bl	8002fb4 <HAL_GetTick>
 8003e20:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e24:	e010      	b.n	8003e48 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e26:	f7ff f8c5 	bl	8002fb4 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	@ 0x64
 8003e34:	d908      	bls.n	8003e48 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e3d1      	b.n	80045de <HAL_RCC_OscConfig+0x109a>
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	10908120 	.word	0x10908120
 8003e44:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	4b8d      	ldr	r3, [pc, #564]	@ (8004080 <HAL_RCC_OscConfig+0xb3c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0e8      	beq.n	8003e26 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x92e>
 8003e64:	4b87      	ldr	r3, [pc, #540]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	4a86      	ldr	r2, [pc, #536]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6213      	str	r3, [r2, #32]
 8003e70:	e035      	b.n	8003ede <HAL_RCC_OscConfig+0x99a>
 8003e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x958>
 8003e82:	4b80      	ldr	r3, [pc, #512]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	4a7f      	ldr	r2, [pc, #508]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6213      	str	r3, [r2, #32]
 8003e8e:	4b7d      	ldr	r3, [pc, #500]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	4a7c      	ldr	r2, [pc, #496]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003e94:	f023 0304 	bic.w	r3, r3, #4
 8003e98:	6213      	str	r3, [r2, #32]
 8003e9a:	e020      	b.n	8003ede <HAL_RCC_OscConfig+0x99a>
 8003e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ea0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	d10c      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x982>
 8003eac:	4b75      	ldr	r3, [pc, #468]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4a74      	ldr	r2, [pc, #464]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003eb2:	f043 0304 	orr.w	r3, r3, #4
 8003eb6:	6213      	str	r3, [r2, #32]
 8003eb8:	4b72      	ldr	r3, [pc, #456]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	4a71      	ldr	r2, [pc, #452]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6213      	str	r3, [r2, #32]
 8003ec4:	e00b      	b.n	8003ede <HAL_RCC_OscConfig+0x99a>
 8003ec6:	4b6f      	ldr	r3, [pc, #444]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4a6e      	ldr	r2, [pc, #440]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	6213      	str	r3, [r2, #32]
 8003ed2:	4b6c      	ldr	r3, [pc, #432]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	4a6b      	ldr	r2, [pc, #428]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ee2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8081 	beq.w	8003ff2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef0:	f7ff f860 	bl	8002fb4 <HAL_GetTick>
 8003ef4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7ff f85b 	bl	8002fb4 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e365      	b.n	80045de <HAL_RCC_OscConfig+0x109a>
 8003f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f16:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f22:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	fa93 f2a3 	rbit	r2, r3
 8003f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f3a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003f3e:	2202      	movs	r2, #2
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f46:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	fa93 f2a3 	rbit	r2, r3
 8003f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f54:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f58:	601a      	str	r2, [r3, #0]
  return result;
 8003f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f5e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d102      	bne.n	8003f7e <HAL_RCC_OscConfig+0xa3a>
 8003f78:	4b42      	ldr	r3, [pc, #264]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	e013      	b.n	8003fa6 <HAL_RCC_OscConfig+0xa62>
 8003f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f82:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003f86:	2202      	movs	r2, #2
 8003f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f8e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	fa93 f2a3 	rbit	r2, r3
 8003f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f9c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	4b38      	ldr	r3, [pc, #224]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003faa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003fae:	2102      	movs	r1, #2
 8003fb0:	6011      	str	r1, [r2, #0]
 8003fb2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003fb6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	fa92 f1a2 	rbit	r1, r2
 8003fc0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003fc4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003fc8:	6011      	str	r1, [r2, #0]
  return result;
 8003fca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003fce:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	fab2 f282 	clz	r2, r2
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	f002 021f 	and.w	r2, r2, #31
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d084      	beq.n	8003efa <HAL_RCC_OscConfig+0x9b6>
 8003ff0:	e083      	b.n	80040fa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff2:	f7fe ffdf 	bl	8002fb4 <HAL_GetTick>
 8003ff6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ffc:	f7fe ffda 	bl	8002fb4 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400c:	4293      	cmp	r3, r2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e2e4      	b.n	80045de <HAL_RCC_OscConfig+0x109a>
 8004014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004018:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800401c:	2202      	movs	r2, #2
 800401e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004024:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	fa93 f2a3 	rbit	r2, r3
 800402e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004032:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800403c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004040:	2202      	movs	r2, #2
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004048:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	fa93 f2a3 	rbit	r2, r3
 8004052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004056:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800405a:	601a      	str	r2, [r3, #0]
  return result;
 800405c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004060:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004064:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f043 0302 	orr.w	r3, r3, #2
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d106      	bne.n	8004088 <HAL_RCC_OscConfig+0xb44>
 800407a:	4b02      	ldr	r3, [pc, #8]	@ (8004084 <HAL_RCC_OscConfig+0xb40>)
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	e017      	b.n	80040b0 <HAL_RCC_OscConfig+0xb6c>
 8004080:	40007000 	.word	0x40007000
 8004084:	40021000 	.word	0x40021000
 8004088:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800408c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004090:	2202      	movs	r2, #2
 8004092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004098:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	fa93 f2a3 	rbit	r2, r3
 80040a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040a6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	4bb3      	ldr	r3, [pc, #716]	@ (800437c <HAL_RCC_OscConfig+0xe38>)
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80040b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80040b8:	2102      	movs	r1, #2
 80040ba:	6011      	str	r1, [r2, #0]
 80040bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80040c0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	fa92 f1a2 	rbit	r1, r2
 80040ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80040ce:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80040d2:	6011      	str	r1, [r2, #0]
  return result;
 80040d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80040d8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	fab2 f282 	clz	r2, r2
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	f002 021f 	and.w	r2, r2, #31
 80040ee:	2101      	movs	r1, #1
 80040f0:	fa01 f202 	lsl.w	r2, r1, r2
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d180      	bne.n	8003ffc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040fa:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004102:	4b9e      	ldr	r3, [pc, #632]	@ (800437c <HAL_RCC_OscConfig+0xe38>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a9d      	ldr	r2, [pc, #628]	@ (800437c <HAL_RCC_OscConfig+0xe38>)
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004112:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 825e 	beq.w	80045dc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004120:	4b96      	ldr	r3, [pc, #600]	@ (800437c <HAL_RCC_OscConfig+0xe38>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b08      	cmp	r3, #8
 800412a:	f000 821f 	beq.w	800456c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800412e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004132:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b02      	cmp	r3, #2
 800413c:	f040 8170 	bne.w	8004420 <HAL_RCC_OscConfig+0xedc>
 8004140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004144:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004148:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800414c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004152:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	fa93 f2a3 	rbit	r2, r3
 800415c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004160:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004164:	601a      	str	r2, [r3, #0]
  return result;
 8004166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800416a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800416e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004170:	fab3 f383 	clz	r3, r3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800417a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	461a      	mov	r2, r3
 8004182:	2300      	movs	r3, #0
 8004184:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fe ff15 	bl	8002fb4 <HAL_GetTick>
 800418a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418e:	e009      	b.n	80041a4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004190:	f7fe ff10 	bl	8002fb4 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e21c      	b.n	80045de <HAL_RCC_OscConfig+0x109a>
 80041a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80041ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	fa93 f2a3 	rbit	r2, r3
 80041c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80041c8:	601a      	str	r2, [r3, #0]
  return result;
 80041ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80041d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d4:	fab3 f383 	clz	r3, r3
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d102      	bne.n	80041ee <HAL_RCC_OscConfig+0xcaa>
 80041e8:	4b64      	ldr	r3, [pc, #400]	@ (800437c <HAL_RCC_OscConfig+0xe38>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	e027      	b.n	800423e <HAL_RCC_OscConfig+0xcfa>
 80041ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80041f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004200:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	fa93 f2a3 	rbit	r2, r3
 800420a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800420e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004218:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800421c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004226:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	fa93 f2a3 	rbit	r2, r3
 8004230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004234:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	4b50      	ldr	r3, [pc, #320]	@ (800437c <HAL_RCC_OscConfig+0xe38>)
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004242:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004246:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800424a:	6011      	str	r1, [r2, #0]
 800424c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004250:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	fa92 f1a2 	rbit	r1, r2
 800425a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800425e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004262:	6011      	str	r1, [r2, #0]
  return result;
 8004264:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004268:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	fab2 f282 	clz	r2, r2
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	f042 0220 	orr.w	r2, r2, #32
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	f002 021f 	and.w	r2, r2, #31
 800427e:	2101      	movs	r1, #1
 8004280:	fa01 f202 	lsl.w	r2, r1, r2
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d182      	bne.n	8004190 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428a:	4b3c      	ldr	r3, [pc, #240]	@ (800437c <HAL_RCC_OscConfig+0xe38>)
 800428c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428e:	f023 020f 	bic.w	r2, r3, #15
 8004292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004296:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	4937      	ldr	r1, [pc, #220]	@ (800437c <HAL_RCC_OscConfig+0xe38>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80042a4:	4b35      	ldr	r3, [pc, #212]	@ (800437c <HAL_RCC_OscConfig+0xe38>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80042ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a19      	ldr	r1, [r3, #32]
 80042b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	492d      	ldr	r1, [pc, #180]	@ (800437c <HAL_RCC_OscConfig+0xe38>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]
 80042cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80042d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042de:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	fa93 f2a3 	rbit	r2, r3
 80042e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042ec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80042f0:	601a      	str	r2, [r3, #0]
  return result;
 80042f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042f6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80042fa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042fc:	fab3 f383 	clz	r3, r3
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004306:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	461a      	mov	r2, r3
 800430e:	2301      	movs	r3, #1
 8004310:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004312:	f7fe fe4f 	bl	8002fb4 <HAL_GetTick>
 8004316:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800431a:	e009      	b.n	8004330 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431c:	f7fe fe4a 	bl	8002fb4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e156      	b.n	80045de <HAL_RCC_OscConfig+0x109a>
 8004330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004334:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004338:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800433c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004342:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	fa93 f2a3 	rbit	r2, r3
 800434c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004350:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004354:	601a      	str	r2, [r3, #0]
  return result;
 8004356:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800435a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800435e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b2db      	uxtb	r3, r3
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	b2db      	uxtb	r3, r3
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0xe3c>
 8004374:	4b01      	ldr	r3, [pc, #4]	@ (800437c <HAL_RCC_OscConfig+0xe38>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	e02a      	b.n	80043d0 <HAL_RCC_OscConfig+0xe8c>
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000
 8004380:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004384:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004388:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800438c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004392:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	fa93 f2a3 	rbit	r2, r3
 800439c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80043ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043b8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	fa93 f2a3 	rbit	r2, r3
 80043c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043c6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	4b86      	ldr	r3, [pc, #536]	@ (80045e8 <HAL_RCC_OscConfig+0x10a4>)
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80043d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80043dc:	6011      	str	r1, [r2, #0]
 80043de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043e2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	fa92 f1a2 	rbit	r1, r2
 80043ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043f0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80043f4:	6011      	str	r1, [r2, #0]
  return result;
 80043f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043fa:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	fab2 f282 	clz	r2, r2
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	f042 0220 	orr.w	r2, r2, #32
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	f002 021f 	and.w	r2, r2, #31
 8004410:	2101      	movs	r1, #1
 8004412:	fa01 f202 	lsl.w	r2, r1, r2
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	f43f af7f 	beq.w	800431c <HAL_RCC_OscConfig+0xdd8>
 800441e:	e0dd      	b.n	80045dc <HAL_RCC_OscConfig+0x1098>
 8004420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004424:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800442c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004432:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	fa93 f2a3 	rbit	r2, r3
 800443c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004440:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004444:	601a      	str	r2, [r3, #0]
  return result;
 8004446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800444a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800444e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004450:	fab3 f383 	clz	r3, r3
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800445a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	461a      	mov	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f7fe fda5 	bl	8002fb4 <HAL_GetTick>
 800446a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446e:	e009      	b.n	8004484 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004470:	f7fe fda0 	bl	8002fb4 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e0ac      	b.n	80045de <HAL_RCC_OscConfig+0x109a>
 8004484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004488:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800448c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004496:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	fa93 f2a3 	rbit	r2, r3
 80044a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044a4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80044a8:	601a      	str	r2, [r3, #0]
  return result;
 80044aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80044b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b4:	fab3 f383 	clz	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d102      	bne.n	80044ce <HAL_RCC_OscConfig+0xf8a>
 80044c8:	4b47      	ldr	r3, [pc, #284]	@ (80045e8 <HAL_RCC_OscConfig+0x10a4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	e027      	b.n	800451e <HAL_RCC_OscConfig+0xfda>
 80044ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044d2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80044d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044e0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	fa93 f2a3 	rbit	r2, r3
 80044ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044ee:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044f8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80044fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004506:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	fa93 f2a3 	rbit	r2, r3
 8004510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004514:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	4b33      	ldr	r3, [pc, #204]	@ (80045e8 <HAL_RCC_OscConfig+0x10a4>)
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004522:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004526:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800452a:	6011      	str	r1, [r2, #0]
 800452c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004530:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	fa92 f1a2 	rbit	r1, r2
 800453a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800453e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004542:	6011      	str	r1, [r2, #0]
  return result;
 8004544:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004548:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	fab2 f282 	clz	r2, r2
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	f042 0220 	orr.w	r2, r2, #32
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	f002 021f 	and.w	r2, r2, #31
 800455e:	2101      	movs	r1, #1
 8004560:	fa01 f202 	lsl.w	r2, r1, r2
 8004564:	4013      	ands	r3, r2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d182      	bne.n	8004470 <HAL_RCC_OscConfig+0xf2c>
 800456a:	e037      	b.n	80045dc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800456c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004570:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e02e      	b.n	80045de <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004580:	4b19      	ldr	r3, [pc, #100]	@ (80045e8 <HAL_RCC_OscConfig+0x10a4>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004588:	4b17      	ldr	r3, [pc, #92]	@ (80045e8 <HAL_RCC_OscConfig+0x10a4>)
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004590:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004594:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8004598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800459c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d117      	bne.n	80045d8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80045a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80045ac:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80045b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045bc:	429a      	cmp	r2, r3
 80045be:	d10b      	bne.n	80045d8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80045c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045c4:	f003 020f 	and.w	r2, r3, #15
 80045c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40021000 	.word	0x40021000

080045ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b09e      	sub	sp, #120	@ 0x78
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e162      	b.n	80048ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004604:	4b90      	ldr	r3, [pc, #576]	@ (8004848 <HAL_RCC_ClockConfig+0x25c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d910      	bls.n	8004634 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b8d      	ldr	r3, [pc, #564]	@ (8004848 <HAL_RCC_ClockConfig+0x25c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 0207 	bic.w	r2, r3, #7
 800461a:	498b      	ldr	r1, [pc, #556]	@ (8004848 <HAL_RCC_ClockConfig+0x25c>)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b89      	ldr	r3, [pc, #548]	@ (8004848 <HAL_RCC_ClockConfig+0x25c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e14a      	b.n	80048ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004640:	4b82      	ldr	r3, [pc, #520]	@ (800484c <HAL_RCC_ClockConfig+0x260>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	497f      	ldr	r1, [pc, #508]	@ (800484c <HAL_RCC_ClockConfig+0x260>)
 800464e:	4313      	orrs	r3, r2
 8004650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80dc 	beq.w	8004818 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d13c      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xf6>
 8004668:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800466c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d102      	bne.n	8004692 <HAL_RCC_ClockConfig+0xa6>
 800468c:	4b6f      	ldr	r3, [pc, #444]	@ (800484c <HAL_RCC_ClockConfig+0x260>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	e00f      	b.n	80046b2 <HAL_RCC_ClockConfig+0xc6>
 8004692:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004696:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	667b      	str	r3, [r7, #100]	@ 0x64
 80046a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80046a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ae:	4b67      	ldr	r3, [pc, #412]	@ (800484c <HAL_RCC_ClockConfig+0x260>)
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80046b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046ba:	fa92 f2a2 	rbit	r2, r2
 80046be:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80046c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046c2:	fab2 f282 	clz	r2, r2
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	f042 0220 	orr.w	r2, r2, #32
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	f002 021f 	and.w	r2, r2, #31
 80046d2:	2101      	movs	r1, #1
 80046d4:	fa01 f202 	lsl.w	r2, r1, r2
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d17b      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e0f3      	b.n	80048ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d13c      	bne.n	8004764 <HAL_RCC_ClockConfig+0x178>
 80046ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f2:	fa93 f3a3 	rbit	r3, r3
 80046f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80046f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fa:	fab3 f383 	clz	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d102      	bne.n	8004714 <HAL_RCC_ClockConfig+0x128>
 800470e:	4b4f      	ldr	r3, [pc, #316]	@ (800484c <HAL_RCC_ClockConfig+0x260>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	e00f      	b.n	8004734 <HAL_RCC_ClockConfig+0x148>
 8004714:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004718:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800471c:	fa93 f3a3 	rbit	r3, r3
 8004720:	647b      	str	r3, [r7, #68]	@ 0x44
 8004722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004726:	643b      	str	r3, [r7, #64]	@ 0x40
 8004728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800472a:	fa93 f3a3 	rbit	r3, r3
 800472e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004730:	4b46      	ldr	r3, [pc, #280]	@ (800484c <HAL_RCC_ClockConfig+0x260>)
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004738:	63ba      	str	r2, [r7, #56]	@ 0x38
 800473a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800473c:	fa92 f2a2 	rbit	r2, r2
 8004740:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004742:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004744:	fab2 f282 	clz	r2, r2
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	f042 0220 	orr.w	r2, r2, #32
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	f002 021f 	and.w	r2, r2, #31
 8004754:	2101      	movs	r1, #1
 8004756:	fa01 f202 	lsl.w	r2, r1, r2
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d13a      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0b2      	b.n	80048ca <HAL_RCC_ClockConfig+0x2de>
 8004764:	2302      	movs	r3, #2
 8004766:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d102      	bne.n	800478c <HAL_RCC_ClockConfig+0x1a0>
 8004786:	4b31      	ldr	r3, [pc, #196]	@ (800484c <HAL_RCC_ClockConfig+0x260>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	e00d      	b.n	80047a8 <HAL_RCC_ClockConfig+0x1bc>
 800478c:	2302      	movs	r3, #2
 800478e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004792:	fa93 f3a3 	rbit	r3, r3
 8004796:	627b      	str	r3, [r7, #36]	@ 0x24
 8004798:	2302      	movs	r3, #2
 800479a:	623b      	str	r3, [r7, #32]
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	61fb      	str	r3, [r7, #28]
 80047a4:	4b29      	ldr	r3, [pc, #164]	@ (800484c <HAL_RCC_ClockConfig+0x260>)
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	2202      	movs	r2, #2
 80047aa:	61ba      	str	r2, [r7, #24]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	fa92 f2a2 	rbit	r2, r2
 80047b2:	617a      	str	r2, [r7, #20]
  return result;
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	fab2 f282 	clz	r2, r2
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	f042 0220 	orr.w	r2, r2, #32
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	f002 021f 	and.w	r2, r2, #31
 80047c6:	2101      	movs	r1, #1
 80047c8:	fa01 f202 	lsl.w	r2, r1, r2
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e079      	b.n	80048ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d6:	4b1d      	ldr	r3, [pc, #116]	@ (800484c <HAL_RCC_ClockConfig+0x260>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f023 0203 	bic.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	491a      	ldr	r1, [pc, #104]	@ (800484c <HAL_RCC_ClockConfig+0x260>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e8:	f7fe fbe4 	bl	8002fb4 <HAL_GetTick>
 80047ec:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f0:	f7fe fbe0 	bl	8002fb4 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e061      	b.n	80048ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	4b11      	ldr	r3, [pc, #68]	@ (800484c <HAL_RCC_ClockConfig+0x260>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 020c 	and.w	r2, r3, #12
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	429a      	cmp	r2, r3
 8004816:	d1eb      	bne.n	80047f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004818:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <HAL_RCC_ClockConfig+0x25c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d214      	bcs.n	8004850 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b08      	ldr	r3, [pc, #32]	@ (8004848 <HAL_RCC_ClockConfig+0x25c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 0207 	bic.w	r2, r3, #7
 800482e:	4906      	ldr	r1, [pc, #24]	@ (8004848 <HAL_RCC_ClockConfig+0x25c>)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <HAL_RCC_ClockConfig+0x25c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e040      	b.n	80048ca <HAL_RCC_ClockConfig+0x2de>
 8004848:	40022000 	.word	0x40022000
 800484c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800485c:	4b1d      	ldr	r3, [pc, #116]	@ (80048d4 <HAL_RCC_ClockConfig+0x2e8>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	491a      	ldr	r1, [pc, #104]	@ (80048d4 <HAL_RCC_ClockConfig+0x2e8>)
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487a:	4b16      	ldr	r3, [pc, #88]	@ (80048d4 <HAL_RCC_ClockConfig+0x2e8>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4912      	ldr	r1, [pc, #72]	@ (80048d4 <HAL_RCC_ClockConfig+0x2e8>)
 800488a:	4313      	orrs	r3, r2
 800488c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800488e:	f000 f829 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 8004892:	4601      	mov	r1, r0
 8004894:	4b0f      	ldr	r3, [pc, #60]	@ (80048d4 <HAL_RCC_ClockConfig+0x2e8>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800489c:	22f0      	movs	r2, #240	@ 0xf0
 800489e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	fa92 f2a2 	rbit	r2, r2
 80048a6:	60fa      	str	r2, [r7, #12]
  return result;
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	fab2 f282 	clz	r2, r2
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	40d3      	lsrs	r3, r2
 80048b2:	4a09      	ldr	r2, [pc, #36]	@ (80048d8 <HAL_RCC_ClockConfig+0x2ec>)
 80048b4:	5cd3      	ldrb	r3, [r2, r3]
 80048b6:	fa21 f303 	lsr.w	r3, r1, r3
 80048ba:	4a08      	ldr	r2, [pc, #32]	@ (80048dc <HAL_RCC_ClockConfig+0x2f0>)
 80048bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80048be:	4b08      	ldr	r3, [pc, #32]	@ (80048e0 <HAL_RCC_ClockConfig+0x2f4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe fb32 	bl	8002f2c <HAL_InitTick>
  
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3778      	adds	r7, #120	@ 0x78
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
 80048d8:	080057f0 	.word	0x080057f0
 80048dc:	20000030 	.word	0x20000030
 80048e0:	20000040 	.word	0x20000040

080048e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80048fe:	4b1f      	ldr	r3, [pc, #124]	@ (800497c <HAL_RCC_GetSysClockFreq+0x98>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b04      	cmp	r3, #4
 800490c:	d002      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x30>
 800490e:	2b08      	cmp	r3, #8
 8004910:	d003      	beq.n	800491a <HAL_RCC_GetSysClockFreq+0x36>
 8004912:	e029      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004914:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004916:	613b      	str	r3, [r7, #16]
      break;
 8004918:	e029      	b.n	800496e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	0c9b      	lsrs	r3, r3, #18
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	4a18      	ldr	r2, [pc, #96]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004924:	5cd3      	ldrb	r3, [r2, r3]
 8004926:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004928:	4b14      	ldr	r3, [pc, #80]	@ (800497c <HAL_RCC_GetSysClockFreq+0x98>)
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	4a15      	ldr	r2, [pc, #84]	@ (8004988 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004932:	5cd3      	ldrb	r3, [r2, r3]
 8004934:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004940:	4a0f      	ldr	r2, [pc, #60]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	fbb2 f2f3 	udiv	r2, r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e007      	b.n	8004962 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004952:	4a0b      	ldr	r2, [pc, #44]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	fbb2 f2f3 	udiv	r2, r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	fb02 f303 	mul.w	r3, r2, r3
 8004960:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	613b      	str	r3, [r7, #16]
      break;
 8004966:	e002      	b.n	800496e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004968:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x9c>)
 800496a:	613b      	str	r3, [r7, #16]
      break;
 800496c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496e:	693b      	ldr	r3, [r7, #16]
}
 8004970:	4618      	mov	r0, r3
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40021000 	.word	0x40021000
 8004980:	007a1200 	.word	0x007a1200
 8004984:	08005800 	.word	0x08005800
 8004988:	08005810 	.word	0x08005810

0800498c <memset>:
 800498c:	4402      	add	r2, r0
 800498e:	4603      	mov	r3, r0
 8004990:	4293      	cmp	r3, r2
 8004992:	d100      	bne.n	8004996 <memset+0xa>
 8004994:	4770      	bx	lr
 8004996:	f803 1b01 	strb.w	r1, [r3], #1
 800499a:	e7f9      	b.n	8004990 <memset+0x4>

0800499c <__errno>:
 800499c:	4b01      	ldr	r3, [pc, #4]	@ (80049a4 <__errno+0x8>)
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000048 	.word	0x20000048

080049a8 <__libc_init_array>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	4d0d      	ldr	r5, [pc, #52]	@ (80049e0 <__libc_init_array+0x38>)
 80049ac:	4c0d      	ldr	r4, [pc, #52]	@ (80049e4 <__libc_init_array+0x3c>)
 80049ae:	1b64      	subs	r4, r4, r5
 80049b0:	10a4      	asrs	r4, r4, #2
 80049b2:	2600      	movs	r6, #0
 80049b4:	42a6      	cmp	r6, r4
 80049b6:	d109      	bne.n	80049cc <__libc_init_array+0x24>
 80049b8:	4d0b      	ldr	r5, [pc, #44]	@ (80049e8 <__libc_init_array+0x40>)
 80049ba:	4c0c      	ldr	r4, [pc, #48]	@ (80049ec <__libc_init_array+0x44>)
 80049bc:	f000 f91e 	bl	8004bfc <_init>
 80049c0:	1b64      	subs	r4, r4, r5
 80049c2:	10a4      	asrs	r4, r4, #2
 80049c4:	2600      	movs	r6, #0
 80049c6:	42a6      	cmp	r6, r4
 80049c8:	d105      	bne.n	80049d6 <__libc_init_array+0x2e>
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d0:	4798      	blx	r3
 80049d2:	3601      	adds	r6, #1
 80049d4:	e7ee      	b.n	80049b4 <__libc_init_array+0xc>
 80049d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049da:	4798      	blx	r3
 80049dc:	3601      	adds	r6, #1
 80049de:	e7f2      	b.n	80049c6 <__libc_init_array+0x1e>
 80049e0:	08005828 	.word	0x08005828
 80049e4:	08005828 	.word	0x08005828
 80049e8:	08005828 	.word	0x08005828
 80049ec:	0800582c 	.word	0x0800582c

080049f0 <sqrt>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	ed2d 8b02 	vpush	{d8}
 80049f6:	ec55 4b10 	vmov	r4, r5, d0
 80049fa:	f000 f825 	bl	8004a48 <__ieee754_sqrt>
 80049fe:	4622      	mov	r2, r4
 8004a00:	462b      	mov	r3, r5
 8004a02:	4620      	mov	r0, r4
 8004a04:	4629      	mov	r1, r5
 8004a06:	eeb0 8a40 	vmov.f32	s16, s0
 8004a0a:	eef0 8a60 	vmov.f32	s17, s1
 8004a0e:	f7fc f841 	bl	8000a94 <__aeabi_dcmpun>
 8004a12:	b990      	cbnz	r0, 8004a3a <sqrt+0x4a>
 8004a14:	2200      	movs	r2, #0
 8004a16:	2300      	movs	r3, #0
 8004a18:	4620      	mov	r0, r4
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	f7fc f812 	bl	8000a44 <__aeabi_dcmplt>
 8004a20:	b158      	cbz	r0, 8004a3a <sqrt+0x4a>
 8004a22:	f7ff ffbb 	bl	800499c <__errno>
 8004a26:	2321      	movs	r3, #33	@ 0x21
 8004a28:	6003      	str	r3, [r0, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4619      	mov	r1, r3
 8004a32:	f7fb febf 	bl	80007b4 <__aeabi_ddiv>
 8004a36:	ec41 0b18 	vmov	d8, r0, r1
 8004a3a:	eeb0 0a48 	vmov.f32	s0, s16
 8004a3e:	eef0 0a68 	vmov.f32	s1, s17
 8004a42:	ecbd 8b02 	vpop	{d8}
 8004a46:	bd38      	pop	{r3, r4, r5, pc}

08004a48 <__ieee754_sqrt>:
 8004a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	4a68      	ldr	r2, [pc, #416]	@ (8004bf0 <__ieee754_sqrt+0x1a8>)
 8004a4e:	ec55 4b10 	vmov	r4, r5, d0
 8004a52:	43aa      	bics	r2, r5
 8004a54:	462b      	mov	r3, r5
 8004a56:	4621      	mov	r1, r4
 8004a58:	d110      	bne.n	8004a7c <__ieee754_sqrt+0x34>
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	4629      	mov	r1, r5
 8004a60:	f7fb fd7e 	bl	8000560 <__aeabi_dmul>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4620      	mov	r0, r4
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	f7fb fbc2 	bl	80001f4 <__adddf3>
 8004a70:	4604      	mov	r4, r0
 8004a72:	460d      	mov	r5, r1
 8004a74:	ec45 4b10 	vmov	d0, r4, r5
 8004a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7c:	2d00      	cmp	r5, #0
 8004a7e:	dc0e      	bgt.n	8004a9e <__ieee754_sqrt+0x56>
 8004a80:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004a84:	4322      	orrs	r2, r4
 8004a86:	d0f5      	beq.n	8004a74 <__ieee754_sqrt+0x2c>
 8004a88:	b19d      	cbz	r5, 8004ab2 <__ieee754_sqrt+0x6a>
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	4629      	mov	r1, r5
 8004a90:	f7fb fbae 	bl	80001f0 <__aeabi_dsub>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	f7fb fe8c 	bl	80007b4 <__aeabi_ddiv>
 8004a9c:	e7e8      	b.n	8004a70 <__ieee754_sqrt+0x28>
 8004a9e:	152a      	asrs	r2, r5, #20
 8004aa0:	d115      	bne.n	8004ace <__ieee754_sqrt+0x86>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	e009      	b.n	8004aba <__ieee754_sqrt+0x72>
 8004aa6:	0acb      	lsrs	r3, r1, #11
 8004aa8:	3a15      	subs	r2, #21
 8004aaa:	0549      	lsls	r1, r1, #21
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0fa      	beq.n	8004aa6 <__ieee754_sqrt+0x5e>
 8004ab0:	e7f7      	b.n	8004aa2 <__ieee754_sqrt+0x5a>
 8004ab2:	462a      	mov	r2, r5
 8004ab4:	e7fa      	b.n	8004aac <__ieee754_sqrt+0x64>
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	3001      	adds	r0, #1
 8004aba:	02dc      	lsls	r4, r3, #11
 8004abc:	d5fb      	bpl.n	8004ab6 <__ieee754_sqrt+0x6e>
 8004abe:	1e44      	subs	r4, r0, #1
 8004ac0:	1b12      	subs	r2, r2, r4
 8004ac2:	f1c0 0420 	rsb	r4, r0, #32
 8004ac6:	fa21 f404 	lsr.w	r4, r1, r4
 8004aca:	4323      	orrs	r3, r4
 8004acc:	4081      	lsls	r1, r0
 8004ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ad2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8004ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ada:	07d2      	lsls	r2, r2, #31
 8004adc:	bf5c      	itt	pl
 8004ade:	005b      	lslpl	r3, r3, #1
 8004ae0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004ae8:	bf58      	it	pl
 8004aea:	0049      	lslpl	r1, r1, #1
 8004aec:	2600      	movs	r6, #0
 8004aee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004af2:	106d      	asrs	r5, r5, #1
 8004af4:	0049      	lsls	r1, r1, #1
 8004af6:	2016      	movs	r0, #22
 8004af8:	4632      	mov	r2, r6
 8004afa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004afe:	1917      	adds	r7, r2, r4
 8004b00:	429f      	cmp	r7, r3
 8004b02:	bfde      	ittt	le
 8004b04:	193a      	addle	r2, r7, r4
 8004b06:	1bdb      	suble	r3, r3, r7
 8004b08:	1936      	addle	r6, r6, r4
 8004b0a:	0fcf      	lsrs	r7, r1, #31
 8004b0c:	3801      	subs	r0, #1
 8004b0e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004b12:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004b16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004b1a:	d1f0      	bne.n	8004afe <__ieee754_sqrt+0xb6>
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	2720      	movs	r7, #32
 8004b20:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004b24:	429a      	cmp	r2, r3
 8004b26:	eb00 0e0c 	add.w	lr, r0, ip
 8004b2a:	db02      	blt.n	8004b32 <__ieee754_sqrt+0xea>
 8004b2c:	d113      	bne.n	8004b56 <__ieee754_sqrt+0x10e>
 8004b2e:	458e      	cmp	lr, r1
 8004b30:	d811      	bhi.n	8004b56 <__ieee754_sqrt+0x10e>
 8004b32:	f1be 0f00 	cmp.w	lr, #0
 8004b36:	eb0e 000c 	add.w	r0, lr, ip
 8004b3a:	da42      	bge.n	8004bc2 <__ieee754_sqrt+0x17a>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	db40      	blt.n	8004bc2 <__ieee754_sqrt+0x17a>
 8004b40:	f102 0801 	add.w	r8, r2, #1
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	458e      	cmp	lr, r1
 8004b48:	bf88      	it	hi
 8004b4a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004b4e:	eba1 010e 	sub.w	r1, r1, lr
 8004b52:	4464      	add	r4, ip
 8004b54:	4642      	mov	r2, r8
 8004b56:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8004b5a:	3f01      	subs	r7, #1
 8004b5c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004b60:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004b64:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004b68:	d1dc      	bne.n	8004b24 <__ieee754_sqrt+0xdc>
 8004b6a:	4319      	orrs	r1, r3
 8004b6c:	d01b      	beq.n	8004ba6 <__ieee754_sqrt+0x15e>
 8004b6e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004bf4 <__ieee754_sqrt+0x1ac>
 8004b72:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004bf8 <__ieee754_sqrt+0x1b0>
 8004b76:	e9da 0100 	ldrd	r0, r1, [sl]
 8004b7a:	e9db 2300 	ldrd	r2, r3, [fp]
 8004b7e:	f7fb fb37 	bl	80001f0 <__aeabi_dsub>
 8004b82:	e9da 8900 	ldrd	r8, r9, [sl]
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	f7fb ff63 	bl	8000a58 <__aeabi_dcmple>
 8004b92:	b140      	cbz	r0, 8004ba6 <__ieee754_sqrt+0x15e>
 8004b94:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004b98:	e9da 0100 	ldrd	r0, r1, [sl]
 8004b9c:	e9db 2300 	ldrd	r2, r3, [fp]
 8004ba0:	d111      	bne.n	8004bc6 <__ieee754_sqrt+0x17e>
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	463c      	mov	r4, r7
 8004ba6:	1072      	asrs	r2, r6, #1
 8004ba8:	0863      	lsrs	r3, r4, #1
 8004baa:	07f1      	lsls	r1, r6, #31
 8004bac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004bb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004bb4:	bf48      	it	mi
 8004bb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004bba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	e756      	b.n	8004a70 <__ieee754_sqrt+0x28>
 8004bc2:	4690      	mov	r8, r2
 8004bc4:	e7be      	b.n	8004b44 <__ieee754_sqrt+0xfc>
 8004bc6:	f7fb fb15 	bl	80001f4 <__adddf3>
 8004bca:	e9da 8900 	ldrd	r8, r9, [sl]
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	f7fb ff35 	bl	8000a44 <__aeabi_dcmplt>
 8004bda:	b120      	cbz	r0, 8004be6 <__ieee754_sqrt+0x19e>
 8004bdc:	1ca0      	adds	r0, r4, #2
 8004bde:	bf08      	it	eq
 8004be0:	3601      	addeq	r6, #1
 8004be2:	3402      	adds	r4, #2
 8004be4:	e7df      	b.n	8004ba6 <__ieee754_sqrt+0x15e>
 8004be6:	1c63      	adds	r3, r4, #1
 8004be8:	f023 0401 	bic.w	r4, r3, #1
 8004bec:	e7db      	b.n	8004ba6 <__ieee754_sqrt+0x15e>
 8004bee:	bf00      	nop
 8004bf0:	7ff00000 	.word	0x7ff00000
 8004bf4:	200000a0 	.word	0x200000a0
 8004bf8:	20000098 	.word	0x20000098

08004bfc <_init>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr

08004c08 <_fini>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr
