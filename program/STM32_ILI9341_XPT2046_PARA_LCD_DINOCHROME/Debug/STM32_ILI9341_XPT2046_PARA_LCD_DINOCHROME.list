
STM32_ILI9341_XPT2046_PARA_LCD_DINOCHROME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c0c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004da0  08004da0  00005da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dd0  08004dd0  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004dd0  08004dd0  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dd0  08004dd0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd0  08004dd0  00005dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dd4  08004dd4  00005dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004dd8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00000094  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000a4  200000a4  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afea  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea6  00000000  00000000  0001102a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  00012ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c8  00000000  00000000  00013a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002078c  00000000  00000000  00014300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e90f  00000000  00000000  00034a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5692  00000000  00000000  0004339b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00108a2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ed4  00000000  00000000  00108a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0010b944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004d88 	.word	0x08004d88

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004d88 	.word	0x08004d88

080001d4 <LCD_write>:
u16 DeviceCode;	 



void LCD_write(u16 VAL)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	80fb      	strh	r3, [r7, #6]
	LCD_CS_CLR;  
 80001de:	4b0a      	ldr	r3, [pc, #40]	@ (8000208 <LCD_write+0x34>)
 80001e0:	2202      	movs	r2, #2
 80001e2:	629a      	str	r2, [r3, #40]	@ 0x28
	DATAOUT(VAL);
 80001e4:	4a09      	ldr	r2, [pc, #36]	@ (800020c <LCD_write+0x38>)
 80001e6:	88fb      	ldrh	r3, [r7, #6]
 80001e8:	6153      	str	r3, [r2, #20]
	LCD_WR_CLR;
 80001ea:	4b07      	ldr	r3, [pc, #28]	@ (8000208 <LCD_write+0x34>)
 80001ec:	2208      	movs	r2, #8
 80001ee:	629a      	str	r2, [r3, #40]	@ 0x28
	LCD_WR_SET;
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <LCD_write+0x34>)
 80001f2:	2208      	movs	r2, #8
 80001f4:	619a      	str	r2, [r3, #24]
	LCD_CS_SET;
 80001f6:	4b04      	ldr	r3, [pc, #16]	@ (8000208 <LCD_write+0x34>)
 80001f8:	2202      	movs	r2, #2
 80001fa:	619a      	str	r2, [r3, #24]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	48000800 	.word	0x48000800
 800020c:	48000400 	.word	0x48000400

08000210 <LCD_WR_REG>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u16 data)
{ 
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	80fb      	strh	r3, [r7, #6]
   LCD_RS_CLR;     
 800021a:	4b05      	ldr	r3, [pc, #20]	@ (8000230 <LCD_WR_REG+0x20>)
 800021c:	2204      	movs	r2, #4
 800021e:	629a      	str	r2, [r3, #40]	@ 0x28
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8000220:	88fb      	ldrh	r3, [r7, #6]
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ffd6 	bl	80001d4 <LCD_write>
	 #endif
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	48000800 	.word	0x48000800

08000234 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{	
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	460a      	mov	r2, r1
 800023e:	80fb      	strh	r3, [r7, #6]
 8000240:	4613      	mov	r3, r2
 8000242:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ffe2 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 800024c:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <LCD_WriteReg+0x44>)
 800024e:	2204      	movs	r2, #4
 8000250:	619a      	str	r2, [r3, #24]
 8000252:	4b09      	ldr	r3, [pc, #36]	@ (8000278 <LCD_WriteReg+0x44>)
 8000254:	2202      	movs	r2, #2
 8000256:	629a      	str	r2, [r3, #40]	@ 0x28
 8000258:	4a08      	ldr	r2, [pc, #32]	@ (800027c <LCD_WriteReg+0x48>)
 800025a:	88bb      	ldrh	r3, [r7, #4]
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <LCD_WriteReg+0x44>)
 8000260:	2208      	movs	r2, #8
 8000262:	629a      	str	r2, [r3, #40]	@ 0x28
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <LCD_WriteReg+0x44>)
 8000266:	2208      	movs	r2, #8
 8000268:	619a      	str	r2, [r3, #24]
 800026a:	4b03      	ldr	r3, [pc, #12]	@ (8000278 <LCD_WriteReg+0x44>)
 800026c:	2202      	movs	r2, #2
 800026e:	619a      	str	r2, [r3, #24]
}	   
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	48000800 	.word	0x48000800
 800027c:	48000400 	.word	0x48000400

08000280 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000284:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <LCD_WriteRAM_Prepare+0x14>)
 8000286:	891b      	ldrh	r3, [r3, #8]
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ffc1 	bl	8000210 <LCD_WR_REG>
}	 
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000002c 	.word	0x2000002c

08000298 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	80fb      	strh	r3, [r7, #6]
   LCD_RS_SET; 
 80002a2:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <Lcd_WriteData_16Bit+0x20>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	619a      	str	r2, [r3, #24]
		LCD_WR_SET;
		LCD_CS_SET;
 //  LCD_write(Data&0xFF00);
//	 LCD_write(Data<<8);
	 #else
	 LCD_write(Data);
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ff92 	bl	80001d4 <LCD_write>
	 #endif
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	48000800 	.word	0x48000800

080002bc <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	460a      	mov	r2, r1
 80002c6:	80fb      	strh	r3, [r7, #6]
 80002c8:	4613      	mov	r3, r2
 80002ca:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 80002cc:	88ba      	ldrh	r2, [r7, #4]
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	4611      	mov	r1, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fe56 	bl	8000f84 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <LCD_DrawPoint+0x30>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ffdb 	bl	8000298 <Lcd_WriteData_16Bit>
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	2000003c 	.word	0x2000003c

080002f0 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	80fb      	strh	r3, [r7, #6]
  unsigned int i;//,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 80002fa:	4b13      	ldr	r3, [pc, #76]	@ (8000348 <LCD_Clear+0x58>)
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	3b01      	subs	r3, #1
 8000300:	b29a      	uxth	r2, r3
 8000302:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <LCD_Clear+0x58>)
 8000304:	885b      	ldrh	r3, [r3, #2]
 8000306:	3b01      	subs	r3, #1
 8000308:	b29b      	uxth	r3, r3
 800030a:	2100      	movs	r1, #0
 800030c:	2000      	movs	r0, #0
 800030e:	f000 fd77 	bl	8000e00 <LCD_SetWindows>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	e006      	b.n	8000326 <LCD_Clear+0x36>
	{
 //   for(m=0;m<lcddev.width;m++)
  //  {	
			Lcd_WriteData_16Bit(Color);
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffbc 	bl	8000298 <Lcd_WriteData_16Bit>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3301      	adds	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <LCD_Clear+0x58>)
 8000328:	885b      	ldrh	r3, [r3, #2]
 800032a:	461a      	mov	r2, r3
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <LCD_Clear+0x58>)
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	fb02 f303 	mul.w	r3, r2, r3
 8000334:	461a      	mov	r2, r3
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	4293      	cmp	r3, r2
 800033a:	d3ed      	bcc.n	8000318 <LCD_Clear+0x28>
	//	}
	}
} 
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	2000002c 	.word	0x2000002c

0800034c <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <LCD_RESET+0x20>)
 8000352:	2201      	movs	r2, #1
 8000354:	629a      	str	r2, [r3, #40]	@ 0x28
	delay_ms(100);	
 8000356:	2064      	movs	r0, #100	@ 0x64
 8000358:	f000 ffaa 	bl	80012b0 <delay_ms>
	LCD_RST_SET;
 800035c:	4b03      	ldr	r3, [pc, #12]	@ (800036c <LCD_RESET+0x20>)
 800035e:	2201      	movs	r2, #1
 8000360:	619a      	str	r2, [r3, #24]
	delay_ms(50);
 8000362:	2032      	movs	r0, #50	@ 0x32
 8000364:	f000 ffa4 	bl	80012b0 <delay_ms>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	48000800 	.word	0x48000800

08000370 <ILI9341_paradriver_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void ILI9341_paradriver_Init(void)
{  
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	//LCD_GPIOInit();	// already done with CUBE MX
 	LCD_RESET(); //LCD ��λ
 8000374:	f7ff ffea 	bl	800034c <LCD_RESET>
//*************2.4inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 8000378:	20cf      	movs	r0, #207	@ 0xcf
 800037a:	f7ff ff49 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800037e:	4b9b      	ldr	r3, [pc, #620]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000380:	2204      	movs	r2, #4
 8000382:	619a      	str	r2, [r3, #24]
 8000384:	4b99      	ldr	r3, [pc, #612]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000386:	2202      	movs	r2, #2
 8000388:	629a      	str	r2, [r3, #40]	@ 0x28
 800038a:	4b99      	ldr	r3, [pc, #612]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	4b96      	ldr	r3, [pc, #600]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000392:	2208      	movs	r2, #8
 8000394:	629a      	str	r2, [r3, #40]	@ 0x28
 8000396:	4b95      	ldr	r3, [pc, #596]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000398:	2208      	movs	r2, #8
 800039a:	619a      	str	r2, [r3, #24]
 800039c:	4b93      	ldr	r3, [pc, #588]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800039e:	2202      	movs	r2, #2
 80003a0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xD9); //0xC1 
 80003a2:	4b92      	ldr	r3, [pc, #584]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003a4:	2204      	movs	r2, #4
 80003a6:	619a      	str	r2, [r3, #24]
 80003a8:	4b90      	ldr	r3, [pc, #576]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003aa:	2202      	movs	r2, #2
 80003ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80003ae:	4b90      	ldr	r3, [pc, #576]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80003b0:	22d9      	movs	r2, #217	@ 0xd9
 80003b2:	615a      	str	r2, [r3, #20]
 80003b4:	4b8d      	ldr	r3, [pc, #564]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80003ba:	4b8c      	ldr	r3, [pc, #560]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003bc:	2208      	movs	r2, #8
 80003be:	619a      	str	r2, [r3, #24]
 80003c0:	4b8a      	ldr	r3, [pc, #552]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X30); 
 80003c6:	4b89      	ldr	r3, [pc, #548]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003c8:	2204      	movs	r2, #4
 80003ca:	619a      	str	r2, [r3, #24]
 80003cc:	4b87      	ldr	r3, [pc, #540]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003ce:	2202      	movs	r2, #2
 80003d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80003d2:	4b87      	ldr	r3, [pc, #540]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80003d4:	2230      	movs	r2, #48	@ 0x30
 80003d6:	615a      	str	r2, [r3, #20]
 80003d8:	4b84      	ldr	r3, [pc, #528]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003da:	2208      	movs	r2, #8
 80003dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80003de:	4b83      	ldr	r3, [pc, #524]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003e0:	2208      	movs	r2, #8
 80003e2:	619a      	str	r2, [r3, #24]
 80003e4:	4b81      	ldr	r3, [pc, #516]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003e6:	2202      	movs	r2, #2
 80003e8:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xED);  
 80003ea:	20ed      	movs	r0, #237	@ 0xed
 80003ec:	f7ff ff10 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 80003f0:	4b7e      	ldr	r3, [pc, #504]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003f2:	2204      	movs	r2, #4
 80003f4:	619a      	str	r2, [r3, #24]
 80003f6:	4b7d      	ldr	r3, [pc, #500]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003f8:	2202      	movs	r2, #2
 80003fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80003fc:	4b7c      	ldr	r3, [pc, #496]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80003fe:	2264      	movs	r2, #100	@ 0x64
 8000400:	615a      	str	r2, [r3, #20]
 8000402:	4b7a      	ldr	r3, [pc, #488]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000404:	2208      	movs	r2, #8
 8000406:	629a      	str	r2, [r3, #40]	@ 0x28
 8000408:	4b78      	ldr	r3, [pc, #480]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800040a:	2208      	movs	r2, #8
 800040c:	619a      	str	r2, [r3, #24]
 800040e:	4b77      	ldr	r3, [pc, #476]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000410:	2202      	movs	r2, #2
 8000412:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x03); 
 8000414:	4b75      	ldr	r3, [pc, #468]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000416:	2204      	movs	r2, #4
 8000418:	619a      	str	r2, [r3, #24]
 800041a:	4b74      	ldr	r3, [pc, #464]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800041c:	2202      	movs	r2, #2
 800041e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000420:	4b73      	ldr	r3, [pc, #460]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000422:	2203      	movs	r2, #3
 8000424:	615a      	str	r2, [r3, #20]
 8000426:	4b71      	ldr	r3, [pc, #452]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000428:	2208      	movs	r2, #8
 800042a:	629a      	str	r2, [r3, #40]	@ 0x28
 800042c:	4b6f      	ldr	r3, [pc, #444]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800042e:	2208      	movs	r2, #8
 8000430:	619a      	str	r2, [r3, #24]
 8000432:	4b6e      	ldr	r3, [pc, #440]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000434:	2202      	movs	r2, #2
 8000436:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X12); 
 8000438:	4b6c      	ldr	r3, [pc, #432]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800043a:	2204      	movs	r2, #4
 800043c:	619a      	str	r2, [r3, #24]
 800043e:	4b6b      	ldr	r3, [pc, #428]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000440:	2202      	movs	r2, #2
 8000442:	629a      	str	r2, [r3, #40]	@ 0x28
 8000444:	4b6a      	ldr	r3, [pc, #424]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000446:	2212      	movs	r2, #18
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	4b68      	ldr	r3, [pc, #416]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800044c:	2208      	movs	r2, #8
 800044e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000450:	4b66      	ldr	r3, [pc, #408]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000452:	2208      	movs	r2, #8
 8000454:	619a      	str	r2, [r3, #24]
 8000456:	4b65      	ldr	r3, [pc, #404]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000458:	2202      	movs	r2, #2
 800045a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X81); 
 800045c:	4b63      	ldr	r3, [pc, #396]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800045e:	2204      	movs	r2, #4
 8000460:	619a      	str	r2, [r3, #24]
 8000462:	4b62      	ldr	r3, [pc, #392]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000464:	2202      	movs	r2, #2
 8000466:	629a      	str	r2, [r3, #40]	@ 0x28
 8000468:	4b61      	ldr	r3, [pc, #388]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800046a:	2281      	movs	r2, #129	@ 0x81
 800046c:	615a      	str	r2, [r3, #20]
 800046e:	4b5f      	ldr	r3, [pc, #380]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000470:	2208      	movs	r2, #8
 8000472:	629a      	str	r2, [r3, #40]	@ 0x28
 8000474:	4b5d      	ldr	r3, [pc, #372]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000476:	2208      	movs	r2, #8
 8000478:	619a      	str	r2, [r3, #24]
 800047a:	4b5c      	ldr	r3, [pc, #368]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800047c:	2202      	movs	r2, #2
 800047e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xE8);  
 8000480:	20e8      	movs	r0, #232	@ 0xe8
 8000482:	f7ff fec5 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8000486:	4b59      	ldr	r3, [pc, #356]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000488:	2204      	movs	r2, #4
 800048a:	619a      	str	r2, [r3, #24]
 800048c:	4b57      	ldr	r3, [pc, #348]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800048e:	2202      	movs	r2, #2
 8000490:	629a      	str	r2, [r3, #40]	@ 0x28
 8000492:	4b57      	ldr	r3, [pc, #348]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000494:	2285      	movs	r2, #133	@ 0x85
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	4b54      	ldr	r3, [pc, #336]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800049a:	2208      	movs	r2, #8
 800049c:	629a      	str	r2, [r3, #40]	@ 0x28
 800049e:	4b53      	ldr	r3, [pc, #332]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004a0:	2208      	movs	r2, #8
 80004a2:	619a      	str	r2, [r3, #24]
 80004a4:	4b51      	ldr	r3, [pc, #324]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004a6:	2202      	movs	r2, #2
 80004a8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x10); 
 80004aa:	4b50      	ldr	r3, [pc, #320]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004ac:	2204      	movs	r2, #4
 80004ae:	619a      	str	r2, [r3, #24]
 80004b0:	4b4e      	ldr	r3, [pc, #312]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004b2:	2202      	movs	r2, #2
 80004b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80004b6:	4b4e      	ldr	r3, [pc, #312]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80004b8:	2210      	movs	r2, #16
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	4b4b      	ldr	r3, [pc, #300]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004be:	2208      	movs	r2, #8
 80004c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80004c2:	4b4a      	ldr	r3, [pc, #296]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004c4:	2208      	movs	r2, #8
 80004c6:	619a      	str	r2, [r3, #24]
 80004c8:	4b48      	ldr	r3, [pc, #288]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x7A); 
 80004ce:	4b47      	ldr	r3, [pc, #284]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004d0:	2204      	movs	r2, #4
 80004d2:	619a      	str	r2, [r3, #24]
 80004d4:	4b45      	ldr	r3, [pc, #276]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004d6:	2202      	movs	r2, #2
 80004d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80004da:	4b45      	ldr	r3, [pc, #276]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80004dc:	227a      	movs	r2, #122	@ 0x7a
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	4b42      	ldr	r3, [pc, #264]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80004e6:	4b41      	ldr	r3, [pc, #260]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004e8:	2208      	movs	r2, #8
 80004ea:	619a      	str	r2, [r3, #24]
 80004ec:	4b3f      	ldr	r3, [pc, #252]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004ee:	2202      	movs	r2, #2
 80004f0:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xCB);  
 80004f2:	20cb      	movs	r0, #203	@ 0xcb
 80004f4:	f7ff fe8c 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 80004f8:	4b3c      	ldr	r3, [pc, #240]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	619a      	str	r2, [r3, #24]
 80004fe:	4b3b      	ldr	r3, [pc, #236]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000500:	2202      	movs	r2, #2
 8000502:	629a      	str	r2, [r3, #40]	@ 0x28
 8000504:	4b3a      	ldr	r3, [pc, #232]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000506:	2239      	movs	r2, #57	@ 0x39
 8000508:	615a      	str	r2, [r3, #20]
 800050a:	4b38      	ldr	r3, [pc, #224]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800050c:	2208      	movs	r2, #8
 800050e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000510:	4b36      	ldr	r3, [pc, #216]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000512:	2208      	movs	r2, #8
 8000514:	619a      	str	r2, [r3, #24]
 8000516:	4b35      	ldr	r3, [pc, #212]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000518:	2202      	movs	r2, #2
 800051a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2C); 
 800051c:	4b33      	ldr	r3, [pc, #204]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800051e:	2204      	movs	r2, #4
 8000520:	619a      	str	r2, [r3, #24]
 8000522:	4b32      	ldr	r3, [pc, #200]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000524:	2202      	movs	r2, #2
 8000526:	629a      	str	r2, [r3, #40]	@ 0x28
 8000528:	4b31      	ldr	r3, [pc, #196]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800052a:	222c      	movs	r2, #44	@ 0x2c
 800052c:	615a      	str	r2, [r3, #20]
 800052e:	4b2f      	ldr	r3, [pc, #188]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000530:	2208      	movs	r2, #8
 8000532:	629a      	str	r2, [r3, #40]	@ 0x28
 8000534:	4b2d      	ldr	r3, [pc, #180]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000536:	2208      	movs	r2, #8
 8000538:	619a      	str	r2, [r3, #24]
 800053a:	4b2c      	ldr	r3, [pc, #176]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800053c:	2202      	movs	r2, #2
 800053e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00); 
 8000540:	4b2a      	ldr	r3, [pc, #168]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000542:	2204      	movs	r2, #4
 8000544:	619a      	str	r2, [r3, #24]
 8000546:	4b29      	ldr	r3, [pc, #164]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000548:	2202      	movs	r2, #2
 800054a:	629a      	str	r2, [r3, #40]	@ 0x28
 800054c:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800054e:	2200      	movs	r2, #0
 8000550:	615a      	str	r2, [r3, #20]
 8000552:	4b26      	ldr	r3, [pc, #152]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000554:	2208      	movs	r2, #8
 8000556:	629a      	str	r2, [r3, #40]	@ 0x28
 8000558:	4b24      	ldr	r3, [pc, #144]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800055a:	2208      	movs	r2, #8
 800055c:	619a      	str	r2, [r3, #24]
 800055e:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000560:	2202      	movs	r2, #2
 8000562:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x34); 
 8000564:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000566:	2204      	movs	r2, #4
 8000568:	619a      	str	r2, [r3, #24]
 800056a:	4b20      	ldr	r3, [pc, #128]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800056c:	2202      	movs	r2, #2
 800056e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000572:	2234      	movs	r2, #52	@ 0x34
 8000574:	615a      	str	r2, [r3, #20]
 8000576:	4b1d      	ldr	r3, [pc, #116]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000578:	2208      	movs	r2, #8
 800057a:	629a      	str	r2, [r3, #40]	@ 0x28
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800057e:	2208      	movs	r2, #8
 8000580:	619a      	str	r2, [r3, #24]
 8000582:	4b1a      	ldr	r3, [pc, #104]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000584:	2202      	movs	r2, #2
 8000586:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x02); 
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800058a:	2204      	movs	r2, #4
 800058c:	619a      	str	r2, [r3, #24]
 800058e:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000590:	2202      	movs	r2, #2
 8000592:	629a      	str	r2, [r3, #40]	@ 0x28
 8000594:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000596:	2202      	movs	r2, #2
 8000598:	615a      	str	r2, [r3, #20]
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800059c:	2208      	movs	r2, #8
 800059e:	629a      	str	r2, [r3, #40]	@ 0x28
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005a2:	2208      	movs	r2, #8
 80005a4:	619a      	str	r2, [r3, #24]
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xF7);  
 80005ac:	20f7      	movs	r0, #247	@ 0xf7
 80005ae:	f7ff fe2f 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005b4:	2204      	movs	r2, #4
 80005b6:	619a      	str	r2, [r3, #24]
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80005c0:	2220      	movs	r2, #32
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005c6:	2208      	movs	r2, #8
 80005c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80005ca:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	619a      	str	r2, [r3, #24]
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xEA);  
 80005d6:	20ea      	movs	r0, #234	@ 0xea
 80005d8:	f7ff fe1a 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80005dc:	4b03      	ldr	r3, [pc, #12]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005de:	2204      	movs	r2, #4
 80005e0:	619a      	str	r2, [r3, #24]
 80005e2:	4b02      	ldr	r3, [pc, #8]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80005e8:	e004      	b.n	80005f4 <ILI9341_paradriver_Init+0x284>
 80005ea:	bf00      	nop
 80005ec:	48000800 	.word	0x48000800
 80005f0:	48000400 	.word	0x48000400
 80005f4:	4b9f      	ldr	r3, [pc, #636]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
 80005fa:	4b9f      	ldr	r3, [pc, #636]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8000600:	4b9d      	ldr	r3, [pc, #628]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000602:	2208      	movs	r2, #8
 8000604:	619a      	str	r2, [r3, #24]
 8000606:	4b9c      	ldr	r3, [pc, #624]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000608:	2202      	movs	r2, #2
 800060a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00); 
 800060c:	4b9a      	ldr	r3, [pc, #616]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800060e:	2204      	movs	r2, #4
 8000610:	619a      	str	r2, [r3, #24]
 8000612:	4b99      	ldr	r3, [pc, #612]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000614:	2202      	movs	r2, #2
 8000616:	629a      	str	r2, [r3, #40]	@ 0x28
 8000618:	4b96      	ldr	r3, [pc, #600]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
 800061e:	4b96      	ldr	r3, [pc, #600]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000620:	2208      	movs	r2, #8
 8000622:	629a      	str	r2, [r3, #40]	@ 0x28
 8000624:	4b94      	ldr	r3, [pc, #592]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000626:	2208      	movs	r2, #8
 8000628:	619a      	str	r2, [r3, #24]
 800062a:	4b93      	ldr	r3, [pc, #588]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800062c:	2202      	movs	r2, #2
 800062e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC0);    //Power control 
 8000630:	20c0      	movs	r0, #192	@ 0xc0
 8000632:	f7ff fded 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 8000636:	4b90      	ldr	r3, [pc, #576]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000638:	2204      	movs	r2, #4
 800063a:	619a      	str	r2, [r3, #24]
 800063c:	4b8e      	ldr	r3, [pc, #568]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800063e:	2202      	movs	r2, #2
 8000640:	629a      	str	r2, [r3, #40]	@ 0x28
 8000642:	4b8c      	ldr	r3, [pc, #560]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000644:	221b      	movs	r2, #27
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	4b8b      	ldr	r3, [pc, #556]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800064a:	2208      	movs	r2, #8
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
 800064e:	4b8a      	ldr	r3, [pc, #552]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000650:	2208      	movs	r2, #8
 8000652:	619a      	str	r2, [r3, #24]
 8000654:	4b88      	ldr	r3, [pc, #544]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000656:	2202      	movs	r2, #2
 8000658:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC1);    //Power control 
 800065a:	20c1      	movs	r0, #193	@ 0xc1
 800065c:	f7ff fdd8 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] 0x01
 8000660:	4b85      	ldr	r3, [pc, #532]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000662:	2204      	movs	r2, #4
 8000664:	619a      	str	r2, [r3, #24]
 8000666:	4b84      	ldr	r3, [pc, #528]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000668:	2202      	movs	r2, #2
 800066a:	629a      	str	r2, [r3, #40]	@ 0x28
 800066c:	4b81      	ldr	r3, [pc, #516]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800066e:	2212      	movs	r2, #18
 8000670:	615a      	str	r2, [r3, #20]
 8000672:	4b81      	ldr	r3, [pc, #516]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000674:	2208      	movs	r2, #8
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
 8000678:	4b7f      	ldr	r3, [pc, #508]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800067a:	2208      	movs	r2, #8
 800067c:	619a      	str	r2, [r3, #24]
 800067e:	4b7e      	ldr	r3, [pc, #504]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000680:	2202      	movs	r2, #2
 8000682:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC5);    //VCM control 
 8000684:	20c5      	movs	r0, #197	@ 0xc5
 8000686:	f7ff fdc3 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 	 //30
 800068a:	4b7b      	ldr	r3, [pc, #492]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800068c:	2204      	movs	r2, #4
 800068e:	619a      	str	r2, [r3, #24]
 8000690:	4b79      	ldr	r3, [pc, #484]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000692:	2202      	movs	r2, #2
 8000694:	629a      	str	r2, [r3, #40]	@ 0x28
 8000696:	4b77      	ldr	r3, [pc, #476]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000698:	2208      	movs	r2, #8
 800069a:	615a      	str	r2, [r3, #20]
 800069c:	4b76      	ldr	r3, [pc, #472]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800069e:	2208      	movs	r2, #8
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80006a2:	4b75      	ldr	r3, [pc, #468]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006a4:	2208      	movs	r2, #8
 80006a6:	619a      	str	r2, [r3, #24]
 80006a8:	4b73      	ldr	r3, [pc, #460]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x26); 	 //30
 80006ae:	4b72      	ldr	r3, [pc, #456]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	619a      	str	r2, [r3, #24]
 80006b4:	4b70      	ldr	r3, [pc, #448]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80006ba:	4b6e      	ldr	r3, [pc, #440]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80006bc:	2226      	movs	r2, #38	@ 0x26
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	4b6d      	ldr	r3, [pc, #436]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006c2:	2208      	movs	r2, #8
 80006c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80006c6:	4b6c      	ldr	r3, [pc, #432]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006c8:	2208      	movs	r2, #8
 80006ca:	619a      	str	r2, [r3, #24]
 80006cc:	4b6a      	ldr	r3, [pc, #424]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006ce:	2202      	movs	r2, #2
 80006d0:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC7);    //VCM control2 
 80006d2:	20c7      	movs	r0, #199	@ 0xc7
 80006d4:	f7ff fd9c 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 80006d8:	4b67      	ldr	r3, [pc, #412]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006da:	2204      	movs	r2, #4
 80006dc:	619a      	str	r2, [r3, #24]
 80006de:	4b66      	ldr	r3, [pc, #408]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80006e4:	4b63      	ldr	r3, [pc, #396]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80006e6:	22b7      	movs	r2, #183	@ 0xb7
 80006e8:	615a      	str	r2, [r3, #20]
 80006ea:	4b63      	ldr	r3, [pc, #396]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006ec:	2208      	movs	r2, #8
 80006ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80006f0:	4b61      	ldr	r3, [pc, #388]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006f2:	2208      	movs	r2, #8
 80006f4:	619a      	str	r2, [r3, #24]
 80006f6:	4b60      	ldr	r3, [pc, #384]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x36);    // Memory Access Control 
 80006fc:	2036      	movs	r0, #54	@ 0x36
 80006fe:	f7ff fd87 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 8000702:	4b5d      	ldr	r3, [pc, #372]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000704:	2204      	movs	r2, #4
 8000706:	619a      	str	r2, [r3, #24]
 8000708:	4b5b      	ldr	r3, [pc, #364]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800070a:	2202      	movs	r2, #2
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28
 800070e:	4b59      	ldr	r3, [pc, #356]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000710:	2208      	movs	r2, #8
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	4b58      	ldr	r3, [pc, #352]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000716:	2208      	movs	r2, #8
 8000718:	629a      	str	r2, [r3, #40]	@ 0x28
 800071a:	4b57      	ldr	r3, [pc, #348]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800071c:	2208      	movs	r2, #8
 800071e:	619a      	str	r2, [r3, #24]
 8000720:	4b55      	ldr	r3, [pc, #340]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000722:	2202      	movs	r2, #2
 8000724:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x3A);   
 8000726:	203a      	movs	r0, #58	@ 0x3a
 8000728:	f7ff fd72 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 800072c:	4b52      	ldr	r3, [pc, #328]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800072e:	2204      	movs	r2, #4
 8000730:	619a      	str	r2, [r3, #24]
 8000732:	4b51      	ldr	r3, [pc, #324]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000734:	2202      	movs	r2, #2
 8000736:	629a      	str	r2, [r3, #40]	@ 0x28
 8000738:	4b4e      	ldr	r3, [pc, #312]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800073a:	2255      	movs	r2, #85	@ 0x55
 800073c:	615a      	str	r2, [r3, #20]
 800073e:	4b4e      	ldr	r3, [pc, #312]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000740:	2208      	movs	r2, #8
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
 8000744:	4b4c      	ldr	r3, [pc, #304]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000746:	2208      	movs	r2, #8
 8000748:	619a      	str	r2, [r3, #24]
 800074a:	4b4b      	ldr	r3, [pc, #300]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800074c:	2202      	movs	r2, #2
 800074e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xB1);   
 8000750:	20b1      	movs	r0, #177	@ 0xb1
 8000752:	f7ff fd5d 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 8000756:	4b48      	ldr	r3, [pc, #288]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000758:	2204      	movs	r2, #4
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	4b46      	ldr	r3, [pc, #280]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800075e:	2202      	movs	r2, #2
 8000760:	629a      	str	r2, [r3, #40]	@ 0x28
 8000762:	4b44      	ldr	r3, [pc, #272]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	4b43      	ldr	r3, [pc, #268]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800076a:	2208      	movs	r2, #8
 800076c:	629a      	str	r2, [r3, #40]	@ 0x28
 800076e:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000770:	2208      	movs	r2, #8
 8000772:	619a      	str	r2, [r3, #24]
 8000774:	4b40      	ldr	r3, [pc, #256]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000776:	2202      	movs	r2, #2
 8000778:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1A); 
 800077a:	4b3f      	ldr	r3, [pc, #252]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800077c:	2204      	movs	r2, #4
 800077e:	619a      	str	r2, [r3, #24]
 8000780:	4b3d      	ldr	r3, [pc, #244]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000782:	2202      	movs	r2, #2
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
 8000786:	4b3b      	ldr	r3, [pc, #236]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000788:	221a      	movs	r2, #26
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800078e:	2208      	movs	r2, #8
 8000790:	629a      	str	r2, [r3, #40]	@ 0x28
 8000792:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000794:	2208      	movs	r2, #8
 8000796:	619a      	str	r2, [r3, #24]
 8000798:	4b37      	ldr	r3, [pc, #220]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800079a:	2202      	movs	r2, #2
 800079c:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xB6);    // Display Function Control 
 800079e:	20b6      	movs	r0, #182	@ 0xb6
 80007a0:	f7ff fd36 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 80007a4:	4b34      	ldr	r3, [pc, #208]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	619a      	str	r2, [r3, #24]
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80007b0:	4b30      	ldr	r3, [pc, #192]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80007b2:	220a      	movs	r2, #10
 80007b4:	615a      	str	r2, [r3, #20]
 80007b6:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007b8:	2208      	movs	r2, #8
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80007bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007be:	2208      	movs	r2, #8
 80007c0:	619a      	str	r2, [r3, #24]
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xA2); 
 80007c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	619a      	str	r2, [r3, #24]
 80007ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80007d6:	22a2      	movs	r2, #162	@ 0xa2
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007dc:	2208      	movs	r2, #8
 80007de:	629a      	str	r2, [r3, #40]	@ 0x28
 80007e0:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007e2:	2208      	movs	r2, #8
 80007e4:	619a      	str	r2, [r3, #24]
 80007e6:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80007ec:	20f2      	movs	r0, #242	@ 0xf2
 80007ee:	f7ff fd0f 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007f4:	2204      	movs	r2, #4
 80007f6:	619a      	str	r2, [r3, #24]
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000806:	2208      	movs	r2, #8
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800080c:	2208      	movs	r2, #8
 800080e:	619a      	str	r2, [r3, #24]
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000812:	2202      	movs	r2, #2
 8000814:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x26);    //Gamma curve selected 
 8000816:	2026      	movs	r0, #38	@ 0x26
 8000818:	f7ff fcfa 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800081e:	2204      	movs	r2, #4
 8000820:	619a      	str	r2, [r3, #24]
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000824:	2202      	movs	r2, #2
 8000826:	629a      	str	r2, [r3, #40]	@ 0x28
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800082a:	2201      	movs	r2, #1
 800082c:	615a      	str	r2, [r3, #20]
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000830:	2208      	movs	r2, #8
 8000832:	629a      	str	r2, [r3, #40]	@ 0x28
 8000834:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000836:	2208      	movs	r2, #8
 8000838:	619a      	str	r2, [r3, #24]
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800083c:	2202      	movs	r2, #2
 800083e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xE0);    //Set Gamma 
 8000840:	20e0      	movs	r0, #224	@ 0xe0
 8000842:	f7ff fce5 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000848:	2204      	movs	r2, #4
 800084a:	619a      	str	r2, [r3, #24]
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800084e:	2202      	movs	r2, #2
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000854:	220f      	movs	r2, #15
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800085a:	2208      	movs	r2, #8
 800085c:	629a      	str	r2, [r3, #40]	@ 0x28
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000860:	2208      	movs	r2, #8
 8000862:	619a      	str	r2, [r3, #24]
 8000864:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000866:	2202      	movs	r2, #2
 8000868:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1D); 
 800086a:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800086c:	2204      	movs	r2, #4
 800086e:	619a      	str	r2, [r3, #24]
 8000870:	e004      	b.n	800087c <ILI9341_paradriver_Init+0x50c>
 8000872:	bf00      	nop
 8000874:	48000400 	.word	0x48000400
 8000878:	48000800 	.word	0x48000800
 800087c:	4b99      	ldr	r3, [pc, #612]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800087e:	2202      	movs	r2, #2
 8000880:	629a      	str	r2, [r3, #40]	@ 0x28
 8000882:	4b99      	ldr	r3, [pc, #612]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000884:	221d      	movs	r2, #29
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	4b96      	ldr	r3, [pc, #600]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800088a:	2208      	movs	r2, #8
 800088c:	629a      	str	r2, [r3, #40]	@ 0x28
 800088e:	4b95      	ldr	r3, [pc, #596]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000890:	2208      	movs	r2, #8
 8000892:	619a      	str	r2, [r3, #24]
 8000894:	4b93      	ldr	r3, [pc, #588]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000896:	2202      	movs	r2, #2
 8000898:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1A); 
 800089a:	4b92      	ldr	r3, [pc, #584]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800089c:	2204      	movs	r2, #4
 800089e:	619a      	str	r2, [r3, #24]
 80008a0:	4b90      	ldr	r3, [pc, #576]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80008a6:	4b90      	ldr	r3, [pc, #576]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80008a8:	221a      	movs	r2, #26
 80008aa:	615a      	str	r2, [r3, #20]
 80008ac:	4b8d      	ldr	r3, [pc, #564]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008ae:	2208      	movs	r2, #8
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80008b2:	4b8c      	ldr	r3, [pc, #560]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	619a      	str	r2, [r3, #24]
 80008b8:	4b8a      	ldr	r3, [pc, #552]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0A); 
 80008be:	4b89      	ldr	r3, [pc, #548]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008c0:	2204      	movs	r2, #4
 80008c2:	619a      	str	r2, [r3, #24]
 80008c4:	4b87      	ldr	r3, [pc, #540]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80008ca:	4b87      	ldr	r3, [pc, #540]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80008cc:	220a      	movs	r2, #10
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	4b84      	ldr	r3, [pc, #528]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008d2:	2208      	movs	r2, #8
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80008d6:	4b83      	ldr	r3, [pc, #524]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008d8:	2208      	movs	r2, #8
 80008da:	619a      	str	r2, [r3, #24]
 80008dc:	4b81      	ldr	r3, [pc, #516]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008de:	2202      	movs	r2, #2
 80008e0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0D); 
 80008e2:	4b80      	ldr	r3, [pc, #512]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	619a      	str	r2, [r3, #24]
 80008e8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80008ee:	4b7e      	ldr	r3, [pc, #504]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80008f0:	220d      	movs	r2, #13
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b7b      	ldr	r3, [pc, #492]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008f6:	2208      	movs	r2, #8
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80008fa:	4b7a      	ldr	r3, [pc, #488]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008fc:	2208      	movs	r2, #8
 80008fe:	619a      	str	r2, [r3, #24]
 8000900:	4b78      	ldr	r3, [pc, #480]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000902:	2202      	movs	r2, #2
 8000904:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8000906:	4b77      	ldr	r3, [pc, #476]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000908:	2204      	movs	r2, #4
 800090a:	619a      	str	r2, [r3, #24]
 800090c:	4b75      	ldr	r3, [pc, #468]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800090e:	2202      	movs	r2, #2
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28
 8000912:	4b75      	ldr	r3, [pc, #468]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000914:	2207      	movs	r2, #7
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	4b72      	ldr	r3, [pc, #456]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800091a:	2208      	movs	r2, #8
 800091c:	629a      	str	r2, [r3, #40]	@ 0x28
 800091e:	4b71      	ldr	r3, [pc, #452]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000920:	2208      	movs	r2, #8
 8000922:	619a      	str	r2, [r3, #24]
 8000924:	4b6f      	ldr	r3, [pc, #444]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000926:	2202      	movs	r2, #2
 8000928:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x49); 
 800092a:	4b6e      	ldr	r3, [pc, #440]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800092c:	2204      	movs	r2, #4
 800092e:	619a      	str	r2, [r3, #24]
 8000930:	4b6c      	ldr	r3, [pc, #432]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000932:	2202      	movs	r2, #2
 8000934:	629a      	str	r2, [r3, #40]	@ 0x28
 8000936:	4b6c      	ldr	r3, [pc, #432]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000938:	2249      	movs	r2, #73	@ 0x49
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	4b69      	ldr	r3, [pc, #420]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800093e:	2208      	movs	r2, #8
 8000940:	629a      	str	r2, [r3, #40]	@ 0x28
 8000942:	4b68      	ldr	r3, [pc, #416]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000944:	2208      	movs	r2, #8
 8000946:	619a      	str	r2, [r3, #24]
 8000948:	4b66      	ldr	r3, [pc, #408]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800094a:	2202      	movs	r2, #2
 800094c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X66); 
 800094e:	4b65      	ldr	r3, [pc, #404]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000950:	2204      	movs	r2, #4
 8000952:	619a      	str	r2, [r3, #24]
 8000954:	4b63      	ldr	r3, [pc, #396]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000956:	2202      	movs	r2, #2
 8000958:	629a      	str	r2, [r3, #40]	@ 0x28
 800095a:	4b63      	ldr	r3, [pc, #396]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 800095c:	2266      	movs	r2, #102	@ 0x66
 800095e:	615a      	str	r2, [r3, #20]
 8000960:	4b60      	ldr	r3, [pc, #384]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000962:	2208      	movs	r2, #8
 8000964:	629a      	str	r2, [r3, #40]	@ 0x28
 8000966:	4b5f      	ldr	r3, [pc, #380]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000968:	2208      	movs	r2, #8
 800096a:	619a      	str	r2, [r3, #24]
 800096c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800096e:	2202      	movs	r2, #2
 8000970:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x3B); 
 8000972:	4b5c      	ldr	r3, [pc, #368]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000974:	2204      	movs	r2, #4
 8000976:	619a      	str	r2, [r3, #24]
 8000978:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800097a:	2202      	movs	r2, #2
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
 800097e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000980:	223b      	movs	r2, #59	@ 0x3b
 8000982:	615a      	str	r2, [r3, #20]
 8000984:	4b57      	ldr	r3, [pc, #348]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000986:	2208      	movs	r2, #8
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
 800098a:	4b56      	ldr	r3, [pc, #344]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800098c:	2208      	movs	r2, #8
 800098e:	619a      	str	r2, [r3, #24]
 8000990:	4b54      	ldr	r3, [pc, #336]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000992:	2202      	movs	r2, #2
 8000994:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8000996:	4b53      	ldr	r3, [pc, #332]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000998:	2204      	movs	r2, #4
 800099a:	619a      	str	r2, [r3, #24]
 800099c:	4b51      	ldr	r3, [pc, #324]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800099e:	2202      	movs	r2, #2
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80009a2:	4b51      	ldr	r3, [pc, #324]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	4b4e      	ldr	r3, [pc, #312]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80009ae:	4b4d      	ldr	r3, [pc, #308]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009b0:	2208      	movs	r2, #8
 80009b2:	619a      	str	r2, [r3, #24]
 80009b4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009b6:	2202      	movs	r2, #2
 80009b8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x11); 
 80009ba:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009bc:	2204      	movs	r2, #4
 80009be:	619a      	str	r2, [r3, #24]
 80009c0:	4b48      	ldr	r3, [pc, #288]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80009c6:	4b48      	ldr	r3, [pc, #288]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80009c8:	2211      	movs	r2, #17
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	4b45      	ldr	r3, [pc, #276]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80009d2:	4b44      	ldr	r3, [pc, #272]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009d4:	2208      	movs	r2, #8
 80009d6:	619a      	str	r2, [r3, #24]
 80009d8:	4b42      	ldr	r3, [pc, #264]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009da:	2202      	movs	r2, #2
 80009dc:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x01); 
 80009de:	4b41      	ldr	r3, [pc, #260]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009e0:	2204      	movs	r2, #4
 80009e2:	619a      	str	r2, [r3, #24]
 80009e4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80009ea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009f2:	2208      	movs	r2, #8
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80009f6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009f8:	2208      	movs	r2, #8
 80009fa:	619a      	str	r2, [r3, #24]
 80009fc:	4b39      	ldr	r3, [pc, #228]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009fe:	2202      	movs	r2, #2
 8000a00:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x09); 
 8000a02:	4b38      	ldr	r3, [pc, #224]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a04:	2204      	movs	r2, #4
 8000a06:	619a      	str	r2, [r3, #24]
 8000a08:	4b36      	ldr	r3, [pc, #216]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a0e:	4b36      	ldr	r3, [pc, #216]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a10:	2209      	movs	r2, #9
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	4b33      	ldr	r3, [pc, #204]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	619a      	str	r2, [r3, #24]
 8000a20:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x05); 
 8000a26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a28:	2204      	movs	r2, #4
 8000a2a:	619a      	str	r2, [r3, #24]
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a34:	2205      	movs	r2, #5
 8000a36:	615a      	str	r2, [r3, #20]
 8000a38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a40:	2208      	movs	r2, #8
 8000a42:	619a      	str	r2, [r3, #24]
 8000a44:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x04); 		 
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	619a      	str	r2, [r3, #24]
 8000a50:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a56:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a58:	2204      	movs	r2, #4
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a62:	4b20      	ldr	r3, [pc, #128]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a64:	2208      	movs	r2, #8
 8000a66:	619a      	str	r2, [r3, #24]
 8000a68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0XE1);    //Set Gamma 
 8000a6e:	20e1      	movs	r0, #225	@ 0xe1
 8000a70:	f7ff fbce 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000a74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	619a      	str	r2, [r3, #24]
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a80:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a88:	2208      	movs	r2, #8
 8000a8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	619a      	str	r2, [r3, #24]
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x18); 
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	619a      	str	r2, [r3, #24]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000aa4:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000aa6:	2218      	movs	r2, #24
 8000aa8:	615a      	str	r2, [r3, #20]
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000aac:	2208      	movs	r2, #8
 8000aae:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	619a      	str	r2, [r3, #24]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1D); 
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000abe:	2204      	movs	r2, #4
 8000ac0:	619a      	str	r2, [r3, #24]
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ac8:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000aca:	221d      	movs	r2, #29
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ad0:	2208      	movs	r2, #8
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	619a      	str	r2, [r3, #24]
 8000ada:	4b02      	ldr	r3, [pc, #8]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	619a      	str	r2, [r3, #24]
 8000ae0:	e004      	b.n	8000aec <ILI9341_paradriver_Init+0x77c>
 8000ae2:	bf00      	nop
 8000ae4:	48000800 	.word	0x48000800
 8000ae8:	48000400 	.word	0x48000400
	LCD_WR_DATA(0x02); 
 8000aec:	4b99      	ldr	r3, [pc, #612]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	619a      	str	r2, [r3, #24]
 8000af2:	4b98      	ldr	r3, [pc, #608]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000af8:	4b97      	ldr	r3, [pc, #604]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000afa:	2202      	movs	r2, #2
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	4b95      	ldr	r3, [pc, #596]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b00:	2208      	movs	r2, #8
 8000b02:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b04:	4b93      	ldr	r3, [pc, #588]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b06:	2208      	movs	r2, #8
 8000b08:	619a      	str	r2, [r3, #24]
 8000b0a:	4b92      	ldr	r3, [pc, #584]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0F); 
 8000b10:	4b90      	ldr	r3, [pc, #576]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	619a      	str	r2, [r3, #24]
 8000b16:	4b8f      	ldr	r3, [pc, #572]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b1c:	4b8e      	ldr	r3, [pc, #568]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b1e:	220f      	movs	r2, #15
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	4b8c      	ldr	r3, [pc, #560]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b24:	2208      	movs	r2, #8
 8000b26:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b28:	4b8a      	ldr	r3, [pc, #552]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	619a      	str	r2, [r3, #24]
 8000b2e:	4b89      	ldr	r3, [pc, #548]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x04); 
 8000b34:	4b87      	ldr	r3, [pc, #540]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b36:	2204      	movs	r2, #4
 8000b38:	619a      	str	r2, [r3, #24]
 8000b3a:	4b86      	ldr	r3, [pc, #536]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b40:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	4b83      	ldr	r3, [pc, #524]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b48:	2208      	movs	r2, #8
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b4c:	4b81      	ldr	r3, [pc, #516]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b4e:	2208      	movs	r2, #8
 8000b50:	619a      	str	r2, [r3, #24]
 8000b52:	4b80      	ldr	r3, [pc, #512]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x36); 
 8000b58:	4b7e      	ldr	r3, [pc, #504]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	619a      	str	r2, [r3, #24]
 8000b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b64:	4b7c      	ldr	r3, [pc, #496]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b66:	2236      	movs	r2, #54	@ 0x36
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b70:	4b78      	ldr	r3, [pc, #480]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	619a      	str	r2, [r3, #24]
 8000b76:	4b77      	ldr	r3, [pc, #476]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x13); 
 8000b7c:	4b75      	ldr	r3, [pc, #468]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	619a      	str	r2, [r3, #24]
 8000b82:	4b74      	ldr	r3, [pc, #464]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b88:	4b73      	ldr	r3, [pc, #460]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b8a:	2213      	movs	r2, #19
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	4b71      	ldr	r3, [pc, #452]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b90:	2208      	movs	r2, #8
 8000b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b94:	4b6f      	ldr	r3, [pc, #444]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b96:	2208      	movs	r2, #8
 8000b98:	619a      	str	r2, [r3, #24]
 8000b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x4C); 
 8000ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	619a      	str	r2, [r3, #24]
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bac:	4b6a      	ldr	r3, [pc, #424]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000bae:	224c      	movs	r2, #76	@ 0x4c
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	4b68      	ldr	r3, [pc, #416]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bb8:	4b66      	ldr	r3, [pc, #408]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bba:	2208      	movs	r2, #8
 8000bbc:	619a      	str	r2, [r3, #24]
 8000bbe:	4b65      	ldr	r3, [pc, #404]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8000bc4:	4b63      	ldr	r3, [pc, #396]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	619a      	str	r2, [r3, #24]
 8000bca:	4b62      	ldr	r3, [pc, #392]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bd0:	4b61      	ldr	r3, [pc, #388]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bd8:	2208      	movs	r2, #8
 8000bda:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bdc:	4b5d      	ldr	r3, [pc, #372]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bde:	2208      	movs	r2, #8
 8000be0:	619a      	str	r2, [r3, #24]
 8000be2:	4b5c      	ldr	r3, [pc, #368]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x13); 
 8000be8:	4b5a      	ldr	r3, [pc, #360]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	619a      	str	r2, [r3, #24]
 8000bee:	4b59      	ldr	r3, [pc, #356]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bf4:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000bf6:	2213      	movs	r2, #19
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	4b56      	ldr	r3, [pc, #344]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c00:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c02:	2208      	movs	r2, #8
 8000c04:	619a      	str	r2, [r3, #24]
 8000c06:	4b53      	ldr	r3, [pc, #332]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c08:	2202      	movs	r2, #2
 8000c0a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0F); 
 8000c0c:	4b51      	ldr	r3, [pc, #324]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c0e:	2204      	movs	r2, #4
 8000c10:	619a      	str	r2, [r3, #24]
 8000c12:	4b50      	ldr	r3, [pc, #320]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c14:	2202      	movs	r2, #2
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c18:	4b4f      	ldr	r3, [pc, #316]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c20:	2208      	movs	r2, #8
 8000c22:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c24:	4b4b      	ldr	r3, [pc, #300]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c26:	2208      	movs	r2, #8
 8000c28:	619a      	str	r2, [r3, #24]
 8000c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2E); 
 8000c30:	4b48      	ldr	r3, [pc, #288]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c32:	2204      	movs	r2, #4
 8000c34:	619a      	str	r2, [r3, #24]
 8000c36:	4b47      	ldr	r3, [pc, #284]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c3c:	4b46      	ldr	r3, [pc, #280]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c3e:	222e      	movs	r2, #46	@ 0x2e
 8000c40:	615a      	str	r2, [r3, #20]
 8000c42:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c44:	2208      	movs	r2, #8
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c48:	4b42      	ldr	r3, [pc, #264]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	619a      	str	r2, [r3, #24]
 8000c4e:	4b41      	ldr	r3, [pc, #260]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2F); 
 8000c54:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c56:	2204      	movs	r2, #4
 8000c58:	619a      	str	r2, [r3, #24]
 8000c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c60:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c62:	222f      	movs	r2, #47	@ 0x2f
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c68:	2208      	movs	r2, #8
 8000c6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c6c:	4b39      	ldr	r3, [pc, #228]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c6e:	2208      	movs	r2, #8
 8000c70:	619a      	str	r2, [r3, #24]
 8000c72:	4b38      	ldr	r3, [pc, #224]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x05); 
 8000c78:	4b36      	ldr	r3, [pc, #216]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	619a      	str	r2, [r3, #24]
 8000c7e:	4b35      	ldr	r3, [pc, #212]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c84:	4b34      	ldr	r3, [pc, #208]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c86:	2205      	movs	r2, #5
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	4b32      	ldr	r3, [pc, #200]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c90:	4b30      	ldr	r3, [pc, #192]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c92:	2208      	movs	r2, #8
 8000c94:	619a      	str	r2, [r3, #24]
 8000c96:	4b2f      	ldr	r3, [pc, #188]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c98:	2202      	movs	r2, #2
 8000c9a:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x2B); 
 8000c9c:	202b      	movs	r0, #43	@ 0x2b
 8000c9e:	f7ff fab7 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000caa:	2202      	movs	r2, #2
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cae:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cba:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	619a      	str	r2, [r3, #24]
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000cc6:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cc8:	2204      	movs	r2, #4
 8000cca:	619a      	str	r2, [r3, #24]
 8000ccc:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cda:	2208      	movs	r2, #8
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cde:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ce0:	2208      	movs	r2, #8
 8000ce2:	619a      	str	r2, [r3, #24]
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x01);
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	619a      	str	r2, [r3, #24]
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cfe:	2208      	movs	r2, #8
 8000d00:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d02:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d04:	2208      	movs	r2, #8
 8000d06:	619a      	str	r2, [r3, #24]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x3f);
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	619a      	str	r2, [r3, #24]
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000d1c:	223f      	movs	r2, #63	@ 0x3f
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d22:	2208      	movs	r2, #8
 8000d24:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d28:	2208      	movs	r2, #8
 8000d2a:	619a      	str	r2, [r3, #24]
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x2A); 
 8000d32:	202a      	movs	r0, #42	@ 0x2a
 8000d34:	f7ff fa6c 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	619a      	str	r2, [r3, #24]
 8000d3e:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	4b02      	ldr	r3, [pc, #8]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d4c:	2208      	movs	r2, #8
 8000d4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d50:	e004      	b.n	8000d5c <ILI9341_paradriver_Init+0x9ec>
 8000d52:	bf00      	nop
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d5e:	2208      	movs	r2, #8
 8000d60:	619a      	str	r2, [r3, #24]
 8000d62:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000d68:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	619a      	str	r2, [r3, #24]
 8000d6e:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <ILI9341_paradriver_Init+0xa8c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	619a      	str	r2, [r3, #24]
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	619a      	str	r2, [r3, #24]
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d94:	2202      	movs	r2, #2
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <ILI9341_paradriver_Init+0xa8c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000da0:	2208      	movs	r2, #8
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000da4:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000da6:	2208      	movs	r2, #8
 8000da8:	619a      	str	r2, [r3, #24]
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xef);	 
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000db2:	2204      	movs	r2, #4
 8000db4:	619a      	str	r2, [r3, #24]
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <ILI9341_paradriver_Init+0xa8c>)
 8000dbe:	22ef      	movs	r2, #239	@ 0xef
 8000dc0:	615a      	str	r2, [r3, #20]
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dc4:	2208      	movs	r2, #8
 8000dc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	619a      	str	r2, [r3, #24]
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x11); //Exit Sleep
 8000dd4:	2011      	movs	r0, #17
 8000dd6:	f7ff fa1b 	bl	8000210 <LCD_WR_REG>
	delay_ms(120);
 8000dda:	2078      	movs	r0, #120	@ 0x78
 8000ddc:	f000 fa68 	bl	80012b0 <delay_ms>
	LCD_WR_REG(0x29); //display on		
 8000de0:	2029      	movs	r0, #41	@ 0x29
 8000de2:	f7ff fa15 	bl	8000210 <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 f8de 	bl	8000fa8 <LCD_direction>
//	LCD_LED=1;//��������	 
	LCD_Clear(WHITE);//��ȫ����ɫ
 8000dec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000df0:	f7ff fa7e 	bl	80002f0 <LCD_Clear>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	48000800 	.word	0x48000800
 8000dfc:	48000400 	.word	0x48000400

08000e00 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4623      	mov	r3, r4
 8000e10:	80fb      	strh	r3, [r7, #6]
 8000e12:	4603      	mov	r3, r0
 8000e14:	80bb      	strh	r3, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	807b      	strh	r3, [r7, #2]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8000e1e:	4b56      	ldr	r3, [pc, #344]	@ (8000f78 <LCD_SetWindows+0x178>)
 8000e20:	899b      	ldrh	r3, [r3, #12]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f9f4 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8000e28:	4b54      	ldr	r3, [pc, #336]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	4b53      	ldr	r3, [pc, #332]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b51      	ldr	r3, [pc, #324]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000e3c:	615a      	str	r2, [r3, #20]
 8000e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e40:	2208      	movs	r2, #8
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e44:	4b4d      	ldr	r3, [pc, #308]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e46:	2208      	movs	r2, #8
 8000e48:	619a      	str	r2, [r3, #24]
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&xStar);		
 8000e50:	4b4a      	ldr	r3, [pc, #296]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	619a      	str	r2, [r3, #24]
 8000e56:	4b49      	ldr	r3, [pc, #292]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	4a48      	ldr	r2, [pc, #288]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	6153      	str	r3, [r2, #20]
 8000e64:	4b45      	ldr	r3, [pc, #276]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e66:	2208      	movs	r2, #8
 8000e68:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e6a:	4b44      	ldr	r3, [pc, #272]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	619a      	str	r2, [r3, #24]
 8000e70:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(xEnd>>8);
 8000e76:	4b41      	ldr	r3, [pc, #260]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	619a      	str	r2, [r3, #24]
 8000e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e8e:	2208      	movs	r2, #8
 8000e90:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e92:	4b3a      	ldr	r3, [pc, #232]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e94:	2208      	movs	r2, #8
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	4b38      	ldr	r3, [pc, #224]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&xEnd);
 8000e9e:	4b37      	ldr	r3, [pc, #220]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	619a      	str	r2, [r3, #24]
 8000ea4:	4b35      	ldr	r3, [pc, #212]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eaa:	887b      	ldrh	r3, [r7, #2]
 8000eac:	4a34      	ldr	r2, [pc, #208]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eb8:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000eba:	2208      	movs	r2, #8
 8000ebc:	619a      	str	r2, [r3, #24]
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	619a      	str	r2, [r3, #24]

	LCD_WR_REG(lcddev.setycmd);	
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <LCD_SetWindows+0x178>)
 8000ec6:	89db      	ldrh	r3, [r3, #14]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f9a1 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8000ece:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	619a      	str	r2, [r3, #24]
 8000ed4:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eda:	88bb      	ldrh	r3, [r7, #4]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	4b25      	ldr	r3, [pc, #148]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000eec:	2208      	movs	r2, #8
 8000eee:	619a      	str	r2, [r3, #24]
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&yStar);		
 8000ef6:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	619a      	str	r2, [r3, #24]
 8000efc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f02:	88bb      	ldrh	r3, [r7, #4]
 8000f04:	4a1e      	ldr	r2, [pc, #120]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f12:	2208      	movs	r2, #8
 8000f14:	619a      	str	r2, [r3, #24]
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(yEnd>>8);
 8000f1c:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	619a      	str	r2, [r3, #24]
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f28:	883b      	ldrh	r3, [r7, #0]
 8000f2a:	0a1b      	lsrs	r3, r3, #8
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f34:	2208      	movs	r2, #8
 8000f36:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	619a      	str	r2, [r3, #24]
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&yEnd);
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f46:	2204      	movs	r2, #4
 8000f48:	619a      	str	r2, [r3, #24]
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f50:	883b      	ldrh	r3, [r7, #0]
 8000f52:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	6153      	str	r3, [r2, #20]
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f60:	2208      	movs	r2, #8
 8000f62:	619a      	str	r2, [r3, #24]
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f66:	2202      	movs	r2, #2
 8000f68:	619a      	str	r2, [r3, #24]

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 8000f6a:	f7ff f989 	bl	8000280 <LCD_WriteRAM_Prepare>
}   
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000002c 	.word	0x2000002c
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	48000400 	.word	0x48000400

08000f84 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	80fb      	strh	r3, [r7, #6]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 8000f94:	88bb      	ldrh	r3, [r7, #4]
 8000f96:	88fa      	ldrh	r2, [r7, #6]
 8000f98:	88b9      	ldrh	r1, [r7, #4]
 8000f9a:	88f8      	ldrh	r0, [r7, #6]
 8000f9c:	f7ff ff30 	bl	8000e00 <LCD_SetWindows>
} 
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <LCD_direction+0xac>)
 8000fb4:	222a      	movs	r2, #42	@ 0x2a
 8000fb6:	819a      	strh	r2, [r3, #12]
			lcddev.setycmd=0x2B;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <LCD_direction+0xac>)
 8000fba:	222b      	movs	r2, #43	@ 0x2b
 8000fbc:	81da      	strh	r2, [r3, #14]
			lcddev.wramcmd=0x2C;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <LCD_direction+0xac>)
 8000fc0:	222c      	movs	r2, #44	@ 0x2c
 8000fc2:	811a      	strh	r2, [r3, #8]
			lcddev.rramcmd=0x2E;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <LCD_direction+0xac>)
 8000fc6:	222e      	movs	r2, #46	@ 0x2e
 8000fc8:	815a      	strh	r2, [r3, #10]
	switch(direction){		  
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d83b      	bhi.n	8001048 <LCD_direction+0xa0>
 8000fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd8 <LCD_direction+0x30>)
 8000fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd6:	bf00      	nop
 8000fd8:	08000fe9 	.word	0x08000fe9
 8000fdc:	08001001 	.word	0x08001001
 8000fe0:	08001019 	.word	0x08001019
 8000fe4:	08001031 	.word	0x08001031
		case 0:						 	 		
			lcddev.width=LCD_W;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <LCD_direction+0xac>)
 8000fea:	22f0      	movs	r2, #240	@ 0xf0
 8000fec:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <LCD_direction+0xac>)
 8000ff0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ff4:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3));
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	2036      	movs	r0, #54	@ 0x36
 8000ffa:	f7ff f91b 	bl	8000234 <LCD_WriteReg>
		break;
 8000ffe:	e024      	b.n	800104a <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <LCD_direction+0xac>)
 8001002:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001006:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <LCD_direction+0xac>)
 800100a:	22f0      	movs	r2, #240	@ 0xf0
 800100c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6));
 800100e:	2168      	movs	r1, #104	@ 0x68
 8001010:	2036      	movs	r0, #54	@ 0x36
 8001012:	f7ff f90f 	bl	8000234 <LCD_WriteReg>
		break;
 8001016:	e018      	b.n	800104a <LCD_direction+0xa2>
		case 2:						 	 		
			lcddev.width=LCD_W;
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <LCD_direction+0xac>)
 800101a:	22f0      	movs	r2, #240	@ 0xf0
 800101c:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <LCD_direction+0xac>)
 8001020:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001024:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<4)|(1<<6));
 8001026:	21d8      	movs	r1, #216	@ 0xd8
 8001028:	2036      	movs	r0, #54	@ 0x36
 800102a:	f7ff f903 	bl	8000234 <LCD_WriteReg>
		break;
 800102e:	e00c      	b.n	800104a <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <LCD_direction+0xac>)
 8001032:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001036:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <LCD_direction+0xac>)
 800103a:	22f0      	movs	r2, #240	@ 0xf0
 800103c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5)|(1<<4));
 800103e:	21b8      	movs	r1, #184	@ 0xb8
 8001040:	2036      	movs	r0, #54	@ 0x36
 8001042:	f7ff f8f7 	bl	8000234 <LCD_WriteReg>
		break;	
 8001046:	e000      	b.n	800104a <LCD_direction+0xa2>
		default:break;
 8001048:	bf00      	nop
	}		
}	 
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000002c 	.word	0x2000002c

08001058 <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(int16_t sx,u16 sy,int16_t ex,u16 ey,u16 color)	// x must be not less than 0 for obstacle shifting
{																// changing u16 to int16_t
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4604      	mov	r4, r0
 8001060:	4608      	mov	r0, r1
 8001062:	4611      	mov	r1, r2
 8001064:	461a      	mov	r2, r3
 8001066:	4623      	mov	r3, r4
 8001068:	80fb      	strh	r3, [r7, #6]
 800106a:	4603      	mov	r3, r0
 800106c:	80bb      	strh	r3, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	807b      	strh	r3, [r7, #2]
 8001072:	4613      	mov	r3, r2
 8001074:	803b      	strh	r3, [r7, #0]

	if(sx<0)
 8001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da01      	bge.n	8001082 <LCD_Fill+0x2a>
	{
		sx=0;
 800107e:	2300      	movs	r3, #0
 8001080:	80fb      	strh	r3, [r7, #6]
	}

	if(ex<0)
 8001082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001086:	2b00      	cmp	r3, #0
 8001088:	da01      	bge.n	800108e <LCD_Fill+0x36>
	{
		ex=0;
 800108a:	2300      	movs	r3, #0
 800108c:	807b      	strh	r3, [r7, #2]
	}

	u16 i,j;
	u16 width=ex-sx+1; 		//�õ����Ŀ��
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	b29b      	uxth	r3, r3
 8001096:	3301      	adds	r3, #1
 8001098:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;		//�߶�
 800109a:	883a      	ldrh	r2, [r7, #0]
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);//������ʾ����
 80010a6:	88f8      	ldrh	r0, [r7, #6]
 80010a8:	887a      	ldrh	r2, [r7, #2]
 80010aa:	883b      	ldrh	r3, [r7, #0]
 80010ac:	88b9      	ldrh	r1, [r7, #4]
 80010ae:	f7ff fea7 	bl	8000e00 <LCD_SetWindows>
	for(i=0;i<height;i++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	81fb      	strh	r3, [r7, #14]
 80010b6:	e010      	b.n	80010da <LCD_Fill+0x82>
	{
		for(j=0;j<width;j++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	81bb      	strh	r3, [r7, #12]
 80010bc:	e006      	b.n	80010cc <LCD_Fill+0x74>
		Lcd_WriteData_16Bit(color);	//д������
 80010be:	8c3b      	ldrh	r3, [r7, #32]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f8e9 	bl	8000298 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	81bb      	strh	r3, [r7, #12]
 80010cc:	89ba      	ldrh	r2, [r7, #12]
 80010ce:	897b      	ldrh	r3, [r7, #10]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d3f4      	bcc.n	80010be <LCD_Fill+0x66>
	for(i=0;i<height;i++)
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	3301      	adds	r3, #1
 80010d8:	81fb      	strh	r3, [r7, #14]
 80010da:	89fa      	ldrh	r2, [r7, #14]
 80010dc:	893b      	ldrh	r3, [r7, #8]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3ea      	bcc.n	80010b8 <LCD_Fill+0x60>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ���������Ϊȫ��
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <LCD_Fill+0xac>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <LCD_Fill+0xac>)
 80010ec:	885b      	ldrh	r3, [r3, #2]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fe83 	bl	8000e00 <LCD_SetWindows>
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	2000002c 	.word	0x2000002c

08001108 <LCD_DrawLine>:
								x2:the ending x coordinate of the line
								y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b08d      	sub	sp, #52	@ 0x34
 800110c:	af00      	add	r7, sp, #0
 800110e:	4604      	mov	r4, r0
 8001110:	4608      	mov	r0, r1
 8001112:	4611      	mov	r1, r2
 8001114:	461a      	mov	r2, r3
 8001116:	4623      	mov	r3, r4
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	4603      	mov	r3, r0
 800111c:	80bb      	strh	r3, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	807b      	strh	r3, [r7, #2]
 8001122:	4613      	mov	r3, r2
 8001124:	803b      	strh	r3, [r7, #0]
	u16 t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;

	delta_x=x2-x1; //������������
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //���õ�������
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dd02      	ble.n	8001152 <LCD_DrawLine+0x4a>
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	e00b      	b.n	800116a <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//��ֱ��
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <LCD_DrawLine+0x56>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e005      	b.n	800116a <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	425b      	negs	r3, r3
 8001168:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	2b00      	cmp	r3, #0
 800116e:	dd02      	ble.n	8001176 <LCD_DrawLine+0x6e>
 8001170:	2301      	movs	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	e00b      	b.n	800118e <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//ˮƽ��
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <LCD_DrawLine+0x7a>
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	e005      	b.n	800118e <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	425b      	negs	r3, r3
 800118c:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //ѡȡ��������������
 800118e:	6a3a      	ldr	r2, [r7, #32]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	429a      	cmp	r2, r3
 8001194:	dd02      	ble.n	800119c <LCD_DrawLine+0x94>
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	e001      	b.n	80011a0 <LCD_DrawLine+0x98>
	else distance=delta_y;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//�������
 80011a0:	2300      	movs	r3, #0
 80011a2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80011a4:	e02a      	b.n	80011fc <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//����
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	b292      	uxth	r2, r2
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f883 	bl	80002bc <LCD_DrawPoint>
		xerr+=delta_x ;
 80011b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	4413      	add	r3, r2
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y ;
 80011be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	4413      	add	r3, r2
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 80011c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dd07      	ble.n	80011de <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 80011ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80011de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dd07      	ble.n	80011f6 <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 80011e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4413      	add	r3, r2
 80011f4:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//�������
 80011f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80011f8:	3301      	adds	r3, #1
 80011fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80011fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	3301      	adds	r3, #1
 8001202:	429a      	cmp	r2, r3
 8001204:	ddcf      	ble.n	80011a6 <LCD_DrawLine+0x9e>
		}
	}
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3734      	adds	r7, #52	@ 0x34
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}

08001210 <delay_init>:
// Initialize delay function
// When using uC/OS, this function initializes the uC/OS clock tick.
// The SYSTICK clock is fixed to the AHB clock.
// SYSCLK: System clock frequency
void delay_init(u8 SYSCLK)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS                         // If OS support is needed
    u32 reload;
#endif
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); // SysTick frequency is HCLK
 800121a:	2004      	movs	r0, #4
 800121c:	f001 fabc 	bl	8002798 <HAL_SYSTICK_CLKSourceConfig>
    fac_us=SYSCLK;                        // fac_us is used regardless of OS usage
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4a03      	ldr	r2, [pc, #12]	@ (8001230 <delay_init+0x20>)
 8001224:	6013      	str	r3, [r2, #0]
    SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk; // Enable SysTick interrupt
    SysTick->LOAD=reload;                   // Interrupt every 1/OS_TICKS_PER_SEC second
    SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; // Enable SysTick
#else
#endif
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000040 	.word	0x20000040

08001234 <delay_us>:

// Delay for nus microseconds
// nus: Number of microseconds to delay
// nus: 0~190887435 (maximum value is 2^32/fac_us when fac_us=22.5)
void delay_us(u32 nus)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told,tnow,tcnt=0;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
    u32 reload=SysTick->LOAD;                // Value of LOAD
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <delay_us+0x74>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	617b      	str	r3, [r7, #20]
    ticks=nus*fac_us;                        // Number of ticks needed
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <delay_us+0x78>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	613b      	str	r3, [r7, #16]
    told=SysTick->VAL;                        // Counter value upon entry
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <delay_us+0x74>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61fb      	str	r3, [r7, #28]
    while(1)
    {
        tnow=SysTick->VAL;
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <delay_us+0x74>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	60fb      	str	r3, [r7, #12]
        if(tnow!=told)
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	429a      	cmp	r2, r3
 8001264:	d0f8      	beq.n	8001258 <delay_us+0x24>
        {
            if(tnow<told)tcnt+=told-tnow;    // Note that SYSTICK is a decrementing counter.
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	429a      	cmp	r2, r3
 800126c:	d206      	bcs.n	800127c <delay_us+0x48>
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4413      	add	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	e007      	b.n	800128c <delay_us+0x58>
            else tcnt+=reload-tnow+told;
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad2      	subs	r2, r2, r3
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	4413      	add	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4413      	add	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
            told=tnow;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	61fb      	str	r3, [r7, #28]
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d200      	bcs.n	800129a <delay_us+0x66>
        tnow=SysTick->VAL;
 8001298:	e7de      	b.n	8001258 <delay_us+0x24>
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 800129a:	bf00      	nop
        }
    };
}
 800129c:	bf00      	nop
 800129e:	3724      	adds	r7, #36	@ 0x24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000e010 	.word	0xe000e010
 80012ac:	20000040 	.word	0x20000040

080012b0 <delay_ms>:

// Delay for nms milliseconds
// nms: Number of milliseconds to delay
void delay_ms(u16 nms)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
    u32 i;
    for(i=0;i<nms;i++) delay_us(1000);
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e006      	b.n	80012ce <delay_ms+0x1e>
 80012c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012c4:	f7ff ffb6 	bl	8001234 <delay_us>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3f4      	bcc.n	80012c0 <delay_ms+0x10>
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <DrawDino>:
//#include "XPT2046_driver.h"

extern uint8_t refresh;

void DrawDino(uint16_t altitude,uint8_t left_leg, uint8_t right_leg)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	460b      	mov	r3, r1
 80012ec:	717b      	strb	r3, [r7, #5]
 80012ee:	4613      	mov	r3, r2
 80012f0:	713b      	strb	r3, [r7, #4]


	// ----------- HEAD -----------
	LCD_Fill(27,160 - altitude,42,170 - altitude,GRAY);      // head
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80012f8:	b299      	uxth	r1, r3
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	f1c3 03aa 	rsb	r3, r3, #170	@ 0xaa
 8001300:	b29b      	uxth	r3, r3
 8001302:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001306:	9200      	str	r2, [sp, #0]
 8001308:	222a      	movs	r2, #42	@ 0x2a
 800130a:	201b      	movs	r0, #27
 800130c:	f7ff fea4 	bl	8001058 <LCD_Fill>
	LCD_Fill(25,162 - altitude,45,172 - altitude,GRAY);
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	f1c3 03a2 	rsb	r3, r3, #162	@ 0xa2
 8001316:	b299      	uxth	r1, r3
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 800131e:	b29b      	uxth	r3, r3
 8001320:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001324:	9200      	str	r2, [sp, #0]
 8001326:	222d      	movs	r2, #45	@ 0x2d
 8001328:	2019      	movs	r0, #25
 800132a:	f7ff fe95 	bl	8001058 <LCD_Fill>

	LCD_Fill(25,159 - altitude,26,161 - altitude,WHITE);		// clear head top 1
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	f1c3 039f 	rsb	r3, r3, #159	@ 0x9f
 8001334:	b299      	uxth	r1, r3
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 800133c:	b29b      	uxth	r3, r3
 800133e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001342:	9200      	str	r2, [sp, #0]
 8001344:	221a      	movs	r2, #26
 8001346:	2019      	movs	r0, #25
 8001348:	f7ff fe86 	bl	8001058 <LCD_Fill>
	LCD_Fill(27,157 - altitude,42,159 - altitude,WHITE);		// clear head top 2
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	f1c3 039d 	rsb	r3, r3, #157	@ 0x9d
 8001352:	b299      	uxth	r1, r3
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	f1c3 039f 	rsb	r3, r3, #159	@ 0x9f
 800135a:	b29b      	uxth	r3, r3
 800135c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001360:	9200      	str	r2, [sp, #0]
 8001362:	222a      	movs	r2, #42	@ 0x2a
 8001364:	201b      	movs	r0, #27
 8001366:	f7ff fe77 	bl	8001058 <LCD_Fill>
	LCD_Fill(43,159 - altitude,45,161 - altitude,WHITE);		// clear head top 3
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	f1c3 039f 	rsb	r3, r3, #159	@ 0x9f
 8001370:	b299      	uxth	r1, r3
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 8001378:	b29b      	uxth	r3, r3
 800137a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800137e:	9200      	str	r2, [sp, #0]
 8001380:	222d      	movs	r2, #45	@ 0x2d
 8001382:	202b      	movs	r0, #43	@ 0x2b
 8001384:	f7ff fe68 	bl	8001058 <LCD_Fill>

	LCD_Fill(37,173 - altitude,45,175 - altitude,WHITE);		// clear head bottom
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 800138e:	b299      	uxth	r1, r3
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 8001396:	b29b      	uxth	r3, r3
 8001398:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	222d      	movs	r2, #45	@ 0x2d
 80013a0:	2025      	movs	r0, #37	@ 0x25
 80013a2:	f7ff fe59 	bl	8001058 <LCD_Fill>


	// ----------- EYE -----------
	LCD_Fill(30,163 - altitude,32,166 - altitude,WHITE);     // eye
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	f1c3 03a3 	rsb	r3, r3, #163	@ 0xa3
 80013ac:	b299      	uxth	r1, r3
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	f1c3 03a6 	rsb	r3, r3, #166	@ 0xa6
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ba:	9200      	str	r2, [sp, #0]
 80013bc:	2220      	movs	r2, #32
 80013be:	201e      	movs	r0, #30
 80013c0:	f7ff fe4a 	bl	8001058 <LCD_Fill>


	// ----------- MOUTH -----------
	LCD_Fill(25,172 - altitude,36,175 - altitude,GRAY);      // mouth
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 80013ca:	b299      	uxth	r1, r3
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	2224      	movs	r2, #36	@ 0x24
 80013dc:	2019      	movs	r0, #25
 80013de:	f7ff fe3b 	bl	8001058 <LCD_Fill>
	LCD_Fill(25,175 - altitude,41,176 - altitude,GRAY);      // mouth (tongue)
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 80013e8:	b299      	uxth	r1, r3
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80013f6:	9200      	str	r2, [sp, #0]
 80013f8:	2229      	movs	r2, #41	@ 0x29
 80013fa:	2019      	movs	r0, #25
 80013fc:	f7ff fe2c 	bl	8001058 <LCD_Fill>

	LCD_Fill(36,177 - altitude,41,180 - altitude,WHITE);      // clear mouth (tongue)
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8001406:	b299      	uxth	r1, r3
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 800140e:	b29b      	uxth	r3, r3
 8001410:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001414:	9200      	str	r2, [sp, #0]
 8001416:	2229      	movs	r2, #41	@ 0x29
 8001418:	2024      	movs	r0, #36	@ 0x24
 800141a:	f7ff fe1d 	bl	8001058 <LCD_Fill>


	// ----------- NECK & CHEST -----------
	LCD_Fill(25,176 - altitude,35,177 - altitude,GRAY);     // neck
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8001424:	b299      	uxth	r1, r3
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 800142c:	b29b      	uxth	r3, r3
 800142e:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001432:	9200      	str	r2, [sp, #0]
 8001434:	2223      	movs	r2, #35	@ 0x23
 8001436:	2019      	movs	r0, #25
 8001438:	f7ff fe0e 	bl	8001058 <LCD_Fill>
	LCD_Fill(23,177 - altitude,35,192 - altitude,GRAY);     // neck & chest
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8001442:	b299      	uxth	r1, r3
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 800144a:	b29b      	uxth	r3, r3
 800144c:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	2223      	movs	r2, #35	@ 0x23
 8001454:	2017      	movs	r0, #23
 8001456:	f7ff fdff 	bl	8001058 <LCD_Fill>

	LCD_Fill(23,174 - altitude,24,176 - altitude,WHITE);     // clear neck & chest top
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 8001460:	b299      	uxth	r1, r3
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8001468:	b29b      	uxth	r3, r3
 800146a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800146e:	9200      	str	r2, [sp, #0]
 8001470:	2218      	movs	r2, #24
 8001472:	2017      	movs	r0, #23
 8001474:	f7ff fdf0 	bl	8001058 <LCD_Fill>
	LCD_Fill(33,193 - altitude,35,195 - altitude,WHITE);    // clear neck & chest bottom
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	f1c3 03c1 	rsb	r3, r3, #193	@ 0xc1
 800147e:	b299      	uxth	r1, r3
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 8001486:	b29b      	uxth	r3, r3
 8001488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800148c:	9200      	str	r2, [sp, #0]
 800148e:	2223      	movs	r2, #35	@ 0x23
 8001490:	2021      	movs	r0, #33	@ 0x21
 8001492:	f7ff fde1 	bl	8001058 <LCD_Fill>


	// ----------- ARM -----------
	LCD_Fill(35,181 - altitude,39,183 - altitude,GRAY);      // arm1
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 800149c:	b299      	uxth	r1, r3
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	f1c3 03b7 	rsb	r3, r3, #183	@ 0xb7
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80014aa:	9200      	str	r2, [sp, #0]
 80014ac:	2227      	movs	r2, #39	@ 0x27
 80014ae:	2023      	movs	r0, #35	@ 0x23
 80014b0:	f7ff fdd2 	bl	8001058 <LCD_Fill>
	LCD_Fill(37,181 - altitude,39,185 - altitude,GRAY);		 // arm2
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 80014ba:	b299      	uxth	r1, r3
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	f1c3 03b9 	rsb	r3, r3, #185	@ 0xb9
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80014c8:	9200      	str	r2, [sp, #0]
 80014ca:	2227      	movs	r2, #39	@ 0x27
 80014cc:	2025      	movs	r0, #37	@ 0x25
 80014ce:	f7ff fdc3 	bl	8001058 <LCD_Fill>

	LCD_Fill(35,184 - altitude,36,186 - altitude,WHITE);      // clear arm1 bottom
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	f1c3 03b8 	rsb	r3, r3, #184	@ 0xb8
 80014d8:	b299      	uxth	r1, r3
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	f1c3 03ba 	rsb	r3, r3, #186	@ 0xba
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	2224      	movs	r2, #36	@ 0x24
 80014ea:	2023      	movs	r0, #35	@ 0x23
 80014ec:	f7ff fdb4 	bl	8001058 <LCD_Fill>
	LCD_Fill(37,186 - altitude,39,188 - altitude,WHITE);      // clear arm2 bottom
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	f1c3 03ba 	rsb	r3, r3, #186	@ 0xba
 80014f6:	b299      	uxth	r1, r3
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	f1c3 03bc 	rsb	r3, r3, #188	@ 0xbc
 80014fe:	b29b      	uxth	r3, r3
 8001500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001504:	9200      	str	r2, [sp, #0]
 8001506:	2227      	movs	r2, #39	@ 0x27
 8001508:	2025      	movs	r0, #37	@ 0x25
 800150a:	f7ff fda5 	bl	8001058 <LCD_Fill>


	// ----------- BODY -----------
	LCD_Fill(20,180 - altitude,32,195 - altitude,GRAY);     // body1
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8001514:	b299      	uxth	r1, r3
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 800151c:	b29b      	uxth	r3, r3
 800151e:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001522:	9200      	str	r2, [sp, #0]
 8001524:	2220      	movs	r2, #32
 8001526:	2014      	movs	r0, #20
 8001528:	f7ff fd96 	bl	8001058 <LCD_Fill>
	LCD_Fill(17,182 - altitude,30,197 - altitude,GRAY);     // body2
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 8001532:	b299      	uxth	r1, r3
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 800153a:	b29b      	uxth	r3, r3
 800153c:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001540:	9200      	str	r2, [sp, #0]
 8001542:	221e      	movs	r2, #30
 8001544:	2011      	movs	r0, #17
 8001546:	f7ff fd87 	bl	8001058 <LCD_Fill>
	LCD_Fill(12,185 - altitude,27,197 - altitude,GRAY);     // body3
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	f1c3 03b9 	rsb	r3, r3, #185	@ 0xb9
 8001550:	b299      	uxth	r1, r3
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001558:	b29b      	uxth	r3, r3
 800155a:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800155e:	9200      	str	r2, [sp, #0]
 8001560:	221b      	movs	r2, #27
 8001562:	200c      	movs	r0, #12
 8001564:	f7ff fd78 	bl	8001058 <LCD_Fill>

	LCD_Fill(20,177 - altitude,22,179 - altitude,WHITE);    // clear body1 top
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 800156e:	b299      	uxth	r1, r3
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 8001576:	b29b      	uxth	r3, r3
 8001578:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800157c:	9200      	str	r2, [sp, #0]
 800157e:	2216      	movs	r2, #22
 8001580:	2014      	movs	r0, #20
 8001582:	f7ff fd69 	bl	8001058 <LCD_Fill>
	LCD_Fill(17,179 - altitude,19,181 - altitude,WHITE);    // clear body2 top
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 800158c:	b299      	uxth	r1, r3
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 8001594:	b29b      	uxth	r3, r3
 8001596:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800159a:	9200      	str	r2, [sp, #0]
 800159c:	2213      	movs	r2, #19
 800159e:	2011      	movs	r0, #17
 80015a0:	f7ff fd5a 	bl	8001058 <LCD_Fill>
	LCD_Fill(13,182 - altitude,16,184 - altitude,WHITE);    // clear body3 top (tail part)
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 80015aa:	b299      	uxth	r1, r3
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	f1c3 03b8 	rsb	r3, r3, #184	@ 0xb8
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b8:	9200      	str	r2, [sp, #0]
 80015ba:	2210      	movs	r2, #16
 80015bc:	200d      	movs	r0, #13
 80015be:	f7ff fd4b 	bl	8001058 <LCD_Fill>

	LCD_Fill(31,196 - altitude,32,198 - altitude,WHITE);    // clear body1 bottom
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 80015c8:	b299      	uxth	r1, r3
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f1c3 03c6 	rsb	r3, r3, #198	@ 0xc6
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d6:	9200      	str	r2, [sp, #0]
 80015d8:	2220      	movs	r2, #32
 80015da:	201f      	movs	r0, #31
 80015dc:	f7ff fd3c 	bl	8001058 <LCD_Fill>
	LCD_Fill(28,198 - altitude,30,200 - altitude,WHITE);    // clear body2 bottom
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	f1c3 03c6 	rsb	r3, r3, #198	@ 0xc6
 80015e6:	b299      	uxth	r1, r3
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015f4:	9200      	str	r2, [sp, #0]
 80015f6:	221e      	movs	r2, #30
 80015f8:	201c      	movs	r0, #28
 80015fa:	f7ff fd2d 	bl	8001058 <LCD_Fill>
	LCD_Fill(12,197 - altitude,14,199 - altitude,WHITE);    // clear body3 leg break 1 bottom
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001604:	b299      	uxth	r1, r3
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	f1c3 03c7 	rsb	r3, r3, #199	@ 0xc7
 800160c:	b29b      	uxth	r3, r3
 800160e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001612:	9200      	str	r2, [sp, #0]
 8001614:	220e      	movs	r2, #14
 8001616:	200c      	movs	r0, #12
 8001618:	f7ff fd1e 	bl	8001058 <LCD_Fill>
	LCD_Fill(20,197 - altitude,22,201 - altitude,WHITE);    // clear body3 leg break 2 bottom
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001622:	b299      	uxth	r1, r3
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	f1c3 03c9 	rsb	r3, r3, #201	@ 0xc9
 800162a:	b29b      	uxth	r3, r3
 800162c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001630:	9200      	str	r2, [sp, #0]
 8001632:	2216      	movs	r2, #22
 8001634:	2014      	movs	r0, #20
 8001636:	f7ff fd0f 	bl	8001058 <LCD_Fill>


	// ----------- TAIL -----------
	LCD_Fill(10,182 - altitude,12,195 - altitude,GRAY);     // tail1
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 8001640:	b299      	uxth	r1, r3
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 8001648:	b29b      	uxth	r3, r3
 800164a:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800164e:	9200      	str	r2, [sp, #0]
 8001650:	220c      	movs	r2, #12
 8001652:	200a      	movs	r0, #10
 8001654:	f7ff fd00 	bl	8001058 <LCD_Fill>
	LCD_Fill(8,180 - altitude,10,192 - altitude,GRAY);		// tail2
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 800165e:	b299      	uxth	r1, r3
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 8001666:	b29b      	uxth	r3, r3
 8001668:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800166c:	9200      	str	r2, [sp, #0]
 800166e:	220a      	movs	r2, #10
 8001670:	2008      	movs	r0, #8
 8001672:	f7ff fcf1 	bl	8001058 <LCD_Fill>
	LCD_Fill(7,175 - altitude,8,188 - altitude,GRAY);		// tail3
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 800167c:	b299      	uxth	r1, r3
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	f1c3 03bc 	rsb	r3, r3, #188	@ 0xbc
 8001684:	b29b      	uxth	r3, r3
 8001686:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800168a:	9200      	str	r2, [sp, #0]
 800168c:	2208      	movs	r2, #8
 800168e:	2007      	movs	r0, #7
 8001690:	f7ff fce2 	bl	8001058 <LCD_Fill>

	LCD_Fill(10,179 - altitude,12,181 - altitude,WHITE);	// clear tail1 top
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 800169a:	b299      	uxth	r1, r3
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016a8:	9200      	str	r2, [sp, #0]
 80016aa:	220c      	movs	r2, #12
 80016ac:	200a      	movs	r0, #10
 80016ae:	f7ff fcd3 	bl	8001058 <LCD_Fill>
	LCD_Fill(9,177 - altitude,10,179 - altitude,WHITE);		// clear tail2 top
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 80016b8:	b299      	uxth	r1, r3
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016c6:	9200      	str	r2, [sp, #0]
 80016c8:	220a      	movs	r2, #10
 80016ca:	2009      	movs	r0, #9
 80016cc:	f7ff fcc4 	bl	8001058 <LCD_Fill>
	LCD_Fill(7,172 - altitude,8,174 - altitude,WHITE);		// clear tail3 top
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 80016d6:	b299      	uxth	r1, r3
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 80016de:	b29b      	uxth	r3, r3
 80016e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016e4:	9200      	str	r2, [sp, #0]
 80016e6:	2208      	movs	r2, #8
 80016e8:	2007      	movs	r0, #7
 80016ea:	f7ff fcb5 	bl	8001058 <LCD_Fill>

	LCD_Fill(10,196 - altitude,12,198 - altitude,WHITE);	// clear tail1 bottom
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 80016f4:	b299      	uxth	r1, r3
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	f1c3 03c6 	rsb	r3, r3, #198	@ 0xc6
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001702:	9200      	str	r2, [sp, #0]
 8001704:	220c      	movs	r2, #12
 8001706:	200a      	movs	r0, #10
 8001708:	f7ff fca6 	bl	8001058 <LCD_Fill>
	LCD_Fill(8,193 - altitude,9,195 - altitude,WHITE);		// clear tail2 bottom
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	f1c3 03c1 	rsb	r3, r3, #193	@ 0xc1
 8001712:	b299      	uxth	r1, r3
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 800171a:	b29b      	uxth	r3, r3
 800171c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	2209      	movs	r2, #9
 8001724:	2008      	movs	r0, #8
 8001726:	f7ff fc97 	bl	8001058 <LCD_Fill>
	LCD_Fill(6,189 - altitude,7,191 - altitude,WHITE);		// clear tail3 bottom
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	f1c3 03bd 	rsb	r3, r3, #189	@ 0xbd
 8001730:	b299      	uxth	r1, r3
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	f1c3 03bf 	rsb	r3, r3, #191	@ 0xbf
 8001738:	b29b      	uxth	r3, r3
 800173a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800173e:	9200      	str	r2, [sp, #0]
 8001740:	2207      	movs	r2, #7
 8001742:	2006      	movs	r0, #6
 8001744:	f7ff fc88 	bl	8001058 <LCD_Fill>


	// ----------- RIGHT LEG -----------
	LCD_Fill(23,197 - altitude,27,200 - altitude,GRAY);      						// right leg
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 800174e:	b299      	uxth	r1, r3
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001756:	b29b      	uxth	r3, r3
 8001758:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800175c:	9200      	str	r2, [sp, #0]
 800175e:	221b      	movs	r2, #27
 8001760:	2017      	movs	r0, #23
 8001762:	f7ff fc79 	bl	8001058 <LCD_Fill>
	LCD_Fill(25,200 - altitude - right_leg,27,207 - altitude - right_leg,GRAY);		// leg animation
 8001766:	793b      	ldrb	r3, [r7, #4]
 8001768:	b29a      	uxth	r2, r3
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	4413      	add	r3, r2
 800176e:	b29b      	uxth	r3, r3
 8001770:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001774:	b299      	uxth	r1, r3
 8001776:	793b      	ldrb	r3, [r7, #4]
 8001778:	b29a      	uxth	r2, r3
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	4413      	add	r3, r2
 800177e:	b29b      	uxth	r3, r3
 8001780:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 8001784:	b29b      	uxth	r3, r3
 8001786:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800178a:	9200      	str	r2, [sp, #0]
 800178c:	221b      	movs	r2, #27
 800178e:	2019      	movs	r0, #25
 8001790:	f7ff fc62 	bl	8001058 <LCD_Fill>
	LCD_Fill(27,205 - altitude - right_leg,30,207 - altitude - right_leg,GRAY);
 8001794:	793b      	ldrb	r3, [r7, #4]
 8001796:	b29a      	uxth	r2, r3
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	4413      	add	r3, r2
 800179c:	b29b      	uxth	r3, r3
 800179e:	f1c3 03cd 	rsb	r3, r3, #205	@ 0xcd
 80017a2:	b299      	uxth	r1, r3
 80017a4:	793b      	ldrb	r3, [r7, #4]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	4413      	add	r3, r2
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80017b8:	9200      	str	r2, [sp, #0]
 80017ba:	221e      	movs	r2, #30
 80017bc:	201b      	movs	r0, #27
 80017be:	f7ff fc4b 	bl	8001058 <LCD_Fill>

	LCD_Fill(23,202 - altitude - right_leg,24,204 - altitude - right_leg,WHITE);	// clear thigh
 80017c2:	793b      	ldrb	r3, [r7, #4]
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	4413      	add	r3, r2
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 80017d0:	b299      	uxth	r1, r3
 80017d2:	793b      	ldrb	r3, [r7, #4]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	4413      	add	r3, r2
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e6:	9200      	str	r2, [sp, #0]
 80017e8:	2218      	movs	r2, #24
 80017ea:	2017      	movs	r0, #23
 80017ec:	f7ff fc34 	bl	8001058 <LCD_Fill>
	LCD_Fill(28,202 - altitude - right_leg,30,204 - altitude - right_leg,WHITE);	// clear foot top
 80017f0:	793b      	ldrb	r3, [r7, #4]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	4413      	add	r3, r2
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 80017fe:	b299      	uxth	r1, r3
 8001800:	793b      	ldrb	r3, [r7, #4]
 8001802:	b29a      	uxth	r2, r3
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	4413      	add	r3, r2
 8001808:	b29b      	uxth	r3, r3
 800180a:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 800180e:	b29b      	uxth	r3, r3
 8001810:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001814:	9200      	str	r2, [sp, #0]
 8001816:	221e      	movs	r2, #30
 8001818:	201c      	movs	r0, #28
 800181a:	f7ff fc1d 	bl	8001058 <LCD_Fill>
	LCD_Fill(23,209 - altitude - right_leg,30,211 - altitude - right_leg,WHITE);	// clear foot bottom
 800181e:	793b      	ldrb	r3, [r7, #4]
 8001820:	b29a      	uxth	r2, r3
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4413      	add	r3, r2
 8001826:	b29b      	uxth	r3, r3
 8001828:	f1c3 03d1 	rsb	r3, r3, #209	@ 0xd1
 800182c:	b299      	uxth	r1, r3
 800182e:	793b      	ldrb	r3, [r7, #4]
 8001830:	b29a      	uxth	r2, r3
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	4413      	add	r3, r2
 8001836:	b29b      	uxth	r3, r3
 8001838:	f1c3 03d3 	rsb	r3, r3, #211	@ 0xd3
 800183c:	b29b      	uxth	r3, r3
 800183e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001842:	9200      	str	r2, [sp, #0]
 8001844:	221e      	movs	r2, #30
 8001846:	2017      	movs	r0, #23
 8001848:	f7ff fc06 	bl	8001058 <LCD_Fill>


	// ----------- LEFT LEG -----------
	LCD_Fill(15,197 - altitude,19,200 - altitude,GRAY);      						// left leg
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001852:	b299      	uxth	r1, r3
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800185a:	b29b      	uxth	r3, r3
 800185c:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001860:	9200      	str	r2, [sp, #0]
 8001862:	2213      	movs	r2, #19
 8001864:	200f      	movs	r0, #15
 8001866:	f7ff fbf7 	bl	8001058 <LCD_Fill>
	LCD_Fill(15,200 - altitude - left_leg,17,207 - altitude - left_leg,GRAY);		// leg animation
 800186a:	797b      	ldrb	r3, [r7, #5]
 800186c:	b29a      	uxth	r2, r3
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	4413      	add	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001878:	b299      	uxth	r1, r3
 800187a:	797b      	ldrb	r3, [r7, #5]
 800187c:	b29a      	uxth	r2, r3
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	4413      	add	r3, r2
 8001882:	b29b      	uxth	r3, r3
 8001884:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 8001888:	b29b      	uxth	r3, r3
 800188a:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800188e:	9200      	str	r2, [sp, #0]
 8001890:	2211      	movs	r2, #17
 8001892:	200f      	movs	r0, #15
 8001894:	f7ff fbe0 	bl	8001058 <LCD_Fill>
	LCD_Fill(17,205 - altitude - left_leg,20,207 - altitude - left_leg,GRAY);
 8001898:	797b      	ldrb	r3, [r7, #5]
 800189a:	b29a      	uxth	r2, r3
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	4413      	add	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f1c3 03cd 	rsb	r3, r3, #205	@ 0xcd
 80018a6:	b299      	uxth	r1, r3
 80018a8:	797b      	ldrb	r3, [r7, #5]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	4413      	add	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80018bc:	9200      	str	r2, [sp, #0]
 80018be:	2214      	movs	r2, #20
 80018c0:	2011      	movs	r0, #17
 80018c2:	f7ff fbc9 	bl	8001058 <LCD_Fill>

	LCD_Fill(18,202 - altitude - left_leg,20,204 - altitude - left_leg,WHITE);		// clear foot top with thigh
 80018c6:	797b      	ldrb	r3, [r7, #5]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	4413      	add	r3, r2
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 80018d4:	b299      	uxth	r1, r3
 80018d6:	797b      	ldrb	r3, [r7, #5]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	4413      	add	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ea:	9200      	str	r2, [sp, #0]
 80018ec:	2214      	movs	r2, #20
 80018ee:	2012      	movs	r0, #18
 80018f0:	f7ff fbb2 	bl	8001058 <LCD_Fill>
	LCD_Fill(15,209 - altitude - left_leg,20,211 - altitude - left_leg,WHITE);		// clear foot bottom
 80018f4:	797b      	ldrb	r3, [r7, #5]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	4413      	add	r3, r2
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	f1c3 03d1 	rsb	r3, r3, #209	@ 0xd1
 8001902:	b299      	uxth	r1, r3
 8001904:	797b      	ldrb	r3, [r7, #5]
 8001906:	b29a      	uxth	r2, r3
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	4413      	add	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	f1c3 03d3 	rsb	r3, r3, #211	@ 0xd3
 8001912:	b29b      	uxth	r3, r3
 8001914:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001918:	9200      	str	r2, [sp, #0]
 800191a:	2214      	movs	r2, #20
 800191c:	200f      	movs	r0, #15
 800191e:	f7ff fb9b 	bl	8001058 <LCD_Fill>

}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <DinoAnimation>:
uint8_t obs_drawed=0;	// obstacle drawed

int8_t velocity=0;

void DinoAnimation(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	if((TOUCH==0) || (jump_step != 0))	// jumping
 8001930:	2110      	movs	r1, #16
 8001932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001936:	f001 f8d5 	bl	8002ae4 <HAL_GPIO_ReadPin>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <DinoAnimation+0x1e>
 8001940:	4b71      	ldr	r3, [pc, #452]	@ (8001b08 <DinoAnimation+0x1dc>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80b2 	beq.w	8001aae <DinoAnimation+0x182>
	{
		if(refresh == 1)
 800194a:	4b70      	ldr	r3, [pc, #448]	@ (8001b0c <DinoAnimation+0x1e0>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	f040 80d8 	bne.w	8001b04 <DinoAnimation+0x1d8>
		{

			switch(jump_step)
 8001954:	4b6c      	ldr	r3, [pc, #432]	@ (8001b08 <DinoAnimation+0x1dc>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d069      	beq.n	8001a30 <DinoAnimation+0x104>
 800195c:	2b00      	cmp	r3, #0
 800195e:	f2c0 8083 	blt.w	8001a68 <DinoAnimation+0x13c>
 8001962:	2b4b      	cmp	r3, #75	@ 0x4b
 8001964:	f300 8080 	bgt.w	8001a68 <DinoAnimation+0x13c>
 8001968:	2b1e      	cmp	r3, #30
 800196a:	db7d      	blt.n	8001a68 <DinoAnimation+0x13c>
 800196c:	3b1e      	subs	r3, #30
 800196e:	2b2d      	cmp	r3, #45	@ 0x2d
 8001970:	d87a      	bhi.n	8001a68 <DinoAnimation+0x13c>
 8001972:	a201      	add	r2, pc, #4	@ (adr r2, 8001978 <DinoAnimation+0x4c>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	08001a39 	.word	0x08001a39
 800197c:	08001a69 	.word	0x08001a69
 8001980:	08001a69 	.word	0x08001a69
 8001984:	08001a69 	.word	0x08001a69
 8001988:	08001a69 	.word	0x08001a69
 800198c:	08001a69 	.word	0x08001a69
 8001990:	08001a69 	.word	0x08001a69
 8001994:	08001a69 	.word	0x08001a69
 8001998:	08001a69 	.word	0x08001a69
 800199c:	08001a69 	.word	0x08001a69
 80019a0:	08001a69 	.word	0x08001a69
 80019a4:	08001a69 	.word	0x08001a69
 80019a8:	08001a69 	.word	0x08001a69
 80019ac:	08001a69 	.word	0x08001a69
 80019b0:	08001a41 	.word	0x08001a41
 80019b4:	08001a69 	.word	0x08001a69
 80019b8:	08001a69 	.word	0x08001a69
 80019bc:	08001a69 	.word	0x08001a69
 80019c0:	08001a69 	.word	0x08001a69
 80019c4:	08001a69 	.word	0x08001a69
 80019c8:	08001a69 	.word	0x08001a69
 80019cc:	08001a49 	.word	0x08001a49
 80019d0:	08001a69 	.word	0x08001a69
 80019d4:	08001a69 	.word	0x08001a69
 80019d8:	08001a51 	.word	0x08001a51
 80019dc:	08001a69 	.word	0x08001a69
 80019e0:	08001a69 	.word	0x08001a69
 80019e4:	08001a69 	.word	0x08001a69
 80019e8:	08001a69 	.word	0x08001a69
 80019ec:	08001a69 	.word	0x08001a69
 80019f0:	08001a69 	.word	0x08001a69
 80019f4:	08001a59 	.word	0x08001a59
 80019f8:	08001a69 	.word	0x08001a69
 80019fc:	08001a69 	.word	0x08001a69
 8001a00:	08001a69 	.word	0x08001a69
 8001a04:	08001a69 	.word	0x08001a69
 8001a08:	08001a69 	.word	0x08001a69
 8001a0c:	08001a69 	.word	0x08001a69
 8001a10:	08001a69 	.word	0x08001a69
 8001a14:	08001a69 	.word	0x08001a69
 8001a18:	08001a69 	.word	0x08001a69
 8001a1c:	08001a69 	.word	0x08001a69
 8001a20:	08001a69 	.word	0x08001a69
 8001a24:	08001a69 	.word	0x08001a69
 8001a28:	08001a69 	.word	0x08001a69
 8001a2c:	08001a61 	.word	0x08001a61
			{
			case 0:
			    velocity = 3;	//30
 8001a30:	4b37      	ldr	r3, [pc, #220]	@ (8001b10 <DinoAnimation+0x1e4>)
 8001a32:	2203      	movs	r2, #3
 8001a34:	701a      	strb	r2, [r3, #0]
			    break;
 8001a36:	e018      	b.n	8001a6a <DinoAnimation+0x13e>
			case 30:
			    velocity = 2;	//14
 8001a38:	4b35      	ldr	r3, [pc, #212]	@ (8001b10 <DinoAnimation+0x1e4>)
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	701a      	strb	r2, [r3, #0]
			    break;
 8001a3e:	e014      	b.n	8001a6a <DinoAnimation+0x13e>
			case 44:
			    velocity = 1;	//7
 8001a40:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <DinoAnimation+0x1e4>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
			    break;
 8001a46:	e010      	b.n	8001a6a <DinoAnimation+0x13e>
			case 51:
			    velocity = 0;	//3
 8001a48:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <DinoAnimation+0x1e4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
			    break;
 8001a4e:	e00c      	b.n	8001a6a <DinoAnimation+0x13e>
			case 54:
			    velocity = -1;	//7
 8001a50:	4b2f      	ldr	r3, [pc, #188]	@ (8001b10 <DinoAnimation+0x1e4>)
 8001a52:	22ff      	movs	r2, #255	@ 0xff
 8001a54:	701a      	strb	r2, [r3, #0]
			    break;
 8001a56:	e008      	b.n	8001a6a <DinoAnimation+0x13e>
			case 61:
			    velocity = -2;	//14
 8001a58:	4b2d      	ldr	r3, [pc, #180]	@ (8001b10 <DinoAnimation+0x1e4>)
 8001a5a:	22fe      	movs	r2, #254	@ 0xfe
 8001a5c:	701a      	strb	r2, [r3, #0]
			    break;
 8001a5e:	e004      	b.n	8001a6a <DinoAnimation+0x13e>
			case 75:
			    velocity = -3;	//30
 8001a60:	4b2b      	ldr	r3, [pc, #172]	@ (8001b10 <DinoAnimation+0x1e4>)
 8001a62:	22fd      	movs	r2, #253	@ 0xfd
 8001a64:	701a      	strb	r2, [r3, #0]
			    break;
 8001a66:	e000      	b.n	8001a6a <DinoAnimation+0x13e>
			default:
			    break;
 8001a68:	bf00      	nop
			}



			jump_step++;
 8001a6a:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <DinoAnimation+0x1dc>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	4b25      	ldr	r3, [pc, #148]	@ (8001b08 <DinoAnimation+0x1dc>)
 8001a74:	801a      	strh	r2, [r3, #0]

			if(jump_step>104)
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <DinoAnimation+0x1dc>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	2b68      	cmp	r3, #104	@ 0x68
 8001a7c:	d902      	bls.n	8001a84 <DinoAnimation+0x158>
			{
				jump_step = 0;
 8001a7e:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <DinoAnimation+0x1dc>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	801a      	strh	r2, [r3, #0]
			}

			jump = jump + velocity;
 8001a84:	4b22      	ldr	r3, [pc, #136]	@ (8001b10 <DinoAnimation+0x1e4>)
 8001a86:	f993 3000 	ldrsb.w	r3, [r3]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <DinoAnimation+0x1e8>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <DinoAnimation+0x1e8>)
 8001a96:	801a      	strh	r2, [r3, #0]

			DrawDino(jump,0,0);
 8001a98:	4b1e      	ldr	r3, [pc, #120]	@ (8001b14 <DinoAnimation+0x1e8>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fc1d 	bl	80012e0 <DrawDino>
			dino_drawed = 1;
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <DinoAnimation+0x1ec>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
		if(refresh == 1)
 8001aac:	e02a      	b.n	8001b04 <DinoAnimation+0x1d8>


	}
	else	// walking with leg animation
	{
		if(refresh == 1)
 8001aae:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <DinoAnimation+0x1e0>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d126      	bne.n	8001b04 <DinoAnimation+0x1d8>
		{
			leg_step++;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <DinoAnimation+0x1f0>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <DinoAnimation+0x1f0>)
 8001ac0:	801a      	strh	r2, [r3, #0]

			if(leg_step>60)		//delay between steps
 8001ac2:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <DinoAnimation+0x1f0>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	2b3c      	cmp	r3, #60	@ 0x3c
 8001ac8:	d902      	bls.n	8001ad0 <DinoAnimation+0x1a4>
			{
				leg_step = 0;
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <DinoAnimation+0x1f0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	801a      	strh	r2, [r3, #0]
			}

			if(leg_step < 30)
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <DinoAnimation+0x1f0>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	2b1d      	cmp	r3, #29
 8001ad6:	d808      	bhi.n	8001aea <DinoAnimation+0x1be>
			{
				DrawDino(0,0,3);
 8001ad8:	2203      	movs	r2, #3
 8001ada:	2100      	movs	r1, #0
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff fbff 	bl	80012e0 <DrawDino>
				dino_drawed = 1;
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <DinoAnimation+0x1ec>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
				dino_drawed = 1;
			}

		}
	}
}
 8001ae8:	e00c      	b.n	8001b04 <DinoAnimation+0x1d8>
			else if(leg_step >= 30)
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <DinoAnimation+0x1f0>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	2b1d      	cmp	r3, #29
 8001af0:	d908      	bls.n	8001b04 <DinoAnimation+0x1d8>
				DrawDino(0,3,0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2103      	movs	r1, #3
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff fbf2 	bl	80012e0 <DrawDino>
				dino_drawed = 1;
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <DinoAnimation+0x1ec>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
}
 8001b02:	e7ff      	b.n	8001b04 <DinoAnimation+0x1d8>
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000044 	.word	0x20000044
 8001b0c:	2000009c 	.word	0x2000009c
 8001b10:	2000004c 	.word	0x2000004c
 8001b14:	20000046 	.word	0x20000046
 8001b18:	2000004a 	.word	0x2000004a
 8001b1c:	20000048 	.word	0x20000048

08001b20 <DrawObstacle3>:
	LCD_Fill(367 - shift,181,370 - shift,188,WHITE);
	LCD_Fill(365 - shift,189,369 - shift,190,WHITE);
}

void DrawObstacle3(uint16_t shift)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
	// big one
	// ----------- VERTICAL PART -----------
	LCD_Fill(357 - shift,150,361 - shift,153,GRAY);     // vertical1
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 8001b30:	3301      	adds	r3, #1
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	b218      	sxth	r0, r3
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2399      	movs	r3, #153	@ 0x99
 8001b4a:	2196      	movs	r1, #150	@ 0x96
 8001b4c:	f7ff fa84 	bl	8001058 <LCD_Fill>
	LCD_Fill(356 - shift,153,362 - shift,210,GRAY);
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	b218      	sxth	r0, r3
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	23d2      	movs	r3, #210	@ 0xd2
 8001b6c:	2199      	movs	r1, #153	@ 0x99
 8001b6e:	f7ff fa73 	bl	8001058 <LCD_Fill>

	LCD_Fill(362 - shift,150,365 - shift,152,WHITE);		// clear vertical1
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	b218      	sxth	r0, r3
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8001b82:	3301      	adds	r3, #1
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b21a      	sxth	r2, r3
 8001b88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2398      	movs	r3, #152	@ 0x98
 8001b90:	2196      	movs	r1, #150	@ 0x96
 8001b92:	f7ff fa61 	bl	8001058 <LCD_Fill>
	LCD_Fill(363 - shift,153,366 - shift,174,WHITE);		// clear vertical1 upper
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b218      	sxth	r0, r3
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	23ae      	movs	r3, #174	@ 0xae
 8001bb4:	2199      	movs	r1, #153	@ 0x99
 8001bb6:	f7ff fa4f 	bl	8001058 <LCD_Fill>
	LCD_Fill(363 - shift,181,366 - shift,210,WHITE);		// clear vertical1 lower
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b218      	sxth	r0, r3
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	23d2      	movs	r3, #210	@ 0xd2
 8001bd8:	21b5      	movs	r1, #181	@ 0xb5
 8001bda:	f7ff fa3d 	bl	8001058 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(346 - shift,175,374 - shift,180,GRAY);     // horizontal1
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b218      	sxth	r0, r3
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	23b4      	movs	r3, #180	@ 0xb4
 8001bfa:	21af      	movs	r1, #175	@ 0xaf
 8001bfc:	f7ff fa2c 	bl	8001058 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(345 - shift,160,349 - shift,162,GRAY);     // left1
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 8001c06:	3301      	adds	r3, #1
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	b218      	sxth	r0, r3
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	f5c3 73ae 	rsb	r3, r3, #348	@ 0x15c
 8001c12:	3301      	adds	r3, #1
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	b21a      	sxth	r2, r3
 8001c18:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	23a2      	movs	r3, #162	@ 0xa2
 8001c20:	21a0      	movs	r1, #160	@ 0xa0
 8001c22:	f7ff fa19 	bl	8001058 <LCD_Fill>
	LCD_Fill(344 - shift,162,350 - shift,178,GRAY);
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	b218      	sxth	r0, r3
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	23b2      	movs	r3, #178	@ 0xb2
 8001c42:	21a2      	movs	r1, #162	@ 0xa2
 8001c44:	f7ff fa08 	bl	8001058 <LCD_Fill>

	LCD_Fill(350 - shift,160,353 - shift,162,WHITE);     // clear left1
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	b218      	sxth	r0, r3
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	f5c3 73b0 	rsb	r3, r3, #352	@ 0x160
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	23a2      	movs	r3, #162	@ 0xa2
 8001c66:	21a0      	movs	r1, #160	@ 0xa0
 8001c68:	f7ff f9f6 	bl	8001058 <LCD_Fill>
	LCD_Fill(351 - shift,162,354 - shift,174,WHITE);
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8001c72:	3301      	adds	r3, #1
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	b218      	sxth	r0, r3
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	f5c3 73b1 	rsb	r3, r3, #354	@ 0x162
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	23ae      	movs	r3, #174	@ 0xae
 8001c8a:	21a2      	movs	r1, #162	@ 0xa2
 8001c8c:	f7ff f9e4 	bl	8001058 <LCD_Fill>

	// ----------- RIGHT PART -----------
	LCD_Fill(371 - shift,165,375 - shift,167,GRAY);     // right1
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 8001c96:	3301      	adds	r3, #1
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b218      	sxth	r0, r3
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	23a7      	movs	r3, #167	@ 0xa7
 8001cb0:	21a5      	movs	r1, #165	@ 0xa5
 8001cb2:	f7ff f9d1 	bl	8001058 <LCD_Fill>
	LCD_Fill(370 - shift,167,376 - shift,178,GRAY);
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	b218      	sxth	r0, r3
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	23b2      	movs	r3, #178	@ 0xb2
 8001cd2:	21a7      	movs	r1, #167	@ 0xa7
 8001cd4:	f7ff f9c0 	bl	8001058 <LCD_Fill>

	LCD_Fill(376 - shift,165,379 - shift,167,WHITE);     // clear right1
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b218      	sxth	r0, r3
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	23a7      	movs	r3, #167	@ 0xa7
 8001cf6:	21a5      	movs	r1, #165	@ 0xa5
 8001cf8:	f7ff f9ae 	bl	8001058 <LCD_Fill>
	LCD_Fill(377 - shift,167,380 - shift,178,WHITE);
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8001d02:	3301      	adds	r3, #1
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b218      	sxth	r0, r3
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	23b2      	movs	r3, #178	@ 0xb2
 8001d1a:	21a7      	movs	r1, #167	@ 0xa7
 8001d1c:	f7ff f99c 	bl	8001058 <LCD_Fill>
	LCD_Fill(375 - shift,179,378 - shift,180,WHITE);
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8001d26:	3301      	adds	r3, #1
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	b218      	sxth	r0, r3
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	23b4      	movs	r3, #180	@ 0xb4
 8001d3e:	21b3      	movs	r1, #179	@ 0xb3
 8001d40:	f7ff f98a 	bl	8001058 <LCD_Fill>



	// small one
	// ----------- VERTICAL PART -----------
	LCD_Fill(388 - shift,170,392 - shift,172,GRAY);     // vertical2
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	f5c3 73c2 	rsb	r3, r3, #388	@ 0x184
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b218      	sxth	r0, r3
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	23ac      	movs	r3, #172	@ 0xac
 8001d60:	21aa      	movs	r1, #170	@ 0xaa
 8001d62:	f7ff f979 	bl	8001058 <LCD_Fill>
	LCD_Fill(387 - shift,172,393 - shift,210,GRAY);
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	b218      	sxth	r0, r3
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8001d78:	3301      	adds	r3, #1
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	23d2      	movs	r3, #210	@ 0xd2
 8001d86:	21ac      	movs	r1, #172	@ 0xac
 8001d88:	f7ff f966 	bl	8001058 <LCD_Fill>

	LCD_Fill(393 - shift,170,396 - shift,172,WHITE);		// clear vertical2
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8001d92:	3301      	adds	r3, #1
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	b218      	sxth	r0, r3
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	23ac      	movs	r3, #172	@ 0xac
 8001daa:	21aa      	movs	r1, #170	@ 0xaa
 8001dac:	f7ff f954 	bl	8001058 <LCD_Fill>
	LCD_Fill(394 - shift,172,397 - shift,176,WHITE);		// clear vertical2 upper1
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b218      	sxth	r0, r3
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	b21a      	sxth	r2, r3
 8001dc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	23b0      	movs	r3, #176	@ 0xb0
 8001dce:	21ac      	movs	r1, #172	@ 0xac
 8001dd0:	f7ff f942 	bl	8001058 <LCD_Fill>
	LCD_Fill(394 - shift,177,396 - shift,185,WHITE);		// clear vertical2 upper2
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b218      	sxth	r0, r3
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	23b9      	movs	r3, #185	@ 0xb9
 8001df0:	21b1      	movs	r1, #177	@ 0xb1
 8001df2:	f7ff f931 	bl	8001058 <LCD_Fill>
	LCD_Fill(394 - shift,191,397 - shift,210,WHITE);		// clear vertical2 lower
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	b218      	sxth	r0, r3
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8001e06:	3301      	adds	r3, #1
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	23d2      	movs	r3, #210	@ 0xd2
 8001e14:	21bf      	movs	r1, #191	@ 0xbf
 8001e16:	f7ff f91f 	bl	8001058 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(381 - shift,186,399 - shift,190,GRAY);     // horizontal2
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8001e20:	3301      	adds	r3, #1
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b218      	sxth	r0, r3
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	b21a      	sxth	r2, r3
 8001e32:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	23be      	movs	r3, #190	@ 0xbe
 8001e3a:	21ba      	movs	r1, #186	@ 0xba
 8001e3c:	f7ff f90c 	bl	8001058 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(380 - shift,180,382 - shift,181,GRAY);     // left2
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b218      	sxth	r0, r3
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b21a      	sxth	r2, r3
 8001e54:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	23b5      	movs	r3, #181	@ 0xb5
 8001e5c:	21b4      	movs	r1, #180	@ 0xb4
 8001e5e:	f7ff f8fb 	bl	8001058 <LCD_Fill>
	LCD_Fill(379 - shift,181,383 - shift,188,GRAY);
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	b218      	sxth	r0, r3
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8001e74:	3301      	adds	r3, #1
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	23bc      	movs	r3, #188	@ 0xbc
 8001e82:	21b5      	movs	r1, #181	@ 0xb5
 8001e84:	f7ff f8e8 	bl	8001058 <LCD_Fill>

	LCD_Fill(383 - shift,180,386 - shift,181,WHITE);     // clear left2
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8001e8e:	3301      	adds	r3, #1
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	b218      	sxth	r0, r3
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	23b5      	movs	r3, #181	@ 0xb5
 8001ea6:	21b4      	movs	r1, #180	@ 0xb4
 8001ea8:	f7ff f8d6 	bl	8001058 <LCD_Fill>
	LCD_Fill(384 - shift,181,386 - shift,185,WHITE);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	f5c3 73c0 	rsb	r3, r3, #384	@ 0x180
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b218      	sxth	r0, r3
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	23b9      	movs	r3, #185	@ 0xb9
 8001ec8:	21b5      	movs	r1, #181	@ 0xb5
 8001eca:	f7ff f8c5 	bl	8001058 <LCD_Fill>


	// ----------- RIGHT PART -----------
	LCD_Fill(397 - shift,177,400 - shift,178,GRAY);     // right2
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	b218      	sxth	r0, r3
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	23b2      	movs	r3, #178	@ 0xb2
 8001eec:	21b1      	movs	r1, #177	@ 0xb1
 8001eee:	f7ff f8b3 	bl	8001058 <LCD_Fill>
	LCD_Fill(396 - shift,178,401 - shift,188,GRAY);
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b218      	sxth	r0, r3
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8001f02:	3301      	adds	r3, #1
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	23bc      	movs	r3, #188	@ 0xbc
 8001f10:	21b2      	movs	r1, #178	@ 0xb2
 8001f12:	f7ff f8a1 	bl	8001058 <LCD_Fill>

	LCD_Fill(401 - shift,177,404 - shift,178,WHITE);     // clear right2
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	b218      	sxth	r0, r3
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	f5c3 73ca 	rsb	r3, r3, #404	@ 0x194
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	23b2      	movs	r3, #178	@ 0xb2
 8001f34:	21b1      	movs	r1, #177	@ 0xb1
 8001f36:	f7ff f88f 	bl	8001058 <LCD_Fill>
	LCD_Fill(402 - shift,178,405 - shift,188,WHITE);
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	f5c3 73c9 	rsb	r3, r3, #402	@ 0x192
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	b218      	sxth	r0, r3
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	f5c3 73ca 	rsb	r3, r3, #404	@ 0x194
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	b21a      	sxth	r2, r3
 8001f50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	23bc      	movs	r3, #188	@ 0xbc
 8001f58:	21b2      	movs	r1, #178	@ 0xb2
 8001f5a:	f7ff f87d 	bl	8001058 <LCD_Fill>
	LCD_Fill(400 - shift,189,403 - shift,190,WHITE);
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	b218      	sxth	r0, r3
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	f5c3 73c9 	rsb	r3, r3, #402	@ 0x192
 8001f6e:	3301      	adds	r3, #1
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	23be      	movs	r3, #190	@ 0xbe
 8001f7c:	21bd      	movs	r1, #189	@ 0xbd
 8001f7e:	f7ff f86b 	bl	8001058 <LCD_Fill>
	LCD_Fill(399 - shift,190,402 - shift,191,WHITE);
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8001f88:	3301      	adds	r3, #1
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	b218      	sxth	r0, r3
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	f5c3 73c9 	rsb	r3, r3, #402	@ 0x192
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	23bf      	movs	r3, #191	@ 0xbf
 8001fa0:	21be      	movs	r1, #190	@ 0xbe
 8001fa2:	f7ff f859 	bl	8001058 <LCD_Fill>


}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <ObstacleAnimation>:
uint16_t obs_step=0;	//obstacle step
uint8_t obs_acc=4;
//uint16_t

void ObstacleAnimation(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	if(refresh==2)
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <ObstacleAnimation+0x44>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d118      	bne.n	8001fee <ObstacleAnimation+0x3e>
	{
		obs_step = obs_step + obs_acc;
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <ObstacleAnimation+0x48>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <ObstacleAnimation+0x4c>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <ObstacleAnimation+0x4c>)
 8001fcc:	801a      	strh	r2, [r3, #0]

		if(obs_step>410)
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <ObstacleAnimation+0x4c>)
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	f5b3 7fcd 	cmp.w	r3, #410	@ 0x19a
 8001fd6:	d902      	bls.n	8001fde <ObstacleAnimation+0x2e>
		{
			obs_step = 0;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <ObstacleAnimation+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	801a      	strh	r2, [r3, #0]
		}

		DrawObstacle3(obs_step);
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <ObstacleAnimation+0x4c>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fd9c 	bl	8001b20 <DrawObstacle3>
		obs_drawed = 1;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <ObstacleAnimation+0x50>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
	}


}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000009c 	.word	0x2000009c
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	2000004e 	.word	0x2000004e
 8002000:	2000004b 	.word	0x2000004b

08002004 <GAME>:

void GAME(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0


	if((refresh==0) && (dino_drawed == 1)) //&& (obs_drawed == 1))
 8002008:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <GAME+0x44>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d114      	bne.n	800203a <GAME+0x36>
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <GAME+0x48>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d110      	bne.n	800203a <GAME+0x36>
	{
		dino_drawed = 0;
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <GAME+0x48>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
		obs_drawed = 0;
 800201e:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <GAME+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]

		POINT_COLOR=GRAY;
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <GAME+0x50>)
 8002026:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800202a:	801a      	strh	r2, [r3, #0]
		LCD_DrawLine(0,190,320,190);	// draw ground
 800202c:	23be      	movs	r3, #190	@ 0xbe
 800202e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002032:	21be      	movs	r1, #190	@ 0xbe
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff f867 	bl	8001108 <LCD_DrawLine>
	}

	DinoAnimation();
 800203a:	f7ff fc77 	bl	800192c <DinoAnimation>
	ObstacleAnimation();
 800203e:	f7ff ffb7 	bl	8001fb0 <ObstacleAnimation>
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000009c 	.word	0x2000009c
 800204c:	2000004a 	.word	0x2000004a
 8002050:	2000004b 	.word	0x2000004b
 8002054:	2000003c 	.word	0x2000003c

08002058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800205c:	f000 fa24 	bl	80024a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002060:	f000 f812 	bl	8002088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002064:	f000 f8be 	bl	80021e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002068:	f000 f86e 	bl	8002148 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  delay_init(72);			// delay initialization (System Clock [MHz])
 800206c:	2048      	movs	r0, #72	@ 0x48
 800206e:	f7ff f8cf 	bl	8001210 <delay_init>
  ILI9341_paradriver_Init();			// initialization of LCD driver
 8002072:	f7fe f97d 	bl	8000370 <ILI9341_paradriver_Init>

  HAL_TIM_Base_Start_IT(&htim2);	// timer start (60Hz refresh rate)
 8002076:	4803      	ldr	r0, [pc, #12]	@ (8002084 <main+0x2c>)
 8002078:	f002 f9fe 	bl	8004478 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	GAME();
 800207c:	f7ff ffc2 	bl	8002004 <GAME>
 8002080:	e7fc      	b.n	800207c <main+0x24>
 8002082:	bf00      	nop
 8002084:	20000050 	.word	0x20000050

08002088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0a6      	sub	sp, #152	@ 0x98
 800208c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800208e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002092:	2228      	movs	r2, #40	@ 0x28
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f002 fe4a 	bl	8004d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800209c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	2258      	movs	r2, #88	@ 0x58
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 fe3c 	bl	8004d30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020b8:	2302      	movs	r3, #2
 80020ba:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020bc:	2301      	movs	r3, #1
 80020be:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020c0:	2310      	movs	r3, #16
 80020c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020c6:	2302      	movs	r3, #2
 80020c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020d4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80020d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fd2c 	bl	8002b44 <HAL_RCC_OscConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80020f2:	f000 f907 	bl	8002304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f6:	230f      	movs	r3, #15
 80020f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020fa:	2302      	movs	r3, #2
 80020fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020fe:	2300      	movs	r3, #0
 8002100:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002106:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002108:	2300      	movs	r3, #0
 800210a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800210c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002110:	2102      	movs	r1, #2
 8002112:	4618      	mov	r0, r3
 8002114:	f001 fd6a 	bl	8003bec <HAL_RCC_ClockConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800211e:	f000 f8f1 	bl	8002304 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2;
 8002122:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002126:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002128:	2300      	movs	r3, #0
 800212a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	4618      	mov	r0, r3
 8002130:	f001 ff2c 	bl	8003f8c <HAL_RCCEx_PeriphCLKConfig>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800213a:	f000 f8e3 	bl	8002304 <Error_Handler>
  }
}
 800213e:	bf00      	nop
 8002140:	3798      	adds	r7, #152	@ 0x98
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002166:	4b1e      	ldr	r3, [pc, #120]	@ (80021e0 <MX_TIM2_Init+0x98>)
 8002168:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800216c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 199;
 800216e:	4b1c      	ldr	r3, [pc, #112]	@ (80021e0 <MX_TIM2_Init+0x98>)
 8002170:	22c7      	movs	r2, #199	@ 0xc7
 8002172:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002174:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <MX_TIM2_Init+0x98>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800217a:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <MX_TIM2_Init+0x98>)
 800217c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002180:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002182:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <MX_TIM2_Init+0x98>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002188:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <MX_TIM2_Init+0x98>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800218e:	4814      	ldr	r0, [pc, #80]	@ (80021e0 <MX_TIM2_Init+0x98>)
 8002190:	f002 f91a 	bl	80043c8 <HAL_TIM_Base_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800219a:	f000 f8b3 	bl	8002304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	4619      	mov	r1, r3
 80021aa:	480d      	ldr	r0, [pc, #52]	@ (80021e0 <MX_TIM2_Init+0x98>)
 80021ac:	f002 fad6 	bl	800475c <HAL_TIM_ConfigClockSource>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80021b6:	f000 f8a5 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4806      	ldr	r0, [pc, #24]	@ (80021e0 <MX_TIM2_Init+0x98>)
 80021c8:	f002 fd08 	bl	8004bdc <HAL_TIMEx_MasterConfigSynchronization>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021d2:	f000 f897 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000050 	.word	0x20000050

080021e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	4b3f      	ldr	r3, [pc, #252]	@ (80022f8 <MX_GPIO_Init+0x114>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	4a3e      	ldr	r2, [pc, #248]	@ (80022f8 <MX_GPIO_Init+0x114>)
 8002200:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002204:	6153      	str	r3, [r2, #20]
 8002206:	4b3c      	ldr	r3, [pc, #240]	@ (80022f8 <MX_GPIO_Init+0x114>)
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <MX_GPIO_Init+0x114>)
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4a38      	ldr	r2, [pc, #224]	@ (80022f8 <MX_GPIO_Init+0x114>)
 8002218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800221c:	6153      	str	r3, [r2, #20]
 800221e:	4b36      	ldr	r3, [pc, #216]	@ (80022f8 <MX_GPIO_Init+0x114>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	4b33      	ldr	r3, [pc, #204]	@ (80022f8 <MX_GPIO_Init+0x114>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4a32      	ldr	r2, [pc, #200]	@ (80022f8 <MX_GPIO_Init+0x114>)
 8002230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002234:	6153      	str	r3, [r2, #20]
 8002236:	4b30      	ldr	r3, [pc, #192]	@ (80022f8 <MX_GPIO_Init+0x114>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002242:	2201      	movs	r2, #1
 8002244:	211f      	movs	r1, #31
 8002246:	482d      	ldr	r0, [pc, #180]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002248:	f000 fc64 	bl	8002b14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800224c:	2200      	movs	r2, #0
 800224e:	21aa      	movs	r1, #170	@ 0xaa
 8002250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002254:	f000 fc5e 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002258:	2201      	movs	r2, #1
 800225a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800225e:	4828      	ldr	r0, [pc, #160]	@ (8002300 <MX_GPIO_Init+0x11c>)
 8002260:	f000 fc58 	bl	8002b14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002264:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002268:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800226e:	2301      	movs	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	4619      	mov	r1, r3
 8002278:	4820      	ldr	r0, [pc, #128]	@ (80022fc <MX_GPIO_Init+0x118>)
 800227a:	f000 faa9 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800227e:	231f      	movs	r3, #31
 8002280:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	2301      	movs	r3, #1
 8002284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228e:	f107 030c 	add.w	r3, r7, #12
 8002292:	4619      	mov	r1, r3
 8002294:	4819      	ldr	r0, [pc, #100]	@ (80022fc <MX_GPIO_Init+0x118>)
 8002296:	f000 fa9b 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 800229a:	23aa      	movs	r3, #170	@ 0xaa
 800229c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229e:	2301      	movs	r3, #1
 80022a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a2:	2301      	movs	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022a6:	2303      	movs	r3, #3
 80022a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 030c 	add.w	r3, r7, #12
 80022ae:	4619      	mov	r1, r3
 80022b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022b4:	f000 fa8c 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80022b8:	2314      	movs	r3, #20
 80022ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	4619      	mov	r1, r3
 80022ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ce:	f000 fa7f 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80022d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022d6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	2301      	movs	r3, #1
 80022da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	4805      	ldr	r0, [pc, #20]	@ (8002300 <MX_GPIO_Init+0x11c>)
 80022ec:	f000 fa70 	bl	80027d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022f0:	bf00      	nop
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	48000800 	.word	0x48000800
 8002300:	48000400 	.word	0x48000400

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002308:	b672      	cpsid	i
}
 800230a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <Error_Handler+0x8>

08002310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <HAL_MspInit+0x44>)
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	4a0e      	ldr	r2, [pc, #56]	@ (8002354 <HAL_MspInit+0x44>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6193      	str	r3, [r2, #24]
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <HAL_MspInit+0x44>)
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_MspInit+0x44>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a08      	ldr	r2, [pc, #32]	@ (8002354 <HAL_MspInit+0x44>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002338:	61d3      	str	r3, [r2, #28]
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_MspInit+0x44>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002368:	d113      	bne.n	8002392 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800236a:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <HAL_TIM_Base_MspInit+0x44>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4a0b      	ldr	r2, [pc, #44]	@ (800239c <HAL_TIM_Base_MspInit+0x44>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	61d3      	str	r3, [r2, #28]
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_TIM_Base_MspInit+0x44>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	201c      	movs	r0, #28
 8002388:	f000 f9cf 	bl	800272a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800238c:	201c      	movs	r0, #28
 800238e:	f000 f9e8 	bl	8002762 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <NMI_Handler+0x4>

080023a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <MemManage_Handler+0x4>

080023b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <BusFault_Handler+0x4>

080023c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <UsageFault_Handler+0x4>

080023c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f6:	f000 f89d 	bl	8002534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002404:	4808      	ldr	r0, [pc, #32]	@ (8002428 <TIM2_IRQHandler+0x28>)
 8002406:	f002 f8a7 	bl	8004558 <HAL_TIM_IRQHandler>
  }
  else
  {
	  refresh = 0;
  }*/
refresh++;
 800240a:	4b08      	ldr	r3, [pc, #32]	@ (800242c <TIM2_IRQHandler+0x2c>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <TIM2_IRQHandler+0x2c>)
 8002414:	701a      	strb	r2, [r3, #0]
if(refresh>2)
 8002416:	4b05      	ldr	r3, [pc, #20]	@ (800242c <TIM2_IRQHandler+0x2c>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d902      	bls.n	8002424 <TIM2_IRQHandler+0x24>
{
	refresh=0;
 800241e:	4b03      	ldr	r3, [pc, #12]	@ (800242c <TIM2_IRQHandler+0x2c>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
}


  /* USER CODE END TIM2_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000050 	.word	0x20000050
 800242c:	2000009c 	.word	0x2000009c

08002430 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <SystemInit+0x20>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	4a05      	ldr	r2, [pc, #20]	@ (8002450 <SystemInit+0x20>)
 800243c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002454:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800248c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002458:	f7ff ffea 	bl	8002430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800245c:	480c      	ldr	r0, [pc, #48]	@ (8002490 <LoopForever+0x6>)
  ldr r1, =_edata
 800245e:	490d      	ldr	r1, [pc, #52]	@ (8002494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002460:	4a0d      	ldr	r2, [pc, #52]	@ (8002498 <LoopForever+0xe>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002464:	e002      	b.n	800246c <LoopCopyDataInit>

08002466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246a:	3304      	adds	r3, #4

0800246c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800246c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002470:	d3f9      	bcc.n	8002466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002472:	4a0a      	ldr	r2, [pc, #40]	@ (800249c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002474:	4c0a      	ldr	r4, [pc, #40]	@ (80024a0 <LoopForever+0x16>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002478:	e001      	b.n	800247e <LoopFillZerobss>

0800247a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800247c:	3204      	adds	r2, #4

0800247e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002480:	d3fb      	bcc.n	800247a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002482:	f002 fc5d 	bl	8004d40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002486:	f7ff fde7 	bl	8002058 <main>

0800248a <LoopForever>:

LoopForever:
    b LoopForever
 800248a:	e7fe      	b.n	800248a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800248c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002494:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002498:	08004dd8 	.word	0x08004dd8
  ldr r2, =_sbss
 800249c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80024a0:	200000a4 	.word	0x200000a4

080024a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC1_2_IRQHandler>
	...

080024a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <HAL_Init+0x28>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a07      	ldr	r2, [pc, #28]	@ (80024d0 <HAL_Init+0x28>)
 80024b2:	f043 0310 	orr.w	r3, r3, #16
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f000 f92b 	bl	8002714 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024be:	200f      	movs	r0, #15
 80024c0:	f000 f808 	bl	80024d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c4:	f7ff ff24 	bl	8002310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40022000 	.word	0x40022000

080024d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024dc:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <HAL_InitTick+0x54>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_InitTick+0x58>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f943 	bl	800277e <HAL_SYSTICK_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e00e      	b.n	8002520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b0f      	cmp	r3, #15
 8002506:	d80a      	bhi.n	800251e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002508:	2200      	movs	r2, #0
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f000 f90b 	bl	800272a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002514:	4a06      	ldr	r2, [pc, #24]	@ (8002530 <HAL_InitTick+0x5c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000004 	.word	0x20000004
 800252c:	2000000c 	.word	0x2000000c
 8002530:	20000008 	.word	0x20000008

08002534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_IncTick+0x20>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <HAL_IncTick+0x24>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4413      	add	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <HAL_IncTick+0x24>)
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	2000000c 	.word	0x2000000c
 8002558:	200000a0 	.word	0x200000a0

0800255c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <HAL_GetTick+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	200000a0 	.word	0x200000a0

08002574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	@ (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	db0b      	blt.n	8002602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4907      	ldr	r1, [pc, #28]	@ (8002610 <__NVIC_EnableIRQ+0x38>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2001      	movs	r0, #1
 80025fa:	fa00 f202 	lsl.w	r2, r0, r2
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	@ (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	@ (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	@ 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e0:	d301      	bcc.n	80026e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00f      	b.n	8002706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <SysTick_Config+0x40>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ee:	210f      	movs	r1, #15
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f7ff ff8e 	bl	8002614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <SysTick_Config+0x40>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fe:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <SysTick_Config+0x40>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	e000e010 	.word	0xe000e010

08002714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff29 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800273c:	f7ff ff3e 	bl	80025bc <__NVIC_GetPriorityGrouping>
 8002740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ff8e 	bl	8002668 <NVIC_EncodePriority>
 800274c:	4602      	mov	r2, r0
 800274e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff5d 	bl	8002614 <__NVIC_SetPriority>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff31 	bl	80025d8 <__NVIC_EnableIRQ>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ffa2 	bl	80026d0 <SysTick_Config>
 800278c:	4603      	mov	r3, r0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d106      	bne.n	80027b4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a08      	ldr	r2, [pc, #32]	@ (80027cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80027b2:	e005      	b.n	80027c0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e010 	.word	0xe000e010

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027de:	e160      	b.n	8002aa2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2101      	movs	r1, #1
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8152 	beq.w	8002a9c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d005      	beq.n	8002810 <HAL_GPIO_Init+0x40>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d130      	bne.n	8002872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002846:	2201      	movs	r2, #1
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 0201 	and.w	r2, r3, #1
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b03      	cmp	r3, #3
 800287c:	d017      	beq.n	80028ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d123      	bne.n	8002902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	08da      	lsrs	r2, r3, #3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3208      	adds	r2, #8
 80028fc:	6939      	ldr	r1, [r7, #16]
 80028fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2203      	movs	r2, #3
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0203 	and.w	r2, r3, #3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 80ac 	beq.w	8002a9c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002944:	4b5e      	ldr	r3, [pc, #376]	@ (8002ac0 <HAL_GPIO_Init+0x2f0>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4a5d      	ldr	r2, [pc, #372]	@ (8002ac0 <HAL_GPIO_Init+0x2f0>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6193      	str	r3, [r2, #24]
 8002950:	4b5b      	ldr	r3, [pc, #364]	@ (8002ac0 <HAL_GPIO_Init+0x2f0>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800295c:	4a59      	ldr	r2, [pc, #356]	@ (8002ac4 <HAL_GPIO_Init+0x2f4>)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	3302      	adds	r3, #2
 8002964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002986:	d025      	beq.n	80029d4 <HAL_GPIO_Init+0x204>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a4f      	ldr	r2, [pc, #316]	@ (8002ac8 <HAL_GPIO_Init+0x2f8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d01f      	beq.n	80029d0 <HAL_GPIO_Init+0x200>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a4e      	ldr	r2, [pc, #312]	@ (8002acc <HAL_GPIO_Init+0x2fc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d019      	beq.n	80029cc <HAL_GPIO_Init+0x1fc>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a4d      	ldr	r2, [pc, #308]	@ (8002ad0 <HAL_GPIO_Init+0x300>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d013      	beq.n	80029c8 <HAL_GPIO_Init+0x1f8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ad4 <HAL_GPIO_Init+0x304>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00d      	beq.n	80029c4 <HAL_GPIO_Init+0x1f4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a4b      	ldr	r2, [pc, #300]	@ (8002ad8 <HAL_GPIO_Init+0x308>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d007      	beq.n	80029c0 <HAL_GPIO_Init+0x1f0>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a4a      	ldr	r2, [pc, #296]	@ (8002adc <HAL_GPIO_Init+0x30c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <HAL_GPIO_Init+0x1ec>
 80029b8:	2306      	movs	r3, #6
 80029ba:	e00c      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029bc:	2307      	movs	r3, #7
 80029be:	e00a      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029c0:	2305      	movs	r3, #5
 80029c2:	e008      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029c4:	2304      	movs	r3, #4
 80029c6:	e006      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029c8:	2303      	movs	r3, #3
 80029ca:	e004      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e002      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029d4:	2300      	movs	r3, #0
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	f002 0203 	and.w	r2, r2, #3
 80029dc:	0092      	lsls	r2, r2, #2
 80029de:	4093      	lsls	r3, r2
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029e6:	4937      	ldr	r1, [pc, #220]	@ (8002ac4 <HAL_GPIO_Init+0x2f4>)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3302      	adds	r3, #2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae0 <HAL_GPIO_Init+0x310>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a18:	4a31      	ldr	r2, [pc, #196]	@ (8002ae0 <HAL_GPIO_Init+0x310>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a1e:	4b30      	ldr	r3, [pc, #192]	@ (8002ae0 <HAL_GPIO_Init+0x310>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a42:	4a27      	ldr	r2, [pc, #156]	@ (8002ae0 <HAL_GPIO_Init+0x310>)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a48:	4b25      	ldr	r3, [pc, #148]	@ (8002ae0 <HAL_GPIO_Init+0x310>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae0 <HAL_GPIO_Init+0x310>)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae0 <HAL_GPIO_Init+0x310>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a96:	4a12      	ldr	r2, [pc, #72]	@ (8002ae0 <HAL_GPIO_Init+0x310>)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f47f ae97 	bne.w	80027e0 <HAL_GPIO_Init+0x10>
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	bf00      	nop
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	48000400 	.word	0x48000400
 8002acc:	48000800 	.word	0x48000800
 8002ad0:	48000c00 	.word	0x48000c00
 8002ad4:	48001000 	.word	0x48001000
 8002ad8:	48001400 	.word	0x48001400
 8002adc:	48001800 	.word	0x48001800
 8002ae0:	40010400 	.word	0x40010400

08002ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	887b      	ldrh	r3, [r7, #2]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	e001      	b.n	8002b06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
 8002b20:	4613      	mov	r3, r2
 8002b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b24:	787b      	ldrb	r3, [r7, #1]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f001 b83a 	b.w	8003bde <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 816f 	beq.w	8002e5e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b80:	4bb5      	ldr	r3, [pc, #724]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d00c      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b8c:	4bb2      	ldr	r3, [pc, #712]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d15c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x10e>
 8002b98:	4baf      	ldr	r3, [pc, #700]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba4:	d155      	bne.n	8002c52 <HAL_RCC_OscConfig+0x10e>
 8002ba6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002baa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x94>
 8002bd2:	4ba1      	ldr	r3, [pc, #644]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e015      	b.n	8002c04 <HAL_RCC_OscConfig+0xc0>
 8002bd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bdc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002bec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bf0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002bf4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002c00:	4b95      	ldr	r3, [pc, #596]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c08:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002c0c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002c18:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002c1c:	fab2 f282 	clz	r2, r2
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f042 0220 	orr.w	r2, r2, #32
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	f002 021f 	and.w	r2, r2, #31
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8111 	beq.w	8002e5c <HAL_RCC_OscConfig+0x318>
 8002c3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 8108 	bne.w	8002e5c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f000 bfc6 	b.w	8003bde <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12e>
 8002c64:	4b7c      	ldr	r3, [pc, #496]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a7b      	ldr	r2, [pc, #492]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	e036      	b.n	8002ce0 <HAL_RCC_OscConfig+0x19c>
 8002c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x158>
 8002c82:	4b75      	ldr	r3, [pc, #468]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a74      	ldr	r2, [pc, #464]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b72      	ldr	r3, [pc, #456]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a71      	ldr	r2, [pc, #452]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002c94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e021      	b.n	8002ce0 <HAL_RCC_OscConfig+0x19c>
 8002c9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x184>
 8002cae:	4b6a      	ldr	r3, [pc, #424]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a69      	ldr	r2, [pc, #420]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b67      	ldr	r3, [pc, #412]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a66      	ldr	r2, [pc, #408]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x19c>
 8002cc8:	4b63      	ldr	r3, [pc, #396]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a62      	ldr	r2, [pc, #392]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b60      	ldr	r3, [pc, #384]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cde:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d059      	beq.n	8002da4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7ff fc34 	bl	800255c <HAL_GetTick>
 8002cf4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfa:	f7ff fc2f 	bl	800255c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	@ 0x64
 8002d08:	d902      	bls.n	8002d10 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	f000 bf67 	b.w	8003bde <HAL_RCC_OscConfig+0x109a>
 8002d10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d14:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002d24:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d102      	bne.n	8002d42 <HAL_RCC_OscConfig+0x1fe>
 8002d3c:	4b46      	ldr	r3, [pc, #280]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	e015      	b.n	8002d6e <HAL_RCC_OscConfig+0x22a>
 8002d42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d46:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002d56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d5a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d5e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d72:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002d76:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002d7a:	fa92 f2a2 	rbit	r2, r2
 8002d7e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002d82:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002d86:	fab2 f282 	clz	r2, r2
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	f042 0220 	orr.w	r2, r2, #32
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	f002 021f 	and.w	r2, r2, #31
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0ab      	beq.n	8002cfa <HAL_RCC_OscConfig+0x1b6>
 8002da2:	e05c      	b.n	8002e5e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7ff fbda 	bl	800255c <HAL_GetTick>
 8002da8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dae:	f7ff fbd5 	bl	800255c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	@ 0x64
 8002dbc:	d902      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	f000 bf0d 	b.w	8003bde <HAL_RCC_OscConfig+0x109a>
 8002dc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dc8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002dd8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_OscConfig+0x2b2>
 8002df0:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x2de>
 8002df6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dfa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002e0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e0e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002e12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <HAL_RCC_OscConfig+0x314>)
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e26:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002e2a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002e2e:	fa92 f2a2 	rbit	r2, r2
 8002e32:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002e36:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002e3a:	fab2 f282 	clz	r2, r2
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	f042 0220 	orr.w	r2, r2, #32
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	f002 021f 	and.w	r2, r2, #31
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ab      	bne.n	8002dae <HAL_RCC_OscConfig+0x26a>
 8002e56:	e002      	b.n	8002e5e <HAL_RCC_OscConfig+0x31a>
 8002e58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 817f 	beq.w	8003172 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e74:	4ba7      	ldr	r3, [pc, #668]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00c      	beq.n	8002e9a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e80:	4ba4      	ldr	r3, [pc, #656]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d173      	bne.n	8002f74 <HAL_RCC_OscConfig+0x430>
 8002e8c:	4ba1      	ldr	r3, [pc, #644]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e98:	d16c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x430>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002eac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb0:	fab3 f383 	clz	r3, r3
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d102      	bne.n	8002eca <HAL_RCC_OscConfig+0x386>
 8002ec4:	4b93      	ldr	r3, [pc, #588]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	e013      	b.n	8002ef2 <HAL_RCC_OscConfig+0x3ae>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002edc:	2302      	movs	r3, #2
 8002ede:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002ee2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002eee:	4b89      	ldr	r3, [pc, #548]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002ef8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002efc:	fa92 f2a2 	rbit	r2, r2
 8002f00:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002f04:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	f042 0220 	orr.w	r2, r2, #32
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f002 021f 	and.w	r2, r2, #31
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3f6>
 8002f24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d002      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f000 be52 	b.w	8003bde <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b76      	ldr	r3, [pc, #472]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	21f8      	movs	r1, #248	@ 0xf8
 8002f50:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002f58:	fa91 f1a1 	rbit	r1, r1
 8002f5c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002f60:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002f64:	fab1 f181 	clz	r1, r1
 8002f68:	b2c9      	uxtb	r1, r1
 8002f6a:	408b      	lsls	r3, r1
 8002f6c:	4969      	ldr	r1, [pc, #420]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	e0fe      	b.n	8003172 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8088 	beq.w	8003096 <HAL_RCC_OscConfig+0x552>
 8002f86:	2301      	movs	r3, #1
 8002f88:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002f98:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fa6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	461a      	mov	r2, r3
 8002fae:	2301      	movs	r3, #1
 8002fb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7ff fad3 	bl	800255c <HAL_GetTick>
 8002fb6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fbc:	f7ff face 	bl	800255c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d902      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	f000 be06 	b.w	8003bde <HAL_RCC_OscConfig+0x109a>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002fe4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d102      	bne.n	8003002 <HAL_RCC_OscConfig+0x4be>
 8002ffc:	4b45      	ldr	r3, [pc, #276]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	e013      	b.n	800302a <HAL_RCC_OscConfig+0x4e6>
 8003002:	2302      	movs	r3, #2
 8003004:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003008:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003014:	2302      	movs	r3, #2
 8003016:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800301a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003026:	4b3b      	ldr	r3, [pc, #236]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	2202      	movs	r2, #2
 800302c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003030:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003034:	fa92 f2a2 	rbit	r2, r2
 8003038:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800303c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003040:	fab2 f282 	clz	r2, r2
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f042 0220 	orr.w	r2, r2, #32
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	f002 021f 	and.w	r2, r2, #31
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f202 	lsl.w	r2, r1, r2
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0af      	beq.n	8002fbc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b2d      	ldr	r3, [pc, #180]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003064:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003068:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	21f8      	movs	r1, #248	@ 0xf8
 8003072:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800307a:	fa91 f1a1 	rbit	r1, r1
 800307e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003082:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003086:	fab1 f181 	clz	r1, r1
 800308a:	b2c9      	uxtb	r1, r1
 800308c:	408b      	lsls	r3, r1
 800308e:	4921      	ldr	r1, [pc, #132]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e06d      	b.n	8003172 <HAL_RCC_OscConfig+0x62e>
 8003096:	2301      	movs	r3, #1
 8003098:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80030a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	461a      	mov	r2, r3
 80030be:	2300      	movs	r3, #0
 80030c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7ff fa4b 	bl	800255c <HAL_GetTick>
 80030c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030cc:	f7ff fa46 	bl	800255c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d902      	bls.n	80030e2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	f000 bd7e 	b.w	8003bde <HAL_RCC_OscConfig+0x109a>
 80030e2:	2302      	movs	r3, #2
 80030e4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80030f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <HAL_RCC_OscConfig+0x5d4>
 800310c:	4b01      	ldr	r3, [pc, #4]	@ (8003114 <HAL_RCC_OscConfig+0x5d0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	e016      	b.n	8003140 <HAL_RCC_OscConfig+0x5fc>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	2302      	movs	r3, #2
 800311a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800312a:	2302      	movs	r3, #2
 800312c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003130:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800313c:	4bbf      	ldr	r3, [pc, #764]	@ (800343c <HAL_RCC_OscConfig+0x8f8>)
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	2202      	movs	r2, #2
 8003142:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003146:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800314a:	fa92 f2a2 	rbit	r2, r2
 800314e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003152:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003156:	fab2 f282 	clz	r2, r2
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	f042 0220 	orr.w	r2, r2, #32
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	f002 021f 	and.w	r2, r2, #31
 8003166:	2101      	movs	r1, #1
 8003168:	fa01 f202 	lsl.w	r2, r1, r2
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1ac      	bne.n	80030cc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003176:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8113 	beq.w	80033ae <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003188:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800318c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d07c      	beq.n	8003292 <HAL_RCC_OscConfig+0x74e>
 8003198:	2301      	movs	r3, #1
 800319a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80031aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	4ba2      	ldr	r3, [pc, #648]	@ (8003440 <HAL_RCC_OscConfig+0x8fc>)
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	461a      	mov	r2, r3
 80031be:	2301      	movs	r3, #1
 80031c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c2:	f7ff f9cb 	bl	800255c <HAL_GetTick>
 80031c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031cc:	f7ff f9c6 	bl	800255c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d902      	bls.n	80031e2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	f000 bcfe 	b.w	8003bde <HAL_RCC_OscConfig+0x109a>
 80031e2:	2302      	movs	r3, #2
 80031e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003202:	2202      	movs	r2, #2
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800320a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	fa93 f2a3 	rbit	r2, r3
 8003214:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003222:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003226:	2202      	movs	r2, #2
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800322e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	fa93 f2a3 	rbit	r2, r3
 8003238:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003240:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003242:	4b7e      	ldr	r3, [pc, #504]	@ (800343c <HAL_RCC_OscConfig+0x8f8>)
 8003244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800324a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800324e:	2102      	movs	r1, #2
 8003250:	6019      	str	r1, [r3, #0]
 8003252:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003256:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	fa93 f1a3 	rbit	r1, r3
 8003260:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003264:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003268:	6019      	str	r1, [r3, #0]
  return result;
 800326a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800326e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d09d      	beq.n	80031cc <HAL_RCC_OscConfig+0x688>
 8003290:	e08d      	b.n	80033ae <HAL_RCC_OscConfig+0x86a>
 8003292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003296:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032a2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	fa93 f2a3 	rbit	r2, r3
 80032ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032b4:	601a      	str	r2, [r3, #0]
  return result;
 80032b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	4b5d      	ldr	r3, [pc, #372]	@ (8003440 <HAL_RCC_OscConfig+0x8fc>)
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	461a      	mov	r2, r3
 80032d0:	2300      	movs	r3, #0
 80032d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d4:	f7ff f942 	bl	800255c <HAL_GetTick>
 80032d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032de:	f7ff f93d 	bl	800255c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d902      	bls.n	80032f4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	f000 bc75 	b.w	8003bde <HAL_RCC_OscConfig+0x109a>
 80032f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80032fc:	2202      	movs	r2, #2
 80032fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003304:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	fa93 f2a3 	rbit	r2, r3
 800330e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003312:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003320:	2202      	movs	r2, #2
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003328:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	fa93 f2a3 	rbit	r2, r3
 8003332:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003336:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003340:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003344:	2202      	movs	r2, #2
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800334c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	fa93 f2a3 	rbit	r2, r3
 8003356:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800335a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800335e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	4b36      	ldr	r3, [pc, #216]	@ (800343c <HAL_RCC_OscConfig+0x8f8>)
 8003362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003364:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003368:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800336c:	2102      	movs	r1, #2
 800336e:	6019      	str	r1, [r3, #0]
 8003370:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003374:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fa93 f1a3 	rbit	r1, r3
 800337e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003382:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003386:	6019      	str	r1, [r3, #0]
  return result;
 8003388:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800338c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d197      	bne.n	80032de <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 81a5 	beq.w	800370e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b1c      	ldr	r3, [pc, #112]	@ (800343c <HAL_RCC_OscConfig+0x8f8>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b19      	ldr	r3, [pc, #100]	@ (800343c <HAL_RCC_OscConfig+0x8f8>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4a18      	ldr	r2, [pc, #96]	@ (800343c <HAL_RCC_OscConfig+0x8f8>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e0:	61d3      	str	r3, [r2, #28]
 80033e2:	4b16      	ldr	r3, [pc, #88]	@ (800343c <HAL_RCC_OscConfig+0x8f8>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80033ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033fc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	4b0f      	ldr	r3, [pc, #60]	@ (8003444 <HAL_RCC_OscConfig+0x900>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d121      	bne.n	8003454 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003410:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <HAL_RCC_OscConfig+0x900>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0b      	ldr	r2, [pc, #44]	@ (8003444 <HAL_RCC_OscConfig+0x900>)
 8003416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341c:	f7ff f89e 	bl	800255c <HAL_GetTick>
 8003420:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	e010      	b.n	8003448 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003426:	f7ff f899 	bl	800255c <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	@ 0x64
 8003434:	d908      	bls.n	8003448 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e3d1      	b.n	8003bde <HAL_RCC_OscConfig+0x109a>
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	10908120 	.word	0x10908120
 8003444:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003448:	4b8d      	ldr	r3, [pc, #564]	@ (8003680 <HAL_RCC_OscConfig+0xb3c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0e8      	beq.n	8003426 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003458:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d106      	bne.n	8003472 <HAL_RCC_OscConfig+0x92e>
 8003464:	4b87      	ldr	r3, [pc, #540]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4a86      	ldr	r2, [pc, #536]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6213      	str	r3, [r2, #32]
 8003470:	e035      	b.n	80034de <HAL_RCC_OscConfig+0x99a>
 8003472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003476:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x958>
 8003482:	4b80      	ldr	r3, [pc, #512]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4a7f      	ldr	r2, [pc, #508]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6213      	str	r3, [r2, #32]
 800348e:	4b7d      	ldr	r3, [pc, #500]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4a7c      	ldr	r2, [pc, #496]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	6213      	str	r3, [r2, #32]
 800349a:	e020      	b.n	80034de <HAL_RCC_OscConfig+0x99a>
 800349c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b05      	cmp	r3, #5
 80034aa:	d10c      	bne.n	80034c6 <HAL_RCC_OscConfig+0x982>
 80034ac:	4b75      	ldr	r3, [pc, #468]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4a74      	ldr	r2, [pc, #464]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 80034b2:	f043 0304 	orr.w	r3, r3, #4
 80034b6:	6213      	str	r3, [r2, #32]
 80034b8:	4b72      	ldr	r3, [pc, #456]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4a71      	ldr	r2, [pc, #452]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6213      	str	r3, [r2, #32]
 80034c4:	e00b      	b.n	80034de <HAL_RCC_OscConfig+0x99a>
 80034c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6213      	str	r3, [r2, #32]
 80034d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8081 	beq.w	80035f2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f0:	f7ff f834 	bl	800255c <HAL_GetTick>
 80034f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	e00b      	b.n	8003512 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7ff f82f 	bl	800255c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e365      	b.n	8003bde <HAL_RCC_OscConfig+0x109a>
 8003512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003516:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800351a:	2202      	movs	r2, #2
 800351c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003522:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f2a3 	rbit	r2, r3
 800352c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003530:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800353a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800353e:	2202      	movs	r2, #2
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003546:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	fa93 f2a3 	rbit	r2, r3
 8003550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003554:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003558:	601a      	str	r2, [r3, #0]
  return result;
 800355a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800355e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003562:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f043 0302 	orr.w	r3, r3, #2
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d102      	bne.n	800357e <HAL_RCC_OscConfig+0xa3a>
 8003578:	4b42      	ldr	r3, [pc, #264]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	e013      	b.n	80035a6 <HAL_RCC_OscConfig+0xa62>
 800357e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003582:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003586:	2202      	movs	r2, #2
 8003588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800358e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	fa93 f2a3 	rbit	r2, r3
 8003598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800359c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	4b38      	ldr	r3, [pc, #224]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035aa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035ae:	2102      	movs	r1, #2
 80035b0:	6011      	str	r1, [r2, #0]
 80035b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035b6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	fa92 f1a2 	rbit	r1, r2
 80035c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035c4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80035c8:	6011      	str	r1, [r2, #0]
  return result;
 80035ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035ce:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	fab2 f282 	clz	r2, r2
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f002 021f 	and.w	r2, r2, #31
 80035e4:	2101      	movs	r1, #1
 80035e6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d084      	beq.n	80034fa <HAL_RCC_OscConfig+0x9b6>
 80035f0:	e083      	b.n	80036fa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fe ffb3 	bl	800255c <HAL_GetTick>
 80035f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fa:	e00b      	b.n	8003614 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe ffae 	bl	800255c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e2e4      	b.n	8003bde <HAL_RCC_OscConfig+0x109a>
 8003614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003618:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800361c:	2202      	movs	r2, #2
 800361e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003624:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	fa93 f2a3 	rbit	r2, r3
 800362e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003632:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800363c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003640:	2202      	movs	r2, #2
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003648:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	fa93 f2a3 	rbit	r2, r3
 8003652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003656:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800365a:	601a      	str	r2, [r3, #0]
  return result;
 800365c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003660:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003664:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d106      	bne.n	8003688 <HAL_RCC_OscConfig+0xb44>
 800367a:	4b02      	ldr	r3, [pc, #8]	@ (8003684 <HAL_RCC_OscConfig+0xb40>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	e017      	b.n	80036b0 <HAL_RCC_OscConfig+0xb6c>
 8003680:	40007000 	.word	0x40007000
 8003684:	40021000 	.word	0x40021000
 8003688:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800368c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003690:	2202      	movs	r2, #2
 8003692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003698:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	fa93 f2a3 	rbit	r2, r3
 80036a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	4bb3      	ldr	r3, [pc, #716]	@ (800397c <HAL_RCC_OscConfig+0xe38>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036b8:	2102      	movs	r1, #2
 80036ba:	6011      	str	r1, [r2, #0]
 80036bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036c0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	fa92 f1a2 	rbit	r1, r2
 80036ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036ce:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80036d2:	6011      	str	r1, [r2, #0]
  return result;
 80036d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036d8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	fab2 f282 	clz	r2, r2
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	f002 021f 	and.w	r2, r2, #31
 80036ee:	2101      	movs	r1, #1
 80036f0:	fa01 f202 	lsl.w	r2, r1, r2
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d180      	bne.n	80035fc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036fa:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b9e      	ldr	r3, [pc, #632]	@ (800397c <HAL_RCC_OscConfig+0xe38>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4a9d      	ldr	r2, [pc, #628]	@ (800397c <HAL_RCC_OscConfig+0xe38>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003712:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 825e 	beq.w	8003bdc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003720:	4b96      	ldr	r3, [pc, #600]	@ (800397c <HAL_RCC_OscConfig+0xe38>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b08      	cmp	r3, #8
 800372a:	f000 821f 	beq.w	8003b6c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003732:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b02      	cmp	r3, #2
 800373c:	f040 8170 	bne.w	8003a20 <HAL_RCC_OscConfig+0xedc>
 8003740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003744:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003748:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800374c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003752:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	fa93 f2a3 	rbit	r2, r3
 800375c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003760:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003764:	601a      	str	r2, [r3, #0]
  return result;
 8003766:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800376a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800376e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800377a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	461a      	mov	r2, r3
 8003782:	2300      	movs	r3, #0
 8003784:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fe fee9 	bl	800255c <HAL_GetTick>
 800378a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378e:	e009      	b.n	80037a4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003790:	f7fe fee4 	bl	800255c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e21c      	b.n	8003bde <HAL_RCC_OscConfig+0x109a>
 80037a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	fa93 f2a3 	rbit	r2, r3
 80037c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037c8:	601a      	str	r2, [r3, #0]
  return result;
 80037ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d102      	bne.n	80037ee <HAL_RCC_OscConfig+0xcaa>
 80037e8:	4b64      	ldr	r3, [pc, #400]	@ (800397c <HAL_RCC_OscConfig+0xe38>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	e027      	b.n	800383e <HAL_RCC_OscConfig+0xcfa>
 80037ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80037f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003800:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	fa93 f2a3 	rbit	r2, r3
 800380a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800380e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003818:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800381c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003826:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	fa93 f2a3 	rbit	r2, r3
 8003830:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003834:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	4b50      	ldr	r3, [pc, #320]	@ (800397c <HAL_RCC_OscConfig+0xe38>)
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003842:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003846:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800384a:	6011      	str	r1, [r2, #0]
 800384c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003850:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	fa92 f1a2 	rbit	r1, r2
 800385a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800385e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003862:	6011      	str	r1, [r2, #0]
  return result;
 8003864:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003868:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	fab2 f282 	clz	r2, r2
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f042 0220 	orr.w	r2, r2, #32
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	f002 021f 	and.w	r2, r2, #31
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d182      	bne.n	8003790 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388a:	4b3c      	ldr	r3, [pc, #240]	@ (800397c <HAL_RCC_OscConfig+0xe38>)
 800388c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388e:	f023 020f 	bic.w	r2, r3, #15
 8003892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003896:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389e:	4937      	ldr	r1, [pc, #220]	@ (800397c <HAL_RCC_OscConfig+0xe38>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80038a4:	4b35      	ldr	r3, [pc, #212]	@ (800397c <HAL_RCC_OscConfig+0xe38>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80038ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a19      	ldr	r1, [r3, #32]
 80038b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	430b      	orrs	r3, r1
 80038c6:	492d      	ldr	r1, [pc, #180]	@ (800397c <HAL_RCC_OscConfig+0xe38>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
 80038cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038de:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	fa93 f2a3 	rbit	r2, r3
 80038e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038f0:	601a      	str	r2, [r3, #0]
  return result;
 80038f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038fa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003906:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	461a      	mov	r2, r3
 800390e:	2301      	movs	r3, #1
 8003910:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe fe23 	bl	800255c <HAL_GetTick>
 8003916:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800391a:	e009      	b.n	8003930 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe fe1e 	bl	800255c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e156      	b.n	8003bde <HAL_RCC_OscConfig+0x109a>
 8003930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003934:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003938:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800393c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003942:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	fa93 f2a3 	rbit	r2, r3
 800394c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003950:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003954:	601a      	str	r2, [r3, #0]
  return result;
 8003956:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800395a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800395e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <HAL_RCC_OscConfig+0xe3c>
 8003974:	4b01      	ldr	r3, [pc, #4]	@ (800397c <HAL_RCC_OscConfig+0xe38>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	e02a      	b.n	80039d0 <HAL_RCC_OscConfig+0xe8c>
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003984:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003988:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800398c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003992:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	fa93 f2a3 	rbit	r2, r3
 800399c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039b8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	fa93 f2a3 	rbit	r2, r3
 80039c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039c6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	4b86      	ldr	r3, [pc, #536]	@ (8003be8 <HAL_RCC_OscConfig+0x10a4>)
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039dc:	6011      	str	r1, [r2, #0]
 80039de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039e2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	fa92 f1a2 	rbit	r1, r2
 80039ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039f0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80039f4:	6011      	str	r1, [r2, #0]
  return result;
 80039f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039fa:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	fab2 f282 	clz	r2, r2
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	f042 0220 	orr.w	r2, r2, #32
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	f002 021f 	and.w	r2, r2, #31
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f202 	lsl.w	r2, r1, r2
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f43f af7f 	beq.w	800391c <HAL_RCC_OscConfig+0xdd8>
 8003a1e:	e0dd      	b.n	8003bdc <HAL_RCC_OscConfig+0x1098>
 8003a20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a24:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a32:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	fa93 f2a3 	rbit	r2, r3
 8003a3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a40:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a44:	601a      	str	r2, [r3, #0]
  return result;
 8003a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a4a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a4e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	fab3 f383 	clz	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	461a      	mov	r2, r3
 8003a62:	2300      	movs	r3, #0
 8003a64:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fe fd79 	bl	800255c <HAL_GetTick>
 8003a6a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6e:	e009      	b.n	8003a84 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fe fd74 	bl	800255c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e0ac      	b.n	8003bde <HAL_RCC_OscConfig+0x109a>
 8003a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a88:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a96:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	fa93 f2a3 	rbit	r2, r3
 8003aa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aa4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003aa8:	601a      	str	r2, [r3, #0]
  return result;
 8003aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003ab2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d102      	bne.n	8003ace <HAL_RCC_OscConfig+0xf8a>
 8003ac8:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <HAL_RCC_OscConfig+0x10a4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	e027      	b.n	8003b1e <HAL_RCC_OscConfig+0xfda>
 8003ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ad2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003ad6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	fa93 f2a3 	rbit	r2, r3
 8003aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aee:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003af8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003afc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b06:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	fa93 f2a3 	rbit	r2, r3
 8003b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b14:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	4b33      	ldr	r3, [pc, #204]	@ (8003be8 <HAL_RCC_OscConfig+0x10a4>)
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b22:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b26:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b2a:	6011      	str	r1, [r2, #0]
 8003b2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b30:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	fa92 f1a2 	rbit	r1, r2
 8003b3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b3e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003b42:	6011      	str	r1, [r2, #0]
  return result;
 8003b44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b48:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	fab2 f282 	clz	r2, r2
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	f042 0220 	orr.w	r2, r2, #32
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	f002 021f 	and.w	r2, r2, #31
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f202 	lsl.w	r2, r1, r2
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d182      	bne.n	8003a70 <HAL_RCC_OscConfig+0xf2c>
 8003b6a:	e037      	b.n	8003bdc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e02e      	b.n	8003bde <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b80:	4b19      	ldr	r3, [pc, #100]	@ (8003be8 <HAL_RCC_OscConfig+0x10a4>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003b88:	4b17      	ldr	r3, [pc, #92]	@ (8003be8 <HAL_RCC_OscConfig+0x10a4>)
 8003b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003b94:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d117      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ba8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003bac:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bcc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40021000 	.word	0x40021000

08003bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b09e      	sub	sp, #120	@ 0x78
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e162      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c04:	4b90      	ldr	r3, [pc, #576]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d910      	bls.n	8003c34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b8d      	ldr	r3, [pc, #564]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 0207 	bic.w	r2, r3, #7
 8003c1a:	498b      	ldr	r1, [pc, #556]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	4b89      	ldr	r3, [pc, #548]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e14a      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c40:	4b82      	ldr	r3, [pc, #520]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	497f      	ldr	r1, [pc, #508]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80dc 	beq.w	8003e18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d13c      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xf6>
 8003c68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c6c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d102      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xa6>
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	e00f      	b.n	8003cb2 <HAL_RCC_ClockConfig+0xc6>
 8003c92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c96:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ca0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ca4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cae:	4b67      	ldr	r3, [pc, #412]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003cb6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cba:	fa92 f2a2 	rbit	r2, r2
 8003cbe:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003cc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cc2:	fab2 f282 	clz	r2, r2
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f042 0220 	orr.w	r2, r2, #32
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	f002 021f 	and.w	r2, r2, #31
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d17b      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0f3      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d13c      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x178>
 8003cea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d102      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x128>
 8003d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	e00f      	b.n	8003d34 <HAL_RCC_ClockConfig+0x148>
 8003d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d26:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d30:	4b46      	ldr	r3, [pc, #280]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d38:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003d3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d3c:	fa92 f2a2 	rbit	r2, r2
 8003d40:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003d42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d44:	fab2 f282 	clz	r2, r2
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	f042 0220 	orr.w	r2, r2, #32
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	f002 021f 	and.w	r2, r2, #31
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d13a      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0b2      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
 8003d64:	2302      	movs	r3, #2
 8003d66:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x1a0>
 8003d86:	4b31      	ldr	r3, [pc, #196]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	e00d      	b.n	8003da8 <HAL_RCC_ClockConfig+0x1bc>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d98:	2302      	movs	r3, #2
 8003d9a:	623b      	str	r3, [r7, #32]
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	4b29      	ldr	r3, [pc, #164]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	2202      	movs	r2, #2
 8003daa:	61ba      	str	r2, [r7, #24]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	fa92 f2a2 	rbit	r2, r2
 8003db2:	617a      	str	r2, [r7, #20]
  return result;
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	fab2 f282 	clz	r2, r2
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	f042 0220 	orr.w	r2, r2, #32
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	f002 021f 	and.w	r2, r2, #31
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e079      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	491a      	ldr	r1, [pc, #104]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de8:	f7fe fbb8 	bl	800255c <HAL_GetTick>
 8003dec:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df0:	f7fe fbb4 	bl	800255c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e061      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 020c 	and.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1eb      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e18:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d214      	bcs.n	8003e50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 0207 	bic.w	r2, r3, #7
 8003e2e:	4906      	ldr	r1, [pc, #24]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e040      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
 8003e48:	40022000 	.word	0x40022000
 8003e4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	491a      	ldr	r1, [pc, #104]	@ (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e7a:	4b16      	ldr	r3, [pc, #88]	@ (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4912      	ldr	r1, [pc, #72]	@ (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e8e:	f000 f829 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003e92:	4601      	mov	r1, r0
 8003e94:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e9c:	22f0      	movs	r2, #240	@ 0xf0
 8003e9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	fa92 f2a2 	rbit	r2, r2
 8003ea6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	fab2 f282 	clz	r2, r2
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	40d3      	lsrs	r3, r2
 8003eb2:	4a09      	ldr	r2, [pc, #36]	@ (8003ed8 <HAL_RCC_ClockConfig+0x2ec>)
 8003eb4:	5cd3      	ldrb	r3, [r2, r3]
 8003eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8003eba:	4a08      	ldr	r2, [pc, #32]	@ (8003edc <HAL_RCC_ClockConfig+0x2f0>)
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ebe:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <HAL_RCC_ClockConfig+0x2f4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe fb06 	bl	80024d4 <HAL_InitTick>
  
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3778      	adds	r7, #120	@ 0x78
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	08004da0 	.word	0x08004da0
 8003edc:	20000004 	.word	0x20000004
 8003ee0:	20000008 	.word	0x20000008

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003efe:	4b1f      	ldr	r3, [pc, #124]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d002      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x30>
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0x36>
 8003f12:	e029      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f14:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f16:	613b      	str	r3, [r7, #16]
      break;
 8003f18:	e029      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	0c9b      	lsrs	r3, r3, #18
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	4a18      	ldr	r2, [pc, #96]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f24:	5cd3      	ldrb	r3, [r2, r3]
 8003f26:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003f28:	4b14      	ldr	r3, [pc, #80]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	4a15      	ldr	r2, [pc, #84]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f32:	5cd3      	ldrb	r3, [r2, r3]
 8003f34:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f40:	4a0f      	ldr	r2, [pc, #60]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e007      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f52:	4a0b      	ldr	r2, [pc, #44]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	fb02 f303 	mul.w	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	613b      	str	r3, [r7, #16]
      break;
 8003f66:	e002      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f6a:	613b      	str	r3, [r7, #16]
      break;
 8003f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f6e:	693b      	ldr	r3, [r7, #16]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	007a1200 	.word	0x007a1200
 8003f84:	08004db0 	.word	0x08004db0
 8003f88:	08004dc0 	.word	0x08004dc0

08003f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b092      	sub	sp, #72	@ 0x48
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80d4 	beq.w	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb0:	4b4e      	ldr	r3, [pc, #312]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10e      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	4a4a      	ldr	r2, [pc, #296]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	61d3      	str	r3, [r2, #28]
 8003fc8:	4b48      	ldr	r3, [pc, #288]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fda:	4b45      	ldr	r3, [pc, #276]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d118      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe6:	4b42      	ldr	r3, [pc, #264]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a41      	ldr	r2, [pc, #260]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff2:	f7fe fab3 	bl	800255c <HAL_GetTick>
 8003ff6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff8:	e008      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7fe faaf 	bl	800255c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b64      	cmp	r3, #100	@ 0x64
 8004006:	d901      	bls.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e1d6      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	4b38      	ldr	r3, [pc, #224]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004018:	4b34      	ldr	r3, [pc, #208]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004020:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8084 	beq.w	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004032:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004034:	429a      	cmp	r2, r3
 8004036:	d07c      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004038:	4b2c      	ldr	r3, [pc, #176]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004040:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004042:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004046:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004052:	fab3 f383 	clz	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	4b26      	ldr	r3, [pc, #152]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	461a      	mov	r2, r3
 8004062:	2301      	movs	r3, #1
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800406a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	4b1d      	ldr	r3, [pc, #116]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	461a      	mov	r2, r3
 8004086:	2300      	movs	r3, #0
 8004088:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800408a:	4a18      	ldr	r2, [pc, #96]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d04b      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409a:	f7fe fa5f 	bl	800255c <HAL_GetTick>
 800409e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a0:	e00a      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7fe fa5b 	bl	800255c <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e180      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80040b8:	2302      	movs	r3, #2
 80040ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c4:	2302      	movs	r3, #2
 80040c6:	623b      	str	r3, [r7, #32]
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	fa93 f3a3 	rbit	r3, r3
 80040ce:	61fb      	str	r3, [r7, #28]
  return result;
 80040d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f043 0302 	orr.w	r3, r3, #2
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d108      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80040e6:	4b01      	ldr	r3, [pc, #4]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	e00d      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40007000 	.word	0x40007000
 80040f4:	10908100 	.word	0x10908100
 80040f8:	2302      	movs	r3, #2
 80040fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	fa93 f3a3 	rbit	r3, r3
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	4b9a      	ldr	r3, [pc, #616]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	2202      	movs	r2, #2
 800410a:	613a      	str	r2, [r7, #16]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	fa92 f2a2 	rbit	r2, r2
 8004112:	60fa      	str	r2, [r7, #12]
  return result;
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	fab2 f282 	clz	r2, r2
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	f002 021f 	and.w	r2, r2, #31
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f202 	lsl.w	r2, r1, r2
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0b7      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004132:	4b8f      	ldr	r3, [pc, #572]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	498c      	ldr	r1, [pc, #560]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004144:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004148:	2b01      	cmp	r3, #1
 800414a:	d105      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414c:	4b88      	ldr	r3, [pc, #544]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	4a87      	ldr	r2, [pc, #540]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004156:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004164:	4b82      	ldr	r3, [pc, #520]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	f023 0203 	bic.w	r2, r3, #3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	497f      	ldr	r1, [pc, #508]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004172:	4313      	orrs	r3, r2
 8004174:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d008      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004182:	4b7b      	ldr	r3, [pc, #492]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004186:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	4978      	ldr	r1, [pc, #480]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041a0:	4b73      	ldr	r3, [pc, #460]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	4970      	ldr	r1, [pc, #448]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041be:	4b6c      	ldr	r3, [pc, #432]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c2:	f023 0210 	bic.w	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4969      	ldr	r1, [pc, #420]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80041dc:	4b64      	ldr	r3, [pc, #400]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e8:	4961      	ldr	r1, [pc, #388]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	f023 0220 	bic.w	r2, r3, #32
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	495a      	ldr	r1, [pc, #360]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004208:	4313      	orrs	r3, r2
 800420a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004218:	4b55      	ldr	r3, [pc, #340]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	4952      	ldr	r1, [pc, #328]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004226:	4313      	orrs	r3, r2
 8004228:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004236:	4b4e      	ldr	r3, [pc, #312]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	494b      	ldr	r1, [pc, #300]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004244:	4313      	orrs	r3, r2
 8004246:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004254:	4b46      	ldr	r3, [pc, #280]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004258:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	4943      	ldr	r1, [pc, #268]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004272:	4b3f      	ldr	r3, [pc, #252]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	493c      	ldr	r1, [pc, #240]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004290:	4b37      	ldr	r3, [pc, #220]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	4934      	ldr	r1, [pc, #208]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80042ae:	4b30      	ldr	r3, [pc, #192]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	492d      	ldr	r1, [pc, #180]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042cc:	4b28      	ldr	r3, [pc, #160]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d8:	4925      	ldr	r1, [pc, #148]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80042ea:	4b21      	ldr	r3, [pc, #132]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	491e      	ldr	r1, [pc, #120]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004308:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800430a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004314:	4916      	ldr	r1, [pc, #88]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004326:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004332:	490f      	ldr	r1, [pc, #60]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004334:	4313      	orrs	r3, r2
 8004336:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004344:	4b0a      	ldr	r3, [pc, #40]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004350:	4907      	ldr	r1, [pc, #28]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004352:	4313      	orrs	r3, r2
 8004354:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00c      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004362:	4b03      	ldr	r3, [pc, #12]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	e002      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000
 8004374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004376:	4913      	ldr	r1, [pc, #76]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004378:	4313      	orrs	r3, r2
 800437a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004388:	4b0e      	ldr	r3, [pc, #56]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004394:	490b      	ldr	r1, [pc, #44]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004396:	4313      	orrs	r3, r2
 8004398:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80043a6:	4b07      	ldr	r3, [pc, #28]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b2:	4904      	ldr	r1, [pc, #16]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3748      	adds	r7, #72	@ 0x48
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000

080043c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e049      	b.n	800446e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fd ffb2 	bl	8002358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f000 faa4 	bl	8004954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	d001      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e04f      	b.n	8004530 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a23      	ldr	r2, [pc, #140]	@ (800453c <HAL_TIM_Base_Start_IT+0xc4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01d      	beq.n	80044ee <HAL_TIM_Base_Start_IT+0x76>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ba:	d018      	beq.n	80044ee <HAL_TIM_Base_Start_IT+0x76>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004540 <HAL_TIM_Base_Start_IT+0xc8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <HAL_TIM_Base_Start_IT+0x76>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004544 <HAL_TIM_Base_Start_IT+0xcc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00e      	beq.n	80044ee <HAL_TIM_Base_Start_IT+0x76>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004548 <HAL_TIM_Base_Start_IT+0xd0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d009      	beq.n	80044ee <HAL_TIM_Base_Start_IT+0x76>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1b      	ldr	r2, [pc, #108]	@ (800454c <HAL_TIM_Base_Start_IT+0xd4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d004      	beq.n	80044ee <HAL_TIM_Base_Start_IT+0x76>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a19      	ldr	r2, [pc, #100]	@ (8004550 <HAL_TIM_Base_Start_IT+0xd8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d115      	bne.n	800451a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	4b17      	ldr	r3, [pc, #92]	@ (8004554 <HAL_TIM_Base_Start_IT+0xdc>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b06      	cmp	r3, #6
 80044fe:	d015      	beq.n	800452c <HAL_TIM_Base_Start_IT+0xb4>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004506:	d011      	beq.n	800452c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004518:	e008      	b.n	800452c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e000      	b.n	800452e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40013400 	.word	0x40013400
 800454c:	40014000 	.word	0x40014000
 8004550:	40015000 	.word	0x40015000
 8004554:	00010007 	.word	0x00010007

08004558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d020      	beq.n	80045bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0202 	mvn.w	r2, #2
 800458c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f9b7 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9a9 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f9ba 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d020      	beq.n	8004608 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0204 	mvn.w	r2, #4
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f991 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f983 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f994 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d020      	beq.n	8004654 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01b      	beq.n	8004654 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0208 	mvn.w	r2, #8
 8004624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2204      	movs	r2, #4
 800462a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f96b 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 8004640:	e005      	b.n	800464e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f95d 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f96e 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	d020      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01b      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0210 	mvn.w	r2, #16
 8004670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2208      	movs	r2, #8
 8004676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f945 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 800468c:	e005      	b.n	800469a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f937 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f948 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00c      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0201 	mvn.w	r2, #1
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f915 	bl	80048ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fb10 	bl	8004d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00c      	beq.n	800470c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fb08 	bl	8004d1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00c      	beq.n	8004730 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d007      	beq.n	8004730 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f907 	bl	800493e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0220 	mvn.w	r2, #32
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fad0 	bl	8004cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_TIM_ConfigClockSource+0x1c>
 8004774:	2302      	movs	r3, #2
 8004776:	e0b6      	b.n	80048e6 <HAL_TIM_ConfigClockSource+0x18a>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004796:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800479a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b4:	d03e      	beq.n	8004834 <HAL_TIM_ConfigClockSource+0xd8>
 80047b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ba:	f200 8087 	bhi.w	80048cc <HAL_TIM_ConfigClockSource+0x170>
 80047be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c2:	f000 8086 	beq.w	80048d2 <HAL_TIM_ConfigClockSource+0x176>
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ca:	d87f      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x170>
 80047cc:	2b70      	cmp	r3, #112	@ 0x70
 80047ce:	d01a      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0xaa>
 80047d0:	2b70      	cmp	r3, #112	@ 0x70
 80047d2:	d87b      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x170>
 80047d4:	2b60      	cmp	r3, #96	@ 0x60
 80047d6:	d050      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x11e>
 80047d8:	2b60      	cmp	r3, #96	@ 0x60
 80047da:	d877      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x170>
 80047dc:	2b50      	cmp	r3, #80	@ 0x50
 80047de:	d03c      	beq.n	800485a <HAL_TIM_ConfigClockSource+0xfe>
 80047e0:	2b50      	cmp	r3, #80	@ 0x50
 80047e2:	d873      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x170>
 80047e4:	2b40      	cmp	r3, #64	@ 0x40
 80047e6:	d058      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x13e>
 80047e8:	2b40      	cmp	r3, #64	@ 0x40
 80047ea:	d86f      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x170>
 80047ec:	2b30      	cmp	r3, #48	@ 0x30
 80047ee:	d064      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x15e>
 80047f0:	2b30      	cmp	r3, #48	@ 0x30
 80047f2:	d86b      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x170>
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d060      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x15e>
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d867      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x170>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d05c      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x15e>
 8004800:	2b10      	cmp	r3, #16
 8004802:	d05a      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x15e>
 8004804:	e062      	b.n	80048cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004816:	f000 f9c1 	bl	8004b9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	609a      	str	r2, [r3, #8]
      break;
 8004832:	e04f      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004844:	f000 f9aa 	bl	8004b9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004856:	609a      	str	r2, [r3, #8]
      break;
 8004858:	e03c      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004866:	461a      	mov	r2, r3
 8004868:	f000 f91e 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2150      	movs	r1, #80	@ 0x50
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f977 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004878:	e02c      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004886:	461a      	mov	r2, r3
 8004888:	f000 f93d 	bl	8004b06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2160      	movs	r1, #96	@ 0x60
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f967 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004898:	e01c      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a6:	461a      	mov	r2, r3
 80048a8:	f000 f8fe 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2140      	movs	r1, #64	@ 0x40
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f957 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 80048b8:	e00c      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f000 f94e 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 80048ca:	e003      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
      break;
 80048d0:	e000      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a48      	ldr	r2, [pc, #288]	@ (8004a88 <TIM_Base_SetConfig+0x134>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d013      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004972:	d00f      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a45      	ldr	r2, [pc, #276]	@ (8004a8c <TIM_Base_SetConfig+0x138>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a44      	ldr	r2, [pc, #272]	@ (8004a90 <TIM_Base_SetConfig+0x13c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a43      	ldr	r2, [pc, #268]	@ (8004a94 <TIM_Base_SetConfig+0x140>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a42      	ldr	r2, [pc, #264]	@ (8004a98 <TIM_Base_SetConfig+0x144>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d108      	bne.n	80049a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a37      	ldr	r2, [pc, #220]	@ (8004a88 <TIM_Base_SetConfig+0x134>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01f      	beq.n	80049ee <TIM_Base_SetConfig+0x9a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b4:	d01b      	beq.n	80049ee <TIM_Base_SetConfig+0x9a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a34      	ldr	r2, [pc, #208]	@ (8004a8c <TIM_Base_SetConfig+0x138>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d017      	beq.n	80049ee <TIM_Base_SetConfig+0x9a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a33      	ldr	r2, [pc, #204]	@ (8004a90 <TIM_Base_SetConfig+0x13c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <TIM_Base_SetConfig+0x9a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a32      	ldr	r2, [pc, #200]	@ (8004a94 <TIM_Base_SetConfig+0x140>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00f      	beq.n	80049ee <TIM_Base_SetConfig+0x9a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a32      	ldr	r2, [pc, #200]	@ (8004a9c <TIM_Base_SetConfig+0x148>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00b      	beq.n	80049ee <TIM_Base_SetConfig+0x9a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a31      	ldr	r2, [pc, #196]	@ (8004aa0 <TIM_Base_SetConfig+0x14c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d007      	beq.n	80049ee <TIM_Base_SetConfig+0x9a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a30      	ldr	r2, [pc, #192]	@ (8004aa4 <TIM_Base_SetConfig+0x150>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d003      	beq.n	80049ee <TIM_Base_SetConfig+0x9a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a98 <TIM_Base_SetConfig+0x144>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d108      	bne.n	8004a00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a18      	ldr	r2, [pc, #96]	@ (8004a88 <TIM_Base_SetConfig+0x134>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <TIM_Base_SetConfig+0x100>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a19      	ldr	r2, [pc, #100]	@ (8004a94 <TIM_Base_SetConfig+0x140>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00f      	beq.n	8004a54 <TIM_Base_SetConfig+0x100>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a19      	ldr	r2, [pc, #100]	@ (8004a9c <TIM_Base_SetConfig+0x148>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <TIM_Base_SetConfig+0x100>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	@ (8004aa0 <TIM_Base_SetConfig+0x14c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <TIM_Base_SetConfig+0x100>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a17      	ldr	r2, [pc, #92]	@ (8004aa4 <TIM_Base_SetConfig+0x150>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_Base_SetConfig+0x100>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a12      	ldr	r2, [pc, #72]	@ (8004a98 <TIM_Base_SetConfig+0x144>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d103      	bne.n	8004a5c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d105      	bne.n	8004a7a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f023 0201 	bic.w	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	611a      	str	r2, [r3, #16]
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	40013400 	.word	0x40013400
 8004a98:	40015000 	.word	0x40015000
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40014400 	.word	0x40014400
 8004aa4:	40014800 	.word	0x40014800

08004aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 030a 	bic.w	r3, r3, #10
 8004ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	621a      	str	r2, [r3, #32]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b087      	sub	sp, #28
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f023 0210 	bic.w	r2, r3, #16
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	031b      	lsls	r3, r3, #12
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f043 0307 	orr.w	r3, r3, #7
 8004b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	609a      	str	r2, [r3, #8]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	021a      	lsls	r2, r3, #8
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e06d      	b.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a30      	ldr	r2, [pc, #192]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2f      	ldr	r2, [pc, #188]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d108      	bne.n	8004c44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1e      	ldr	r2, [pc, #120]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d01d      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c70:	d018      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a1a      	ldr	r2, [pc, #104]	@ (8004cec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00e      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d009      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a16      	ldr	r2, [pc, #88]	@ (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a11      	ldr	r2, [pc, #68]	@ (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d10c      	bne.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004caa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40013400 	.word	0x40013400
 8004ce4:	40015000 	.word	0x40015000
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40000800 	.word	0x40000800
 8004cf0:	40014000 	.word	0x40014000

08004cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <memset>:
 8004d30:	4402      	add	r2, r0
 8004d32:	4603      	mov	r3, r0
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d100      	bne.n	8004d3a <memset+0xa>
 8004d38:	4770      	bx	lr
 8004d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d3e:	e7f9      	b.n	8004d34 <memset+0x4>

08004d40 <__libc_init_array>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4d0d      	ldr	r5, [pc, #52]	@ (8004d78 <__libc_init_array+0x38>)
 8004d44:	4c0d      	ldr	r4, [pc, #52]	@ (8004d7c <__libc_init_array+0x3c>)
 8004d46:	1b64      	subs	r4, r4, r5
 8004d48:	10a4      	asrs	r4, r4, #2
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	42a6      	cmp	r6, r4
 8004d4e:	d109      	bne.n	8004d64 <__libc_init_array+0x24>
 8004d50:	4d0b      	ldr	r5, [pc, #44]	@ (8004d80 <__libc_init_array+0x40>)
 8004d52:	4c0c      	ldr	r4, [pc, #48]	@ (8004d84 <__libc_init_array+0x44>)
 8004d54:	f000 f818 	bl	8004d88 <_init>
 8004d58:	1b64      	subs	r4, r4, r5
 8004d5a:	10a4      	asrs	r4, r4, #2
 8004d5c:	2600      	movs	r6, #0
 8004d5e:	42a6      	cmp	r6, r4
 8004d60:	d105      	bne.n	8004d6e <__libc_init_array+0x2e>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d68:	4798      	blx	r3
 8004d6a:	3601      	adds	r6, #1
 8004d6c:	e7ee      	b.n	8004d4c <__libc_init_array+0xc>
 8004d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d72:	4798      	blx	r3
 8004d74:	3601      	adds	r6, #1
 8004d76:	e7f2      	b.n	8004d5e <__libc_init_array+0x1e>
 8004d78:	08004dd0 	.word	0x08004dd0
 8004d7c:	08004dd0 	.word	0x08004dd0
 8004d80:	08004dd0 	.word	0x08004dd0
 8004d84:	08004dd4 	.word	0x08004dd4

08004d88 <_init>:
 8004d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8a:	bf00      	nop
 8004d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8e:	bc08      	pop	{r3}
 8004d90:	469e      	mov	lr, r3
 8004d92:	4770      	bx	lr

08004d94 <_fini>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	bf00      	nop
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr
