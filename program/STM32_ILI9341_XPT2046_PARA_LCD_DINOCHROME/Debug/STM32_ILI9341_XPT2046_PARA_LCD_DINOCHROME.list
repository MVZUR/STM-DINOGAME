
STM32_ILI9341_XPT2046_PARA_LCD_DINOCHROME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c04  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  08006d9c  08006d9c  00007d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007980  08007980  000090a0  2**0
                  CONTENTS
  4 .ARM          00000000  08007980  08007980  000090a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007980  08007980  000090a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007980  08007980  00008980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007984  08007984  00008984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08007988  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090a0  2**0
                  CONTENTS
 10 .bss          000001cc  200000a0  200000a0  000090a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000026c  2000026c  000090a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b895  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021a2  00000000  00000000  00014965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00016b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092a  00000000  00000000  000176f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c37  00000000  00000000  0001801a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f912  00000000  00000000  0001ac51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6204  00000000  00000000  0002a563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f0767  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034a0  00000000  00000000  000f07ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000f3c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006d84 	.word	0x08006d84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	08006d84 	.word	0x08006d84

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <LCD_write>:
u16 DeviceCode;	 



void LCD_write(u16 VAL)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
	LCD_CS_CLR;  
 8000afa:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <LCD_write+0x34>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
	DATAOUT(VAL);
 8000b00:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <LCD_write+0x38>)
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	6153      	str	r3, [r2, #20]
	LCD_WR_CLR;
 8000b06:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <LCD_write+0x34>)
 8000b08:	2208      	movs	r2, #8
 8000b0a:	629a      	str	r2, [r3, #40]	@ 0x28
	LCD_WR_SET;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <LCD_write+0x34>)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	619a      	str	r2, [r3, #24]
	LCD_CS_SET;
 8000b12:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <LCD_write+0x34>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	619a      	str	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	48000800 	.word	0x48000800
 8000b28:	48000400 	.word	0x48000400

08000b2c <LCD_WR_REG>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u16 data)
{ 
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
   LCD_RS_CLR;     
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <LCD_WR_REG+0x20>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	629a      	str	r2, [r3, #40]	@ 0x28
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ffd6 	bl	8000af0 <LCD_write>
	 #endif
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	48000800 	.word	0x48000800

08000b50 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{	
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	460a      	mov	r2, r1
 8000b5a:	80fb      	strh	r3, [r7, #6]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ffe2 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 8000b68:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <LCD_WriteReg+0x44>)
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	619a      	str	r2, [r3, #24]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <LCD_WriteReg+0x44>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b74:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <LCD_WriteReg+0x48>)
 8000b76:	88bb      	ldrh	r3, [r7, #4]
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <LCD_WriteReg+0x44>)
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <LCD_WriteReg+0x44>)
 8000b82:	2208      	movs	r2, #8
 8000b84:	619a      	str	r2, [r3, #24]
 8000b86:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <LCD_WriteReg+0x44>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	619a      	str	r2, [r3, #24]
}	   
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	48000800 	.word	0x48000800
 8000b98:	48000400 	.word	0x48000400

08000b9c <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000ba0:	4b03      	ldr	r3, [pc, #12]	@ (8000bb0 <LCD_WriteRAM_Prepare+0x14>)
 8000ba2:	891b      	ldrh	r3, [r3, #8]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ffc1 	bl	8000b2c <LCD_WR_REG>
}	 
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000bc 	.word	0x200000bc

08000bb4 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
   LCD_RS_SET; 
 8000bbe:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <Lcd_WriteData_16Bit+0x20>)
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	619a      	str	r2, [r3, #24]
		LCD_WR_SET;
		LCD_CS_SET;
 //  LCD_write(Data&0xFF00);
//	 LCD_write(Data<<8);
	 #else
	 LCD_write(Data);
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff92 	bl	8000af0 <LCD_write>
	 #endif
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	48000800 	.word	0x48000800

08000bd8 <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	80fb      	strh	r3, [r7, #6]
 8000be4:	4613      	mov	r3, r2
 8000be6:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 8000be8:	88ba      	ldrh	r2, [r7, #4]
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fe56 	bl	80018a0 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 8000bf4:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <LCD_DrawPoint+0x30>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffdb 	bl	8000bb4 <Lcd_WriteData_16Bit>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000cc 	.word	0x200000cc

08000c0c <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
  unsigned int i;//,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 8000c16:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <LCD_Clear+0x58>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <LCD_Clear+0x58>)
 8000c20:	885b      	ldrh	r3, [r3, #2]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 fd77 	bl	800171c <LCD_SetWindows>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	e006      	b.n	8000c42 <LCD_Clear+0x36>
	{
 //   for(m=0;m<lcddev.width;m++)
  //  {	
			Lcd_WriteData_16Bit(Color);
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ffbc 	bl	8000bb4 <Lcd_WriteData_16Bit>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <LCD_Clear+0x58>)
 8000c44:	885b      	ldrh	r3, [r3, #2]
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <LCD_Clear+0x58>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	fb02 f303 	mul.w	r3, r2, r3
 8000c50:	461a      	mov	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d3ed      	bcc.n	8000c34 <LCD_Clear+0x28>
	//	}
	}
} 
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000bc 	.word	0x200000bc

08000c68 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <LCD_RESET+0x20>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	629a      	str	r2, [r3, #40]	@ 0x28
	delay_ms(100);	
 8000c72:	2064      	movs	r0, #100	@ 0x64
 8000c74:	f002 fa12 	bl	800309c <delay_ms>
	LCD_RST_SET;
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <LCD_RESET+0x20>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	619a      	str	r2, [r3, #24]
	delay_ms(50);
 8000c7e:	2032      	movs	r0, #50	@ 0x32
 8000c80:	f002 fa0c 	bl	800309c <delay_ms>
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	48000800 	.word	0x48000800

08000c8c <ILI9341_paradriver_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void ILI9341_paradriver_Init(void)
{  
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	//LCD_GPIOInit();	// already done with CUBE MX
 	LCD_RESET(); //LCD ��λ
 8000c90:	f7ff ffea 	bl	8000c68 <LCD_RESET>
//*************2.4inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 8000c94:	20cf      	movs	r0, #207	@ 0xcf
 8000c96:	f7ff ff49 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000c9a:	4b9b      	ldr	r3, [pc, #620]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	619a      	str	r2, [r3, #24]
 8000ca0:	4b99      	ldr	r3, [pc, #612]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ca6:	4b99      	ldr	r3, [pc, #612]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	4b96      	ldr	r3, [pc, #600]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000cae:	2208      	movs	r2, #8
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cb2:	4b95      	ldr	r3, [pc, #596]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000cb4:	2208      	movs	r2, #8
 8000cb6:	619a      	str	r2, [r3, #24]
 8000cb8:	4b93      	ldr	r3, [pc, #588]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000cba:	2202      	movs	r2, #2
 8000cbc:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xD9); //0xC1 
 8000cbe:	4b92      	ldr	r3, [pc, #584]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	619a      	str	r2, [r3, #24]
 8000cc4:	4b90      	ldr	r3, [pc, #576]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cca:	4b90      	ldr	r3, [pc, #576]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000ccc:	22d9      	movs	r2, #217	@ 0xd9
 8000cce:	615a      	str	r2, [r3, #20]
 8000cd0:	4b8d      	ldr	r3, [pc, #564]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cd6:	4b8c      	ldr	r3, [pc, #560]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000cd8:	2208      	movs	r2, #8
 8000cda:	619a      	str	r2, [r3, #24]
 8000cdc:	4b8a      	ldr	r3, [pc, #552]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X30); 
 8000ce2:	4b89      	ldr	r3, [pc, #548]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	619a      	str	r2, [r3, #24]
 8000ce8:	4b87      	ldr	r3, [pc, #540]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cee:	4b87      	ldr	r3, [pc, #540]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000cf0:	2230      	movs	r2, #48	@ 0x30
 8000cf2:	615a      	str	r2, [r3, #20]
 8000cf4:	4b84      	ldr	r3, [pc, #528]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cfa:	4b83      	ldr	r3, [pc, #524]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	619a      	str	r2, [r3, #24]
 8000d00:	4b81      	ldr	r3, [pc, #516]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d02:	2202      	movs	r2, #2
 8000d04:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xED);  
 8000d06:	20ed      	movs	r0, #237	@ 0xed
 8000d08:	f7ff ff10 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 8000d0c:	4b7e      	ldr	r3, [pc, #504]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d0e:	2204      	movs	r2, #4
 8000d10:	619a      	str	r2, [r3, #24]
 8000d12:	4b7d      	ldr	r3, [pc, #500]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d18:	4b7c      	ldr	r3, [pc, #496]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000d1a:	2264      	movs	r2, #100	@ 0x64
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	4b7a      	ldr	r3, [pc, #488]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d20:	2208      	movs	r2, #8
 8000d22:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d24:	4b78      	ldr	r3, [pc, #480]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d26:	2208      	movs	r2, #8
 8000d28:	619a      	str	r2, [r3, #24]
 8000d2a:	4b77      	ldr	r3, [pc, #476]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x03); 
 8000d30:	4b75      	ldr	r3, [pc, #468]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	619a      	str	r2, [r3, #24]
 8000d36:	4b74      	ldr	r3, [pc, #464]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d3c:	4b73      	ldr	r3, [pc, #460]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000d3e:	2203      	movs	r2, #3
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	4b71      	ldr	r3, [pc, #452]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d44:	2208      	movs	r2, #8
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d48:	4b6f      	ldr	r3, [pc, #444]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	619a      	str	r2, [r3, #24]
 8000d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X12); 
 8000d54:	4b6c      	ldr	r3, [pc, #432]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d56:	2204      	movs	r2, #4
 8000d58:	619a      	str	r2, [r3, #24]
 8000d5a:	4b6b      	ldr	r3, [pc, #428]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d60:	4b6a      	ldr	r3, [pc, #424]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000d62:	2212      	movs	r2, #18
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	4b68      	ldr	r3, [pc, #416]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d68:	2208      	movs	r2, #8
 8000d6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d6c:	4b66      	ldr	r3, [pc, #408]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d6e:	2208      	movs	r2, #8
 8000d70:	619a      	str	r2, [r3, #24]
 8000d72:	4b65      	ldr	r3, [pc, #404]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X81); 
 8000d78:	4b63      	ldr	r3, [pc, #396]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	619a      	str	r2, [r3, #24]
 8000d7e:	4b62      	ldr	r3, [pc, #392]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d84:	4b61      	ldr	r3, [pc, #388]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000d86:	2281      	movs	r2, #129	@ 0x81
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d90:	4b5d      	ldr	r3, [pc, #372]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d92:	2208      	movs	r2, #8
 8000d94:	619a      	str	r2, [r3, #24]
 8000d96:	4b5c      	ldr	r3, [pc, #368]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xE8);  
 8000d9c:	20e8      	movs	r0, #232	@ 0xe8
 8000d9e:	f7ff fec5 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8000da2:	4b59      	ldr	r3, [pc, #356]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000da4:	2204      	movs	r2, #4
 8000da6:	619a      	str	r2, [r3, #24]
 8000da8:	4b57      	ldr	r3, [pc, #348]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dae:	4b57      	ldr	r3, [pc, #348]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000db0:	2285      	movs	r2, #133	@ 0x85
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	4b54      	ldr	r3, [pc, #336]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000db6:	2208      	movs	r2, #8
 8000db8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dba:	4b53      	ldr	r3, [pc, #332]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000dbc:	2208      	movs	r2, #8
 8000dbe:	619a      	str	r2, [r3, #24]
 8000dc0:	4b51      	ldr	r3, [pc, #324]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x10); 
 8000dc6:	4b50      	ldr	r3, [pc, #320]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000dc8:	2204      	movs	r2, #4
 8000dca:	619a      	str	r2, [r3, #24]
 8000dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000dd4:	2210      	movs	r2, #16
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000dda:	2208      	movs	r2, #8
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dde:	4b4a      	ldr	r3, [pc, #296]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000de0:	2208      	movs	r2, #8
 8000de2:	619a      	str	r2, [r3, #24]
 8000de4:	4b48      	ldr	r3, [pc, #288]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000de6:	2202      	movs	r2, #2
 8000de8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x7A); 
 8000dea:	4b47      	ldr	r3, [pc, #284]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000dec:	2204      	movs	r2, #4
 8000dee:	619a      	str	r2, [r3, #24]
 8000df0:	4b45      	ldr	r3, [pc, #276]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000df6:	4b45      	ldr	r3, [pc, #276]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000df8:	227a      	movs	r2, #122	@ 0x7a
 8000dfa:	615a      	str	r2, [r3, #20]
 8000dfc:	4b42      	ldr	r3, [pc, #264]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000dfe:	2208      	movs	r2, #8
 8000e00:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e02:	4b41      	ldr	r3, [pc, #260]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e04:	2208      	movs	r2, #8
 8000e06:	619a      	str	r2, [r3, #24]
 8000e08:	4b3f      	ldr	r3, [pc, #252]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xCB);  
 8000e0e:	20cb      	movs	r0, #203	@ 0xcb
 8000e10:	f7ff fe8c 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 8000e14:	4b3c      	ldr	r3, [pc, #240]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	619a      	str	r2, [r3, #24]
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e20:	4b3a      	ldr	r3, [pc, #232]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000e22:	2239      	movs	r2, #57	@ 0x39
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	4b38      	ldr	r3, [pc, #224]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e28:	2208      	movs	r2, #8
 8000e2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e2c:	4b36      	ldr	r3, [pc, #216]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	619a      	str	r2, [r3, #24]
 8000e32:	4b35      	ldr	r3, [pc, #212]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2C); 
 8000e38:	4b33      	ldr	r3, [pc, #204]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	619a      	str	r2, [r3, #24]
 8000e3e:	4b32      	ldr	r3, [pc, #200]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e44:	4b31      	ldr	r3, [pc, #196]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000e46:	222c      	movs	r2, #44	@ 0x2c
 8000e48:	615a      	str	r2, [r3, #20]
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e50:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e52:	2208      	movs	r2, #8
 8000e54:	619a      	str	r2, [r3, #24]
 8000e56:	4b2c      	ldr	r3, [pc, #176]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00); 
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	619a      	str	r2, [r3, #24]
 8000e62:	4b29      	ldr	r3, [pc, #164]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e68:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e70:	2208      	movs	r2, #8
 8000e72:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e74:	4b24      	ldr	r3, [pc, #144]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e76:	2208      	movs	r2, #8
 8000e78:	619a      	str	r2, [r3, #24]
 8000e7a:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x34); 
 8000e80:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	619a      	str	r2, [r3, #24]
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e88:	2202      	movs	r2, #2
 8000e8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000e8e:	2234      	movs	r2, #52	@ 0x34
 8000e90:	615a      	str	r2, [r3, #20]
 8000e92:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e94:	2208      	movs	r2, #8
 8000e96:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	619a      	str	r2, [r3, #24]
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x02); 
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	619a      	str	r2, [r3, #24]
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eb0:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000eb8:	2208      	movs	r2, #8
 8000eba:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	619a      	str	r2, [r3, #24]
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xF7);  
 8000ec8:	20f7      	movs	r0, #247	@ 0xf7
 8000eca:	f7ff fe2f 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	619a      	str	r2, [r3, #24]
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <ILI9341_paradriver_Init+0x280>)
 8000edc:	2220      	movs	r2, #32
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000ee8:	2208      	movs	r2, #8
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xEA);  
 8000ef2:	20ea      	movs	r0, #234	@ 0xea
 8000ef4:	f7ff fe1a 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	619a      	str	r2, [r3, #24]
 8000efe:	4b02      	ldr	r3, [pc, #8]	@ (8000f08 <ILI9341_paradriver_Init+0x27c>)
 8000f00:	2202      	movs	r2, #2
 8000f02:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f04:	e004      	b.n	8000f10 <ILI9341_paradriver_Init+0x284>
 8000f06:	bf00      	nop
 8000f08:	48000800 	.word	0x48000800
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	4b9f      	ldr	r3, [pc, #636]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	4b9f      	ldr	r3, [pc, #636]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f18:	2208      	movs	r2, #8
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f1c:	4b9d      	ldr	r3, [pc, #628]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f1e:	2208      	movs	r2, #8
 8000f20:	619a      	str	r2, [r3, #24]
 8000f22:	4b9c      	ldr	r3, [pc, #624]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00); 
 8000f28:	4b9a      	ldr	r3, [pc, #616]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	619a      	str	r2, [r3, #24]
 8000f2e:	4b99      	ldr	r3, [pc, #612]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f34:	4b96      	ldr	r3, [pc, #600]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
 8000f3a:	4b96      	ldr	r3, [pc, #600]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f40:	4b94      	ldr	r3, [pc, #592]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f42:	2208      	movs	r2, #8
 8000f44:	619a      	str	r2, [r3, #24]
 8000f46:	4b93      	ldr	r3, [pc, #588]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f48:	2202      	movs	r2, #2
 8000f4a:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC0);    //Power control 
 8000f4c:	20c0      	movs	r0, #192	@ 0xc0
 8000f4e:	f7ff fded 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 8000f52:	4b90      	ldr	r3, [pc, #576]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f54:	2204      	movs	r2, #4
 8000f56:	619a      	str	r2, [r3, #24]
 8000f58:	4b8e      	ldr	r3, [pc, #568]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f5e:	4b8c      	ldr	r3, [pc, #560]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 8000f60:	221b      	movs	r2, #27
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	4b8b      	ldr	r3, [pc, #556]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f66:	2208      	movs	r2, #8
 8000f68:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f6a:	4b8a      	ldr	r3, [pc, #552]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	619a      	str	r2, [r3, #24]
 8000f70:	4b88      	ldr	r3, [pc, #544]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC1);    //Power control 
 8000f76:	20c1      	movs	r0, #193	@ 0xc1
 8000f78:	f7ff fdd8 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] 0x01
 8000f7c:	4b85      	ldr	r3, [pc, #532]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	619a      	str	r2, [r3, #24]
 8000f82:	4b84      	ldr	r3, [pc, #528]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f88:	4b81      	ldr	r3, [pc, #516]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 8000f8a:	2212      	movs	r2, #18
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	4b81      	ldr	r3, [pc, #516]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f90:	2208      	movs	r2, #8
 8000f92:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f94:	4b7f      	ldr	r3, [pc, #508]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f96:	2208      	movs	r2, #8
 8000f98:	619a      	str	r2, [r3, #24]
 8000f9a:	4b7e      	ldr	r3, [pc, #504]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC5);    //VCM control 
 8000fa0:	20c5      	movs	r0, #197	@ 0xc5
 8000fa2:	f7ff fdc3 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x08); 	 //30
 8000fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	619a      	str	r2, [r3, #24]
 8000fac:	4b79      	ldr	r3, [pc, #484]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fb2:	4b77      	ldr	r3, [pc, #476]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	615a      	str	r2, [r3, #20]
 8000fb8:	4b76      	ldr	r3, [pc, #472]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000fba:	2208      	movs	r2, #8
 8000fbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fbe:	4b75      	ldr	r3, [pc, #468]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	619a      	str	r2, [r3, #24]
 8000fc4:	4b73      	ldr	r3, [pc, #460]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x26); 	 //30
 8000fca:	4b72      	ldr	r3, [pc, #456]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000fcc:	2204      	movs	r2, #4
 8000fce:	619a      	str	r2, [r3, #24]
 8000fd0:	4b70      	ldr	r3, [pc, #448]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 8000fd8:	2226      	movs	r2, #38	@ 0x26
 8000fda:	615a      	str	r2, [r3, #20]
 8000fdc:	4b6d      	ldr	r3, [pc, #436]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000fde:	2208      	movs	r2, #8
 8000fe0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	619a      	str	r2, [r3, #24]
 8000fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC7);    //VCM control2 
 8000fee:	20c7      	movs	r0, #199	@ 0xc7
 8000ff0:	f7ff fd9c 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 8000ff4:	4b67      	ldr	r3, [pc, #412]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	619a      	str	r2, [r3, #24]
 8000ffa:	4b66      	ldr	r3, [pc, #408]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001000:	4b63      	ldr	r3, [pc, #396]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 8001002:	22b7      	movs	r2, #183	@ 0xb7
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	4b63      	ldr	r3, [pc, #396]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001008:	2208      	movs	r2, #8
 800100a:	629a      	str	r2, [r3, #40]	@ 0x28
 800100c:	4b61      	ldr	r3, [pc, #388]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800100e:	2208      	movs	r2, #8
 8001010:	619a      	str	r2, [r3, #24]
 8001012:	4b60      	ldr	r3, [pc, #384]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001014:	2202      	movs	r2, #2
 8001016:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x36);    // Memory Access Control 
 8001018:	2036      	movs	r0, #54	@ 0x36
 800101a:	f7ff fd87 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 800101e:	4b5d      	ldr	r3, [pc, #372]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001020:	2204      	movs	r2, #4
 8001022:	619a      	str	r2, [r3, #24]
 8001024:	4b5b      	ldr	r3, [pc, #364]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001026:	2202      	movs	r2, #2
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28
 800102a:	4b59      	ldr	r3, [pc, #356]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 800102c:	2208      	movs	r2, #8
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	4b58      	ldr	r3, [pc, #352]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001032:	2208      	movs	r2, #8
 8001034:	629a      	str	r2, [r3, #40]	@ 0x28
 8001036:	4b57      	ldr	r3, [pc, #348]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001038:	2208      	movs	r2, #8
 800103a:	619a      	str	r2, [r3, #24]
 800103c:	4b55      	ldr	r3, [pc, #340]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800103e:	2202      	movs	r2, #2
 8001040:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x3A);   
 8001042:	203a      	movs	r0, #58	@ 0x3a
 8001044:	f7ff fd72 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 8001048:	4b52      	ldr	r3, [pc, #328]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800104a:	2204      	movs	r2, #4
 800104c:	619a      	str	r2, [r3, #24]
 800104e:	4b51      	ldr	r3, [pc, #324]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001050:	2202      	movs	r2, #2
 8001052:	629a      	str	r2, [r3, #40]	@ 0x28
 8001054:	4b4e      	ldr	r3, [pc, #312]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 8001056:	2255      	movs	r2, #85	@ 0x55
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	4b4e      	ldr	r3, [pc, #312]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800105c:	2208      	movs	r2, #8
 800105e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001060:	4b4c      	ldr	r3, [pc, #304]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001062:	2208      	movs	r2, #8
 8001064:	619a      	str	r2, [r3, #24]
 8001066:	4b4b      	ldr	r3, [pc, #300]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001068:	2202      	movs	r2, #2
 800106a:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xB1);   
 800106c:	20b1      	movs	r0, #177	@ 0xb1
 800106e:	f7ff fd5d 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 8001072:	4b48      	ldr	r3, [pc, #288]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001074:	2204      	movs	r2, #4
 8001076:	619a      	str	r2, [r3, #24]
 8001078:	4b46      	ldr	r3, [pc, #280]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800107a:	2202      	movs	r2, #2
 800107c:	629a      	str	r2, [r3, #40]	@ 0x28
 800107e:	4b44      	ldr	r3, [pc, #272]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
 8001084:	4b43      	ldr	r3, [pc, #268]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001086:	2208      	movs	r2, #8
 8001088:	629a      	str	r2, [r3, #40]	@ 0x28
 800108a:	4b42      	ldr	r3, [pc, #264]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800108c:	2208      	movs	r2, #8
 800108e:	619a      	str	r2, [r3, #24]
 8001090:	4b40      	ldr	r3, [pc, #256]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001092:	2202      	movs	r2, #2
 8001094:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1A); 
 8001096:	4b3f      	ldr	r3, [pc, #252]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001098:	2204      	movs	r2, #4
 800109a:	619a      	str	r2, [r3, #24]
 800109c:	4b3d      	ldr	r3, [pc, #244]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800109e:	2202      	movs	r2, #2
 80010a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80010a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 80010a4:	221a      	movs	r2, #26
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010aa:	2208      	movs	r2, #8
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80010ae:	4b39      	ldr	r3, [pc, #228]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010b0:	2208      	movs	r2, #8
 80010b2:	619a      	str	r2, [r3, #24]
 80010b4:	4b37      	ldr	r3, [pc, #220]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xB6);    // Display Function Control 
 80010ba:	20b6      	movs	r0, #182	@ 0xb6
 80010bc:	f7ff fd36 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 80010c0:	4b34      	ldr	r3, [pc, #208]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010c2:	2204      	movs	r2, #4
 80010c4:	619a      	str	r2, [r3, #24]
 80010c6:	4b33      	ldr	r3, [pc, #204]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80010cc:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 80010ce:	220a      	movs	r2, #10
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	4b30      	ldr	r3, [pc, #192]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010d4:	2208      	movs	r2, #8
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80010d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010da:	2208      	movs	r2, #8
 80010dc:	619a      	str	r2, [r3, #24]
 80010de:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xA2); 
 80010e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010e6:	2204      	movs	r2, #4
 80010e8:	619a      	str	r2, [r3, #24]
 80010ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80010f0:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 80010f2:	22a2      	movs	r2, #162	@ 0xa2
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010f8:	2208      	movs	r2, #8
 80010fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80010fc:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 80010fe:	2208      	movs	r2, #8
 8001100:	619a      	str	r2, [r3, #24]
 8001102:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001104:	2202      	movs	r2, #2
 8001106:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8001108:	20f2      	movs	r0, #242	@ 0xf2
 800110a:	f7ff fd0f 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800110e:	4b21      	ldr	r3, [pc, #132]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001110:	2204      	movs	r2, #4
 8001112:	619a      	str	r2, [r3, #24]
 8001114:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001116:	2202      	movs	r2, #2
 8001118:	629a      	str	r2, [r3, #40]	@ 0x28
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001122:	2208      	movs	r2, #8
 8001124:	629a      	str	r2, [r3, #40]	@ 0x28
 8001126:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001128:	2208      	movs	r2, #8
 800112a:	619a      	str	r2, [r3, #24]
 800112c:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800112e:	2202      	movs	r2, #2
 8001130:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x26);    //Gamma curve selected 
 8001132:	2026      	movs	r0, #38	@ 0x26
 8001134:	f7ff fcfa 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800113a:	2204      	movs	r2, #4
 800113c:	619a      	str	r2, [r3, #24]
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001140:	2202      	movs	r2, #2
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 8001146:	2201      	movs	r2, #1
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800114c:	2208      	movs	r2, #8
 800114e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001150:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001152:	2208      	movs	r2, #8
 8001154:	619a      	str	r2, [r3, #24]
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001158:	2202      	movs	r2, #2
 800115a:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xE0);    //Set Gamma 
 800115c:	20e0      	movs	r0, #224	@ 0xe0
 800115e:	f7ff fce5 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001164:	2204      	movs	r2, #4
 8001166:	619a      	str	r2, [r3, #24]
 8001168:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800116a:	2202      	movs	r2, #2
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <ILI9341_paradriver_Init+0x504>)
 8001170:	220f      	movs	r2, #15
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001176:	2208      	movs	r2, #8
 8001178:	629a      	str	r2, [r3, #40]	@ 0x28
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 800117c:	2208      	movs	r2, #8
 800117e:	619a      	str	r2, [r3, #24]
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001182:	2202      	movs	r2, #2
 8001184:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1D); 
 8001186:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <ILI9341_paradriver_Init+0x508>)
 8001188:	2204      	movs	r2, #4
 800118a:	619a      	str	r2, [r3, #24]
 800118c:	e004      	b.n	8001198 <ILI9341_paradriver_Init+0x50c>
 800118e:	bf00      	nop
 8001190:	48000400 	.word	0x48000400
 8001194:	48000800 	.word	0x48000800
 8001198:	4b99      	ldr	r3, [pc, #612]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800119a:	2202      	movs	r2, #2
 800119c:	629a      	str	r2, [r3, #40]	@ 0x28
 800119e:	4b99      	ldr	r3, [pc, #612]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 80011a0:	221d      	movs	r2, #29
 80011a2:	615a      	str	r2, [r3, #20]
 80011a4:	4b96      	ldr	r3, [pc, #600]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011a6:	2208      	movs	r2, #8
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80011aa:	4b95      	ldr	r3, [pc, #596]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011ac:	2208      	movs	r2, #8
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	4b93      	ldr	r3, [pc, #588]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1A); 
 80011b6:	4b92      	ldr	r3, [pc, #584]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011b8:	2204      	movs	r2, #4
 80011ba:	619a      	str	r2, [r3, #24]
 80011bc:	4b90      	ldr	r3, [pc, #576]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011be:	2202      	movs	r2, #2
 80011c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80011c2:	4b90      	ldr	r3, [pc, #576]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 80011c4:	221a      	movs	r2, #26
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	4b8d      	ldr	r3, [pc, #564]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011ca:	2208      	movs	r2, #8
 80011cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80011ce:	4b8c      	ldr	r3, [pc, #560]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011d0:	2208      	movs	r2, #8
 80011d2:	619a      	str	r2, [r3, #24]
 80011d4:	4b8a      	ldr	r3, [pc, #552]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0A); 
 80011da:	4b89      	ldr	r3, [pc, #548]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011dc:	2204      	movs	r2, #4
 80011de:	619a      	str	r2, [r3, #24]
 80011e0:	4b87      	ldr	r3, [pc, #540]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80011e6:	4b87      	ldr	r3, [pc, #540]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 80011e8:	220a      	movs	r2, #10
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	4b84      	ldr	r3, [pc, #528]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011ee:	2208      	movs	r2, #8
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80011f2:	4b83      	ldr	r3, [pc, #524]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011f4:	2208      	movs	r2, #8
 80011f6:	619a      	str	r2, [r3, #24]
 80011f8:	4b81      	ldr	r3, [pc, #516]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0D); 
 80011fe:	4b80      	ldr	r3, [pc, #512]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001200:	2204      	movs	r2, #4
 8001202:	619a      	str	r2, [r3, #24]
 8001204:	4b7e      	ldr	r3, [pc, #504]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001206:	2202      	movs	r2, #2
 8001208:	629a      	str	r2, [r3, #40]	@ 0x28
 800120a:	4b7e      	ldr	r3, [pc, #504]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 800120c:	220d      	movs	r2, #13
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	4b7b      	ldr	r3, [pc, #492]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001212:	2208      	movs	r2, #8
 8001214:	629a      	str	r2, [r3, #40]	@ 0x28
 8001216:	4b7a      	ldr	r3, [pc, #488]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001218:	2208      	movs	r2, #8
 800121a:	619a      	str	r2, [r3, #24]
 800121c:	4b78      	ldr	r3, [pc, #480]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800121e:	2202      	movs	r2, #2
 8001220:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8001222:	4b77      	ldr	r3, [pc, #476]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001224:	2204      	movs	r2, #4
 8001226:	619a      	str	r2, [r3, #24]
 8001228:	4b75      	ldr	r3, [pc, #468]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800122a:	2202      	movs	r2, #2
 800122c:	629a      	str	r2, [r3, #40]	@ 0x28
 800122e:	4b75      	ldr	r3, [pc, #468]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 8001230:	2207      	movs	r2, #7
 8001232:	615a      	str	r2, [r3, #20]
 8001234:	4b72      	ldr	r3, [pc, #456]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001236:	2208      	movs	r2, #8
 8001238:	629a      	str	r2, [r3, #40]	@ 0x28
 800123a:	4b71      	ldr	r3, [pc, #452]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800123c:	2208      	movs	r2, #8
 800123e:	619a      	str	r2, [r3, #24]
 8001240:	4b6f      	ldr	r3, [pc, #444]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001242:	2202      	movs	r2, #2
 8001244:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x49); 
 8001246:	4b6e      	ldr	r3, [pc, #440]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001248:	2204      	movs	r2, #4
 800124a:	619a      	str	r2, [r3, #24]
 800124c:	4b6c      	ldr	r3, [pc, #432]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800124e:	2202      	movs	r2, #2
 8001250:	629a      	str	r2, [r3, #40]	@ 0x28
 8001252:	4b6c      	ldr	r3, [pc, #432]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 8001254:	2249      	movs	r2, #73	@ 0x49
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	4b69      	ldr	r3, [pc, #420]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800125a:	2208      	movs	r2, #8
 800125c:	629a      	str	r2, [r3, #40]	@ 0x28
 800125e:	4b68      	ldr	r3, [pc, #416]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001260:	2208      	movs	r2, #8
 8001262:	619a      	str	r2, [r3, #24]
 8001264:	4b66      	ldr	r3, [pc, #408]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001266:	2202      	movs	r2, #2
 8001268:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X66); 
 800126a:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800126c:	2204      	movs	r2, #4
 800126e:	619a      	str	r2, [r3, #24]
 8001270:	4b63      	ldr	r3, [pc, #396]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001272:	2202      	movs	r2, #2
 8001274:	629a      	str	r2, [r3, #40]	@ 0x28
 8001276:	4b63      	ldr	r3, [pc, #396]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 8001278:	2266      	movs	r2, #102	@ 0x66
 800127a:	615a      	str	r2, [r3, #20]
 800127c:	4b60      	ldr	r3, [pc, #384]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800127e:	2208      	movs	r2, #8
 8001280:	629a      	str	r2, [r3, #40]	@ 0x28
 8001282:	4b5f      	ldr	r3, [pc, #380]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001284:	2208      	movs	r2, #8
 8001286:	619a      	str	r2, [r3, #24]
 8001288:	4b5d      	ldr	r3, [pc, #372]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800128a:	2202      	movs	r2, #2
 800128c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x3B); 
 800128e:	4b5c      	ldr	r3, [pc, #368]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001290:	2204      	movs	r2, #4
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	4b5a      	ldr	r3, [pc, #360]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001296:	2202      	movs	r2, #2
 8001298:	629a      	str	r2, [r3, #40]	@ 0x28
 800129a:	4b5a      	ldr	r3, [pc, #360]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 800129c:	223b      	movs	r2, #59	@ 0x3b
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	4b57      	ldr	r3, [pc, #348]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012a2:	2208      	movs	r2, #8
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80012a6:	4b56      	ldr	r3, [pc, #344]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012a8:	2208      	movs	r2, #8
 80012aa:	619a      	str	r2, [r3, #24]
 80012ac:	4b54      	ldr	r3, [pc, #336]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 80012b2:	4b53      	ldr	r3, [pc, #332]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012b4:	2204      	movs	r2, #4
 80012b6:	619a      	str	r2, [r3, #24]
 80012b8:	4b51      	ldr	r3, [pc, #324]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80012be:	4b51      	ldr	r3, [pc, #324]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	615a      	str	r2, [r3, #20]
 80012c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012c6:	2208      	movs	r2, #8
 80012c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80012ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012cc:	2208      	movs	r2, #8
 80012ce:	619a      	str	r2, [r3, #24]
 80012d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x11); 
 80012d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012d8:	2204      	movs	r2, #4
 80012da:	619a      	str	r2, [r3, #24]
 80012dc:	4b48      	ldr	r3, [pc, #288]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012de:	2202      	movs	r2, #2
 80012e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80012e2:	4b48      	ldr	r3, [pc, #288]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 80012e4:	2211      	movs	r2, #17
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	4b45      	ldr	r3, [pc, #276]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012ea:	2208      	movs	r2, #8
 80012ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80012ee:	4b44      	ldr	r3, [pc, #272]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012f0:	2208      	movs	r2, #8
 80012f2:	619a      	str	r2, [r3, #24]
 80012f4:	4b42      	ldr	r3, [pc, #264]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012f6:	2202      	movs	r2, #2
 80012f8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x01); 
 80012fa:	4b41      	ldr	r3, [pc, #260]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80012fc:	2204      	movs	r2, #4
 80012fe:	619a      	str	r2, [r3, #24]
 8001300:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001302:	2202      	movs	r2, #2
 8001304:	629a      	str	r2, [r3, #40]	@ 0x28
 8001306:	4b3f      	ldr	r3, [pc, #252]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 8001308:	2201      	movs	r2, #1
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800130e:	2208      	movs	r2, #8
 8001310:	629a      	str	r2, [r3, #40]	@ 0x28
 8001312:	4b3b      	ldr	r3, [pc, #236]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001314:	2208      	movs	r2, #8
 8001316:	619a      	str	r2, [r3, #24]
 8001318:	4b39      	ldr	r3, [pc, #228]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800131a:	2202      	movs	r2, #2
 800131c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x09); 
 800131e:	4b38      	ldr	r3, [pc, #224]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001320:	2204      	movs	r2, #4
 8001322:	619a      	str	r2, [r3, #24]
 8001324:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001326:	2202      	movs	r2, #2
 8001328:	629a      	str	r2, [r3, #40]	@ 0x28
 800132a:	4b36      	ldr	r3, [pc, #216]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 800132c:	2209      	movs	r2, #9
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001332:	2208      	movs	r2, #8
 8001334:	629a      	str	r2, [r3, #40]	@ 0x28
 8001336:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001338:	2208      	movs	r2, #8
 800133a:	619a      	str	r2, [r3, #24]
 800133c:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800133e:	2202      	movs	r2, #2
 8001340:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x05); 
 8001342:	4b2f      	ldr	r3, [pc, #188]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001344:	2204      	movs	r2, #4
 8001346:	619a      	str	r2, [r3, #24]
 8001348:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800134a:	2202      	movs	r2, #2
 800134c:	629a      	str	r2, [r3, #40]	@ 0x28
 800134e:	4b2d      	ldr	r3, [pc, #180]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 8001350:	2205      	movs	r2, #5
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	4b2a      	ldr	r3, [pc, #168]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001356:	2208      	movs	r2, #8
 8001358:	629a      	str	r2, [r3, #40]	@ 0x28
 800135a:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800135c:	2208      	movs	r2, #8
 800135e:	619a      	str	r2, [r3, #24]
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001362:	2202      	movs	r2, #2
 8001364:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x04); 		 
 8001366:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001368:	2204      	movs	r2, #4
 800136a:	619a      	str	r2, [r3, #24]
 800136c:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800136e:	2202      	movs	r2, #2
 8001370:	629a      	str	r2, [r3, #40]	@ 0x28
 8001372:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 8001374:	2204      	movs	r2, #4
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 800137a:	2208      	movs	r2, #8
 800137c:	629a      	str	r2, [r3, #40]	@ 0x28
 800137e:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001380:	2208      	movs	r2, #8
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001386:	2202      	movs	r2, #2
 8001388:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0XE1);    //Set Gamma 
 800138a:	20e1      	movs	r0, #225	@ 0xe1
 800138c:	f7ff fbce 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001392:	2204      	movs	r2, #4
 8001394:	619a      	str	r2, [r3, #24]
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 8001398:	2202      	movs	r2, #2
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013a4:	2208      	movs	r2, #8
 80013a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80013a8:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013aa:	2208      	movs	r2, #8
 80013ac:	619a      	str	r2, [r3, #24]
 80013ae:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013b0:	2202      	movs	r2, #2
 80013b2:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x18); 
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	619a      	str	r2, [r3, #24]
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013bc:	2202      	movs	r2, #2
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28
 80013c0:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 80013c2:	2218      	movs	r2, #24
 80013c4:	615a      	str	r2, [r3, #20]
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013c8:	2208      	movs	r2, #8
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013ce:	2208      	movs	r2, #8
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1D); 
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013da:	2204      	movs	r2, #4
 80013dc:	619a      	str	r2, [r3, #24]
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013e0:	2202      	movs	r2, #2
 80013e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80013e4:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <ILI9341_paradriver_Init+0x778>)
 80013e6:	221d      	movs	r2, #29
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013ec:	2208      	movs	r2, #8
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80013f0:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013f2:	2208      	movs	r2, #8
 80013f4:	619a      	str	r2, [r3, #24]
 80013f6:	4b02      	ldr	r3, [pc, #8]	@ (8001400 <ILI9341_paradriver_Init+0x774>)
 80013f8:	2202      	movs	r2, #2
 80013fa:	619a      	str	r2, [r3, #24]
 80013fc:	e004      	b.n	8001408 <ILI9341_paradriver_Init+0x77c>
 80013fe:	bf00      	nop
 8001400:	48000800 	.word	0x48000800
 8001404:	48000400 	.word	0x48000400
	LCD_WR_DATA(0x02); 
 8001408:	4b99      	ldr	r3, [pc, #612]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800140a:	2204      	movs	r2, #4
 800140c:	619a      	str	r2, [r3, #24]
 800140e:	4b98      	ldr	r3, [pc, #608]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001410:	2202      	movs	r2, #2
 8001412:	629a      	str	r2, [r3, #40]	@ 0x28
 8001414:	4b97      	ldr	r3, [pc, #604]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 8001416:	2202      	movs	r2, #2
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	4b95      	ldr	r3, [pc, #596]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800141c:	2208      	movs	r2, #8
 800141e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001420:	4b93      	ldr	r3, [pc, #588]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001422:	2208      	movs	r2, #8
 8001424:	619a      	str	r2, [r3, #24]
 8001426:	4b92      	ldr	r3, [pc, #584]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001428:	2202      	movs	r2, #2
 800142a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0F); 
 800142c:	4b90      	ldr	r3, [pc, #576]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800142e:	2204      	movs	r2, #4
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	4b8f      	ldr	r3, [pc, #572]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001434:	2202      	movs	r2, #2
 8001436:	629a      	str	r2, [r3, #40]	@ 0x28
 8001438:	4b8e      	ldr	r3, [pc, #568]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 800143a:	220f      	movs	r2, #15
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	4b8c      	ldr	r3, [pc, #560]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001440:	2208      	movs	r2, #8
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
 8001444:	4b8a      	ldr	r3, [pc, #552]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001446:	2208      	movs	r2, #8
 8001448:	619a      	str	r2, [r3, #24]
 800144a:	4b89      	ldr	r3, [pc, #548]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800144c:	2202      	movs	r2, #2
 800144e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x04); 
 8001450:	4b87      	ldr	r3, [pc, #540]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001452:	2204      	movs	r2, #4
 8001454:	619a      	str	r2, [r3, #24]
 8001456:	4b86      	ldr	r3, [pc, #536]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001458:	2202      	movs	r2, #2
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
 800145c:	4b85      	ldr	r3, [pc, #532]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 800145e:	2204      	movs	r2, #4
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	4b83      	ldr	r3, [pc, #524]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001464:	2208      	movs	r2, #8
 8001466:	629a      	str	r2, [r3, #40]	@ 0x28
 8001468:	4b81      	ldr	r3, [pc, #516]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800146a:	2208      	movs	r2, #8
 800146c:	619a      	str	r2, [r3, #24]
 800146e:	4b80      	ldr	r3, [pc, #512]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001470:	2202      	movs	r2, #2
 8001472:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x36); 
 8001474:	4b7e      	ldr	r3, [pc, #504]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001476:	2204      	movs	r2, #4
 8001478:	619a      	str	r2, [r3, #24]
 800147a:	4b7d      	ldr	r3, [pc, #500]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800147c:	2202      	movs	r2, #2
 800147e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001480:	4b7c      	ldr	r3, [pc, #496]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 8001482:	2236      	movs	r2, #54	@ 0x36
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	4b7a      	ldr	r3, [pc, #488]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001488:	2208      	movs	r2, #8
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
 800148c:	4b78      	ldr	r3, [pc, #480]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800148e:	2208      	movs	r2, #8
 8001490:	619a      	str	r2, [r3, #24]
 8001492:	4b77      	ldr	r3, [pc, #476]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001494:	2202      	movs	r2, #2
 8001496:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x13); 
 8001498:	4b75      	ldr	r3, [pc, #468]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800149a:	2204      	movs	r2, #4
 800149c:	619a      	str	r2, [r3, #24]
 800149e:	4b74      	ldr	r3, [pc, #464]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014a0:	2202      	movs	r2, #2
 80014a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80014a4:	4b73      	ldr	r3, [pc, #460]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 80014a6:	2213      	movs	r2, #19
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	4b71      	ldr	r3, [pc, #452]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014ac:	2208      	movs	r2, #8
 80014ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80014b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014b2:	2208      	movs	r2, #8
 80014b4:	619a      	str	r2, [r3, #24]
 80014b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014b8:	2202      	movs	r2, #2
 80014ba:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x4C); 
 80014bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014be:	2204      	movs	r2, #4
 80014c0:	619a      	str	r2, [r3, #24]
 80014c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014c4:	2202      	movs	r2, #2
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80014c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 80014ca:	224c      	movs	r2, #76	@ 0x4c
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	4b68      	ldr	r3, [pc, #416]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014d0:	2208      	movs	r2, #8
 80014d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80014d4:	4b66      	ldr	r3, [pc, #408]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014d6:	2208      	movs	r2, #8
 80014d8:	619a      	str	r2, [r3, #24]
 80014da:	4b65      	ldr	r3, [pc, #404]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014dc:	2202      	movs	r2, #2
 80014de:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 80014e0:	4b63      	ldr	r3, [pc, #396]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014e2:	2204      	movs	r2, #4
 80014e4:	619a      	str	r2, [r3, #24]
 80014e6:	4b62      	ldr	r3, [pc, #392]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014e8:	2202      	movs	r2, #2
 80014ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80014ec:	4b61      	ldr	r3, [pc, #388]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 80014ee:	2207      	movs	r2, #7
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014f4:	2208      	movs	r2, #8
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80014f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80014fa:	2208      	movs	r2, #8
 80014fc:	619a      	str	r2, [r3, #24]
 80014fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001500:	2202      	movs	r2, #2
 8001502:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x13); 
 8001504:	4b5a      	ldr	r3, [pc, #360]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001506:	2204      	movs	r2, #4
 8001508:	619a      	str	r2, [r3, #24]
 800150a:	4b59      	ldr	r3, [pc, #356]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800150c:	2202      	movs	r2, #2
 800150e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001510:	4b58      	ldr	r3, [pc, #352]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 8001512:	2213      	movs	r2, #19
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	4b56      	ldr	r3, [pc, #344]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001518:	2208      	movs	r2, #8
 800151a:	629a      	str	r2, [r3, #40]	@ 0x28
 800151c:	4b54      	ldr	r3, [pc, #336]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800151e:	2208      	movs	r2, #8
 8001520:	619a      	str	r2, [r3, #24]
 8001522:	4b53      	ldr	r3, [pc, #332]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001524:	2202      	movs	r2, #2
 8001526:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0F); 
 8001528:	4b51      	ldr	r3, [pc, #324]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800152a:	2204      	movs	r2, #4
 800152c:	619a      	str	r2, [r3, #24]
 800152e:	4b50      	ldr	r3, [pc, #320]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001530:	2202      	movs	r2, #2
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
 8001534:	4b4f      	ldr	r3, [pc, #316]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 8001536:	220f      	movs	r2, #15
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	4b4d      	ldr	r3, [pc, #308]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800153c:	2208      	movs	r2, #8
 800153e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001540:	4b4b      	ldr	r3, [pc, #300]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001542:	2208      	movs	r2, #8
 8001544:	619a      	str	r2, [r3, #24]
 8001546:	4b4a      	ldr	r3, [pc, #296]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001548:	2202      	movs	r2, #2
 800154a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2E); 
 800154c:	4b48      	ldr	r3, [pc, #288]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800154e:	2204      	movs	r2, #4
 8001550:	619a      	str	r2, [r3, #24]
 8001552:	4b47      	ldr	r3, [pc, #284]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001554:	2202      	movs	r2, #2
 8001556:	629a      	str	r2, [r3, #40]	@ 0x28
 8001558:	4b46      	ldr	r3, [pc, #280]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 800155a:	222e      	movs	r2, #46	@ 0x2e
 800155c:	615a      	str	r2, [r3, #20]
 800155e:	4b44      	ldr	r3, [pc, #272]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001560:	2208      	movs	r2, #8
 8001562:	629a      	str	r2, [r3, #40]	@ 0x28
 8001564:	4b42      	ldr	r3, [pc, #264]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001566:	2208      	movs	r2, #8
 8001568:	619a      	str	r2, [r3, #24]
 800156a:	4b41      	ldr	r3, [pc, #260]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800156c:	2202      	movs	r2, #2
 800156e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2F); 
 8001570:	4b3f      	ldr	r3, [pc, #252]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001572:	2204      	movs	r2, #4
 8001574:	619a      	str	r2, [r3, #24]
 8001576:	4b3e      	ldr	r3, [pc, #248]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001578:	2202      	movs	r2, #2
 800157a:	629a      	str	r2, [r3, #40]	@ 0x28
 800157c:	4b3d      	ldr	r3, [pc, #244]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 800157e:	222f      	movs	r2, #47	@ 0x2f
 8001580:	615a      	str	r2, [r3, #20]
 8001582:	4b3b      	ldr	r3, [pc, #236]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001584:	2208      	movs	r2, #8
 8001586:	629a      	str	r2, [r3, #40]	@ 0x28
 8001588:	4b39      	ldr	r3, [pc, #228]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800158a:	2208      	movs	r2, #8
 800158c:	619a      	str	r2, [r3, #24]
 800158e:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001590:	2202      	movs	r2, #2
 8001592:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x05); 
 8001594:	4b36      	ldr	r3, [pc, #216]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001596:	2204      	movs	r2, #4
 8001598:	619a      	str	r2, [r3, #24]
 800159a:	4b35      	ldr	r3, [pc, #212]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800159c:	2202      	movs	r2, #2
 800159e:	629a      	str	r2, [r3, #40]	@ 0x28
 80015a0:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 80015a2:	2205      	movs	r2, #5
 80015a4:	615a      	str	r2, [r3, #20]
 80015a6:	4b32      	ldr	r3, [pc, #200]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015a8:	2208      	movs	r2, #8
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ac:	4b30      	ldr	r3, [pc, #192]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015ae:	2208      	movs	r2, #8
 80015b0:	619a      	str	r2, [r3, #24]
 80015b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x2B); 
 80015b8:	202b      	movs	r0, #43	@ 0x2b
 80015ba:	f7ff fab7 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015be:	4b2c      	ldr	r3, [pc, #176]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015c0:	2204      	movs	r2, #4
 80015c2:	619a      	str	r2, [r3, #24]
 80015c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	4b27      	ldr	r3, [pc, #156]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015d2:	2208      	movs	r2, #8
 80015d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80015d6:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015d8:	2208      	movs	r2, #8
 80015da:	619a      	str	r2, [r3, #24]
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015de:	2202      	movs	r2, #2
 80015e0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 80015e2:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015e4:	2204      	movs	r2, #4
 80015e6:	619a      	str	r2, [r3, #24]
 80015e8:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015ea:	2202      	movs	r2, #2
 80015ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ee:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015f6:	2208      	movs	r2, #8
 80015f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80015fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 80015fc:	2208      	movs	r2, #8
 80015fe:	619a      	str	r2, [r3, #24]
 8001600:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001602:	2202      	movs	r2, #2
 8001604:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x01);
 8001606:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001608:	2204      	movs	r2, #4
 800160a:	619a      	str	r2, [r3, #24]
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800160e:	2202      	movs	r2, #2
 8001610:	629a      	str	r2, [r3, #40]	@ 0x28
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 8001614:	2201      	movs	r2, #1
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800161a:	2208      	movs	r2, #8
 800161c:	629a      	str	r2, [r3, #40]	@ 0x28
 800161e:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001620:	2208      	movs	r2, #8
 8001622:	619a      	str	r2, [r3, #24]
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001626:	2202      	movs	r2, #2
 8001628:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x3f);
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800162c:	2204      	movs	r2, #4
 800162e:	619a      	str	r2, [r3, #24]
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001632:	2202      	movs	r2, #2
 8001634:	629a      	str	r2, [r3, #40]	@ 0x28
 8001636:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 8001638:	223f      	movs	r2, #63	@ 0x3f
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800163e:	2208      	movs	r2, #8
 8001640:	629a      	str	r2, [r3, #40]	@ 0x28
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001644:	2208      	movs	r2, #8
 8001646:	619a      	str	r2, [r3, #24]
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800164a:	2202      	movs	r2, #2
 800164c:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x2A); 
 800164e:	202a      	movs	r0, #42	@ 0x2a
 8001650:	f7ff fa6c 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001656:	2204      	movs	r2, #4
 8001658:	619a      	str	r2, [r3, #24]
 800165a:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 800165c:	2202      	movs	r2, #2
 800165e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <ILI9341_paradriver_Init+0x9e8>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
 8001666:	4b02      	ldr	r3, [pc, #8]	@ (8001670 <ILI9341_paradriver_Init+0x9e4>)
 8001668:	2208      	movs	r2, #8
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
 800166c:	e004      	b.n	8001678 <ILI9341_paradriver_Init+0x9ec>
 800166e:	bf00      	nop
 8001670:	48000800 	.word	0x48000800
 8001674:	48000400 	.word	0x48000400
 8001678:	4b26      	ldr	r3, [pc, #152]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 800167a:	2208      	movs	r2, #8
 800167c:	619a      	str	r2, [r3, #24]
 800167e:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 8001680:	2202      	movs	r2, #2
 8001682:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8001684:	4b23      	ldr	r3, [pc, #140]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 8001686:	2204      	movs	r2, #4
 8001688:	619a      	str	r2, [r3, #24]
 800168a:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 800168c:	2202      	movs	r2, #2
 800168e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001690:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <ILI9341_paradriver_Init+0xa8c>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 8001698:	2208      	movs	r2, #8
 800169a:	629a      	str	r2, [r3, #40]	@ 0x28
 800169c:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 800169e:	2208      	movs	r2, #8
 80016a0:	619a      	str	r2, [r3, #24]
 80016a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 80016a4:	2202      	movs	r2, #2
 80016a6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 80016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 80016aa:	2204      	movs	r2, #4
 80016ac:	619a      	str	r2, [r3, #24]
 80016ae:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 80016b0:	2202      	movs	r2, #2
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80016b4:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <ILI9341_paradriver_Init+0xa8c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
 80016ba:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 80016bc:	2208      	movs	r2, #8
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 80016c2:	2208      	movs	r2, #8
 80016c4:	619a      	str	r2, [r3, #24]
 80016c6:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 80016c8:	2202      	movs	r2, #2
 80016ca:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xef);	 
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 80016ce:	2204      	movs	r2, #4
 80016d0:	619a      	str	r2, [r3, #24]
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 80016d4:	2202      	movs	r2, #2
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <ILI9341_paradriver_Init+0xa8c>)
 80016da:	22ef      	movs	r2, #239	@ 0xef
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 80016e0:	2208      	movs	r2, #8
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 80016e6:	2208      	movs	r2, #8
 80016e8:	619a      	str	r2, [r3, #24]
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <ILI9341_paradriver_Init+0xa88>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x11); //Exit Sleep
 80016f0:	2011      	movs	r0, #17
 80016f2:	f7ff fa1b 	bl	8000b2c <LCD_WR_REG>
	delay_ms(120);
 80016f6:	2078      	movs	r0, #120	@ 0x78
 80016f8:	f001 fcd0 	bl	800309c <delay_ms>
	LCD_WR_REG(0x29); //display on		
 80016fc:	2029      	movs	r0, #41	@ 0x29
 80016fe:	f7ff fa15 	bl	8000b2c <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 8001702:	2001      	movs	r0, #1
 8001704:	f000 f8de 	bl	80018c4 <LCD_direction>
//	LCD_LED=1;//��������	 
	LCD_Clear(WHITE);//��ȫ����ɫ
 8001708:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800170c:	f7ff fa7e 	bl	8000c0c <LCD_Clear>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	48000800 	.word	0x48000800
 8001718:	48000400 	.word	0x48000400

0800171c <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4604      	mov	r4, r0
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4623      	mov	r3, r4
 800172c:	80fb      	strh	r3, [r7, #6]
 800172e:	4603      	mov	r3, r0
 8001730:	80bb      	strh	r3, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	807b      	strh	r3, [r7, #2]
 8001736:	4613      	mov	r3, r2
 8001738:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 800173a:	4b56      	ldr	r3, [pc, #344]	@ (8001894 <LCD_SetWindows+0x178>)
 800173c:	899b      	ldrh	r3, [r3, #12]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f9f4 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8001744:	4b54      	ldr	r3, [pc, #336]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001746:	2204      	movs	r2, #4
 8001748:	619a      	str	r2, [r3, #24]
 800174a:	4b53      	ldr	r3, [pc, #332]	@ (8001898 <LCD_SetWindows+0x17c>)
 800174c:	2202      	movs	r2, #2
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b51      	ldr	r3, [pc, #324]	@ (800189c <LCD_SetWindows+0x180>)
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	4b4f      	ldr	r3, [pc, #316]	@ (8001898 <LCD_SetWindows+0x17c>)
 800175c:	2208      	movs	r2, #8
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001760:	4b4d      	ldr	r3, [pc, #308]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001762:	2208      	movs	r2, #8
 8001764:	619a      	str	r2, [r3, #24]
 8001766:	4b4c      	ldr	r3, [pc, #304]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001768:	2202      	movs	r2, #2
 800176a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&xStar);		
 800176c:	4b4a      	ldr	r3, [pc, #296]	@ (8001898 <LCD_SetWindows+0x17c>)
 800176e:	2204      	movs	r2, #4
 8001770:	619a      	str	r2, [r3, #24]
 8001772:	4b49      	ldr	r3, [pc, #292]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001774:	2202      	movs	r2, #2
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	4a48      	ldr	r2, [pc, #288]	@ (800189c <LCD_SetWindows+0x180>)
 800177c:	b2db      	uxtb	r3, r3
 800177e:	6153      	str	r3, [r2, #20]
 8001780:	4b45      	ldr	r3, [pc, #276]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001782:	2208      	movs	r2, #8
 8001784:	629a      	str	r2, [r3, #40]	@ 0x28
 8001786:	4b44      	ldr	r3, [pc, #272]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001788:	2208      	movs	r2, #8
 800178a:	619a      	str	r2, [r3, #24]
 800178c:	4b42      	ldr	r3, [pc, #264]	@ (8001898 <LCD_SetWindows+0x17c>)
 800178e:	2202      	movs	r2, #2
 8001790:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(xEnd>>8);
 8001792:	4b41      	ldr	r3, [pc, #260]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001794:	2204      	movs	r2, #4
 8001796:	619a      	str	r2, [r3, #24]
 8001798:	4b3f      	ldr	r3, [pc, #252]	@ (8001898 <LCD_SetWindows+0x17c>)
 800179a:	2202      	movs	r2, #2
 800179c:	629a      	str	r2, [r3, #40]	@ 0x28
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b3d      	ldr	r3, [pc, #244]	@ (800189c <LCD_SetWindows+0x180>)
 80017a6:	615a      	str	r2, [r3, #20]
 80017a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <LCD_SetWindows+0x17c>)
 80017aa:	2208      	movs	r2, #8
 80017ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80017ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001898 <LCD_SetWindows+0x17c>)
 80017b0:	2208      	movs	r2, #8
 80017b2:	619a      	str	r2, [r3, #24]
 80017b4:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <LCD_SetWindows+0x17c>)
 80017b6:	2202      	movs	r2, #2
 80017b8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&xEnd);
 80017ba:	4b37      	ldr	r3, [pc, #220]	@ (8001898 <LCD_SetWindows+0x17c>)
 80017bc:	2204      	movs	r2, #4
 80017be:	619a      	str	r2, [r3, #24]
 80017c0:	4b35      	ldr	r3, [pc, #212]	@ (8001898 <LCD_SetWindows+0x17c>)
 80017c2:	2202      	movs	r2, #2
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	4a34      	ldr	r2, [pc, #208]	@ (800189c <LCD_SetWindows+0x180>)
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	6153      	str	r3, [r2, #20]
 80017ce:	4b32      	ldr	r3, [pc, #200]	@ (8001898 <LCD_SetWindows+0x17c>)
 80017d0:	2208      	movs	r2, #8
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <LCD_SetWindows+0x17c>)
 80017d6:	2208      	movs	r2, #8
 80017d8:	619a      	str	r2, [r3, #24]
 80017da:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <LCD_SetWindows+0x17c>)
 80017dc:	2202      	movs	r2, #2
 80017de:	619a      	str	r2, [r3, #24]

	LCD_WR_REG(lcddev.setycmd);	
 80017e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001894 <LCD_SetWindows+0x178>)
 80017e2:	89db      	ldrh	r3, [r3, #14]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff f9a1 	bl	8000b2c <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 80017ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001898 <LCD_SetWindows+0x17c>)
 80017ec:	2204      	movs	r2, #4
 80017ee:	619a      	str	r2, [r3, #24]
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <LCD_SetWindows+0x17c>)
 80017f2:	2202      	movs	r2, #2
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80017f6:	88bb      	ldrh	r3, [r7, #4]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b27      	ldr	r3, [pc, #156]	@ (800189c <LCD_SetWindows+0x180>)
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001802:	2208      	movs	r2, #8
 8001804:	629a      	str	r2, [r3, #40]	@ 0x28
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001808:	2208      	movs	r2, #8
 800180a:	619a      	str	r2, [r3, #24]
 800180c:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <LCD_SetWindows+0x17c>)
 800180e:	2202      	movs	r2, #2
 8001810:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&yStar);		
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001814:	2204      	movs	r2, #4
 8001816:	619a      	str	r2, [r3, #24]
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <LCD_SetWindows+0x17c>)
 800181a:	2202      	movs	r2, #2
 800181c:	629a      	str	r2, [r3, #40]	@ 0x28
 800181e:	88bb      	ldrh	r3, [r7, #4]
 8001820:	4a1e      	ldr	r2, [pc, #120]	@ (800189c <LCD_SetWindows+0x180>)
 8001822:	b2db      	uxtb	r3, r3
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001828:	2208      	movs	r2, #8
 800182a:	629a      	str	r2, [r3, #40]	@ 0x28
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <LCD_SetWindows+0x17c>)
 800182e:	2208      	movs	r2, #8
 8001830:	619a      	str	r2, [r3, #24]
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001834:	2202      	movs	r2, #2
 8001836:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(yEnd>>8);
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <LCD_SetWindows+0x17c>)
 800183a:	2204      	movs	r2, #4
 800183c:	619a      	str	r2, [r3, #24]
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001840:	2202      	movs	r2, #2
 8001842:	629a      	str	r2, [r3, #40]	@ 0x28
 8001844:	883b      	ldrh	r3, [r7, #0]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b14      	ldr	r3, [pc, #80]	@ (800189c <LCD_SetWindows+0x180>)
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001850:	2208      	movs	r2, #8
 8001852:	629a      	str	r2, [r3, #40]	@ 0x28
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001856:	2208      	movs	r2, #8
 8001858:	619a      	str	r2, [r3, #24]
 800185a:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <LCD_SetWindows+0x17c>)
 800185c:	2202      	movs	r2, #2
 800185e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&yEnd);
 8001860:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001862:	2204      	movs	r2, #4
 8001864:	619a      	str	r2, [r3, #24]
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001868:	2202      	movs	r2, #2
 800186a:	629a      	str	r2, [r3, #40]	@ 0x28
 800186c:	883b      	ldrh	r3, [r7, #0]
 800186e:	4a0b      	ldr	r2, [pc, #44]	@ (800189c <LCD_SetWindows+0x180>)
 8001870:	b2db      	uxtb	r3, r3
 8001872:	6153      	str	r3, [r2, #20]
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001876:	2208      	movs	r2, #8
 8001878:	629a      	str	r2, [r3, #40]	@ 0x28
 800187a:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <LCD_SetWindows+0x17c>)
 800187c:	2208      	movs	r2, #8
 800187e:	619a      	str	r2, [r3, #24]
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <LCD_SetWindows+0x17c>)
 8001882:	2202      	movs	r2, #2
 8001884:	619a      	str	r2, [r3, #24]

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 8001886:	f7ff f989 	bl	8000b9c <LCD_WriteRAM_Prepare>
}   
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}
 8001892:	bf00      	nop
 8001894:	200000bc 	.word	0x200000bc
 8001898:	48000800 	.word	0x48000800
 800189c:	48000400 	.word	0x48000400

080018a0 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	460a      	mov	r2, r1
 80018aa:	80fb      	strh	r3, [r7, #6]
 80018ac:	4613      	mov	r3, r2
 80018ae:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 80018b0:	88bb      	ldrh	r3, [r7, #4]
 80018b2:	88fa      	ldrh	r2, [r7, #6]
 80018b4:	88b9      	ldrh	r1, [r7, #4]
 80018b6:	88f8      	ldrh	r0, [r7, #6]
 80018b8:	f7ff ff30 	bl	800171c <LCD_SetWindows>
} 
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 80018ce:	4b28      	ldr	r3, [pc, #160]	@ (8001970 <LCD_direction+0xac>)
 80018d0:	222a      	movs	r2, #42	@ 0x2a
 80018d2:	819a      	strh	r2, [r3, #12]
			lcddev.setycmd=0x2B;
 80018d4:	4b26      	ldr	r3, [pc, #152]	@ (8001970 <LCD_direction+0xac>)
 80018d6:	222b      	movs	r2, #43	@ 0x2b
 80018d8:	81da      	strh	r2, [r3, #14]
			lcddev.wramcmd=0x2C;
 80018da:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <LCD_direction+0xac>)
 80018dc:	222c      	movs	r2, #44	@ 0x2c
 80018de:	811a      	strh	r2, [r3, #8]
			lcddev.rramcmd=0x2E;
 80018e0:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <LCD_direction+0xac>)
 80018e2:	222e      	movs	r2, #46	@ 0x2e
 80018e4:	815a      	strh	r2, [r3, #10]
	switch(direction){		  
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d83b      	bhi.n	8001964 <LCD_direction+0xa0>
 80018ec:	a201      	add	r2, pc, #4	@ (adr r2, 80018f4 <LCD_direction+0x30>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001905 	.word	0x08001905
 80018f8:	0800191d 	.word	0x0800191d
 80018fc:	08001935 	.word	0x08001935
 8001900:	0800194d 	.word	0x0800194d
		case 0:						 	 		
			lcddev.width=LCD_W;
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <LCD_direction+0xac>)
 8001906:	22f0      	movs	r2, #240	@ 0xf0
 8001908:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <LCD_direction+0xac>)
 800190c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001910:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3));
 8001912:	2108      	movs	r1, #8
 8001914:	2036      	movs	r0, #54	@ 0x36
 8001916:	f7ff f91b 	bl	8000b50 <LCD_WriteReg>
		break;
 800191a:	e024      	b.n	8001966 <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 800191c:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <LCD_direction+0xac>)
 800191e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001922:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001924:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <LCD_direction+0xac>)
 8001926:	22f0      	movs	r2, #240	@ 0xf0
 8001928:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6));
 800192a:	2168      	movs	r1, #104	@ 0x68
 800192c:	2036      	movs	r0, #54	@ 0x36
 800192e:	f7ff f90f 	bl	8000b50 <LCD_WriteReg>
		break;
 8001932:	e018      	b.n	8001966 <LCD_direction+0xa2>
		case 2:						 	 		
			lcddev.width=LCD_W;
 8001934:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <LCD_direction+0xac>)
 8001936:	22f0      	movs	r2, #240	@ 0xf0
 8001938:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <LCD_direction+0xac>)
 800193c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001940:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<4)|(1<<6));
 8001942:	21d8      	movs	r1, #216	@ 0xd8
 8001944:	2036      	movs	r0, #54	@ 0x36
 8001946:	f7ff f903 	bl	8000b50 <LCD_WriteReg>
		break;
 800194a:	e00c      	b.n	8001966 <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <LCD_direction+0xac>)
 800194e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001952:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <LCD_direction+0xac>)
 8001956:	22f0      	movs	r2, #240	@ 0xf0
 8001958:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5)|(1<<4));
 800195a:	21b8      	movs	r1, #184	@ 0xb8
 800195c:	2036      	movs	r0, #54	@ 0x36
 800195e:	f7ff f8f7 	bl	8000b50 <LCD_WriteReg>
		break;	
 8001962:	e000      	b.n	8001966 <LCD_direction+0xa2>
		default:break;
 8001964:	bf00      	nop
	}		
}	 
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200000bc 	.word	0x200000bc

08001974 <GUI_DrawPoint>:
                y:the y coordinate of the point
								color:the color value of the point
 * @retvalue   :None
********************************************************************/
void GUI_DrawPoint(u16 x,u16 y,u16 color)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
 800197e:	460b      	mov	r3, r1
 8001980:	80bb      	strh	r3, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	807b      	strh	r3, [r7, #2]
	LCD_SetCursor(x,y);//���ù��λ��
 8001986:	88ba      	ldrh	r2, [r7, #4]
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff87 	bl	80018a0 <LCD_SetCursor>
	Lcd_WriteData_16Bit(color);
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f90d 	bl	8000bb4 <Lcd_WriteData_16Bit>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(int16_t sx,u16 sy,int16_t ex,u16 ey,u16 color)	// x must be not less than 0 for obstacle shifting
{																// changing u16 to int16_t
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4604      	mov	r4, r0
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4623      	mov	r3, r4
 80019b4:	80fb      	strh	r3, [r7, #6]
 80019b6:	4603      	mov	r3, r0
 80019b8:	80bb      	strh	r3, [r7, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	807b      	strh	r3, [r7, #2]
 80019be:	4613      	mov	r3, r2
 80019c0:	803b      	strh	r3, [r7, #0]

	if(sx<0)
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da01      	bge.n	80019ce <LCD_Fill+0x2a>
	{
		sx=0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	80fb      	strh	r3, [r7, #6]
	}

	if(ex<0)
 80019ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da01      	bge.n	80019da <LCD_Fill+0x36>
	{
		ex=0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	807b      	strh	r3, [r7, #2]
	}

	u16 i,j;
	u16 width=ex-sx+1; 		//�õ����Ŀ��
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3301      	adds	r3, #1
 80019e4:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;		//�߶�
 80019e6:	883a      	ldrh	r2, [r7, #0]
 80019e8:	88bb      	ldrh	r3, [r7, #4]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);//������ʾ����
 80019f2:	88f8      	ldrh	r0, [r7, #6]
 80019f4:	887a      	ldrh	r2, [r7, #2]
 80019f6:	883b      	ldrh	r3, [r7, #0]
 80019f8:	88b9      	ldrh	r1, [r7, #4]
 80019fa:	f7ff fe8f 	bl	800171c <LCD_SetWindows>
	for(i=0;i<height;i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	81fb      	strh	r3, [r7, #14]
 8001a02:	e010      	b.n	8001a26 <LCD_Fill+0x82>
	{
		for(j=0;j<width;j++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	81bb      	strh	r3, [r7, #12]
 8001a08:	e006      	b.n	8001a18 <LCD_Fill+0x74>
		Lcd_WriteData_16Bit(color);	//д������
 8001a0a:	8c3b      	ldrh	r3, [r7, #32]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f8d1 	bl	8000bb4 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 8001a12:	89bb      	ldrh	r3, [r7, #12]
 8001a14:	3301      	adds	r3, #1
 8001a16:	81bb      	strh	r3, [r7, #12]
 8001a18:	89ba      	ldrh	r2, [r7, #12]
 8001a1a:	897b      	ldrh	r3, [r7, #10]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d3f4      	bcc.n	8001a0a <LCD_Fill+0x66>
	for(i=0;i<height;i++)
 8001a20:	89fb      	ldrh	r3, [r7, #14]
 8001a22:	3301      	adds	r3, #1
 8001a24:	81fb      	strh	r3, [r7, #14]
 8001a26:	89fa      	ldrh	r2, [r7, #14]
 8001a28:	893b      	ldrh	r3, [r7, #8]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3ea      	bcc.n	8001a04 <LCD_Fill+0x60>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ���������Ϊȫ��
 8001a2e:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <LCD_Fill+0xac>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <LCD_Fill+0xac>)
 8001a38:	885b      	ldrh	r3, [r3, #2]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff fe6b 	bl	800171c <LCD_SetWindows>
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200000bc 	.word	0x200000bc

08001a54 <LCD_DrawLine>:
								x2:the ending x coordinate of the line
								y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b08d      	sub	sp, #52	@ 0x34
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	4611      	mov	r1, r2
 8001a60:	461a      	mov	r2, r3
 8001a62:	4623      	mov	r3, r4
 8001a64:	80fb      	strh	r3, [r7, #6]
 8001a66:	4603      	mov	r3, r0
 8001a68:	80bb      	strh	r3, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	807b      	strh	r3, [r7, #2]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	803b      	strh	r3, [r7, #0]
	u16 t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;

	delta_x=x2-x1; //������������
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001a82:	883a      	ldrh	r2, [r7, #0]
 8001a84:	88bb      	ldrh	r3, [r7, #4]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001a8e:	88bb      	ldrh	r3, [r7, #4]
 8001a90:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //���õ�������
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	dd02      	ble.n	8001a9e <LCD_DrawLine+0x4a>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e00b      	b.n	8001ab6 <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//��ֱ��
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <LCD_DrawLine+0x56>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e005      	b.n	8001ab6 <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	425b      	negs	r3, r3
 8001ab4:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dd02      	ble.n	8001ac2 <LCD_DrawLine+0x6e>
 8001abc:	2301      	movs	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	e00b      	b.n	8001ada <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//ˮƽ��
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <LCD_DrawLine+0x7a>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	e005      	b.n	8001ada <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //ѡȡ��������������
 8001ada:	6a3a      	ldr	r2, [r7, #32]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dd02      	ble.n	8001ae8 <LCD_DrawLine+0x94>
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	e001      	b.n	8001aec <LCD_DrawLine+0x98>
	else distance=delta_y;
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//�������
 8001aec:	2300      	movs	r3, #0
 8001aee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001af0:	e02a      	b.n	8001b48 <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//����
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	b292      	uxth	r2, r2
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f86b 	bl	8000bd8 <LCD_DrawPoint>
		xerr+=delta_x ;
 8001b02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	4413      	add	r3, r2
 8001b08:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y ;
 8001b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	4413      	add	r3, r2
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 8001b12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	dd07      	ble.n	8001b2a <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 8001b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	dd07      	ble.n	8001b42 <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 8001b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//�������
 8001b42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001b44:	3301      	adds	r3, #1
 8001b46:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001b48:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	ddcf      	ble.n	8001af2 <LCD_DrawLine+0x9e>
		}
	}
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	3734      	adds	r7, #52	@ 0x34
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}

08001b5c <_draw_circle_8>:
								y:the y coordinate relative to the Circular center
								c:the color value of the circle
 * @retvalue   :None
******************************************************************************/
void _draw_circle_8(int xc, int yc, int x, int y, u16 c)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
	GUI_DrawPoint(xc + x, yc + y, c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	b298      	uxth	r0, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	8b3a      	ldrh	r2, [r7, #24]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff fef5 	bl	8001974 <GUI_DrawPoint>

	GUI_DrawPoint(xc - x, yc + y, c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	b298      	uxth	r0, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	8b3a      	ldrh	r2, [r7, #24]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7ff fee5 	bl	8001974 <GUI_DrawPoint>

	GUI_DrawPoint(xc + x, yc - y, c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b298      	uxth	r0, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	8b3a      	ldrh	r2, [r7, #24]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7ff fed5 	bl	8001974 <GUI_DrawPoint>

	GUI_DrawPoint(xc - x, yc - y, c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	b298      	uxth	r0, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	8b3a      	ldrh	r2, [r7, #24]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff fec5 	bl	8001974 <GUI_DrawPoint>

	GUI_DrawPoint(xc + y, yc + x, c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b298      	uxth	r0, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	8b3a      	ldrh	r2, [r7, #24]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7ff feb5 	bl	8001974 <GUI_DrawPoint>

	GUI_DrawPoint(xc - y, yc + x, c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	b298      	uxth	r0, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	8b3a      	ldrh	r2, [r7, #24]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7ff fea5 	bl	8001974 <GUI_DrawPoint>

	GUI_DrawPoint(xc + y, yc - x, c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	b298      	uxth	r0, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	8b3a      	ldrh	r2, [r7, #24]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7ff fe95 	bl	8001974 <GUI_DrawPoint>

	GUI_DrawPoint(xc - y, yc - x, c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	b298      	uxth	r0, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	8b3a      	ldrh	r2, [r7, #24]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f7ff fe85 	bl	8001974 <GUI_DrawPoint>
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <gui_circle>:
								r:Circular radius
								fill:1-filling,0-no filling
 * @retvalue   :None
******************************************************************************/
void gui_circle(int xc, int yc,u16 c,int r, int fill)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b08a      	sub	sp, #40	@ 0x28
 8001c76:	af02      	add	r7, sp, #8
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	f1c3 0303 	rsb	r3, r3, #3
 8001c92:	613b      	str	r3, [r7, #16]


	if (fill)
 8001c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d04f      	beq.n	8001d3a <gui_circle+0xc8>
	{
		// �����䣨��ʵ��Բ��
		while (x <= y) {
 8001c9a:	e029      	b.n	8001cf0 <gui_circle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e00a      	b.n	8001cb8 <gui_circle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f7ff ff55 	bl	8001b5c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	ddf0      	ble.n	8001ca2 <gui_circle+0x30>

			if (d < 0) {
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	da06      	bge.n	8001cd4 <gui_circle+0x62>
				d = d + 4 * x + 6;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	009a      	lsls	r2, r3, #2
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	3306      	adds	r3, #6
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	e00a      	b.n	8001cea <gui_circle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	009a      	lsls	r2, r3, #2
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	330a      	adds	r3, #10
 8001ce2:	613b      	str	r3, [r7, #16]
				y--;
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	ddd1      	ble.n	8001c9c <gui_circle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001cf8:	e023      	b.n	8001d42 <gui_circle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7ff ff29 	bl	8001b5c <_draw_circle_8>
			if (d < 0) {
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da06      	bge.n	8001d1e <gui_circle+0xac>
				d = d + 4 * x + 6;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4413      	add	r3, r2
 8001d18:	3306      	adds	r3, #6
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	e00a      	b.n	8001d34 <gui_circle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	009a      	lsls	r2, r3, #2
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	330a      	adds	r3, #10
 8001d2c:	613b      	str	r3, [r7, #16]
				y--;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	61bb      	str	r3, [r7, #24]
			x++;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	3301      	adds	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dddb      	ble.n	8001cfa <gui_circle+0x88>
}
 8001d42:	bf00      	nop
 8001d44:	3720      	adds	r7, #32
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4604      	mov	r4, r0
 8001d54:	4608      	mov	r0, r1
 8001d56:	4611      	mov	r1, r2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4623      	mov	r3, r4
 8001d5c:	80fb      	strh	r3, [r7, #6]
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80bb      	strh	r3, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	807b      	strh	r3, [r7, #2]
 8001d66:	4613      	mov	r3, r2
 8001d68:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;
 8001d6a:	4b62      	ldr	r3, [pc, #392]	@ (8001ef4 <LCD_ShowChar+0x1a8>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	817b      	strh	r3, [r7, #10]

	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8001d70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d74:	3b20      	subs	r3, #32
 8001d76:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 8001d7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	4413      	add	r3, r2
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29c      	uxth	r4, r3
 8001d8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	88bb      	ldrh	r3, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	88b9      	ldrh	r1, [r7, #4]
 8001da0:	88f8      	ldrh	r0, [r7, #6]
 8001da2:	4622      	mov	r2, r4
 8001da4:	f7ff fcba 	bl	800171c <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 8001da8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d143      	bne.n	8001e38 <LCD_ShowChar+0xec>
	{
		for(pos=0;pos<size;pos++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	73bb      	strb	r3, [r7, #14]
 8001db4:	e03a      	b.n	8001e2c <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8001db6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d10c      	bne.n	8001dd8 <LCD_ShowChar+0x8c>
 8001dbe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dc2:	7bb9      	ldrb	r1, [r7, #14]
 8001dc4:	484c      	ldr	r0, [pc, #304]	@ (8001ef8 <LCD_ShowChar+0x1ac>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4403      	add	r3, r0
 8001dd0:	440b      	add	r3, r1
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	e008      	b.n	8001dea <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 8001dd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ddc:	7bbb      	ldrb	r3, [r7, #14]
 8001dde:	4947      	ldr	r1, [pc, #284]	@ (8001efc <LCD_ShowChar+0x1b0>)
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	440a      	add	r2, r1
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	737b      	strb	r3, [r7, #13]
 8001dee:	e013      	b.n	8001e18 <LCD_ShowChar+0xcc>
		    {
		        if(temp&0x01)Lcd_WriteData_16Bit(fc);
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <LCD_ShowChar+0xb8>
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fed9 	bl	8000bb4 <Lcd_WriteData_16Bit>
 8001e02:	e003      	b.n	8001e0c <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc);
 8001e04:	883b      	ldrh	r3, [r7, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fed4 	bl	8000bb4 <Lcd_WriteData_16Bit>
				temp>>=1;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001e12:	7b7b      	ldrb	r3, [r7, #13]
 8001e14:	3301      	adds	r3, #1
 8001e16:	737b      	strb	r3, [r7, #13]
 8001e18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	7b7a      	ldrb	r2, [r7, #13]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3e4      	bcc.n	8001df0 <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 8001e26:	7bbb      	ldrb	r3, [r7, #14]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	73bb      	strb	r3, [r7, #14]
 8001e2c:	7bba      	ldrb	r2, [r7, #14]
 8001e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d3bf      	bcc.n	8001db6 <LCD_ShowChar+0x6a>
 8001e36:	e049      	b.n	8001ecc <LCD_ShowChar+0x180>
		    }

		}
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73bb      	strb	r3, [r7, #14]
 8001e3c:	e041      	b.n	8001ec2 <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8001e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d10c      	bne.n	8001e60 <LCD_ShowChar+0x114>
 8001e46:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e4a:	7bb9      	ldrb	r1, [r7, #14]
 8001e4c:	482a      	ldr	r0, [pc, #168]	@ (8001ef8 <LCD_ShowChar+0x1ac>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4403      	add	r3, r0
 8001e58:	440b      	add	r3, r1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e008      	b.n	8001e72 <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 8001e60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e64:	7bbb      	ldrb	r3, [r7, #14]
 8001e66:	4925      	ldr	r1, [pc, #148]	@ (8001efc <LCD_ShowChar+0x1b0>)
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	440a      	add	r2, r1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	737b      	strb	r3, [r7, #13]
 8001e76:	e01a      	b.n	8001eae <LCD_ShowChar+0x162>
		    {
				POINT_COLOR=fc;
 8001e78:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef4 <LCD_ShowChar+0x1a8>)
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <LCD_ShowChar+0x156>
 8001e88:	7b7b      	ldrb	r3, [r7, #13]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	4413      	add	r3, r2
 8001e90:	b298      	uxth	r0, r3
 8001e92:	7bbb      	ldrb	r3, [r7, #14]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	88bb      	ldrh	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7fe fe9b 	bl	8000bd8 <LCD_DrawPoint>
		        temp>>=1;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001ea8:	7b7b      	ldrb	r3, [r7, #13]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	737b      	strb	r3, [r7, #13]
 8001eae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	7b7a      	ldrb	r2, [r7, #13]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d3dd      	bcc.n	8001e78 <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 8001ebc:	7bbb      	ldrb	r3, [r7, #14]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	73bb      	strb	r3, [r7, #14]
 8001ec2:	7bba      	ldrb	r2, [r7, #14]
 8001ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d3b8      	bcc.n	8001e3e <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;
 8001ecc:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <LCD_ShowChar+0x1a8>)
 8001ece:	897b      	ldrh	r3, [r7, #10]
 8001ed0:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <LCD_ShowChar+0x1b4>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <LCD_ShowChar+0x1b4>)
 8001edc:	885b      	ldrh	r3, [r3, #2]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fc19 	bl	800171c <LCD_SetWindows>
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd90      	pop	{r4, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200000cc 	.word	0x200000cc
 8001ef8:	08006eec 	.word	0x08006eec
 8001efc:	08007360 	.word	0x08007360
 8001f00:	200000bc 	.word	0x200000bc

08001f04 <LCD_ShowString>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowString(u16 x,u16 y,u8 size,u8 *p,u8 mode)
{
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af04      	add	r7, sp, #16
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	81fb      	strh	r3, [r7, #14]
 8001f10:	460b      	mov	r3, r1
 8001f12:	81bb      	strh	r3, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	72fb      	strb	r3, [r7, #11]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001f18:	e025      	b.n	8001f66 <LCD_ShowString+0x62>
    {
		if(x>(lcddev.width-1)||y>(lcddev.height-1))
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <LCD_ShowString+0x7c>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	89fa      	ldrh	r2, [r7, #14]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d229      	bcs.n	8001f78 <LCD_ShowString+0x74>
 8001f24:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <LCD_ShowString+0x7c>)
 8001f26:	885b      	ldrh	r3, [r3, #2]
 8001f28:	89ba      	ldrh	r2, [r7, #12]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d224      	bcs.n	8001f78 <LCD_ShowString+0x74>
		return;
        LCD_ShowChar(x,y,POINT_COLOR,BACK_COLOR,*p,size,mode);
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <LCD_ShowString+0x80>)
 8001f30:	881c      	ldrh	r4, [r3, #0]
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <LCD_ShowString+0x84>)
 8001f34:	881d      	ldrh	r5, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	89b9      	ldrh	r1, [r7, #12]
 8001f3c:	89f8      	ldrh	r0, [r7, #14]
 8001f3e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f42:	9202      	str	r2, [sp, #8]
 8001f44:	7afa      	ldrb	r2, [r7, #11]
 8001f46:	9201      	str	r2, [sp, #4]
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	462b      	mov	r3, r5
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	f7ff fefd 	bl	8001d4c <LCD_ShowChar>
        x+=size/2;
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	89fb      	ldrh	r3, [r7, #14]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	81fb      	strh	r3, [r7, #14]
        p++;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3301      	adds	r3, #1
 8001f64:	607b      	str	r3, [r7, #4]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f6c:	d805      	bhi.n	8001f7a <LCD_ShowString+0x76>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b1f      	cmp	r3, #31
 8001f74:	d8d1      	bhi.n	8001f1a <LCD_ShowString+0x16>
 8001f76:	e000      	b.n	8001f7a <LCD_ShowString+0x76>
		return;
 8001f78:	bf00      	nop
    }
}
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f80:	200000bc 	.word	0x200000bc
 8001f84:	200000cc 	.word	0x200000cc
 8001f88:	20000000 	.word	0x20000000

08001f8c <mypow>:
 * @parameters :m:the multiplier
                n:the power
 * @retvalue   :the nth power of m
******************************************************************************/
u32 mypow(u8 m,u8 n)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	460a      	mov	r2, r1
 8001f96:	71fb      	strb	r3, [r7, #7]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	71bb      	strb	r3, [r7, #6]
	u32 result=1;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001fa0:	e004      	b.n	8001fac <mypow+0x20>
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	79bb      	ldrb	r3, [r7, #6]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	71ba      	strb	r2, [r7, #6]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f5      	bne.n	8001fa2 <mypow+0x16>
	return result;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LCD_ShowNum>:
								len:the length of the display number
								size:the size of display number
 * @retvalue   :None
******************************************************************************/
void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,u8 size)
{
 8001fc4:	b5b0      	push	{r4, r5, r7, lr}
 8001fc6:	b08a      	sub	sp, #40	@ 0x28
 8001fc8:	af04      	add	r7, sp, #16
 8001fca:	60ba      	str	r2, [r7, #8]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	81fb      	strh	r3, [r7, #14]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	81bb      	strh	r3, [r7, #12]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	71fb      	strb	r3, [r7, #7]
	u8 t,temp;
	u8 enshow=0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75bb      	strb	r3, [r7, #22]
	for(t=0;t<len;t++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	75fb      	strb	r3, [r7, #23]
 8001fe2:	e064      	b.n	80020ae <LCD_ShowNum+0xea>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001fe4:	79fa      	ldrb	r2, [r7, #7]
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	200a      	movs	r0, #10
 8001ff4:	f7ff ffca 	bl	8001f8c <mypow>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002000:	4b2f      	ldr	r3, [pc, #188]	@ (80020c0 <LCD_ShowNum+0xfc>)
 8002002:	fba3 2301 	umull	r2, r3, r3, r1
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	1aca      	subs	r2, r1, r3
 8002012:	4613      	mov	r3, r2
 8002014:	757b      	strb	r3, [r7, #21]
		if(enshow==0&&t<(len-1))
 8002016:	7dbb      	ldrb	r3, [r7, #22]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d126      	bne.n	800206a <LCD_ShowNum+0xa6>
 800201c:	7dfa      	ldrb	r2, [r7, #23]
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	3b01      	subs	r3, #1
 8002022:	429a      	cmp	r2, r3
 8002024:	da21      	bge.n	800206a <LCD_ShowNum+0xa6>
		{
			if(temp==0)
 8002026:	7d7b      	ldrb	r3, [r7, #21]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d11c      	bne.n	8002066 <LCD_ShowNum+0xa2>
			{
				LCD_ShowChar(x+(size/2)*t,y,POINT_COLOR,BACK_COLOR,' ',size,0);
 800202c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	b29b      	uxth	r3, r3
 800203a:	fb12 f303 	smulbb	r3, r2, r3
 800203e:	b29a      	uxth	r2, r3
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	4413      	add	r3, r2
 8002044:	b298      	uxth	r0, r3
 8002046:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <LCD_ShowNum+0x100>)
 8002048:	881a      	ldrh	r2, [r3, #0]
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <LCD_ShowNum+0x104>)
 800204c:	881c      	ldrh	r4, [r3, #0]
 800204e:	89b9      	ldrh	r1, [r7, #12]
 8002050:	2300      	movs	r3, #0
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2320      	movs	r3, #32
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	4623      	mov	r3, r4
 8002060:	f7ff fe74 	bl	8001d4c <LCD_ShowChar>
				continue;
 8002064:	e020      	b.n	80020a8 <LCD_ShowNum+0xe4>
			}else enshow=1;
 8002066:	2301      	movs	r3, #1
 8002068:	75bb      	strb	r3, [r7, #22]

		}
	 	LCD_ShowChar(x+(size/2)*t,y,POINT_COLOR,BACK_COLOR,temp+'0',size,0);
 800206a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	b29b      	uxth	r3, r3
 8002078:	fb12 f303 	smulbb	r3, r2, r3
 800207c:	b29a      	uxth	r2, r3
 800207e:	89fb      	ldrh	r3, [r7, #14]
 8002080:	4413      	add	r3, r2
 8002082:	b298      	uxth	r0, r3
 8002084:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <LCD_ShowNum+0x100>)
 8002086:	881c      	ldrh	r4, [r3, #0]
 8002088:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <LCD_ShowNum+0x104>)
 800208a:	881d      	ldrh	r5, [r3, #0]
 800208c:	7d7b      	ldrb	r3, [r7, #21]
 800208e:	3330      	adds	r3, #48	@ 0x30
 8002090:	b2db      	uxtb	r3, r3
 8002092:	89b9      	ldrh	r1, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	9202      	str	r2, [sp, #8]
 8002098:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800209c:	9201      	str	r2, [sp, #4]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	462b      	mov	r3, r5
 80020a2:	4622      	mov	r2, r4
 80020a4:	f7ff fe52 	bl	8001d4c <LCD_ShowChar>
	for(t=0;t<len;t++)
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	3301      	adds	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
 80020ae:	7dfa      	ldrb	r2, [r7, #23]
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d396      	bcc.n	8001fe4 <LCD_ShowNum+0x20>
	}
}
 80020b6:	bf00      	nop
 80020b8:	bf00      	nop
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bdb0      	pop	{r4, r5, r7, pc}
 80020c0:	cccccccd 	.word	0xcccccccd
 80020c4:	200000cc 	.word	0x200000cc
 80020c8:	20000000 	.word	0x20000000

080020cc <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/  	 			    					   
void TP_Write_Byte(u8 num)    
{  
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
	u8 count=0;   
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)  
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	e01d      	b.n	800211c <TP_Write_Byte+0x50>
	{ 	  
		//if(num&0x80)TDIN=1;
		if(num&0x80) TOUCH_TDIN_SET;
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	da04      	bge.n	80020f2 <TP_Write_Byte+0x26>
 80020e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020ec:	2280      	movs	r2, #128	@ 0x80
 80020ee:	619a      	str	r2, [r3, #24]
 80020f0:	e003      	b.n	80020fa <TP_Write_Byte+0x2e>
		//else TDIN=0;
		else TOUCH_TDIN_CLR;
 80020f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020f6:	2280      	movs	r2, #128	@ 0x80
 80020f8:	629a      	str	r2, [r3, #40]	@ 0x28
		num<<=1;    
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	71fb      	strb	r3, [r7, #7]
		//TCLK=0;
		TOUCH_TCLK_CLR;
 8002100:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002104:	2202      	movs	r2, #2
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
		delay_us(1);
 8002108:	2001      	movs	r0, #1
 800210a:	f000 ff89 	bl	8003020 <delay_us>
		//TCLK=1;		//Valid on rising edge
		TOUCH_TCLK_SET;
 800210e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002112:	2202      	movs	r2, #2
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28
	for(count=0;count<8;count++)  
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	3301      	adds	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b07      	cmp	r3, #7
 8002120:	d9de      	bls.n	80020e0 <TP_Write_Byte+0x14>
	}		 			    
}
 8002122:	bf00      	nop
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <TP_Read_AD>:
 * @function   :Reading adc values from touch screen IC with SPI bus
 * @parameters :CMD:Read command,0xD0 for x,0x90 for y
 * @retvalue   :Read data
******************************************************************************/    
u16 TP_Read_AD(u8 CMD)	  
{ 	 
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
	u8 count=0; 	  
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
	u16 Num=0; 
 800213a:	2300      	movs	r3, #0
 800213c:	81bb      	strh	r3, [r7, #12]
	//TCLK=0;		//Pull down the clock first
	TOUCH_TCLK_CLR;
 800213e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002142:	2202      	movs	r2, #2
 8002144:	629a      	str	r2, [r3, #40]	@ 0x28
	//TDIN=0; 	//Pull the data line low
	TOUCH_TDIN_CLR;;
 8002146:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800214a:	2280      	movs	r2, #128	@ 0x80
 800214c:	629a      	str	r2, [r3, #40]	@ 0x28
	//TCS=0; 		//Select touch screen ic
	TOUCH_TCS_CLR;
 800214e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002152:	2208      	movs	r2, #8
 8002154:	629a      	str	r2, [r3, #40]	@ 0x28
	TP_Write_Byte(CMD);	//Send command words
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ffb7 	bl	80020cc <TP_Write_Byte>
	delay_us(6);	//The conversion time of ADS7846 is up to 6us
 800215e:	2006      	movs	r0, #6
 8002160:	f000 ff5e 	bl	8003020 <delay_us>
	//TCLK=0;
	TOUCH_TCLK_CLR;
 8002164:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002168:	2202      	movs	r2, #2
 800216a:	629a      	str	r2, [r3, #40]	@ 0x28
	delay_us(1);    	   
 800216c:	2001      	movs	r0, #1
 800216e:	f000 ff57 	bl	8003020 <delay_us>
	//TCLK=1;			//Give 1 clock and clear busy
	TOUCH_TCLK_SET;
 8002172:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002176:	2202      	movs	r2, #2
 8002178:	629a      	str	r2, [r3, #40]	@ 0x28
	delay_us(1);    
 800217a:	2001      	movs	r0, #1
 800217c:	f000 ff50 	bl	8003020 <delay_us>
	//TCLK=0;
	TOUCH_TCLK_CLR;
 8002180:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002184:	2202      	movs	r2, #2
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28
	for(count=0;count<16;count++)	//Read out 16-bit data, only the upper 12 bits are valid
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e01b      	b.n	80021c6 <TP_Read_AD+0x9a>
	{ 				  
		Num<<=1; 	 
 800218e:	89bb      	ldrh	r3, [r7, #12]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	81bb      	strh	r3, [r7, #12]
		//TCLK=0;			//Valid on falling edge
		TOUCH_TCLK_CLR;
 8002194:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002198:	2202      	movs	r2, #2
 800219a:	629a      	str	r2, [r3, #40]	@ 0x28
		delay_us(1);    
 800219c:	2001      	movs	r0, #1
 800219e:	f000 ff3f 	bl	8003020 <delay_us>
 		//TCLK=1;
		TOUCH_TCLK_SET;
 80021a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80021a6:	2202      	movs	r2, #2
 80021a8:	629a      	str	r2, [r3, #40]	@ 0x28
 		if(DOUT)Num++; 		 
 80021aa:	2104      	movs	r1, #4
 80021ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b0:	f002 fb8a 	bl	80048c8 <HAL_GPIO_ReadPin>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <TP_Read_AD+0x94>
 80021ba:	89bb      	ldrh	r3, [r7, #12]
 80021bc:	3301      	adds	r3, #1
 80021be:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)	//Read out 16-bit data, only the upper 12 bits are valid
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	3301      	adds	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d9e0      	bls.n	800218e <TP_Read_AD+0x62>
	}  	
	Num>>=4;   		//Only the upper 12 bits are valid.
 80021cc:	89bb      	ldrh	r3, [r7, #12]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	81bb      	strh	r3, [r7, #12]
	//TCS=1;			//release film selection
	TOUCH_TCS_SET;
 80021d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80021d6:	2208      	movs	r2, #8
 80021d8:	619a      	str	r2, [r3, #24]
	return(Num);  
 80021da:	89bb      	ldrh	r3, [r7, #12]
//#endif
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/  
u16 TP_Read_XOY(u8 xy)
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b089      	sub	sp, #36	@ 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
	u16 i, j;
	u16 buf[READ_TIMES];
	u16 sum=0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	837b      	strh	r3, [r7, #26]
	u16 temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);		 		    
 80021f2:	2300      	movs	r3, #0
 80021f4:	83fb      	strh	r3, [r7, #30]
 80021f6:	e00e      	b.n	8002216 <TP_Read_XOY+0x32>
 80021f8:	8bfc      	ldrh	r4, [r7, #30]
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff95 	bl	800212c <TP_Read_AD>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	0063      	lsls	r3, r4, #1
 8002208:	3320      	adds	r3, #32
 800220a:	443b      	add	r3, r7
 800220c:	f823 2c14 	strh.w	r2, [r3, #-20]
 8002210:	8bfb      	ldrh	r3, [r7, #30]
 8002212:	3301      	adds	r3, #1
 8002214:	83fb      	strh	r3, [r7, #30]
 8002216:	8bfb      	ldrh	r3, [r7, #30]
 8002218:	2b04      	cmp	r3, #4
 800221a:	d9ed      	bls.n	80021f8 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)	//sort
 800221c:	2300      	movs	r3, #0
 800221e:	83fb      	strh	r3, [r7, #30]
 8002220:	e035      	b.n	800228e <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8002222:	8bfb      	ldrh	r3, [r7, #30]
 8002224:	3301      	adds	r3, #1
 8002226:	83bb      	strh	r3, [r7, #28]
 8002228:	e02b      	b.n	8002282 <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])	//Ascending order
 800222a:	8bfb      	ldrh	r3, [r7, #30]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	3320      	adds	r3, #32
 8002230:	443b      	add	r3, r7
 8002232:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002236:	8bbb      	ldrh	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	3320      	adds	r3, #32
 800223c:	443b      	add	r3, r7
 800223e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002242:	429a      	cmp	r2, r3
 8002244:	d91a      	bls.n	800227c <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 8002246:	8bfb      	ldrh	r3, [r7, #30]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	3320      	adds	r3, #32
 800224c:	443b      	add	r3, r7
 800224e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002252:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8002254:	8bbb      	ldrh	r3, [r7, #28]
 8002256:	8bfa      	ldrh	r2, [r7, #30]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	3320      	adds	r3, #32
 800225c:	443b      	add	r3, r7
 800225e:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8002262:	0053      	lsls	r3, r2, #1
 8002264:	3320      	adds	r3, #32
 8002266:	443b      	add	r3, r7
 8002268:	460a      	mov	r2, r1
 800226a:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 800226e:	8bbb      	ldrh	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	3320      	adds	r3, #32
 8002274:	443b      	add	r3, r7
 8002276:	8b3a      	ldrh	r2, [r7, #24]
 8002278:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 800227c:	8bbb      	ldrh	r3, [r7, #28]
 800227e:	3301      	adds	r3, #1
 8002280:	83bb      	strh	r3, [r7, #28]
 8002282:	8bbb      	ldrh	r3, [r7, #28]
 8002284:	2b04      	cmp	r3, #4
 8002286:	d9d0      	bls.n	800222a <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)	//sort
 8002288:	8bfb      	ldrh	r3, [r7, #30]
 800228a:	3301      	adds	r3, #1
 800228c:	83fb      	strh	r3, [r7, #30]
 800228e:	8bfb      	ldrh	r3, [r7, #30]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d9c6      	bls.n	8002222 <TP_Read_XOY+0x3e>
			}
		}
	}	  
	sum=0;
 8002294:	2300      	movs	r3, #0
 8002296:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8002298:	2301      	movs	r3, #1
 800229a:	83fb      	strh	r3, [r7, #30]
 800229c:	e00b      	b.n	80022b6 <TP_Read_XOY+0xd2>
 800229e:	8bfb      	ldrh	r3, [r7, #30]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	3320      	adds	r3, #32
 80022a4:	443b      	add	r3, r7
 80022a6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80022aa:	8b7b      	ldrh	r3, [r7, #26]
 80022ac:	4413      	add	r3, r2
 80022ae:	837b      	strh	r3, [r7, #26]
 80022b0:	8bfb      	ldrh	r3, [r7, #30]
 80022b2:	3301      	adds	r3, #1
 80022b4:	83fb      	strh	r3, [r7, #30]
 80022b6:	8bfb      	ldrh	r3, [r7, #30]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d9f0      	bls.n	800229e <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 80022bc:	8b7b      	ldrh	r3, [r7, #26]
 80022be:	4a05      	ldr	r2, [pc, #20]	@ (80022d4 <TP_Read_XOY+0xf0>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	833b      	strh	r3, [r7, #24]
	return temp;   
 80022c8:	8b3b      	ldrh	r3, [r7, #24]
} 
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	@ 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd90      	pop	{r4, r7, pc}
 80022d2:	bf00      	nop
 80022d4:	aaaaaaab 	.word	0xaaaaaaab

080022d8 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/ 
u8 TP_Read_XY(u16 *x,u16 *y)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
	u16 xtemp,ytemp;			 	 		  
	xtemp=TP_Read_XOY(CMD_RDX);
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <TP_Read_XY+0x3c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff7c 	bl	80021e4 <TP_Read_XOY>
 80022ec:	4603      	mov	r3, r0
 80022ee:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);	  												   
 80022f0:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <TP_Read_XY+0x40>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff75 	bl	80021e4 <TP_Read_XOY>
 80022fa:	4603      	mov	r3, r0
 80022fc:	81bb      	strh	r3, [r7, #12]
	//if(xtemp<100||ytemp<100)return 0; //Reading failed
	*x=xtemp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	89fa      	ldrh	r2, [r7, #14]
 8002302:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	89ba      	ldrh	r2, [r7, #12]
 8002308:	801a      	strh	r2, [r3, #0]
	return 1;	//Reading successful
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	2000002c 	.word	0x2000002c
 8002318:	2000002d 	.word	0x2000002d

0800231c <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/ 
u8 TP_Read_XY2(u16 *x,u16 *y) 
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
	u16 x1,y1;
 	u16 x2,y2;
 	u8 flag;    
    flag=TP_Read_XY(&x1,&y1);   
 8002326:	f107 0212 	add.w	r2, r7, #18
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ffd1 	bl	80022d8 <TP_Read_XY>
 8002336:	4603      	mov	r3, r0
 8002338:	75fb      	strb	r3, [r7, #23]
    if(flag==0)return(0);
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <TP_Read_XY2+0x28>
 8002340:	2300      	movs	r3, #0
 8002342:	e049      	b.n	80023d8 <TP_Read_XY2+0xbc>
    flag=TP_Read_XY(&x2,&y2);	   
 8002344:	f107 020e 	add.w	r2, r7, #14
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ffc2 	bl	80022d8 <TP_Read_XY>
 8002354:	4603      	mov	r3, r0
 8002356:	75fb      	strb	r3, [r7, #23]
    if(flag==0)return(0);   
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <TP_Read_XY2+0x46>
 800235e:	2300      	movs	r3, #0
 8002360:	e03a      	b.n	80023d8 <TP_Read_XY2+0xbc>
    if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))	//The two samples before and after are within +50
 8002362:	8a3a      	ldrh	r2, [r7, #16]
 8002364:	8abb      	ldrh	r3, [r7, #20]
 8002366:	429a      	cmp	r2, r3
 8002368:	d804      	bhi.n	8002374 <TP_Read_XY2+0x58>
 800236a:	8a3b      	ldrh	r3, [r7, #16]
 800236c:	3331      	adds	r3, #49	@ 0x31
 800236e:	8aba      	ldrh	r2, [r7, #20]
 8002370:	4293      	cmp	r3, r2
 8002372:	da08      	bge.n	8002386 <TP_Read_XY2+0x6a>
 8002374:	8aba      	ldrh	r2, [r7, #20]
 8002376:	8a3b      	ldrh	r3, [r7, #16]
 8002378:	429a      	cmp	r2, r3
 800237a:	d82c      	bhi.n	80023d6 <TP_Read_XY2+0xba>
 800237c:	8abb      	ldrh	r3, [r7, #20]
 800237e:	3331      	adds	r3, #49	@ 0x31
 8002380:	8a3a      	ldrh	r2, [r7, #16]
 8002382:	4293      	cmp	r3, r2
 8002384:	db27      	blt.n	80023d6 <TP_Read_XY2+0xba>
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8002386:	89fa      	ldrh	r2, [r7, #14]
 8002388:	8a7b      	ldrh	r3, [r7, #18]
 800238a:	429a      	cmp	r2, r3
 800238c:	d804      	bhi.n	8002398 <TP_Read_XY2+0x7c>
 800238e:	89fb      	ldrh	r3, [r7, #14]
 8002390:	3331      	adds	r3, #49	@ 0x31
 8002392:	8a7a      	ldrh	r2, [r7, #18]
 8002394:	4293      	cmp	r3, r2
 8002396:	da08      	bge.n	80023aa <TP_Read_XY2+0x8e>
 8002398:	8a7a      	ldrh	r2, [r7, #18]
 800239a:	89fb      	ldrh	r3, [r7, #14]
 800239c:	429a      	cmp	r2, r3
 800239e:	d81a      	bhi.n	80023d6 <TP_Read_XY2+0xba>
 80023a0:	8a7b      	ldrh	r3, [r7, #18]
 80023a2:	3331      	adds	r3, #49	@ 0x31
 80023a4:	89fa      	ldrh	r2, [r7, #14]
 80023a6:	4293      	cmp	r3, r2
 80023a8:	db15      	blt.n	80023d6 <TP_Read_XY2+0xba>
    {
        *x=(x1+x2)/2;
 80023aa:	8abb      	ldrh	r3, [r7, #20]
 80023ac:	461a      	mov	r2, r3
 80023ae:	8a3b      	ldrh	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	0fda      	lsrs	r2, r3, #31
 80023b4:	4413      	add	r3, r2
 80023b6:	105b      	asrs	r3, r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	801a      	strh	r2, [r3, #0]
        *y=(y1+y2)/2;
 80023be:	8a7b      	ldrh	r3, [r7, #18]
 80023c0:	461a      	mov	r2, r3
 80023c2:	89fb      	ldrh	r3, [r7, #14]
 80023c4:	4413      	add	r3, r2
 80023c6:	0fda      	lsrs	r2, r3, #31
 80023c8:	4413      	add	r3, r2
 80023ca:	105b      	asrs	r3, r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	801a      	strh	r2, [r3, #0]
        return 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <TP_Read_XY2+0xbc>
    }else return 0;	  
 80023d6:	2300      	movs	r3, #0
} 
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <TP_Drow_Touch_Point>:
								y:Read y coordinate of the touch screen
								color:the color value of the touch point
 * @retvalue   :None
******************************************************************************/  
void TP_Drow_Touch_Point(u16 x,u16 y,u16 color)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]
 80023ea:	460b      	mov	r3, r1
 80023ec:	80bb      	strh	r3, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	807b      	strh	r3, [r7, #2]
	POINT_COLOR=color;
 80023f2:	4a26      	ldr	r2, [pc, #152]	@ (800248c <TP_Drow_Touch_Point+0xac>)
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	8013      	strh	r3, [r2, #0]
	LCD_DrawLine(x-12,y,x+13,y);	//horizontal line
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	3b0c      	subs	r3, #12
 80023fc:	b298      	uxth	r0, r3
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	330d      	adds	r3, #13
 8002402:	b29a      	uxth	r2, r3
 8002404:	88bb      	ldrh	r3, [r7, #4]
 8002406:	88b9      	ldrh	r1, [r7, #4]
 8002408:	f7ff fb24 	bl	8001a54 <LCD_DrawLine>
	LCD_DrawLine(x,y-12,x,y+13);	//vertical line
 800240c:	88bb      	ldrh	r3, [r7, #4]
 800240e:	3b0c      	subs	r3, #12
 8002410:	b299      	uxth	r1, r3
 8002412:	88bb      	ldrh	r3, [r7, #4]
 8002414:	330d      	adds	r3, #13
 8002416:	b29b      	uxth	r3, r3
 8002418:	88fa      	ldrh	r2, [r7, #6]
 800241a:	88f8      	ldrh	r0, [r7, #6]
 800241c:	f7ff fb1a 	bl	8001a54 <LCD_DrawLine>
	LCD_DrawPoint(x+1,y+1);
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	3301      	adds	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	88bb      	ldrh	r3, [r7, #4]
 8002428:	3301      	adds	r3, #1
 800242a:	b29b      	uxth	r3, r3
 800242c:	4619      	mov	r1, r3
 800242e:	4610      	mov	r0, r2
 8002430:	f7fe fbd2 	bl	8000bd8 <LCD_DrawPoint>
	LCD_DrawPoint(x-1,y+1);
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	88bb      	ldrh	r3, [r7, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	b29b      	uxth	r3, r3
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f7fe fbc8 	bl	8000bd8 <LCD_DrawPoint>
	LCD_DrawPoint(x+1,y-1);
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	3301      	adds	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	88bb      	ldrh	r3, [r7, #4]
 8002450:	3b01      	subs	r3, #1
 8002452:	b29b      	uxth	r3, r3
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f7fe fbbe 	bl	8000bd8 <LCD_DrawPoint>
	LCD_DrawPoint(x-1,y-1);
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	88bb      	ldrh	r3, [r7, #4]
 8002464:	3b01      	subs	r3, #1
 8002466:	b29b      	uxth	r3, r3
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f7fe fbb4 	bl	8000bd8 <LCD_DrawPoint>
	gui_circle(x,y,POINT_COLOR,6,0);	//draw center circle
 8002470:	88f8      	ldrh	r0, [r7, #6]
 8002472:	88b9      	ldrh	r1, [r7, #4]
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <TP_Drow_Touch_Point+0xac>)
 8002476:	881a      	ldrh	r2, [r3, #0]
 8002478:	2300      	movs	r3, #0
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2306      	movs	r3, #6
 800247e:	f7ff fbf8 	bl	8001c72 <gui_circle>
}	
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200000cc 	.word	0x200000cc

08002490 <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/  					  
u8 TP_Scan(u8 tp)
{			   
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
	if(PEN==0)	//A button is pressed
 800249a:	2110      	movs	r1, #16
 800249c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024a0:	f002 fa12 	bl	80048c8 <HAL_GPIO_ReadPin>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d155      	bne.n	8002556 <TP_Scan+0xc6>
	{
		if(tp)TP_Read_XY2(&tp_dev.x,&tp_dev.y);		//Read physical coordinates
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <TP_Scan+0x2a>
 80024b0:	493b      	ldr	r1, [pc, #236]	@ (80025a0 <TP_Scan+0x110>)
 80024b2:	483c      	ldr	r0, [pc, #240]	@ (80025a4 <TP_Scan+0x114>)
 80024b4:	f7ff ff32 	bl	800231c <TP_Read_XY2>
 80024b8:	e03c      	b.n	8002534 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))	//Read screen coordinates
 80024ba:	4939      	ldr	r1, [pc, #228]	@ (80025a0 <TP_Scan+0x110>)
 80024bc:	4839      	ldr	r0, [pc, #228]	@ (80025a4 <TP_Scan+0x114>)
 80024be:	f7ff ff2d 	bl	800231c <TP_Read_XY2>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d035      	beq.n	8002534 <TP_Scan+0xa4>
		{
	 		tp_dev.x=tp_dev.xfac*tp_dev.x+tp_dev.xoff;	//Convert the result to screen coordinates
 80024c8:	4b37      	ldr	r3, [pc, #220]	@ (80025a8 <TP_Scan+0x118>)
 80024ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80024ce:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <TP_Scan+0x118>)
 80024d0:	8a1b      	ldrh	r3, [r3, #16]
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024de:	4b32      	ldr	r3, [pc, #200]	@ (80025a8 <TP_Scan+0x118>)
 80024e0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f4:	ee17 3a90 	vmov	r3, s15
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	4b2b      	ldr	r3, [pc, #172]	@ (80025a8 <TP_Scan+0x118>)
 80024fc:	821a      	strh	r2, [r3, #16]
			tp_dev.y=tp_dev.yfac*tp_dev.y+tp_dev.yoff;  
 80024fe:	4b2a      	ldr	r3, [pc, #168]	@ (80025a8 <TP_Scan+0x118>)
 8002500:	ed93 7a07 	vldr	s14, [r3, #28]
 8002504:	4b28      	ldr	r3, [pc, #160]	@ (80025a8 <TP_Scan+0x118>)
 8002506:	8a5b      	ldrh	r3, [r3, #18]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002514:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <TP_Scan+0x118>)
 8002516:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252a:	ee17 3a90 	vmov	r3, s15
 800252e:	b29a      	uxth	r2, r3
 8002530:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <TP_Scan+0x118>)
 8002532:	825a      	strh	r2, [r3, #18]
	 	} 
		if((tp_dev.sta&TP_PRES_DOWN)==0)	//has not been pressed before
 8002534:	4b1c      	ldr	r3, [pc, #112]	@ (80025a8 <TP_Scan+0x118>)
 8002536:	7d1b      	ldrb	r3, [r3, #20]
 8002538:	b25b      	sxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	db26      	blt.n	800258c <TP_Scan+0xfc>
		{		 
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;	//button pressed
 800253e:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <TP_Scan+0x118>)
 8002540:	22c0      	movs	r2, #192	@ 0xc0
 8002542:	751a      	strb	r2, [r3, #20]
			tp_dev.x0=tp_dev.x;	//Record the coordinates when first pressed
 8002544:	4b18      	ldr	r3, [pc, #96]	@ (80025a8 <TP_Scan+0x118>)
 8002546:	8a1a      	ldrh	r2, [r3, #16]
 8002548:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <TP_Scan+0x118>)
 800254a:	819a      	strh	r2, [r3, #12]
			tp_dev.y0=tp_dev.y;  	   			 
 800254c:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <TP_Scan+0x118>)
 800254e:	8a5a      	ldrh	r2, [r3, #18]
 8002550:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <TP_Scan+0x118>)
 8002552:	81da      	strh	r2, [r3, #14]
 8002554:	e01a      	b.n	800258c <TP_Scan+0xfc>
		}			   
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)		//It was pressed before
 8002556:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <TP_Scan+0x118>)
 8002558:	7d1b      	ldrb	r3, [r3, #20]
 800255a:	b25b      	sxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	da07      	bge.n	8002570 <TP_Scan+0xe0>
		{
			tp_dev.sta&=~(1<<7);	//Mark button released
 8002560:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <TP_Scan+0x118>)
 8002562:	7d1b      	ldrb	r3, [r3, #20]
 8002564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <TP_Scan+0x118>)
 800256c:	751a      	strb	r2, [r3, #20]
 800256e:	e00d      	b.n	800258c <TP_Scan+0xfc>
		}else	//Never been pressed before
		{
			tp_dev.x0=0;
 8002570:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <TP_Scan+0x118>)
 8002572:	2200      	movs	r2, #0
 8002574:	819a      	strh	r2, [r3, #12]
			tp_dev.y0=0;
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <TP_Scan+0x118>)
 8002578:	2200      	movs	r2, #0
 800257a:	81da      	strh	r2, [r3, #14]
			tp_dev.x=0xffff;
 800257c:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <TP_Scan+0x118>)
 800257e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002582:	821a      	strh	r2, [r3, #16]
			tp_dev.y=0xffff;
 8002584:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <TP_Scan+0x118>)
 8002586:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800258a:	825a      	strh	r2, [r3, #18]
		}	    
	}
	return tp_dev.sta&TP_PRES_DOWN; ////Return to current touch screen state
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <TP_Scan+0x118>)
 800258e:	7d1b      	ldrb	r3, [r3, #20]
 8002590:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002594:	b2db      	uxtb	r3, r3
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000016 	.word	0x20000016
 80025a4:	20000014 	.word	0x20000014
 80025a8:	20000004 	.word	0x20000004

080025ac <TP_Save_Adjdata>:
 * @function   :Save calibration parameters		
 * @parameters :None
 * @retvalue   :None
******************************************************************************/ 										    
void TP_Save_Adjdata(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
	//Save touch screen type
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE+12,tp_dev.touchtype);	
	temp=0X0A;	//Marker calibrated
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE+13,temp); 
*/
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <TP_Get_Adjdata>:
 * @parameters :None
 * @retvalue   :1-get the calibration values successfully
								0-get the calibration values unsuccessfully and Need to recalibrate
******************************************************************************/ 	
u8 TP_Get_Adjdata(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
		}		 
		return 1;	 
	}
	return 0;
*/
}	
 80025be:	bf00      	nop
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <TP_Adj_Info_Show>:
								y3:the y coordinates of fourth calibration point
								fac:calibration factor 
 * @retvalue   :None
******************************************************************************/ 	 					  
void TP_Adj_Info_Show(u16 x0,u16 y0,u16 x1,u16 y1,u16 x2,u16 y2,u16 x3,u16 y3,u16 fac)
{	  
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	4604      	mov	r4, r0
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	4623      	mov	r3, r4
 80025dc:	80fb      	strh	r3, [r7, #6]
 80025de:	4603      	mov	r3, r0
 80025e0:	80bb      	strh	r3, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	807b      	strh	r3, [r7, #2]
 80025e6:	4613      	mov	r3, r2
 80025e8:	803b      	strh	r3, [r7, #0]
	POINT_COLOR=RED;
 80025ea:	4b4c      	ldr	r3, [pc, #304]	@ (800271c <TP_Adj_Info_Show+0x150>)
 80025ec:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80025f0:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(40,140,16,"x1:",1);
 80025f2:	2301      	movs	r3, #1
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002720 <TP_Adj_Info_Show+0x154>)
 80025f8:	2210      	movs	r2, #16
 80025fa:	218c      	movs	r1, #140	@ 0x8c
 80025fc:	2028      	movs	r0, #40	@ 0x28
 80025fe:	f7ff fc81 	bl	8001f04 <LCD_ShowString>
 	LCD_ShowString(40+80,140,16,"y1:",1);
 8002602:	2301      	movs	r3, #1
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	4b47      	ldr	r3, [pc, #284]	@ (8002724 <TP_Adj_Info_Show+0x158>)
 8002608:	2210      	movs	r2, #16
 800260a:	218c      	movs	r1, #140	@ 0x8c
 800260c:	2078      	movs	r0, #120	@ 0x78
 800260e:	f7ff fc79 	bl	8001f04 <LCD_ShowString>
 	LCD_ShowString(40,160,16,"x2:",1);
 8002612:	2301      	movs	r3, #1
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	4b44      	ldr	r3, [pc, #272]	@ (8002728 <TP_Adj_Info_Show+0x15c>)
 8002618:	2210      	movs	r2, #16
 800261a:	21a0      	movs	r1, #160	@ 0xa0
 800261c:	2028      	movs	r0, #40	@ 0x28
 800261e:	f7ff fc71 	bl	8001f04 <LCD_ShowString>
 	LCD_ShowString(40+80,160, 16,"y2:",1);
 8002622:	2301      	movs	r3, #1
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	4b41      	ldr	r3, [pc, #260]	@ (800272c <TP_Adj_Info_Show+0x160>)
 8002628:	2210      	movs	r2, #16
 800262a:	21a0      	movs	r1, #160	@ 0xa0
 800262c:	2078      	movs	r0, #120	@ 0x78
 800262e:	f7ff fc69 	bl	8001f04 <LCD_ShowString>
	LCD_ShowString(40,180, 16,"x3:",1);
 8002632:	2301      	movs	r3, #1
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4b3e      	ldr	r3, [pc, #248]	@ (8002730 <TP_Adj_Info_Show+0x164>)
 8002638:	2210      	movs	r2, #16
 800263a:	21b4      	movs	r1, #180	@ 0xb4
 800263c:	2028      	movs	r0, #40	@ 0x28
 800263e:	f7ff fc61 	bl	8001f04 <LCD_ShowString>
 	LCD_ShowString(40+80,180, 16,"y3:",1);
 8002642:	2301      	movs	r3, #1
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	4b3b      	ldr	r3, [pc, #236]	@ (8002734 <TP_Adj_Info_Show+0x168>)
 8002648:	2210      	movs	r2, #16
 800264a:	21b4      	movs	r1, #180	@ 0xb4
 800264c:	2078      	movs	r0, #120	@ 0x78
 800264e:	f7ff fc59 	bl	8001f04 <LCD_ShowString>
	LCD_ShowString(40,200, 16,"x4:",1);
 8002652:	2301      	movs	r3, #1
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4b38      	ldr	r3, [pc, #224]	@ (8002738 <TP_Adj_Info_Show+0x16c>)
 8002658:	2210      	movs	r2, #16
 800265a:	21c8      	movs	r1, #200	@ 0xc8
 800265c:	2028      	movs	r0, #40	@ 0x28
 800265e:	f7ff fc51 	bl	8001f04 <LCD_ShowString>
 	LCD_ShowString(40+80,200, 16,"y4:",1);  
 8002662:	2301      	movs	r3, #1
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	4b35      	ldr	r3, [pc, #212]	@ (800273c <TP_Adj_Info_Show+0x170>)
 8002668:	2210      	movs	r2, #16
 800266a:	21c8      	movs	r1, #200	@ 0xc8
 800266c:	2078      	movs	r0, #120	@ 0x78
 800266e:	f7ff fc49 	bl	8001f04 <LCD_ShowString>
 	LCD_ShowString(40,220, 16,"fac is:",1);     
 8002672:	2301      	movs	r3, #1
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	4b32      	ldr	r3, [pc, #200]	@ (8002740 <TP_Adj_Info_Show+0x174>)
 8002678:	2210      	movs	r2, #16
 800267a:	21dc      	movs	r1, #220	@ 0xdc
 800267c:	2028      	movs	r0, #40	@ 0x28
 800267e:	f7ff fc41 	bl	8001f04 <LCD_ShowString>
	LCD_ShowNum(40+24,140,x0,4,16);		//Display value
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	2310      	movs	r3, #16
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2304      	movs	r3, #4
 800268a:	218c      	movs	r1, #140	@ 0x8c
 800268c:	2040      	movs	r0, #64	@ 0x40
 800268e:	f7ff fc99 	bl	8001fc4 <LCD_ShowNum>
	LCD_ShowNum(40+24+80,140,y0,4,16);	//Display value
 8002692:	88ba      	ldrh	r2, [r7, #4]
 8002694:	2310      	movs	r3, #16
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2304      	movs	r3, #4
 800269a:	218c      	movs	r1, #140	@ 0x8c
 800269c:	2090      	movs	r0, #144	@ 0x90
 800269e:	f7ff fc91 	bl	8001fc4 <LCD_ShowNum>
	LCD_ShowNum(40+24,160,x1,4,16);		//Display value
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	2310      	movs	r3, #16
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2304      	movs	r3, #4
 80026aa:	21a0      	movs	r1, #160	@ 0xa0
 80026ac:	2040      	movs	r0, #64	@ 0x40
 80026ae:	f7ff fc89 	bl	8001fc4 <LCD_ShowNum>
	LCD_ShowNum(40+24+80,160,y1,4,16);	//Display value
 80026b2:	883a      	ldrh	r2, [r7, #0]
 80026b4:	2310      	movs	r3, #16
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2304      	movs	r3, #4
 80026ba:	21a0      	movs	r1, #160	@ 0xa0
 80026bc:	2090      	movs	r0, #144	@ 0x90
 80026be:	f7ff fc81 	bl	8001fc4 <LCD_ShowNum>
	LCD_ShowNum(40+24,180,x2,4,16);		//Display value
 80026c2:	8b3a      	ldrh	r2, [r7, #24]
 80026c4:	2310      	movs	r3, #16
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	2304      	movs	r3, #4
 80026ca:	21b4      	movs	r1, #180	@ 0xb4
 80026cc:	2040      	movs	r0, #64	@ 0x40
 80026ce:	f7ff fc79 	bl	8001fc4 <LCD_ShowNum>
	LCD_ShowNum(40+24+80,180,y2,4,16);	//Display value
 80026d2:	8bba      	ldrh	r2, [r7, #28]
 80026d4:	2310      	movs	r3, #16
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2304      	movs	r3, #4
 80026da:	21b4      	movs	r1, #180	@ 0xb4
 80026dc:	2090      	movs	r0, #144	@ 0x90
 80026de:	f7ff fc71 	bl	8001fc4 <LCD_ShowNum>
	LCD_ShowNum(40+24,200,x3,4,16);		//Display value
 80026e2:	8c3a      	ldrh	r2, [r7, #32]
 80026e4:	2310      	movs	r3, #16
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2304      	movs	r3, #4
 80026ea:	21c8      	movs	r1, #200	@ 0xc8
 80026ec:	2040      	movs	r0, #64	@ 0x40
 80026ee:	f7ff fc69 	bl	8001fc4 <LCD_ShowNum>
	LCD_ShowNum(40+24+80,200,y3,4,16);	//Display value
 80026f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026f4:	2310      	movs	r3, #16
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2304      	movs	r3, #4
 80026fa:	21c8      	movs	r1, #200	@ 0xc8
 80026fc:	2090      	movs	r0, #144	@ 0x90
 80026fe:	f7ff fc61 	bl	8001fc4 <LCD_ShowNum>
 	LCD_ShowNum(40+56,220,fac,3,16); 	//Display a numerical value, which must be within the range of 95~105.
 8002702:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002704:	2310      	movs	r3, #16
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2303      	movs	r3, #3
 800270a:	21dc      	movs	r1, #220	@ 0xdc
 800270c:	2060      	movs	r0, #96	@ 0x60
 800270e:	f7ff fc59 	bl	8001fc4 <LCD_ShowNum>
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	200000cc 	.word	0x200000cc
 8002720:	08006e18 	.word	0x08006e18
 8002724:	08006e1c 	.word	0x08006e1c
 8002728:	08006e20 	.word	0x08006e20
 800272c:	08006e24 	.word	0x08006e24
 8002730:	08006e28 	.word	0x08006e28
 8002734:	08006e2c 	.word	0x08006e2c
 8002738:	08006e30 	.word	0x08006e30
 800273c:	08006e34 	.word	0x08006e34
 8002740:	08006e38 	.word	0x08006e38
 8002744:	00000000 	.word	0x00000000

08002748 <TP_Adjust>:
 * @function   :Calibration touch screen and Get 4 calibration parameters
 * @parameters :None
 * @retvalue   :None
******************************************************************************/ 		 
void TP_Adjust(void)
{								 
 8002748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800274c:	b093      	sub	sp, #76	@ 0x4c
 800274e:	af06      	add	r7, sp, #24
	u16 pos_temp[4][2];	//Coordinate cache value
	u8  cnt=0;	
 8002750:	2300      	movs	r3, #0
 8002752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	u16 d1,d2;
	u32 tem1,tem2;
	double fac; 	
	u16 outtime=0;
 8002756:	2300      	movs	r3, #0
 8002758:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 	cnt=0;				
 800275a:	2300      	movs	r3, #0
 800275c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	POINT_COLOR=BLUE;
 8002760:	4b64      	ldr	r3, [pc, #400]	@ (80028f4 <TP_Adjust+0x1ac>)
 8002762:	221f      	movs	r2, #31
 8002764:	801a      	strh	r2, [r3, #0]
	BACK_COLOR =WHITE;
 8002766:	4b64      	ldr	r3, [pc, #400]	@ (80028f8 <TP_Adjust+0x1b0>)
 8002768:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800276c:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);	//clear screen
 800276e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002772:	f7fe fa4b 	bl	8000c0c <LCD_Clear>
	POINT_COLOR=RED;	//red
 8002776:	4b5f      	ldr	r3, [pc, #380]	@ (80028f4 <TP_Adjust+0x1ac>)
 8002778:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800277c:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);	//clear screen
 800277e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002782:	f7fe fa43 	bl	8000c0c <LCD_Clear>
	POINT_COLOR=BLACK;
 8002786:	4b5b      	ldr	r3, [pc, #364]	@ (80028f4 <TP_Adjust+0x1ac>)
 8002788:	2200      	movs	r2, #0
 800278a:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(10,40,16,"Please use the stylus click",1);	//Show prompt information
 800278c:	2301      	movs	r3, #1
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	4b5a      	ldr	r3, [pc, #360]	@ (80028fc <TP_Adjust+0x1b4>)
 8002792:	2210      	movs	r2, #16
 8002794:	2128      	movs	r1, #40	@ 0x28
 8002796:	200a      	movs	r0, #10
 8002798:	f7ff fbb4 	bl	8001f04 <LCD_ShowString>
	LCD_ShowString(10,56,16,"the cross on the screen.",1);	//Show prompt information
 800279c:	2301      	movs	r3, #1
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	4b57      	ldr	r3, [pc, #348]	@ (8002900 <TP_Adjust+0x1b8>)
 80027a2:	2210      	movs	r2, #16
 80027a4:	2138      	movs	r1, #56	@ 0x38
 80027a6:	200a      	movs	r0, #10
 80027a8:	f7ff fbac 	bl	8001f04 <LCD_ShowString>
	LCD_ShowString(10,72,16,"The cross will always move",1);	//Show prompt information
 80027ac:	2301      	movs	r3, #1
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	4b54      	ldr	r3, [pc, #336]	@ (8002904 <TP_Adjust+0x1bc>)
 80027b2:	2210      	movs	r2, #16
 80027b4:	2148      	movs	r1, #72	@ 0x48
 80027b6:	200a      	movs	r0, #10
 80027b8:	f7ff fba4 	bl	8001f04 <LCD_ShowString>
	LCD_ShowString(10,88,16,"until the screen adjustment",1);	//Show prompt information
 80027bc:	2301      	movs	r3, #1
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	4b51      	ldr	r3, [pc, #324]	@ (8002908 <TP_Adjust+0x1c0>)
 80027c2:	2210      	movs	r2, #16
 80027c4:	2158      	movs	r1, #88	@ 0x58
 80027c6:	200a      	movs	r0, #10
 80027c8:	f7ff fb9c 	bl	8001f04 <LCD_ShowString>
	LCD_ShowString(10,104,16,"is completed.",1);	//Show prompt information
 80027cc:	2301      	movs	r3, #1
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	4b4e      	ldr	r3, [pc, #312]	@ (800290c <TP_Adjust+0x1c4>)
 80027d2:	2210      	movs	r2, #16
 80027d4:	2168      	movs	r1, #104	@ 0x68
 80027d6:	200a      	movs	r0, #10
 80027d8:	f7ff fb94 	bl	8001f04 <LCD_ShowString>
	 
	TP_Drow_Touch_Point(20,20,RED);	//Paint point 1
 80027dc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80027e0:	2114      	movs	r1, #20
 80027e2:	2014      	movs	r0, #20
 80027e4:	f7ff fdfc 	bl	80023e0 <TP_Drow_Touch_Point>
	tp_dev.sta=0;	//Eliminate trigger signals
 80027e8:	4b49      	ldr	r3, [pc, #292]	@ (8002910 <TP_Adjust+0x1c8>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	751a      	strb	r2, [r3, #20]
	tp_dev.xfac=0;	//Xfac is used to mark whether it has been calibrated, so it must be cleared before calibration! To avoid errors
 80027ee:	4b48      	ldr	r3, [pc, #288]	@ (8002910 <TP_Adjust+0x1c8>)
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
	while(1)	//If it is not pressed for 10 consecutive seconds, it will automatically exit.
	{
		tp_dev.scan(1);	//Scan physical coordinates
 80027f6:	4b46      	ldr	r3, [pc, #280]	@ (8002910 <TP_Adjust+0x1c8>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2001      	movs	r0, #1
 80027fc:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)	//The button was pressed once (the button was released at this time.)
 80027fe:	4b44      	ldr	r3, [pc, #272]	@ (8002910 <TP_Adjust+0x1c8>)
 8002800:	7d1b      	ldrb	r3, [r3, #20]
 8002802:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002806:	2b40      	cmp	r3, #64	@ 0x40
 8002808:	f040 83ac 	bne.w	8002f64 <TP_Adjust+0x81c>
		{	
			outtime=0;		
 800280c:	2300      	movs	r3, #0
 800280e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			tp_dev.sta&=~(1<<6);	//Mark keys have been processed.
 8002810:	4b3f      	ldr	r3, [pc, #252]	@ (8002910 <TP_Adjust+0x1c8>)
 8002812:	7d1b      	ldrb	r3, [r3, #20]
 8002814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b3d      	ldr	r3, [pc, #244]	@ (8002910 <TP_Adjust+0x1c8>)
 800281c:	751a      	strb	r2, [r3, #20]
						   			   
			pos_temp[cnt][0]=tp_dev.x;
 800281e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002822:	4a3b      	ldr	r2, [pc, #236]	@ (8002910 <TP_Adjust+0x1c8>)
 8002824:	8a12      	ldrh	r2, [r2, #16]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	3328      	adds	r3, #40	@ 0x28
 800282a:	f107 0108 	add.w	r1, r7, #8
 800282e:	440b      	add	r3, r1
 8002830:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y;
 8002834:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002838:	4a35      	ldr	r2, [pc, #212]	@ (8002910 <TP_Adjust+0x1c8>)
 800283a:	8a52      	ldrh	r2, [r2, #18]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	3328      	adds	r3, #40	@ 0x28
 8002840:	f107 0108 	add.w	r1, r7, #8
 8002844:	440b      	add	r3, r1
 8002846:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;	  
 800284a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800284e:	3301      	adds	r3, #1
 8002850:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			switch(cnt)
 8002854:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002858:	3b01      	subs	r3, #1
 800285a:	2b03      	cmp	r3, #3
 800285c:	f200 8382 	bhi.w	8002f64 <TP_Adjust+0x81c>
 8002860:	a201      	add	r2, pc, #4	@ (adr r2, 8002868 <TP_Adjust+0x120>)
 8002862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002866:	bf00      	nop
 8002868:	08002879 	.word	0x08002879
 800286c:	0800289b 	.word	0x0800289b
 8002870:	080028c5 	.word	0x080028c5
 8002874:	08002919 	.word	0x08002919
			{			   
				case 1:						 
					TP_Drow_Touch_Point(20,20,WHITE);				//Clear point 1
 8002878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800287c:	2114      	movs	r1, #20
 800287e:	2014      	movs	r0, #20
 8002880:	f7ff fdae 	bl	80023e0 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);	//Paint point 2
 8002884:	4b23      	ldr	r3, [pc, #140]	@ (8002914 <TP_Adjust+0x1cc>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	3b14      	subs	r3, #20
 800288a:	b29b      	uxth	r3, r3
 800288c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002890:	2114      	movs	r1, #20
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fda4 	bl	80023e0 <TP_Drow_Touch_Point>
					break;
 8002898:	e364      	b.n	8002f64 <TP_Adjust+0x81c>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);	//Clear point 2
 800289a:	4b1e      	ldr	r3, [pc, #120]	@ (8002914 <TP_Adjust+0x1cc>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	3b14      	subs	r3, #20
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028a6:	2114      	movs	r1, #20
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fd99 	bl	80023e0 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);	//Paint point 3
 80028ae:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <TP_Adjust+0x1cc>)
 80028b0:	885b      	ldrh	r3, [r3, #2]
 80028b2:	3b14      	subs	r3, #20
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80028ba:	4619      	mov	r1, r3
 80028bc:	2014      	movs	r0, #20
 80028be:	f7ff fd8f 	bl	80023e0 <TP_Drow_Touch_Point>
					break;
 80028c2:	e34f      	b.n	8002f64 <TP_Adjust+0x81c>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);			//Clear point 3
 80028c4:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <TP_Adjust+0x1cc>)
 80028c6:	885b      	ldrh	r3, [r3, #2]
 80028c8:	3b14      	subs	r3, #20
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028d0:	4619      	mov	r1, r3
 80028d2:	2014      	movs	r0, #20
 80028d4:	f7ff fd84 	bl	80023e0 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);	//Paint point 4
 80028d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <TP_Adjust+0x1cc>)
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	3b14      	subs	r3, #20
 80028de:	b298      	uxth	r0, r3
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <TP_Adjust+0x1cc>)
 80028e2:	885b      	ldrh	r3, [r3, #2]
 80028e4:	3b14      	subs	r3, #20
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7ff fd77 	bl	80023e0 <TP_Drow_Touch_Point>
					break;
 80028f2:	e337      	b.n	8002f64 <TP_Adjust+0x81c>
 80028f4:	200000cc 	.word	0x200000cc
 80028f8:	20000000 	.word	0x20000000
 80028fc:	08006e40 	.word	0x08006e40
 8002900:	08006e5c 	.word	0x08006e5c
 8002904:	08006e78 	.word	0x08006e78
 8002908:	08006e94 	.word	0x08006e94
 800290c:	08006eb0 	.word	0x08006eb0
 8002910:	20000004 	.word	0x20000004
 8002914:	200000bc 	.word	0x200000bc
				case 4:	  //All four points have been obtained
					//Opposite sides are equal
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);//x1-x2
 8002918:	893b      	ldrh	r3, [r7, #8]
 800291a:	461a      	mov	r2, r3
 800291c:	89bb      	ldrh	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	bfb8      	it	lt
 8002924:	425b      	neglt	r3, r3
 8002926:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);//y1-y2
 8002928:	897b      	ldrh	r3, [r7, #10]
 800292a:	461a      	mov	r2, r3
 800292c:	89fb      	ldrh	r3, [r7, #14]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	bfb8      	it	lt
 8002934:	425b      	neglt	r3, r3
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	fb03 f303 	mul.w	r3, r3, r3
 800293e:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	fb03 f303 	mul.w	r3, r3, r3
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
					d1=sqrt(tem1+tem2);//Get the distance of 1,2
 8002948:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	4413      	add	r3, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fd84 	bl	800045c <__aeabi_ui2d>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	ec43 2b10 	vmov	d0, r2, r3
 800295c:	f004 f90c 	bl	8006b78 <sqrt>
 8002960:	ec53 2b10 	vmov	r2, r3, d0
 8002964:	4610      	mov	r0, r2
 8002966:	4619      	mov	r1, r3
 8002968:	f7fe f8a2 	bl	8000ab0 <__aeabi_d2uiz>
 800296c:	4603      	mov	r3, r0
 800296e:	847b      	strh	r3, [r7, #34]	@ 0x22
					
					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);//x3-x4
 8002970:	8a3b      	ldrh	r3, [r7, #16]
 8002972:	461a      	mov	r2, r3
 8002974:	8abb      	ldrh	r3, [r7, #20]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	bfb8      	it	lt
 800297c:	425b      	neglt	r3, r3
 800297e:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);//y3-y4
 8002980:	8a7b      	ldrh	r3, [r7, #18]
 8002982:	461a      	mov	r2, r3
 8002984:	8afb      	ldrh	r3, [r7, #22]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	bfb8      	it	lt
 800298c:	425b      	neglt	r3, r3
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 8002990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002992:	fb03 f303 	mul.w	r3, r3, r3
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	fb03 f303 	mul.w	r3, r3, r3
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
					d2=sqrt(tem1+tem2);	//Get the distance of 3,4
 80029a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	4413      	add	r3, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fd58 	bl	800045c <__aeabi_ui2d>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	ec43 2b10 	vmov	d0, r2, r3
 80029b4:	f004 f8e0 	bl	8006b78 <sqrt>
 80029b8:	ec53 2b10 	vmov	r2, r3, d0
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f7fe f876 	bl	8000ab0 <__aeabi_d2uiz>
 80029c4:	4603      	mov	r3, r0
 80029c6:	843b      	strh	r3, [r7, #32]
					fac=(float)d1/d2;
 80029c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029d2:	8c3b      	ldrh	r3, [r7, #32]
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029e0:	ee16 0a90 	vmov	r0, s13
 80029e4:	f7fd fd5c 	bl	80004a0 <__aeabi_f2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
					if(fac<0.95||fac>1.05||d1==0||d2==0)	//Unqualified
 80029f0:	a38b      	add	r3, pc, #556	@ (adr r3, 8002c20 <TP_Adjust+0x4d8>)
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029fa:	f7fe f81b 	bl	8000a34 <__aeabi_dcmplt>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10f      	bne.n	8002a24 <TP_Adjust+0x2dc>
 8002a04:	a388      	add	r3, pc, #544	@ (adr r3, 8002c28 <TP_Adjust+0x4e0>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a0e:	f7fe f82f 	bl	8000a70 <__aeabi_dcmpgt>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <TP_Adjust+0x2dc>
 8002a18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <TP_Adjust+0x2dc>
 8002a1e:	8c3b      	ldrh	r3, [r7, #32]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d13e      	bne.n	8002aa2 <TP_Adjust+0x35a>
					{
						cnt=0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 				    	TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);	//Clear point 4
 8002a2a:	4b81      	ldr	r3, [pc, #516]	@ (8002c30 <TP_Adjust+0x4e8>)
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	3b14      	subs	r3, #20
 8002a30:	b298      	uxth	r0, r3
 8002a32:	4b7f      	ldr	r3, [pc, #508]	@ (8002c30 <TP_Adjust+0x4e8>)
 8002a34:	885b      	ldrh	r3, [r3, #2]
 8002a36:	3b14      	subs	r3, #20
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f7ff fcce 	bl	80023e0 <TP_Drow_Touch_Point>
   	 					TP_Drow_Touch_Point(20,20,RED);								//Paint point 1
 8002a44:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002a48:	2114      	movs	r1, #20
 8002a4a:	2014      	movs	r0, #20
 8002a4c:	f7ff fcc8 	bl	80023e0 <TP_Drow_Touch_Point>
 						TP_Adj_Info_Show(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);//��ʾ����   
 8002a50:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8002a54:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 8002a58:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8002a5c:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8002a60:	8a3c      	ldrh	r4, [r7, #16]
 8002a62:	8a7d      	ldrh	r5, [r7, #18]
 8002a64:	8abe      	ldrh	r6, [r7, #20]
 8002a66:	8afb      	ldrh	r3, [r7, #22]
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	4b71      	ldr	r3, [pc, #452]	@ (8002c34 <TP_Adjust+0x4ec>)
 8002a70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a74:	f7fd fd6c 	bl	8000550 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f816 	bl	8000ab0 <__aeabi_d2uiz>
 8002a84:	4603      	mov	r3, r0
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	9304      	str	r3, [sp, #16]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	9303      	str	r3, [sp, #12]
 8002a8e:	9602      	str	r6, [sp, #8]
 8002a90:	9501      	str	r5, [sp, #4]
 8002a92:	9400      	str	r4, [sp, #0]
 8002a94:	465b      	mov	r3, fp
 8002a96:	4652      	mov	r2, sl
 8002a98:	4649      	mov	r1, r9
 8002a9a:	4640      	mov	r0, r8
 8002a9c:	f7ff fd96 	bl	80025cc <TP_Adj_Info_Show>
 						continue;
 8002aa0:	e26e      	b.n	8002f80 <TP_Adjust+0x838>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);//x1-x3
 8002aa2:	893b      	ldrh	r3, [r7, #8]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	8a3b      	ldrh	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bfb8      	it	lt
 8002aae:	425b      	neglt	r3, r3
 8002ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);//y1-y3
 8002ab2:	897b      	ldrh	r3, [r7, #10]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	8a7b      	ldrh	r3, [r7, #18]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bfb8      	it	lt
 8002abe:	425b      	neglt	r3, r3
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 8002ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac4:	fb03 f303 	mul.w	r3, r3, r3
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	fb03 f303 	mul.w	r3, r3, r3
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
					d1=sqrt(tem1+tem2);	//Get the distance of 1,3
 8002ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fcbf 	bl	800045c <__aeabi_ui2d>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	ec43 2b10 	vmov	d0, r2, r3
 8002ae6:	f004 f847 	bl	8006b78 <sqrt>
 8002aea:	ec53 2b10 	vmov	r2, r3, d0
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	f7fd ffdd 	bl	8000ab0 <__aeabi_d2uiz>
 8002af6:	4603      	mov	r3, r0
 8002af8:	847b      	strh	r3, [r7, #34]	@ 0x22
					
					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);//x2-x4
 8002afa:	89bb      	ldrh	r3, [r7, #12]
 8002afc:	461a      	mov	r2, r3
 8002afe:	8abb      	ldrh	r3, [r7, #20]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bfb8      	it	lt
 8002b06:	425b      	neglt	r3, r3
 8002b08:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);//y2-y4
 8002b0a:	89fb      	ldrh	r3, [r7, #14]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	8afb      	ldrh	r3, [r7, #22]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bfb8      	it	lt
 8002b16:	425b      	neglt	r3, r3
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 8002b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1c:	fb03 f303 	mul.w	r3, r3, r3
 8002b20:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	fb03 f303 	mul.w	r3, r3, r3
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
					d2=sqrt(tem1+tem2);	//Get the distance of 2,4
 8002b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	4413      	add	r3, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fc93 	bl	800045c <__aeabi_ui2d>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	ec43 2b10 	vmov	d0, r2, r3
 8002b3e:	f004 f81b 	bl	8006b78 <sqrt>
 8002b42:	ec53 2b10 	vmov	r2, r3, d0
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7fd ffb1 	bl	8000ab0 <__aeabi_d2uiz>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	843b      	strh	r3, [r7, #32]
					fac=(float)d1/d2;
 8002b52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b5c:	8c3b      	ldrh	r3, [r7, #32]
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b6a:	ee16 0a90 	vmov	r0, s13
 8002b6e:	f7fd fc97 	bl	80004a0 <__aeabi_f2d>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	e9c7 2306 	strd	r2, r3, [r7, #24]
					if(fac<0.95||fac>1.05)	//Unqualified
 8002b7a:	a329      	add	r3, pc, #164	@ (adr r3, 8002c20 <TP_Adjust+0x4d8>)
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b84:	f7fd ff56 	bl	8000a34 <__aeabi_dcmplt>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <TP_Adjust+0x45a>
 8002b8e:	a326      	add	r3, pc, #152	@ (adr r3, 8002c28 <TP_Adjust+0x4e0>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b98:	f7fd ff6a 	bl	8000a70 <__aeabi_dcmpgt>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d04a      	beq.n	8002c38 <TP_Adjust+0x4f0>
					{
						cnt=0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 				    	TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);	//Clear point 4
 8002ba8:	4b21      	ldr	r3, [pc, #132]	@ (8002c30 <TP_Adjust+0x4e8>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	3b14      	subs	r3, #20
 8002bae:	b298      	uxth	r0, r3
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <TP_Adjust+0x4e8>)
 8002bb2:	885b      	ldrh	r3, [r3, #2]
 8002bb4:	3b14      	subs	r3, #20
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f7ff fc0f 	bl	80023e0 <TP_Drow_Touch_Point>
   	 					TP_Drow_Touch_Point(20,20,RED);								//Paint point 1
 8002bc2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002bc6:	2114      	movs	r1, #20
 8002bc8:	2014      	movs	r0, #20
 8002bca:	f7ff fc09 	bl	80023e0 <TP_Drow_Touch_Point>
 						TP_Adj_Info_Show(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);//��ʾ����   
 8002bce:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8002bd2:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 8002bd6:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8002bda:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8002bde:	8a3c      	ldrh	r4, [r7, #16]
 8002be0:	8a7d      	ldrh	r5, [r7, #18]
 8002be2:	8abe      	ldrh	r6, [r7, #20]
 8002be4:	8afb      	ldrh	r3, [r7, #22]
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <TP_Adjust+0x4ec>)
 8002bee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bf2:	f7fd fcad 	bl	8000550 <__aeabi_dmul>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7fd ff57 	bl	8000ab0 <__aeabi_d2uiz>
 8002c02:	4603      	mov	r3, r0
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	9304      	str	r3, [sp, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	9303      	str	r3, [sp, #12]
 8002c0c:	9602      	str	r6, [sp, #8]
 8002c0e:	9501      	str	r5, [sp, #4]
 8002c10:	9400      	str	r4, [sp, #0]
 8002c12:	465b      	mov	r3, fp
 8002c14:	4652      	mov	r2, sl
 8002c16:	4649      	mov	r1, r9
 8002c18:	4640      	mov	r0, r8
 8002c1a:	f7ff fcd7 	bl	80025cc <TP_Adj_Info_Show>
						continue;
 8002c1e:	e1af      	b.n	8002f80 <TP_Adjust+0x838>
 8002c20:	66666666 	.word	0x66666666
 8002c24:	3fee6666 	.word	0x3fee6666
 8002c28:	cccccccd 	.word	0xcccccccd
 8002c2c:	3ff0cccc 	.word	0x3ff0cccc
 8002c30:	200000bc 	.word	0x200000bc
 8002c34:	40590000 	.word	0x40590000
					}	//Correct
								   
					//Diagonals are equal
					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);//x1-x3
 8002c38:	89bb      	ldrh	r3, [r7, #12]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	8a3b      	ldrh	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bfb8      	it	lt
 8002c44:	425b      	neglt	r3, r3
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);//y1-y3
 8002c48:	89fb      	ldrh	r3, [r7, #14]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	8a7b      	ldrh	r3, [r7, #18]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bfb8      	it	lt
 8002c54:	425b      	neglt	r3, r3
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 8002c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5a:	fb03 f303 	mul.w	r3, r3, r3
 8002c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	fb03 f303 	mul.w	r3, r3, r3
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
					d1=sqrt(tem1+tem2);	//get the distance of 1,4
 8002c68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	4413      	add	r3, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fbf4 	bl	800045c <__aeabi_ui2d>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	ec43 2b10 	vmov	d0, r2, r3
 8002c7c:	f003 ff7c 	bl	8006b78 <sqrt>
 8002c80:	ec53 2b10 	vmov	r2, r3, d0
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7fd ff12 	bl	8000ab0 <__aeabi_d2uiz>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	847b      	strh	r3, [r7, #34]	@ 0x22
	
					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);//x2-x4
 8002c90:	893b      	ldrh	r3, [r7, #8]
 8002c92:	461a      	mov	r2, r3
 8002c94:	8abb      	ldrh	r3, [r7, #20]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bfb8      	it	lt
 8002c9c:	425b      	neglt	r3, r3
 8002c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);//y2-y4
 8002ca0:	897b      	ldrh	r3, [r7, #10]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bfb8      	it	lt
 8002cac:	425b      	neglt	r3, r3
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
					tem1*=tem1;
 8002cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb2:	fb03 f303 	mul.w	r3, r3, r3
 8002cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
					tem2*=tem2;
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	fb03 f303 	mul.w	r3, r3, r3
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
					d2=sqrt(tem1+tem2);	//Get the distance of 2,3
 8002cc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fbc8 	bl	800045c <__aeabi_ui2d>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	ec43 2b10 	vmov	d0, r2, r3
 8002cd4:	f003 ff50 	bl	8006b78 <sqrt>
 8002cd8:	ec53 2b10 	vmov	r2, r3, d0
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7fd fee6 	bl	8000ab0 <__aeabi_d2uiz>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	843b      	strh	r3, [r7, #32]
					fac=(float)d1/d2;
 8002ce8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cf2:	8c3b      	ldrh	r3, [r7, #32]
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cfc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d00:	ee16 0a90 	vmov	r0, s13
 8002d04:	f7fd fbcc 	bl	80004a0 <__aeabi_f2d>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
					if(fac<0.95||fac>1.05)	//Unqualified
 8002d10:	a3a7      	add	r3, pc, #668	@ (adr r3, 8002fb0 <TP_Adjust+0x868>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d1a:	f7fd fe8b 	bl	8000a34 <__aeabi_dcmplt>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <TP_Adjust+0x5f0>
 8002d24:	a3a4      	add	r3, pc, #656	@ (adr r3, 8002fb8 <TP_Adjust+0x870>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d2e:	f7fd fe9f 	bl	8000a70 <__aeabi_dcmpgt>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d03e      	beq.n	8002db6 <TP_Adjust+0x66e>
					{
						cnt=0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 				    	TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);	//Clear point 4
 8002d3e:	4b94      	ldr	r3, [pc, #592]	@ (8002f90 <TP_Adjust+0x848>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	3b14      	subs	r3, #20
 8002d44:	b298      	uxth	r0, r3
 8002d46:	4b92      	ldr	r3, [pc, #584]	@ (8002f90 <TP_Adjust+0x848>)
 8002d48:	885b      	ldrh	r3, [r3, #2]
 8002d4a:	3b14      	subs	r3, #20
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d52:	4619      	mov	r1, r3
 8002d54:	f7ff fb44 	bl	80023e0 <TP_Drow_Touch_Point>
   	 					TP_Drow_Touch_Point(20,20,RED);								//Paint point 1
 8002d58:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002d5c:	2114      	movs	r1, #20
 8002d5e:	2014      	movs	r0, #20
 8002d60:	f7ff fb3e 	bl	80023e0 <TP_Drow_Touch_Point>
 						TP_Adj_Info_Show(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);//��ʾ����   
 8002d64:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8002d68:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 8002d6c:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8002d70:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8002d74:	8a3c      	ldrh	r4, [r7, #16]
 8002d76:	8a7d      	ldrh	r5, [r7, #18]
 8002d78:	8abe      	ldrh	r6, [r7, #20]
 8002d7a:	8afb      	ldrh	r3, [r7, #22]
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	4b84      	ldr	r3, [pc, #528]	@ (8002f94 <TP_Adjust+0x84c>)
 8002d84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d88:	f7fd fbe2 	bl	8000550 <__aeabi_dmul>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	f7fd fe8c 	bl	8000ab0 <__aeabi_d2uiz>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	9304      	str	r3, [sp, #16]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	9303      	str	r3, [sp, #12]
 8002da2:	9602      	str	r6, [sp, #8]
 8002da4:	9501      	str	r5, [sp, #4]
 8002da6:	9400      	str	r4, [sp, #0]
 8002da8:	465b      	mov	r3, fp
 8002daa:	4652      	mov	r2, sl
 8002dac:	4649      	mov	r1, r9
 8002dae:	4640      	mov	r0, r8
 8002db0:	f7ff fc0c 	bl	80025cc <TP_Adj_Info_Show>
						continue;
 8002db4:	e0e4      	b.n	8002f80 <TP_Adjust+0x838>
					}	//Correct
					//Calculation result
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);	//getxfac
 8002db6:	4b76      	ldr	r3, [pc, #472]	@ (8002f90 <TP_Adjust+0x848>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	3b28      	subs	r3, #40	@ 0x28
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dc4:	89bb      	ldrh	r3, [r7, #12]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	893b      	ldrh	r3, [r7, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	ee07 3a90 	vmov	s15, r3
 8002dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f98 <TP_Adjust+0x850>)
 8002dda:	edc3 7a06 	vstr	s15, [r3, #24]
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;	//getxoff
 8002dde:	4b6c      	ldr	r3, [pc, #432]	@ (8002f90 <TP_Adjust+0x848>)
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dea:	4b6b      	ldr	r3, [pc, #428]	@ (8002f98 <TP_Adjust+0x850>)
 8002dec:	edd3 6a06 	vldr	s13, [r3, #24]
 8002df0:	89bb      	ldrh	r3, [r7, #12]
 8002df2:	461a      	mov	r2, r3
 8002df4:	893b      	ldrh	r3, [r7, #8]
 8002df6:	4413      	add	r3, r2
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e08:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e14:	ee17 3a90 	vmov	r3, s15
 8002e18:	b21a      	sxth	r2, r3
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f98 <TP_Adjust+0x850>)
 8002e1c:	841a      	strh	r2, [r3, #32]
						  
					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);	//getyfac
 8002e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002f90 <TP_Adjust+0x848>)
 8002e20:	885b      	ldrh	r3, [r3, #2]
 8002e22:	3b28      	subs	r3, #40	@ 0x28
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e2c:	8a7b      	ldrh	r3, [r7, #18]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	897b      	ldrh	r3, [r7, #10]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e40:	4b55      	ldr	r3, [pc, #340]	@ (8002f98 <TP_Adjust+0x850>)
 8002e42:	edc3 7a07 	vstr	s15, [r3, #28]
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;	//getyoff
 8002e46:	4b52      	ldr	r3, [pc, #328]	@ (8002f90 <TP_Adjust+0x848>)
 8002e48:	885b      	ldrh	r3, [r3, #2]
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e52:	4b51      	ldr	r3, [pc, #324]	@ (8002f98 <TP_Adjust+0x850>)
 8002e54:	edd3 6a07 	vldr	s13, [r3, #28]
 8002e58:	8a7b      	ldrh	r3, [r7, #18]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	897b      	ldrh	r3, [r7, #10]
 8002e5e:	4413      	add	r3, r2
 8002e60:	ee07 3a90 	vmov	s15, r3
 8002e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e70:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e7c:	ee17 3a90 	vmov	r3, s15
 8002e80:	b21a      	sxth	r2, r3
 8002e82:	4b45      	ldr	r3, [pc, #276]	@ (8002f98 <TP_Adjust+0x850>)
 8002e84:	845a      	strh	r2, [r3, #34]	@ 0x22
					if(abs(tp_dev.xfac)>2||abs(tp_dev.yfac)>2)	//The touch screen is the opposite of the default.
 8002e86:	4b44      	ldr	r3, [pc, #272]	@ (8002f98 <TP_Adjust+0x850>)
 8002e88:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e90:	ee17 3a90 	vmov	r3, s15
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bfb8      	it	lt
 8002e98:	425b      	neglt	r3, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	dc0b      	bgt.n	8002eb6 <TP_Adjust+0x76e>
 8002e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f98 <TP_Adjust+0x850>)
 8002ea0:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ea8:	ee17 3a90 	vmov	r3, s15
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bfb8      	it	lt
 8002eb0:	425b      	neglt	r3, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	dd3c      	ble.n	8002f30 <TP_Adjust+0x7e8>
					{
						cnt=0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 				    	TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);	//Clear point 4
 8002ebc:	4b34      	ldr	r3, [pc, #208]	@ (8002f90 <TP_Adjust+0x848>)
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	3b14      	subs	r3, #20
 8002ec2:	b298      	uxth	r0, r3
 8002ec4:	4b32      	ldr	r3, [pc, #200]	@ (8002f90 <TP_Adjust+0x848>)
 8002ec6:	885b      	ldrh	r3, [r3, #2]
 8002ec8:	3b14      	subs	r3, #20
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f7ff fa85 	bl	80023e0 <TP_Drow_Touch_Point>
   	 					TP_Drow_Touch_Point(20,20,RED);								//Paint point 1
 8002ed6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002eda:	2114      	movs	r1, #20
 8002edc:	2014      	movs	r0, #20
 8002ede:	f7ff fa7f 	bl	80023e0 <TP_Drow_Touch_Point>
						LCD_ShowString(40,26, 16,"TP Need readjust!",1);
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f9c <TP_Adjust+0x854>)
 8002ee8:	2210      	movs	r2, #16
 8002eea:	211a      	movs	r1, #26
 8002eec:	2028      	movs	r0, #40	@ 0x28
 8002eee:	f7ff f809 	bl	8001f04 <LCD_ShowString>
						tp_dev.touchtype=!tp_dev.touchtype;	//Modify the touch screen type.
 8002ef2:	4b29      	ldr	r3, [pc, #164]	@ (8002f98 <TP_Adjust+0x850>)
 8002ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	4b24      	ldr	r3, [pc, #144]	@ (8002f98 <TP_Adjust+0x850>)
 8002f06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
						if(tp_dev.touchtype)	//The X and y directions are opposite to the screen
 8002f0a:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <TP_Adjust+0x850>)
 8002f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d006      	beq.n	8002f22 <TP_Adjust+0x7da>
						{
							CMD_RDX=0X90;
 8002f14:	4b22      	ldr	r3, [pc, #136]	@ (8002fa0 <TP_Adjust+0x858>)
 8002f16:	2290      	movs	r2, #144	@ 0x90
 8002f18:	701a      	strb	r2, [r3, #0]
							CMD_RDY=0XD0;	 
 8002f1a:	4b22      	ldr	r3, [pc, #136]	@ (8002fa4 <TP_Adjust+0x85c>)
 8002f1c:	22d0      	movs	r2, #208	@ 0xd0
 8002f1e:	701a      	strb	r2, [r3, #0]
						}else				   //The X and y directions are the same as the screen
						{
							CMD_RDX=0XD0;
							CMD_RDY=0X90;	 
						}			    
						continue;
 8002f20:	e02e      	b.n	8002f80 <TP_Adjust+0x838>
							CMD_RDX=0XD0;
 8002f22:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa0 <TP_Adjust+0x858>)
 8002f24:	22d0      	movs	r2, #208	@ 0xd0
 8002f26:	701a      	strb	r2, [r3, #0]
							CMD_RDY=0X90;	 
 8002f28:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <TP_Adjust+0x85c>)
 8002f2a:	2290      	movs	r2, #144	@ 0x90
 8002f2c:	701a      	strb	r2, [r3, #0]
						continue;
 8002f2e:	e027      	b.n	8002f80 <TP_Adjust+0x838>
					}		
					POINT_COLOR=BLUE;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <TP_Adjust+0x860>)
 8002f32:	221f      	movs	r2, #31
 8002f34:	801a      	strh	r2, [r3, #0]
					LCD_Clear(WHITE);	//clear screen
 8002f36:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002f3a:	f7fd fe67 	bl	8000c0c <LCD_Clear>
					LCD_ShowString(35,110, 16,"Touch Screen Adjust OK!",1);	//Calibration completed
 8002f3e:	2301      	movs	r3, #1
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <TP_Adjust+0x864>)
 8002f44:	2210      	movs	r2, #16
 8002f46:	216e      	movs	r1, #110	@ 0x6e
 8002f48:	2023      	movs	r0, #35	@ 0x23
 8002f4a:	f7fe ffdb 	bl	8001f04 <LCD_ShowString>
					delay_ms(1000);
 8002f4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f52:	f000 f8a3 	bl	800309c <delay_ms>
					TP_Save_Adjdata();  
 8002f56:	f7ff fb29 	bl	80025ac <TP_Save_Adjdata>
 					LCD_Clear(WHITE);	//clear screen
 8002f5a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002f5e:	f7fd fe55 	bl	8000c0c <LCD_Clear>
 8002f62:	e00e      	b.n	8002f82 <TP_Adjust+0x83a>
					return;	//Calibration completed
			}
		}
		delay_ms(10);
 8002f64:	200a      	movs	r0, #10
 8002f66:	f000 f899 	bl	800309c <delay_ms>
		outtime++;
 8002f6a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		if(outtime>1000)
 8002f70:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002f72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f76:	f67f ac3e 	bls.w	80027f6 <TP_Adjust+0xae>
		{
			TP_Get_Adjdata();
 8002f7a:	f7ff fb1e 	bl	80025ba <TP_Get_Adjdata>
			break;
 8002f7e:	e000      	b.n	8002f82 <TP_Adjust+0x83a>
		tp_dev.scan(1);	//Scan physical coordinates
 8002f80:	e439      	b.n	80027f6 <TP_Adjust+0xae>
	 	} 
 	}
}		
 8002f82:	3734      	adds	r7, #52	@ 0x34
 8002f84:	46bd      	mov	sp, r7
 8002f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f8a:	bf00      	nop
 8002f8c:	f3af 8000 	nop.w
 8002f90:	200000bc 	.word	0x200000bc
 8002f94:	40590000 	.word	0x40590000
 8002f98:	20000004 	.word	0x20000004
 8002f9c:	08006ec0 	.word	0x08006ec0
 8002fa0:	2000002c 	.word	0x2000002c
 8002fa4:	2000002d 	.word	0x2000002d
 8002fa8:	200000cc 	.word	0x200000cc
 8002fac:	08006ed4 	.word	0x08006ed4
 8002fb0:	66666666 	.word	0x66666666
 8002fb4:	3fee6666 	.word	0x3fee6666
 8002fb8:	cccccccd 	.word	0xcccccccd
 8002fbc:	3ff0cccc 	.word	0x3ff0cccc

08002fc0 <TP_Init>:
 * @parameters :None
 * @retvalue   :0-no calibration
								1-Has been calibrated
******************************************************************************/  
u8 TP_Init(void)
{			    		   
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
		GPIO_Initure.Pin=GPIO_PIN_10|GPIO_PIN_11;           
		GPIO_Initure.Mode=GPIO_MODE_INPUT;      //input
		HAL_GPIO_Init(GPIOH,&GPIO_Initure);     //initialization
 */
		    		     
  	TP_Read_XY(&tp_dev.x,&tp_dev.y);	//First read initialization
 8002fc4:	490b      	ldr	r1, [pc, #44]	@ (8002ff4 <TP_Init+0x34>)
 8002fc6:	480c      	ldr	r0, [pc, #48]	@ (8002ff8 <TP_Init+0x38>)
 8002fc8:	f7ff f986 	bl	80022d8 <TP_Read_XY>
 	//AT24CXX_Init();	//initialize24cxx
	if(TP_Get_Adjdata())return 0;	//Already calibrated
 8002fcc:	f7ff faf5 	bl	80025ba <TP_Get_Adjdata>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <TP_Init+0x1a>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e00a      	b.n	8002ff0 <TP_Init+0x30>
	else			   //Not calibrated?
	{ 										    
		LCD_Clear(WHITE);	//clear screen
 8002fda:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002fde:	f7fd fe15 	bl	8000c0c <LCD_Clear>
	    TP_Adjust();   		//Screen calibration
 8002fe2:	f7ff fbb1 	bl	8002748 <TP_Adjust>
		TP_Save_Adjdata();	 
 8002fe6:	f7ff fae1 	bl	80025ac <TP_Save_Adjdata>
	}			
	TP_Get_Adjdata();	
 8002fea:	f7ff fae6 	bl	80025ba <TP_Get_Adjdata>
	return 1; 									 
 8002fee:	2301      	movs	r3, #1
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000016 	.word	0x20000016
 8002ff8:	20000014 	.word	0x20000014

08002ffc <delay_init>:
// Initialize delay function
// When using uC/OS, this function initializes the uC/OS clock tick.
// The SYSTICK clock is fixed to the AHB clock.
// SYSCLK: System clock frequency
void delay_init(u8 SYSCLK)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS                         // If OS support is needed
    u32 reload;
#endif
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); // SysTick frequency is HCLK
 8003006:	2004      	movs	r0, #4
 8003008:	f001 fab8 	bl	800457c <HAL_SYSTICK_CLKSourceConfig>
    fac_us=SYSCLK;                        // fac_us is used regardless of OS usage
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	4a03      	ldr	r2, [pc, #12]	@ (800301c <delay_init+0x20>)
 8003010:	6013      	str	r3, [r2, #0]
    SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk; // Enable SysTick interrupt
    SysTick->LOAD=reload;                   // Interrupt every 1/OS_TICKS_PER_SEC second
    SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; // Enable SysTick
#else
#endif
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200000d0 	.word	0x200000d0

08003020 <delay_us>:

// Delay for nus microseconds
// nus: Number of microseconds to delay
// nus: 0~190887435 (maximum value is 2^32/fac_us when fac_us=22.5)
void delay_us(u32 nus)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	@ 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told,tnow,tcnt=0;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
    u32 reload=SysTick->LOAD;                // Value of LOAD
 800302c:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <delay_us+0x74>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	617b      	str	r3, [r7, #20]
    ticks=nus*fac_us;                        // Number of ticks needed
 8003032:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <delay_us+0x78>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	613b      	str	r3, [r7, #16]
    told=SysTick->VAL;                        // Counter value upon entry
 800303e:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <delay_us+0x74>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	61fb      	str	r3, [r7, #28]
    while(1)
    {
        tnow=SysTick->VAL;
 8003044:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <delay_us+0x74>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	60fb      	str	r3, [r7, #12]
        if(tnow!=told)
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	429a      	cmp	r2, r3
 8003050:	d0f8      	beq.n	8003044 <delay_us+0x24>
        {
            if(tnow<told)tcnt+=told-tnow;    // Note that SYSTICK is a decrementing counter.
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	429a      	cmp	r2, r3
 8003058:	d206      	bcs.n	8003068 <delay_us+0x48>
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4413      	add	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	e007      	b.n	8003078 <delay_us+0x58>
            else tcnt+=reload-tnow+told;
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1ad2      	subs	r2, r2, r3
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4413      	add	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
            told=tnow;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	61fb      	str	r3, [r7, #28]
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	429a      	cmp	r2, r3
 8003082:	d200      	bcs.n	8003086 <delay_us+0x66>
        tnow=SysTick->VAL;
 8003084:	e7de      	b.n	8003044 <delay_us+0x24>
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 8003086:	bf00      	nop
        }
    };
}
 8003088:	bf00      	nop
 800308a:	3724      	adds	r7, #36	@ 0x24
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000e010 	.word	0xe000e010
 8003098:	200000d0 	.word	0x200000d0

0800309c <delay_ms>:

// Delay for nms milliseconds
// nms: Number of milliseconds to delay
void delay_ms(u16 nms)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
    u32 i;
    for(i=0;i<nms;i++) delay_us(1000);
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	e006      	b.n	80030ba <delay_ms+0x1e>
 80030ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030b0:	f7ff ffb6 	bl	8003020 <delay_us>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3301      	adds	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3f4      	bcc.n	80030ac <delay_ms+0x10>
}
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <DrawDino>:
	LCD_Fill(15,209 - altitude - left_leg,20,211 - altitude - left_leg,WHITE);		// clear foot bottom

}*/

void DrawDino(uint16_t altitude,uint8_t left_leg, uint8_t right_leg)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
 80030d6:	460b      	mov	r3, r1
 80030d8:	717b      	strb	r3, [r7, #5]
 80030da:	4613      	mov	r3, r2
 80030dc:	713b      	strb	r3, [r7, #4]


	// ----------- HEAD -----------
	LCD_Fill(27,160 - altitude,42,170 - altitude,GRAY);      // head
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80030e4:	b299      	uxth	r1, r3
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	f1c3 03aa 	rsb	r3, r3, #170	@ 0xaa
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80030f2:	9200      	str	r2, [sp, #0]
 80030f4:	222a      	movs	r2, #42	@ 0x2a
 80030f6:	201b      	movs	r0, #27
 80030f8:	f7fe fc54 	bl	80019a4 <LCD_Fill>
	LCD_Fill(25,162 - altitude,45,172 - altitude,GRAY);
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	f1c3 03a2 	rsb	r3, r3, #162	@ 0xa2
 8003102:	b299      	uxth	r1, r3
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 800310a:	b29b      	uxth	r3, r3
 800310c:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8003110:	9200      	str	r2, [sp, #0]
 8003112:	222d      	movs	r2, #45	@ 0x2d
 8003114:	2019      	movs	r0, #25
 8003116:	f7fe fc45 	bl	80019a4 <LCD_Fill>

	LCD_Fill(25,159 - altitude,26,161 - altitude,WHITE);		// clear head top 1
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	f1c3 039f 	rsb	r3, r3, #159	@ 0x9f
 8003120:	b299      	uxth	r1, r3
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 8003128:	b29b      	uxth	r3, r3
 800312a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800312e:	9200      	str	r2, [sp, #0]
 8003130:	221a      	movs	r2, #26
 8003132:	2019      	movs	r0, #25
 8003134:	f7fe fc36 	bl	80019a4 <LCD_Fill>
	LCD_Fill(27,157 - altitude,42,159 - altitude,WHITE);		// clear head top 2
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	f1c3 039d 	rsb	r3, r3, #157	@ 0x9d
 800313e:	b299      	uxth	r1, r3
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	f1c3 039f 	rsb	r3, r3, #159	@ 0x9f
 8003146:	b29b      	uxth	r3, r3
 8003148:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800314c:	9200      	str	r2, [sp, #0]
 800314e:	222a      	movs	r2, #42	@ 0x2a
 8003150:	201b      	movs	r0, #27
 8003152:	f7fe fc27 	bl	80019a4 <LCD_Fill>
	LCD_Fill(43,159 - altitude,45,161 - altitude,WHITE);		// clear head top 3
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	f1c3 039f 	rsb	r3, r3, #159	@ 0x9f
 800315c:	b299      	uxth	r1, r3
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 8003164:	b29b      	uxth	r3, r3
 8003166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800316a:	9200      	str	r2, [sp, #0]
 800316c:	222d      	movs	r2, #45	@ 0x2d
 800316e:	202b      	movs	r0, #43	@ 0x2b
 8003170:	f7fe fc18 	bl	80019a4 <LCD_Fill>

	LCD_Fill(37,173 - altitude,45,175 - altitude,WHITE);		// clear head bottom
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 800317a:	b299      	uxth	r1, r3
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 8003182:	b29b      	uxth	r3, r3
 8003184:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003188:	9200      	str	r2, [sp, #0]
 800318a:	222d      	movs	r2, #45	@ 0x2d
 800318c:	2025      	movs	r0, #37	@ 0x25
 800318e:	f7fe fc09 	bl	80019a4 <LCD_Fill>


	// ----------- EYE -----------
	LCD_Fill(30,163 - altitude,32,166 - altitude,WHITE);     // eye
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	f1c3 03a3 	rsb	r3, r3, #163	@ 0xa3
 8003198:	b299      	uxth	r1, r3
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	f1c3 03a6 	rsb	r3, r3, #166	@ 0xa6
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031a6:	9200      	str	r2, [sp, #0]
 80031a8:	2220      	movs	r2, #32
 80031aa:	201e      	movs	r0, #30
 80031ac:	f7fe fbfa 	bl	80019a4 <LCD_Fill>


	// ----------- MOUTH -----------
	LCD_Fill(25,172 - altitude,36,175 - altitude,GRAY);      // mouth
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 80031b6:	b299      	uxth	r1, r3
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80031c4:	9200      	str	r2, [sp, #0]
 80031c6:	2224      	movs	r2, #36	@ 0x24
 80031c8:	2019      	movs	r0, #25
 80031ca:	f7fe fbeb 	bl	80019a4 <LCD_Fill>
	LCD_Fill(25,175 - altitude,41,176 - altitude,GRAY);      // mouth (tongue)
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 80031d4:	b299      	uxth	r1, r3
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80031e2:	9200      	str	r2, [sp, #0]
 80031e4:	2229      	movs	r2, #41	@ 0x29
 80031e6:	2019      	movs	r0, #25
 80031e8:	f7fe fbdc 	bl	80019a4 <LCD_Fill>

	LCD_Fill(36,177 - altitude,41,180 - altitude,WHITE);      // clear mouth (tongue)
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 80031f2:	b299      	uxth	r1, r3
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003200:	9200      	str	r2, [sp, #0]
 8003202:	2229      	movs	r2, #41	@ 0x29
 8003204:	2024      	movs	r0, #36	@ 0x24
 8003206:	f7fe fbcd 	bl	80019a4 <LCD_Fill>


	// ----------- NECK & CHEST -----------
	LCD_Fill(25,176 - altitude,35,177 - altitude,GRAY);     // neck
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8003210:	b299      	uxth	r1, r3
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8003218:	b29b      	uxth	r3, r3
 800321a:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800321e:	9200      	str	r2, [sp, #0]
 8003220:	2223      	movs	r2, #35	@ 0x23
 8003222:	2019      	movs	r0, #25
 8003224:	f7fe fbbe 	bl	80019a4 <LCD_Fill>
	LCD_Fill(23,177 - altitude,35,192 - altitude,GRAY);     // neck & chest
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 800322e:	b299      	uxth	r1, r3
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 8003236:	b29b      	uxth	r3, r3
 8003238:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800323c:	9200      	str	r2, [sp, #0]
 800323e:	2223      	movs	r2, #35	@ 0x23
 8003240:	2017      	movs	r0, #23
 8003242:	f7fe fbaf 	bl	80019a4 <LCD_Fill>

	LCD_Fill(23,174 - altitude,24,176 - altitude,WHITE);     // clear neck & chest top
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 800324c:	b299      	uxth	r1, r3
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8003254:	b29b      	uxth	r3, r3
 8003256:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800325a:	9200      	str	r2, [sp, #0]
 800325c:	2218      	movs	r2, #24
 800325e:	2017      	movs	r0, #23
 8003260:	f7fe fba0 	bl	80019a4 <LCD_Fill>
	LCD_Fill(33,193 - altitude,35,195 - altitude,WHITE);    // clear neck & chest bottom
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	f1c3 03c1 	rsb	r3, r3, #193	@ 0xc1
 800326a:	b299      	uxth	r1, r3
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 8003272:	b29b      	uxth	r3, r3
 8003274:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003278:	9200      	str	r2, [sp, #0]
 800327a:	2223      	movs	r2, #35	@ 0x23
 800327c:	2021      	movs	r0, #33	@ 0x21
 800327e:	f7fe fb91 	bl	80019a4 <LCD_Fill>


	// ----------- ARM -----------
	LCD_Fill(35,181 - altitude,39,183 - altitude,GRAY);      // arm1
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 8003288:	b299      	uxth	r1, r3
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	f1c3 03b7 	rsb	r3, r3, #183	@ 0xb7
 8003290:	b29b      	uxth	r3, r3
 8003292:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8003296:	9200      	str	r2, [sp, #0]
 8003298:	2227      	movs	r2, #39	@ 0x27
 800329a:	2023      	movs	r0, #35	@ 0x23
 800329c:	f7fe fb82 	bl	80019a4 <LCD_Fill>
	LCD_Fill(37,181 - altitude,39,185 - altitude,GRAY);		 // arm2
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 80032a6:	b299      	uxth	r1, r3
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	f1c3 03b9 	rsb	r3, r3, #185	@ 0xb9
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80032b4:	9200      	str	r2, [sp, #0]
 80032b6:	2227      	movs	r2, #39	@ 0x27
 80032b8:	2025      	movs	r0, #37	@ 0x25
 80032ba:	f7fe fb73 	bl	80019a4 <LCD_Fill>

	LCD_Fill(35,184 - altitude,36,186 - altitude,WHITE);      // clear arm1 bottom
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	f1c3 03b8 	rsb	r3, r3, #184	@ 0xb8
 80032c4:	b299      	uxth	r1, r3
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	f1c3 03ba 	rsb	r3, r3, #186	@ 0xba
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032d2:	9200      	str	r2, [sp, #0]
 80032d4:	2224      	movs	r2, #36	@ 0x24
 80032d6:	2023      	movs	r0, #35	@ 0x23
 80032d8:	f7fe fb64 	bl	80019a4 <LCD_Fill>
	LCD_Fill(37,186 - altitude,39,188 - altitude,WHITE);      // clear arm2 bottom
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	f1c3 03ba 	rsb	r3, r3, #186	@ 0xba
 80032e2:	b299      	uxth	r1, r3
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	f1c3 03bc 	rsb	r3, r3, #188	@ 0xbc
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032f0:	9200      	str	r2, [sp, #0]
 80032f2:	2227      	movs	r2, #39	@ 0x27
 80032f4:	2025      	movs	r0, #37	@ 0x25
 80032f6:	f7fe fb55 	bl	80019a4 <LCD_Fill>


	// ----------- BODY -----------
	LCD_Fill(20,180 - altitude,32,195 - altitude,GRAY);     // body1
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8003300:	b299      	uxth	r1, r3
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 8003308:	b29b      	uxth	r3, r3
 800330a:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800330e:	9200      	str	r2, [sp, #0]
 8003310:	2220      	movs	r2, #32
 8003312:	2014      	movs	r0, #20
 8003314:	f7fe fb46 	bl	80019a4 <LCD_Fill>
	LCD_Fill(17,182 - altitude,30,197 - altitude,GRAY);     // body2
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 800331e:	b299      	uxth	r1, r3
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8003326:	b29b      	uxth	r3, r3
 8003328:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800332c:	9200      	str	r2, [sp, #0]
 800332e:	221e      	movs	r2, #30
 8003330:	2011      	movs	r0, #17
 8003332:	f7fe fb37 	bl	80019a4 <LCD_Fill>
	LCD_Fill(12,185 - altitude,27,197 - altitude,GRAY);     // body3
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	f1c3 03b9 	rsb	r3, r3, #185	@ 0xb9
 800333c:	b299      	uxth	r1, r3
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8003344:	b29b      	uxth	r3, r3
 8003346:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800334a:	9200      	str	r2, [sp, #0]
 800334c:	221b      	movs	r2, #27
 800334e:	200c      	movs	r0, #12
 8003350:	f7fe fb28 	bl	80019a4 <LCD_Fill>

	LCD_Fill(20,177 - altitude,22,179 - altitude,WHITE);    // clear body1 top
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 800335a:	b299      	uxth	r1, r3
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 8003362:	b29b      	uxth	r3, r3
 8003364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003368:	9200      	str	r2, [sp, #0]
 800336a:	2216      	movs	r2, #22
 800336c:	2014      	movs	r0, #20
 800336e:	f7fe fb19 	bl	80019a4 <LCD_Fill>
	LCD_Fill(17,179 - altitude,19,181 - altitude,WHITE);    // clear body2 top
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 8003378:	b299      	uxth	r1, r3
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 8003380:	b29b      	uxth	r3, r3
 8003382:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003386:	9200      	str	r2, [sp, #0]
 8003388:	2213      	movs	r2, #19
 800338a:	2011      	movs	r0, #17
 800338c:	f7fe fb0a 	bl	80019a4 <LCD_Fill>
	LCD_Fill(13,182 - altitude,16,184 - altitude,WHITE);    // clear body3 top (tail part)
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 8003396:	b299      	uxth	r1, r3
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	f1c3 03b8 	rsb	r3, r3, #184	@ 0xb8
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033a4:	9200      	str	r2, [sp, #0]
 80033a6:	2210      	movs	r2, #16
 80033a8:	200d      	movs	r0, #13
 80033aa:	f7fe fafb 	bl	80019a4 <LCD_Fill>

	LCD_Fill(31,196 - altitude,32,198 - altitude,WHITE);    // clear body1 bottom
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 80033b4:	b299      	uxth	r1, r3
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	f1c3 03c6 	rsb	r3, r3, #198	@ 0xc6
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033c2:	9200      	str	r2, [sp, #0]
 80033c4:	2220      	movs	r2, #32
 80033c6:	201f      	movs	r0, #31
 80033c8:	f7fe faec 	bl	80019a4 <LCD_Fill>
	LCD_Fill(28,198 - altitude,30,200 - altitude,WHITE);    // clear body2 bottom
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	f1c3 03c6 	rsb	r3, r3, #198	@ 0xc6
 80033d2:	b299      	uxth	r1, r3
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033e0:	9200      	str	r2, [sp, #0]
 80033e2:	221e      	movs	r2, #30
 80033e4:	201c      	movs	r0, #28
 80033e6:	f7fe fadd 	bl	80019a4 <LCD_Fill>
	LCD_Fill(12,197 - altitude,14,199 - altitude,WHITE);    // clear body3 leg break 1 bottom
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 80033f0:	b299      	uxth	r1, r3
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	f1c3 03c7 	rsb	r3, r3, #199	@ 0xc7
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033fe:	9200      	str	r2, [sp, #0]
 8003400:	220e      	movs	r2, #14
 8003402:	200c      	movs	r0, #12
 8003404:	f7fe face 	bl	80019a4 <LCD_Fill>
	LCD_Fill(20,197 - altitude,22,201 - altitude,WHITE);    // clear body3 leg break 2 bottom
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 800340e:	b299      	uxth	r1, r3
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	f1c3 03c9 	rsb	r3, r3, #201	@ 0xc9
 8003416:	b29b      	uxth	r3, r3
 8003418:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800341c:	9200      	str	r2, [sp, #0]
 800341e:	2216      	movs	r2, #22
 8003420:	2014      	movs	r0, #20
 8003422:	f7fe fabf 	bl	80019a4 <LCD_Fill>


	// ----------- TAIL -----------
	LCD_Fill(10,182 - altitude,12,195 - altitude,GRAY);     // tail1
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 800342c:	b299      	uxth	r1, r3
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 8003434:	b29b      	uxth	r3, r3
 8003436:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800343a:	9200      	str	r2, [sp, #0]
 800343c:	220c      	movs	r2, #12
 800343e:	200a      	movs	r0, #10
 8003440:	f7fe fab0 	bl	80019a4 <LCD_Fill>
	LCD_Fill(8,180 - altitude,10,192 - altitude,GRAY);		// tail2
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 800344a:	b299      	uxth	r1, r3
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 8003452:	b29b      	uxth	r3, r3
 8003454:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8003458:	9200      	str	r2, [sp, #0]
 800345a:	220a      	movs	r2, #10
 800345c:	2008      	movs	r0, #8
 800345e:	f7fe faa1 	bl	80019a4 <LCD_Fill>
	LCD_Fill(7,175 - altitude,8,188 - altitude,GRAY);		// tail3
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 8003468:	b299      	uxth	r1, r3
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	f1c3 03bc 	rsb	r3, r3, #188	@ 0xbc
 8003470:	b29b      	uxth	r3, r3
 8003472:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8003476:	9200      	str	r2, [sp, #0]
 8003478:	2208      	movs	r2, #8
 800347a:	2007      	movs	r0, #7
 800347c:	f7fe fa92 	bl	80019a4 <LCD_Fill>

	LCD_Fill(10,179 - altitude,12,181 - altitude,WHITE);	// clear tail1 top
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 8003486:	b299      	uxth	r1, r3
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 800348e:	b29b      	uxth	r3, r3
 8003490:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003494:	9200      	str	r2, [sp, #0]
 8003496:	220c      	movs	r2, #12
 8003498:	200a      	movs	r0, #10
 800349a:	f7fe fa83 	bl	80019a4 <LCD_Fill>
	LCD_Fill(9,177 - altitude,10,179 - altitude,WHITE);		// clear tail2 top
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 80034a4:	b299      	uxth	r1, r3
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034b2:	9200      	str	r2, [sp, #0]
 80034b4:	220a      	movs	r2, #10
 80034b6:	2009      	movs	r0, #9
 80034b8:	f7fe fa74 	bl	80019a4 <LCD_Fill>
	LCD_Fill(7,172 - altitude,8,174 - altitude,WHITE);		// clear tail3 top
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 80034c2:	b299      	uxth	r1, r3
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034d0:	9200      	str	r2, [sp, #0]
 80034d2:	2208      	movs	r2, #8
 80034d4:	2007      	movs	r0, #7
 80034d6:	f7fe fa65 	bl	80019a4 <LCD_Fill>

	LCD_Fill(10,196 - altitude,12,198 - altitude,WHITE);	// clear tail1 bottom
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 80034e0:	b299      	uxth	r1, r3
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f1c3 03c6 	rsb	r3, r3, #198	@ 0xc6
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034ee:	9200      	str	r2, [sp, #0]
 80034f0:	220c      	movs	r2, #12
 80034f2:	200a      	movs	r0, #10
 80034f4:	f7fe fa56 	bl	80019a4 <LCD_Fill>
	LCD_Fill(8,193 - altitude,9,195 - altitude,WHITE);		// clear tail2 bottom
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	f1c3 03c1 	rsb	r3, r3, #193	@ 0xc1
 80034fe:	b299      	uxth	r1, r3
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 8003506:	b29b      	uxth	r3, r3
 8003508:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800350c:	9200      	str	r2, [sp, #0]
 800350e:	2209      	movs	r2, #9
 8003510:	2008      	movs	r0, #8
 8003512:	f7fe fa47 	bl	80019a4 <LCD_Fill>
	LCD_Fill(6,189 - altitude,7,191 - altitude,WHITE);		// clear tail3 bottom
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	f1c3 03bd 	rsb	r3, r3, #189	@ 0xbd
 800351c:	b299      	uxth	r1, r3
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	f1c3 03bf 	rsb	r3, r3, #191	@ 0xbf
 8003524:	b29b      	uxth	r3, r3
 8003526:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800352a:	9200      	str	r2, [sp, #0]
 800352c:	2207      	movs	r2, #7
 800352e:	2006      	movs	r0, #6
 8003530:	f7fe fa38 	bl	80019a4 <LCD_Fill>


	// ----------- RIGHT LEG -----------
	LCD_Fill(23,197 - altitude,27,200 - altitude,GRAY);      						// right leg
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 800353a:	b299      	uxth	r1, r3
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8003542:	b29b      	uxth	r3, r3
 8003544:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8003548:	9200      	str	r2, [sp, #0]
 800354a:	221b      	movs	r2, #27
 800354c:	2017      	movs	r0, #23
 800354e:	f7fe fa29 	bl	80019a4 <LCD_Fill>
	LCD_Fill(25,200 - altitude - right_leg,27,207 - altitude - right_leg,GRAY);		// leg animation
 8003552:	793b      	ldrb	r3, [r7, #4]
 8003554:	b29a      	uxth	r2, r3
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	4413      	add	r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8003560:	b299      	uxth	r1, r3
 8003562:	793b      	ldrb	r3, [r7, #4]
 8003564:	b29a      	uxth	r2, r3
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	4413      	add	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 8003570:	b29b      	uxth	r3, r3
 8003572:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8003576:	9200      	str	r2, [sp, #0]
 8003578:	221b      	movs	r2, #27
 800357a:	2019      	movs	r0, #25
 800357c:	f7fe fa12 	bl	80019a4 <LCD_Fill>
	LCD_Fill(27,205 - altitude - right_leg,30,207 - altitude - right_leg,GRAY);
 8003580:	793b      	ldrb	r3, [r7, #4]
 8003582:	b29a      	uxth	r2, r3
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	4413      	add	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	f1c3 03cd 	rsb	r3, r3, #205	@ 0xcd
 800358e:	b299      	uxth	r1, r3
 8003590:	793b      	ldrb	r3, [r7, #4]
 8003592:	b29a      	uxth	r2, r3
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	4413      	add	r3, r2
 8003598:	b29b      	uxth	r3, r3
 800359a:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80035a4:	9200      	str	r2, [sp, #0]
 80035a6:	221e      	movs	r2, #30
 80035a8:	201b      	movs	r0, #27
 80035aa:	f7fe f9fb 	bl	80019a4 <LCD_Fill>

	LCD_Fill(23,202 - altitude - right_leg,24,204 - altitude - right_leg,WHITE);	// clear thigh
 80035ae:	793b      	ldrb	r3, [r7, #4]
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	4413      	add	r3, r2
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 80035bc:	b299      	uxth	r1, r3
 80035be:	793b      	ldrb	r3, [r7, #4]
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	4413      	add	r3, r2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035d2:	9200      	str	r2, [sp, #0]
 80035d4:	2218      	movs	r2, #24
 80035d6:	2017      	movs	r0, #23
 80035d8:	f7fe f9e4 	bl	80019a4 <LCD_Fill>
	LCD_Fill(28,202 - altitude - right_leg,30,204 - altitude - right_leg,WHITE);	// clear foot top
 80035dc:	793b      	ldrb	r3, [r7, #4]
 80035de:	b29a      	uxth	r2, r3
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	4413      	add	r3, r2
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 80035ea:	b299      	uxth	r1, r3
 80035ec:	793b      	ldrb	r3, [r7, #4]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	4413      	add	r3, r2
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003600:	9200      	str	r2, [sp, #0]
 8003602:	221e      	movs	r2, #30
 8003604:	201c      	movs	r0, #28
 8003606:	f7fe f9cd 	bl	80019a4 <LCD_Fill>
	LCD_Fill(23,209 - altitude - right_leg,30,211 - altitude - right_leg,WHITE);	// clear foot bottom
 800360a:	793b      	ldrb	r3, [r7, #4]
 800360c:	b29a      	uxth	r2, r3
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	4413      	add	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	f1c3 03d1 	rsb	r3, r3, #209	@ 0xd1
 8003618:	b299      	uxth	r1, r3
 800361a:	793b      	ldrb	r3, [r7, #4]
 800361c:	b29a      	uxth	r2, r3
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	4413      	add	r3, r2
 8003622:	b29b      	uxth	r3, r3
 8003624:	f1c3 03d3 	rsb	r3, r3, #211	@ 0xd3
 8003628:	b29b      	uxth	r3, r3
 800362a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800362e:	9200      	str	r2, [sp, #0]
 8003630:	221e      	movs	r2, #30
 8003632:	2017      	movs	r0, #23
 8003634:	f7fe f9b6 	bl	80019a4 <LCD_Fill>


	// ----------- LEFT LEG -----------
	LCD_Fill(15,197 - altitude,19,200 - altitude,GRAY);      						// left leg
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 800363e:	b299      	uxth	r1, r3
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8003646:	b29b      	uxth	r3, r3
 8003648:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800364c:	9200      	str	r2, [sp, #0]
 800364e:	2213      	movs	r2, #19
 8003650:	200f      	movs	r0, #15
 8003652:	f7fe f9a7 	bl	80019a4 <LCD_Fill>
	LCD_Fill(15,200 - altitude - left_leg,17,207 - altitude - left_leg,GRAY);		// leg animation
 8003656:	797b      	ldrb	r3, [r7, #5]
 8003658:	b29a      	uxth	r2, r3
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	4413      	add	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8003664:	b299      	uxth	r1, r3
 8003666:	797b      	ldrb	r3, [r7, #5]
 8003668:	b29a      	uxth	r2, r3
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	4413      	add	r3, r2
 800366e:	b29b      	uxth	r3, r3
 8003670:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 8003674:	b29b      	uxth	r3, r3
 8003676:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800367a:	9200      	str	r2, [sp, #0]
 800367c:	2211      	movs	r2, #17
 800367e:	200f      	movs	r0, #15
 8003680:	f7fe f990 	bl	80019a4 <LCD_Fill>
	LCD_Fill(17,205 - altitude - left_leg,20,207 - altitude - left_leg,GRAY);
 8003684:	797b      	ldrb	r3, [r7, #5]
 8003686:	b29a      	uxth	r2, r3
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	4413      	add	r3, r2
 800368c:	b29b      	uxth	r3, r3
 800368e:	f1c3 03cd 	rsb	r3, r3, #205	@ 0xcd
 8003692:	b299      	uxth	r1, r3
 8003694:	797b      	ldrb	r3, [r7, #5]
 8003696:	b29a      	uxth	r2, r3
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	4413      	add	r3, r2
 800369c:	b29b      	uxth	r3, r3
 800369e:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80036a8:	9200      	str	r2, [sp, #0]
 80036aa:	2214      	movs	r2, #20
 80036ac:	2011      	movs	r0, #17
 80036ae:	f7fe f979 	bl	80019a4 <LCD_Fill>

	LCD_Fill(18,202 - altitude - left_leg,20,204 - altitude - left_leg,WHITE);		// clear foot top with thigh
 80036b2:	797b      	ldrb	r3, [r7, #5]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	4413      	add	r3, r2
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 80036c0:	b299      	uxth	r1, r3
 80036c2:	797b      	ldrb	r3, [r7, #5]
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4413      	add	r3, r2
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036d6:	9200      	str	r2, [sp, #0]
 80036d8:	2214      	movs	r2, #20
 80036da:	2012      	movs	r0, #18
 80036dc:	f7fe f962 	bl	80019a4 <LCD_Fill>
	LCD_Fill(15,209 - altitude - left_leg,20,211 - altitude - left_leg,WHITE);		// clear foot bottom
 80036e0:	797b      	ldrb	r3, [r7, #5]
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	4413      	add	r3, r2
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f1c3 03d1 	rsb	r3, r3, #209	@ 0xd1
 80036ee:	b299      	uxth	r1, r3
 80036f0:	797b      	ldrb	r3, [r7, #5]
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	4413      	add	r3, r2
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	f1c3 03d3 	rsb	r3, r3, #211	@ 0xd3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003704:	9200      	str	r2, [sp, #0]
 8003706:	2214      	movs	r2, #20
 8003708:	200f      	movs	r0, #15
 800370a:	f7fe f94b 	bl	80019a4 <LCD_Fill>

}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <DinoAnimation>:
uint8_t obs_drawed=0;	// obstacle drawed

int8_t velocity=0;

void DinoAnimation(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
	if((PEN==0) || (jump_step != 0))	// jumping
 800371c:	2110      	movs	r1, #16
 800371e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003722:	f001 f8d1 	bl	80048c8 <HAL_GPIO_ReadPin>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d004      	beq.n	8003736 <DinoAnimation+0x1e>
 800372c:	4b71      	ldr	r3, [pc, #452]	@ (80038f4 <DinoAnimation+0x1dc>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80b2 	beq.w	800389a <DinoAnimation+0x182>
	{
		if(refresh == 1)		{
 8003736:	4b70      	ldr	r3, [pc, #448]	@ (80038f8 <DinoAnimation+0x1e0>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b01      	cmp	r3, #1
 800373c:	f040 80d8 	bne.w	80038f0 <DinoAnimation+0x1d8>

			switch(jump_step)
 8003740:	4b6c      	ldr	r3, [pc, #432]	@ (80038f4 <DinoAnimation+0x1dc>)
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d069      	beq.n	800381c <DinoAnimation+0x104>
 8003748:	2b00      	cmp	r3, #0
 800374a:	f2c0 8083 	blt.w	8003854 <DinoAnimation+0x13c>
 800374e:	2b4b      	cmp	r3, #75	@ 0x4b
 8003750:	f300 8080 	bgt.w	8003854 <DinoAnimation+0x13c>
 8003754:	2b1e      	cmp	r3, #30
 8003756:	db7d      	blt.n	8003854 <DinoAnimation+0x13c>
 8003758:	3b1e      	subs	r3, #30
 800375a:	2b2d      	cmp	r3, #45	@ 0x2d
 800375c:	d87a      	bhi.n	8003854 <DinoAnimation+0x13c>
 800375e:	a201      	add	r2, pc, #4	@ (adr r2, 8003764 <DinoAnimation+0x4c>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	08003825 	.word	0x08003825
 8003768:	08003855 	.word	0x08003855
 800376c:	08003855 	.word	0x08003855
 8003770:	08003855 	.word	0x08003855
 8003774:	08003855 	.word	0x08003855
 8003778:	08003855 	.word	0x08003855
 800377c:	08003855 	.word	0x08003855
 8003780:	08003855 	.word	0x08003855
 8003784:	08003855 	.word	0x08003855
 8003788:	08003855 	.word	0x08003855
 800378c:	08003855 	.word	0x08003855
 8003790:	08003855 	.word	0x08003855
 8003794:	08003855 	.word	0x08003855
 8003798:	08003855 	.word	0x08003855
 800379c:	0800382d 	.word	0x0800382d
 80037a0:	08003855 	.word	0x08003855
 80037a4:	08003855 	.word	0x08003855
 80037a8:	08003855 	.word	0x08003855
 80037ac:	08003855 	.word	0x08003855
 80037b0:	08003855 	.word	0x08003855
 80037b4:	08003855 	.word	0x08003855
 80037b8:	08003835 	.word	0x08003835
 80037bc:	08003855 	.word	0x08003855
 80037c0:	08003855 	.word	0x08003855
 80037c4:	0800383d 	.word	0x0800383d
 80037c8:	08003855 	.word	0x08003855
 80037cc:	08003855 	.word	0x08003855
 80037d0:	08003855 	.word	0x08003855
 80037d4:	08003855 	.word	0x08003855
 80037d8:	08003855 	.word	0x08003855
 80037dc:	08003855 	.word	0x08003855
 80037e0:	08003845 	.word	0x08003845
 80037e4:	08003855 	.word	0x08003855
 80037e8:	08003855 	.word	0x08003855
 80037ec:	08003855 	.word	0x08003855
 80037f0:	08003855 	.word	0x08003855
 80037f4:	08003855 	.word	0x08003855
 80037f8:	08003855 	.word	0x08003855
 80037fc:	08003855 	.word	0x08003855
 8003800:	08003855 	.word	0x08003855
 8003804:	08003855 	.word	0x08003855
 8003808:	08003855 	.word	0x08003855
 800380c:	08003855 	.word	0x08003855
 8003810:	08003855 	.word	0x08003855
 8003814:	08003855 	.word	0x08003855
 8003818:	0800384d 	.word	0x0800384d
			{
			case 0:
			    velocity = 3;	//30
 800381c:	4b37      	ldr	r3, [pc, #220]	@ (80038fc <DinoAnimation+0x1e4>)
 800381e:	2203      	movs	r2, #3
 8003820:	701a      	strb	r2, [r3, #0]
			    break;
 8003822:	e018      	b.n	8003856 <DinoAnimation+0x13e>
			case 30:
			    velocity = 2;	//14
 8003824:	4b35      	ldr	r3, [pc, #212]	@ (80038fc <DinoAnimation+0x1e4>)
 8003826:	2202      	movs	r2, #2
 8003828:	701a      	strb	r2, [r3, #0]
			    break;
 800382a:	e014      	b.n	8003856 <DinoAnimation+0x13e>
			case 44:
			    velocity = 1;	//7
 800382c:	4b33      	ldr	r3, [pc, #204]	@ (80038fc <DinoAnimation+0x1e4>)
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
			    break;
 8003832:	e010      	b.n	8003856 <DinoAnimation+0x13e>
			case 51:
			    velocity = 0;	//3
 8003834:	4b31      	ldr	r3, [pc, #196]	@ (80038fc <DinoAnimation+0x1e4>)
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
			    break;
 800383a:	e00c      	b.n	8003856 <DinoAnimation+0x13e>
			case 54:
			    velocity = -1;	//7
 800383c:	4b2f      	ldr	r3, [pc, #188]	@ (80038fc <DinoAnimation+0x1e4>)
 800383e:	22ff      	movs	r2, #255	@ 0xff
 8003840:	701a      	strb	r2, [r3, #0]
			    break;
 8003842:	e008      	b.n	8003856 <DinoAnimation+0x13e>
			case 61:
			    velocity = -2;	//14
 8003844:	4b2d      	ldr	r3, [pc, #180]	@ (80038fc <DinoAnimation+0x1e4>)
 8003846:	22fe      	movs	r2, #254	@ 0xfe
 8003848:	701a      	strb	r2, [r3, #0]
			    break;
 800384a:	e004      	b.n	8003856 <DinoAnimation+0x13e>
			case 75:
			    velocity = -3;	//30
 800384c:	4b2b      	ldr	r3, [pc, #172]	@ (80038fc <DinoAnimation+0x1e4>)
 800384e:	22fd      	movs	r2, #253	@ 0xfd
 8003850:	701a      	strb	r2, [r3, #0]
			    break;
 8003852:	e000      	b.n	8003856 <DinoAnimation+0x13e>
			default:
			    break;
 8003854:	bf00      	nop
			}



			jump_step++;
 8003856:	4b27      	ldr	r3, [pc, #156]	@ (80038f4 <DinoAnimation+0x1dc>)
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	3301      	adds	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	4b25      	ldr	r3, [pc, #148]	@ (80038f4 <DinoAnimation+0x1dc>)
 8003860:	801a      	strh	r2, [r3, #0]

			if(jump_step>104)
 8003862:	4b24      	ldr	r3, [pc, #144]	@ (80038f4 <DinoAnimation+0x1dc>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	2b68      	cmp	r3, #104	@ 0x68
 8003868:	d902      	bls.n	8003870 <DinoAnimation+0x158>
			{
				jump_step = 0;
 800386a:	4b22      	ldr	r3, [pc, #136]	@ (80038f4 <DinoAnimation+0x1dc>)
 800386c:	2200      	movs	r2, #0
 800386e:	801a      	strh	r2, [r3, #0]
			}

			jump = jump + velocity;
 8003870:	4b22      	ldr	r3, [pc, #136]	@ (80038fc <DinoAnimation+0x1e4>)
 8003872:	f993 3000 	ldrsb.w	r3, [r3]
 8003876:	b29a      	uxth	r2, r3
 8003878:	4b21      	ldr	r3, [pc, #132]	@ (8003900 <DinoAnimation+0x1e8>)
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	4413      	add	r3, r2
 800387e:	b29a      	uxth	r2, r3
 8003880:	4b1f      	ldr	r3, [pc, #124]	@ (8003900 <DinoAnimation+0x1e8>)
 8003882:	801a      	strh	r2, [r3, #0]

			DrawDino(jump,0,0);
 8003884:	4b1e      	ldr	r3, [pc, #120]	@ (8003900 <DinoAnimation+0x1e8>)
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	2200      	movs	r2, #0
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fc1d 	bl	80030cc <DrawDino>
			dino_drawed = 1;
 8003892:	4b1c      	ldr	r3, [pc, #112]	@ (8003904 <DinoAnimation+0x1ec>)
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
		if(refresh == 1)		{
 8003898:	e02a      	b.n	80038f0 <DinoAnimation+0x1d8>


	}
	else	// walking with leg animation
	{
		if(refresh == 1)
 800389a:	4b17      	ldr	r3, [pc, #92]	@ (80038f8 <DinoAnimation+0x1e0>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d126      	bne.n	80038f0 <DinoAnimation+0x1d8>
		{
			leg_step++;
 80038a2:	4b19      	ldr	r3, [pc, #100]	@ (8003908 <DinoAnimation+0x1f0>)
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	3301      	adds	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <DinoAnimation+0x1f0>)
 80038ac:	801a      	strh	r2, [r3, #0]

			if(leg_step>60)		//delay between steps
 80038ae:	4b16      	ldr	r3, [pc, #88]	@ (8003908 <DinoAnimation+0x1f0>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80038b4:	d902      	bls.n	80038bc <DinoAnimation+0x1a4>
			{
				leg_step = 0;
 80038b6:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <DinoAnimation+0x1f0>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	801a      	strh	r2, [r3, #0]
			}

			if(leg_step < 30)
 80038bc:	4b12      	ldr	r3, [pc, #72]	@ (8003908 <DinoAnimation+0x1f0>)
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	2b1d      	cmp	r3, #29
 80038c2:	d808      	bhi.n	80038d6 <DinoAnimation+0x1be>
			{
				DrawDino(0,0,3);
 80038c4:	2203      	movs	r2, #3
 80038c6:	2100      	movs	r1, #0
 80038c8:	2000      	movs	r0, #0
 80038ca:	f7ff fbff 	bl	80030cc <DrawDino>
				dino_drawed = 1;
 80038ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003904 <DinoAnimation+0x1ec>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
				dino_drawed = 1;
			}

		}
	}
}
 80038d4:	e00c      	b.n	80038f0 <DinoAnimation+0x1d8>
			else if(leg_step >= 30)
 80038d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <DinoAnimation+0x1f0>)
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	2b1d      	cmp	r3, #29
 80038dc:	d908      	bls.n	80038f0 <DinoAnimation+0x1d8>
				DrawDino(0,3,0);
 80038de:	2200      	movs	r2, #0
 80038e0:	2103      	movs	r1, #3
 80038e2:	2000      	movs	r0, #0
 80038e4:	f7ff fbf2 	bl	80030cc <DrawDino>
				dino_drawed = 1;
 80038e8:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <DinoAnimation+0x1ec>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
}
 80038ee:	e7ff      	b.n	80038f0 <DinoAnimation+0x1d8>
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	200000d4 	.word	0x200000d4
 80038f8:	2000012c 	.word	0x2000012c
 80038fc:	200000dc 	.word	0x200000dc
 8003900:	200000d6 	.word	0x200000d6
 8003904:	200000da 	.word	0x200000da
 8003908:	200000d8 	.word	0x200000d8

0800390c <DrawObstacle3>:
	LCD_Fill(367 - shift,181,370 - shift,188,WHITE);
	LCD_Fill(365 - shift,189,369 - shift,190,WHITE);
}

void DrawObstacle3(uint16_t shift)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af02      	add	r7, sp, #8
 8003912:	4603      	mov	r3, r0
 8003914:	80fb      	strh	r3, [r7, #6]
	// big one
	// ----------- VERTICAL PART -----------
	LCD_Fill(357 - shift,150,361 - shift,153,GRAY);     // vertical1
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 800391c:	3301      	adds	r3, #1
 800391e:	b29b      	uxth	r3, r3
 8003920:	b218      	sxth	r0, r3
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8003928:	3301      	adds	r3, #1
 800392a:	b29b      	uxth	r3, r3
 800392c:	b21a      	sxth	r2, r3
 800392e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	2399      	movs	r3, #153	@ 0x99
 8003936:	2196      	movs	r1, #150	@ 0x96
 8003938:	f7fe f834 	bl	80019a4 <LCD_Fill>
	LCD_Fill(356 - shift,153,362 - shift,210,GRAY);
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 8003942:	b29b      	uxth	r3, r3
 8003944:	b218      	sxth	r0, r3
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 800394c:	b29b      	uxth	r3, r3
 800394e:	b21a      	sxth	r2, r3
 8003950:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	23d2      	movs	r3, #210	@ 0xd2
 8003958:	2199      	movs	r1, #153	@ 0x99
 800395a:	f7fe f823 	bl	80019a4 <LCD_Fill>

	LCD_Fill(362 - shift,150,365 - shift,152,WHITE);		// clear vertical1
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8003964:	b29b      	uxth	r3, r3
 8003966:	b218      	sxth	r0, r3
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 800396e:	3301      	adds	r3, #1
 8003970:	b29b      	uxth	r3, r3
 8003972:	b21a      	sxth	r2, r3
 8003974:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2398      	movs	r3, #152	@ 0x98
 800397c:	2196      	movs	r1, #150	@ 0x96
 800397e:	f7fe f811 	bl	80019a4 <LCD_Fill>
	LCD_Fill(363 - shift,153,366 - shift,174,WHITE);		// clear vertical1 upper
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8003988:	3301      	adds	r3, #1
 800398a:	b29b      	uxth	r3, r3
 800398c:	b218      	sxth	r0, r3
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8003994:	b29b      	uxth	r3, r3
 8003996:	b21a      	sxth	r2, r3
 8003998:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	23ae      	movs	r3, #174	@ 0xae
 80039a0:	2199      	movs	r1, #153	@ 0x99
 80039a2:	f7fd ffff 	bl	80019a4 <LCD_Fill>
	LCD_Fill(363 - shift,181,366 - shift,210,WHITE);		// clear vertical1 lower
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 80039ac:	3301      	adds	r3, #1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	b218      	sxth	r0, r3
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	b21a      	sxth	r2, r3
 80039bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	23d2      	movs	r3, #210	@ 0xd2
 80039c4:	21b5      	movs	r1, #181	@ 0xb5
 80039c6:	f7fd ffed 	bl	80019a4 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(346 - shift,175,374 - shift,180,GRAY);     // horizontal1
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b218      	sxth	r0, r3
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 80039da:	b29b      	uxth	r3, r3
 80039dc:	b21a      	sxth	r2, r3
 80039de:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	23b4      	movs	r3, #180	@ 0xb4
 80039e6:	21af      	movs	r1, #175	@ 0xaf
 80039e8:	f7fd ffdc 	bl	80019a4 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(345 - shift,160,349 - shift,162,GRAY);     // left1
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 80039f2:	3301      	adds	r3, #1
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	b218      	sxth	r0, r3
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	f5c3 73ae 	rsb	r3, r3, #348	@ 0x15c
 80039fe:	3301      	adds	r3, #1
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	b21a      	sxth	r2, r3
 8003a04:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	23a2      	movs	r3, #162	@ 0xa2
 8003a0c:	21a0      	movs	r1, #160	@ 0xa0
 8003a0e:	f7fd ffc9 	bl	80019a4 <LCD_Fill>
	LCD_Fill(344 - shift,162,350 - shift,178,GRAY);
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	b218      	sxth	r0, r3
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	b21a      	sxth	r2, r3
 8003a26:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	23b2      	movs	r3, #178	@ 0xb2
 8003a2e:	21a2      	movs	r1, #162	@ 0xa2
 8003a30:	f7fd ffb8 	bl	80019a4 <LCD_Fill>

	LCD_Fill(350 - shift,160,353 - shift,162,WHITE);     // clear left1
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	b218      	sxth	r0, r3
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	f5c3 73b0 	rsb	r3, r3, #352	@ 0x160
 8003a44:	3301      	adds	r3, #1
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	b21a      	sxth	r2, r3
 8003a4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	23a2      	movs	r3, #162	@ 0xa2
 8003a52:	21a0      	movs	r1, #160	@ 0xa0
 8003a54:	f7fd ffa6 	bl	80019a4 <LCD_Fill>
	LCD_Fill(351 - shift,162,354 - shift,174,WHITE);
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8003a5e:	3301      	adds	r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	b218      	sxth	r0, r3
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	f5c3 73b1 	rsb	r3, r3, #354	@ 0x162
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	b21a      	sxth	r2, r3
 8003a6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	23ae      	movs	r3, #174	@ 0xae
 8003a76:	21a2      	movs	r1, #162	@ 0xa2
 8003a78:	f7fd ff94 	bl	80019a4 <LCD_Fill>

	// ----------- RIGHT PART -----------
	LCD_Fill(371 - shift,165,375 - shift,167,GRAY);     // right1
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 8003a82:	3301      	adds	r3, #1
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	b218      	sxth	r0, r3
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8003a8e:	3301      	adds	r3, #1
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	b21a      	sxth	r2, r3
 8003a94:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	23a7      	movs	r3, #167	@ 0xa7
 8003a9c:	21a5      	movs	r1, #165	@ 0xa5
 8003a9e:	f7fd ff81 	bl	80019a4 <LCD_Fill>
	LCD_Fill(370 - shift,167,376 - shift,178,GRAY);
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	b218      	sxth	r0, r3
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	b21a      	sxth	r2, r3
 8003ab6:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	23b2      	movs	r3, #178	@ 0xb2
 8003abe:	21a7      	movs	r1, #167	@ 0xa7
 8003ac0:	f7fd ff70 	bl	80019a4 <LCD_Fill>

	LCD_Fill(376 - shift,165,379 - shift,167,WHITE);     // clear right1
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	b218      	sxth	r0, r3
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	b21a      	sxth	r2, r3
 8003ada:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	23a7      	movs	r3, #167	@ 0xa7
 8003ae2:	21a5      	movs	r1, #165	@ 0xa5
 8003ae4:	f7fd ff5e 	bl	80019a4 <LCD_Fill>
	LCD_Fill(377 - shift,167,380 - shift,178,WHITE);
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8003aee:	3301      	adds	r3, #1
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	b218      	sxth	r0, r3
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	b21a      	sxth	r2, r3
 8003afe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	23b2      	movs	r3, #178	@ 0xb2
 8003b06:	21a7      	movs	r1, #167	@ 0xa7
 8003b08:	f7fd ff4c 	bl	80019a4 <LCD_Fill>
	LCD_Fill(375 - shift,179,378 - shift,180,WHITE);
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8003b12:	3301      	adds	r3, #1
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	b218      	sxth	r0, r3
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	b21a      	sxth	r2, r3
 8003b22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	23b4      	movs	r3, #180	@ 0xb4
 8003b2a:	21b3      	movs	r1, #179	@ 0xb3
 8003b2c:	f7fd ff3a 	bl	80019a4 <LCD_Fill>



	// small one
	// ----------- VERTICAL PART -----------
	LCD_Fill(388 - shift,170,392 - shift,172,GRAY);     // vertical2
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	f5c3 73c2 	rsb	r3, r3, #388	@ 0x184
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	b218      	sxth	r0, r3
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	b21a      	sxth	r2, r3
 8003b44:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	23ac      	movs	r3, #172	@ 0xac
 8003b4c:	21aa      	movs	r1, #170	@ 0xaa
 8003b4e:	f7fd ff29 	bl	80019a4 <LCD_Fill>
	LCD_Fill(387 - shift,172,393 - shift,210,GRAY);
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 8003b58:	3301      	adds	r3, #1
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	b218      	sxth	r0, r3
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8003b64:	3301      	adds	r3, #1
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	b21a      	sxth	r2, r3
 8003b6a:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	23d2      	movs	r3, #210	@ 0xd2
 8003b72:	21ac      	movs	r1, #172	@ 0xac
 8003b74:	f7fd ff16 	bl	80019a4 <LCD_Fill>

	LCD_Fill(393 - shift,170,396 - shift,172,WHITE);		// clear vertical2
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8003b7e:	3301      	adds	r3, #1
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	b218      	sxth	r0, r3
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	b21a      	sxth	r2, r3
 8003b8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	23ac      	movs	r3, #172	@ 0xac
 8003b96:	21aa      	movs	r1, #170	@ 0xaa
 8003b98:	f7fd ff04 	bl	80019a4 <LCD_Fill>
	LCD_Fill(394 - shift,172,397 - shift,176,WHITE);		// clear vertical2 upper1
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	b218      	sxth	r0, r3
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8003bac:	3301      	adds	r3, #1
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	b21a      	sxth	r2, r3
 8003bb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	23b0      	movs	r3, #176	@ 0xb0
 8003bba:	21ac      	movs	r1, #172	@ 0xac
 8003bbc:	f7fd fef2 	bl	80019a4 <LCD_Fill>
	LCD_Fill(394 - shift,177,396 - shift,185,WHITE);		// clear vertical2 upper2
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	b218      	sxth	r0, r3
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	b21a      	sxth	r2, r3
 8003bd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	23b9      	movs	r3, #185	@ 0xb9
 8003bdc:	21b1      	movs	r1, #177	@ 0xb1
 8003bde:	f7fd fee1 	bl	80019a4 <LCD_Fill>
	LCD_Fill(394 - shift,191,397 - shift,210,WHITE);		// clear vertical2 lower
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	b218      	sxth	r0, r3
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	23d2      	movs	r3, #210	@ 0xd2
 8003c00:	21bf      	movs	r1, #191	@ 0xbf
 8003c02:	f7fd fecf 	bl	80019a4 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(381 - shift,186,399 - shift,190,GRAY);     // horizontal2
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	b218      	sxth	r0, r3
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8003c18:	3301      	adds	r3, #1
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	b21a      	sxth	r2, r3
 8003c1e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	23be      	movs	r3, #190	@ 0xbe
 8003c26:	21ba      	movs	r1, #186	@ 0xba
 8003c28:	f7fd febc 	bl	80019a4 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(380 - shift,180,382 - shift,181,GRAY);     // left2
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	b218      	sxth	r0, r3
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	b21a      	sxth	r2, r3
 8003c40:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	23b5      	movs	r3, #181	@ 0xb5
 8003c48:	21b4      	movs	r1, #180	@ 0xb4
 8003c4a:	f7fd feab 	bl	80019a4 <LCD_Fill>
	LCD_Fill(379 - shift,181,383 - shift,188,GRAY);
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8003c54:	3301      	adds	r3, #1
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	b218      	sxth	r0, r3
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8003c60:	3301      	adds	r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	b21a      	sxth	r2, r3
 8003c66:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	23bc      	movs	r3, #188	@ 0xbc
 8003c6e:	21b5      	movs	r1, #181	@ 0xb5
 8003c70:	f7fd fe98 	bl	80019a4 <LCD_Fill>

	LCD_Fill(383 - shift,180,386 - shift,181,WHITE);     // clear left2
 8003c74:	88fb      	ldrh	r3, [r7, #6]
 8003c76:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	b218      	sxth	r0, r3
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	b21a      	sxth	r2, r3
 8003c8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	23b5      	movs	r3, #181	@ 0xb5
 8003c92:	21b4      	movs	r1, #180	@ 0xb4
 8003c94:	f7fd fe86 	bl	80019a4 <LCD_Fill>
	LCD_Fill(384 - shift,181,386 - shift,185,WHITE);
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	f5c3 73c0 	rsb	r3, r3, #384	@ 0x180
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	b218      	sxth	r0, r3
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	b21a      	sxth	r2, r3
 8003cac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	23b9      	movs	r3, #185	@ 0xb9
 8003cb4:	21b5      	movs	r1, #181	@ 0xb5
 8003cb6:	f7fd fe75 	bl	80019a4 <LCD_Fill>


	// ----------- RIGHT PART -----------
	LCD_Fill(397 - shift,177,400 - shift,178,GRAY);     // right2
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	b218      	sxth	r0, r3
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	b21a      	sxth	r2, r3
 8003cd0:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	23b2      	movs	r3, #178	@ 0xb2
 8003cd8:	21b1      	movs	r1, #177	@ 0xb1
 8003cda:	f7fd fe63 	bl	80019a4 <LCD_Fill>
	LCD_Fill(396 - shift,178,401 - shift,188,GRAY);
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b218      	sxth	r0, r3
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8003cee:	3301      	adds	r3, #1
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	b21a      	sxth	r2, r3
 8003cf4:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	23bc      	movs	r3, #188	@ 0xbc
 8003cfc:	21b2      	movs	r1, #178	@ 0xb2
 8003cfe:	f7fd fe51 	bl	80019a4 <LCD_Fill>

	LCD_Fill(401 - shift,177,404 - shift,178,WHITE);     // clear right2
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8003d08:	3301      	adds	r3, #1
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b218      	sxth	r0, r3
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	f5c3 73ca 	rsb	r3, r3, #404	@ 0x194
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	b21a      	sxth	r2, r3
 8003d18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	23b2      	movs	r3, #178	@ 0xb2
 8003d20:	21b1      	movs	r1, #177	@ 0xb1
 8003d22:	f7fd fe3f 	bl	80019a4 <LCD_Fill>
	LCD_Fill(402 - shift,178,405 - shift,188,WHITE);
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	f5c3 73c9 	rsb	r3, r3, #402	@ 0x192
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	b218      	sxth	r0, r3
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	f5c3 73ca 	rsb	r3, r3, #404	@ 0x194
 8003d36:	3301      	adds	r3, #1
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	b21a      	sxth	r2, r3
 8003d3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	23bc      	movs	r3, #188	@ 0xbc
 8003d44:	21b2      	movs	r1, #178	@ 0xb2
 8003d46:	f7fd fe2d 	bl	80019a4 <LCD_Fill>
	LCD_Fill(400 - shift,189,403 - shift,190,WHITE);
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	b218      	sxth	r0, r3
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	f5c3 73c9 	rsb	r3, r3, #402	@ 0x192
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	b21a      	sxth	r2, r3
 8003d60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	23be      	movs	r3, #190	@ 0xbe
 8003d68:	21bd      	movs	r1, #189	@ 0xbd
 8003d6a:	f7fd fe1b 	bl	80019a4 <LCD_Fill>
	LCD_Fill(399 - shift,190,402 - shift,191,WHITE);
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8003d74:	3301      	adds	r3, #1
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	b218      	sxth	r0, r3
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	f5c3 73c9 	rsb	r3, r3, #402	@ 0x192
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	b21a      	sxth	r2, r3
 8003d84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	23bf      	movs	r3, #191	@ 0xbf
 8003d8c:	21be      	movs	r1, #190	@ 0xbe
 8003d8e:	f7fd fe09 	bl	80019a4 <LCD_Fill>


}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <ObstacleAnimation>:


uint16_t obs_step=0;	//obstacle step

void ObstacleAnimation(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
	if(refresh==1)
 8003da0:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <ObstacleAnimation+0x3c>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d115      	bne.n	8003dd4 <ObstacleAnimation+0x38>
	{
		obs_step++;
 8003da8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <ObstacleAnimation+0x40>)
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ddc <ObstacleAnimation+0x40>)
 8003db2:	801a      	strh	r2, [r3, #0]

		if(obs_step>410)
 8003db4:	4b09      	ldr	r3, [pc, #36]	@ (8003ddc <ObstacleAnimation+0x40>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	f5b3 7fcd 	cmp.w	r3, #410	@ 0x19a
 8003dbc:	d902      	bls.n	8003dc4 <ObstacleAnimation+0x28>
		{
			obs_step = 0;
 8003dbe:	4b07      	ldr	r3, [pc, #28]	@ (8003ddc <ObstacleAnimation+0x40>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	801a      	strh	r2, [r3, #0]
		}

		DrawObstacle3(obs_step);
 8003dc4:	4b05      	ldr	r3, [pc, #20]	@ (8003ddc <ObstacleAnimation+0x40>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fd9f 	bl	800390c <DrawObstacle3>
		obs_drawed = 1;
 8003dce:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <ObstacleAnimation+0x44>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
	}


}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	2000012c 	.word	0x2000012c
 8003ddc:	200000de 	.word	0x200000de
 8003de0:	200000db 	.word	0x200000db

08003de4 <GAME>:

void GAME(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0


	if((refresh==2) && (dino_drawed == 1)) //&& (obs_drawed == 1))
 8003de8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e28 <GAME+0x44>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d114      	bne.n	8003e1a <GAME+0x36>
 8003df0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <GAME+0x48>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d110      	bne.n	8003e1a <GAME+0x36>
	{
		dino_drawed = 0;
 8003df8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <GAME+0x48>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
		obs_drawed = 0;
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003e30 <GAME+0x4c>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]

		POINT_COLOR=GRAY;
 8003e04:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <GAME+0x50>)
 8003e06:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8003e0a:	801a      	strh	r2, [r3, #0]
		LCD_DrawLine(0,190,320,190);	// draw ground
 8003e0c:	23be      	movs	r3, #190	@ 0xbe
 8003e0e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e12:	21be      	movs	r1, #190	@ 0xbe
 8003e14:	2000      	movs	r0, #0
 8003e16:	f7fd fe1d 	bl	8001a54 <LCD_DrawLine>
	}

	DinoAnimation();
 8003e1a:	f7ff fc7d 	bl	8003718 <DinoAnimation>
	ObstacleAnimation();
 8003e1e:	f7ff ffbd 	bl	8003d9c <ObstacleAnimation>
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000012c 	.word	0x2000012c
 8003e2c:	200000da 	.word	0x200000da
 8003e30:	200000db 	.word	0x200000db
 8003e34:	200000cc 	.word	0x200000cc

08003e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e3c:	f000 fa26 	bl	800428c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e40:	f000 f814 	bl	8003e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e44:	f000 f8c0 	bl	8003fc8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003e48:	f000 f870 	bl	8003f2c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  delay_init(72);			// delay initialization (System Clock [MHz])
 8003e4c:	2048      	movs	r0, #72	@ 0x48
 8003e4e:	f7ff f8d5 	bl	8002ffc <delay_init>
  ILI9341_paradriver_Init();			// initialization of LCD driver
 8003e52:	f7fc ff1b 	bl	8000c8c <ILI9341_paradriver_Init>
  TP_Init();
 8003e56:	f7ff f8b3 	bl	8002fc0 <TP_Init>

  HAL_TIM_Base_Start_IT(&htim2);	// timer start (60Hz refresh rate)
 8003e5a:	4803      	ldr	r0, [pc, #12]	@ (8003e68 <main+0x30>)
 8003e5c:	f002 f9fe 	bl	800625c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	GAME();
 8003e60:	f7ff ffc0 	bl	8003de4 <GAME>
 8003e64:	e7fc      	b.n	8003e60 <main+0x28>
 8003e66:	bf00      	nop
 8003e68:	200000e0 	.word	0x200000e0

08003e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b0a6      	sub	sp, #152	@ 0x98
 8003e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e72:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003e76:	2228      	movs	r2, #40	@ 0x28
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f002 fe4a 	bl	8006b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	2258      	movs	r2, #88	@ 0x58
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f002 fe3c 	bl	8006b14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003eb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003eb8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ec6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fd2c 	bl	8004928 <HAL_RCC_OscConfig>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003ed6:	f000 f907 	bl	80040e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eda:	230f      	movs	r3, #15
 8003edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003eec:	2300      	movs	r3, #0
 8003eee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ef0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 fd6a 	bl	80059d0 <HAL_RCC_ClockConfig>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003f02:	f000 f8f1 	bl	80040e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2;
 8003f06:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003f0a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f10:	1d3b      	adds	r3, r7, #4
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 ff2c 	bl	8005d70 <HAL_RCCEx_PeriphCLKConfig>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003f1e:	f000 f8e3 	bl	80040e8 <Error_Handler>
  }
}
 8003f22:	bf00      	nop
 8003f24:	3798      	adds	r7, #152	@ 0x98
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f32:	f107 0310 	add.w	r3, r7, #16
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f40:	1d3b      	adds	r3, r7, #4
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc4 <MX_TIM2_Init+0x98>)
 8003f4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 299;
 8003f52:	4b1c      	ldr	r3, [pc, #112]	@ (8003fc4 <MX_TIM2_Init+0x98>)
 8003f54:	f240 122b 	movw	r2, #299	@ 0x12b
 8003f58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc4 <MX_TIM2_Init+0x98>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003f60:	4b18      	ldr	r3, [pc, #96]	@ (8003fc4 <MX_TIM2_Init+0x98>)
 8003f62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f68:	4b16      	ldr	r3, [pc, #88]	@ (8003fc4 <MX_TIM2_Init+0x98>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f6e:	4b15      	ldr	r3, [pc, #84]	@ (8003fc4 <MX_TIM2_Init+0x98>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f74:	4813      	ldr	r0, [pc, #76]	@ (8003fc4 <MX_TIM2_Init+0x98>)
 8003f76:	f002 f919 	bl	80061ac <HAL_TIM_Base_Init>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003f80:	f000 f8b2 	bl	80040e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f8a:	f107 0310 	add.w	r3, r7, #16
 8003f8e:	4619      	mov	r1, r3
 8003f90:	480c      	ldr	r0, [pc, #48]	@ (8003fc4 <MX_TIM2_Init+0x98>)
 8003f92:	f002 fad5 	bl	8006540 <HAL_TIM_ConfigClockSource>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003f9c:	f000 f8a4 	bl	80040e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4805      	ldr	r0, [pc, #20]	@ (8003fc4 <MX_TIM2_Init+0x98>)
 8003fae:	f002 fd07 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003fb8:	f000 f896 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003fbc:	bf00      	nop
 8003fbe:	3720      	adds	r7, #32
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	200000e0 	.word	0x200000e0

08003fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fce:	f107 030c 	add.w	r3, r7, #12
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fde:	4b3f      	ldr	r3, [pc, #252]	@ (80040dc <MX_GPIO_Init+0x114>)
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80040dc <MX_GPIO_Init+0x114>)
 8003fe4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fe8:	6153      	str	r3, [r2, #20]
 8003fea:	4b3c      	ldr	r3, [pc, #240]	@ (80040dc <MX_GPIO_Init+0x114>)
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff6:	4b39      	ldr	r3, [pc, #228]	@ (80040dc <MX_GPIO_Init+0x114>)
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4a38      	ldr	r2, [pc, #224]	@ (80040dc <MX_GPIO_Init+0x114>)
 8003ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004000:	6153      	str	r3, [r2, #20]
 8004002:	4b36      	ldr	r3, [pc, #216]	@ (80040dc <MX_GPIO_Init+0x114>)
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400a:	607b      	str	r3, [r7, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800400e:	4b33      	ldr	r3, [pc, #204]	@ (80040dc <MX_GPIO_Init+0x114>)
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	4a32      	ldr	r2, [pc, #200]	@ (80040dc <MX_GPIO_Init+0x114>)
 8004014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004018:	6153      	str	r3, [r2, #20]
 800401a:	4b30      	ldr	r3, [pc, #192]	@ (80040dc <MX_GPIO_Init+0x114>)
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004026:	2201      	movs	r2, #1
 8004028:	211f      	movs	r1, #31
 800402a:	482d      	ldr	r0, [pc, #180]	@ (80040e0 <MX_GPIO_Init+0x118>)
 800402c:	f000 fc64 	bl	80048f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8004030:	2200      	movs	r2, #0
 8004032:	21aa      	movs	r1, #170	@ 0xaa
 8004034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004038:	f000 fc5e 	bl	80048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800403c:	2201      	movs	r2, #1
 800403e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004042:	4828      	ldr	r0, [pc, #160]	@ (80040e4 <MX_GPIO_Init+0x11c>)
 8004044:	f000 fc58 	bl	80048f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004048:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800404c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004052:	2301      	movs	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004056:	f107 030c 	add.w	r3, r7, #12
 800405a:	4619      	mov	r1, r3
 800405c:	4820      	ldr	r0, [pc, #128]	@ (80040e0 <MX_GPIO_Init+0x118>)
 800405e:	f000 faa9 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004062:	231f      	movs	r3, #31
 8004064:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004066:	2301      	movs	r3, #1
 8004068:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406e:	2300      	movs	r3, #0
 8004070:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004072:	f107 030c 	add.w	r3, r7, #12
 8004076:	4619      	mov	r1, r3
 8004078:	4819      	ldr	r0, [pc, #100]	@ (80040e0 <MX_GPIO_Init+0x118>)
 800407a:	f000 fa9b 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 800407e:	23aa      	movs	r3, #170	@ 0xaa
 8004080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004082:	2301      	movs	r3, #1
 8004084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004086:	2301      	movs	r3, #1
 8004088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800408a:	2303      	movs	r3, #3
 800408c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408e:	f107 030c 	add.w	r3, r7, #12
 8004092:	4619      	mov	r1, r3
 8004094:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004098:	f000 fa8c 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 800409c:	2314      	movs	r3, #20
 800409e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040a0:	2300      	movs	r3, #0
 80040a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040a4:	2301      	movs	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a8:	f107 030c 	add.w	r3, r7, #12
 80040ac:	4619      	mov	r1, r3
 80040ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040b2:	f000 fa7f 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80040b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040ba:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040bc:	2301      	movs	r3, #1
 80040be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c8:	f107 030c 	add.w	r3, r7, #12
 80040cc:	4619      	mov	r1, r3
 80040ce:	4805      	ldr	r0, [pc, #20]	@ (80040e4 <MX_GPIO_Init+0x11c>)
 80040d0:	f000 fa70 	bl	80045b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80040d4:	bf00      	nop
 80040d6:	3720      	adds	r7, #32
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40021000 	.word	0x40021000
 80040e0:	48000800 	.word	0x48000800
 80040e4:	48000400 	.word	0x48000400

080040e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040ec:	b672      	cpsid	i
}
 80040ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040f0:	bf00      	nop
 80040f2:	e7fd      	b.n	80040f0 <Error_Handler+0x8>

080040f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004138 <HAL_MspInit+0x44>)
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004138 <HAL_MspInit+0x44>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6193      	str	r3, [r2, #24]
 8004106:	4b0c      	ldr	r3, [pc, #48]	@ (8004138 <HAL_MspInit+0x44>)
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004112:	4b09      	ldr	r3, [pc, #36]	@ (8004138 <HAL_MspInit+0x44>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4a08      	ldr	r2, [pc, #32]	@ (8004138 <HAL_MspInit+0x44>)
 8004118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800411c:	61d3      	str	r3, [r2, #28]
 800411e:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <HAL_MspInit+0x44>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000

0800413c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414c:	d113      	bne.n	8004176 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800414e:	4b0c      	ldr	r3, [pc, #48]	@ (8004180 <HAL_TIM_Base_MspInit+0x44>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	4a0b      	ldr	r2, [pc, #44]	@ (8004180 <HAL_TIM_Base_MspInit+0x44>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	61d3      	str	r3, [r2, #28]
 800415a:	4b09      	ldr	r3, [pc, #36]	@ (8004180 <HAL_TIM_Base_MspInit+0x44>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004166:	2200      	movs	r2, #0
 8004168:	2100      	movs	r1, #0
 800416a:	201c      	movs	r0, #28
 800416c:	f000 f9cf 	bl	800450e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004170:	201c      	movs	r0, #28
 8004172:	f000 f9e8 	bl	8004546 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000

08004184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <NMI_Handler+0x4>

0800418c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <HardFault_Handler+0x4>

08004194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <MemManage_Handler+0x4>

0800419c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <BusFault_Handler+0x4>

080041a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <UsageFault_Handler+0x4>

080041ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041da:	f000 f89d 	bl	8004318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041e8:	4808      	ldr	r0, [pc, #32]	@ (800420c <TIM2_IRQHandler+0x28>)
 80041ea:	f002 f8a7 	bl	800633c <HAL_TIM_IRQHandler>
  }
  else
  {
	  refresh = 0;
  }*/
refresh++;
 80041ee:	4b08      	ldr	r3, [pc, #32]	@ (8004210 <TIM2_IRQHandler+0x2c>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	3301      	adds	r3, #1
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <TIM2_IRQHandler+0x2c>)
 80041f8:	701a      	strb	r2, [r3, #0]
if(refresh>2)
 80041fa:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <TIM2_IRQHandler+0x2c>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d902      	bls.n	8004208 <TIM2_IRQHandler+0x24>
{
	refresh=0;
 8004202:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <TIM2_IRQHandler+0x2c>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
}


  /* USER CODE END TIM2_IRQn 1 */
}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200000e0 	.word	0x200000e0
 8004210:	2000012c 	.word	0x2000012c

08004214 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004218:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <SystemInit+0x20>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421e:	4a05      	ldr	r2, [pc, #20]	@ (8004234 <SystemInit+0x20>)
 8004220:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004224:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004238:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004270 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800423c:	f7ff ffea 	bl	8004214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004240:	480c      	ldr	r0, [pc, #48]	@ (8004274 <LoopForever+0x6>)
  ldr r1, =_edata
 8004242:	490d      	ldr	r1, [pc, #52]	@ (8004278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004244:	4a0d      	ldr	r2, [pc, #52]	@ (800427c <LoopForever+0xe>)
  movs r3, #0
 8004246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004248:	e002      	b.n	8004250 <LoopCopyDataInit>

0800424a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800424a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800424c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800424e:	3304      	adds	r3, #4

08004250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004254:	d3f9      	bcc.n	800424a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004256:	4a0a      	ldr	r2, [pc, #40]	@ (8004280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004258:	4c0a      	ldr	r4, [pc, #40]	@ (8004284 <LoopForever+0x16>)
  movs r3, #0
 800425a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800425c:	e001      	b.n	8004262 <LoopFillZerobss>

0800425e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800425e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004260:	3204      	adds	r2, #4

08004262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004264:	d3fb      	bcc.n	800425e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004266:	f002 fc63 	bl	8006b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800426a:	f7ff fde5 	bl	8003e38 <main>

0800426e <LoopForever>:

LoopForever:
    b LoopForever
 800426e:	e7fe      	b.n	800426e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004270:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004278:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800427c:	08007988 	.word	0x08007988
  ldr r2, =_sbss
 8004280:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8004284:	2000026c 	.word	0x2000026c

08004288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004288:	e7fe      	b.n	8004288 <ADC1_2_IRQHandler>
	...

0800428c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004290:	4b08      	ldr	r3, [pc, #32]	@ (80042b4 <HAL_Init+0x28>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a07      	ldr	r2, [pc, #28]	@ (80042b4 <HAL_Init+0x28>)
 8004296:	f043 0310 	orr.w	r3, r3, #16
 800429a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800429c:	2003      	movs	r0, #3
 800429e:	f000 f92b 	bl	80044f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042a2:	200f      	movs	r0, #15
 80042a4:	f000 f808 	bl	80042b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042a8:	f7ff ff24 	bl	80040f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40022000 	.word	0x40022000

080042b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042c0:	4b12      	ldr	r3, [pc, #72]	@ (800430c <HAL_InitTick+0x54>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b12      	ldr	r3, [pc, #72]	@ (8004310 <HAL_InitTick+0x58>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	4619      	mov	r1, r3
 80042ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80042d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f943 	bl	8004562 <HAL_SYSTICK_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e00e      	b.n	8004304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b0f      	cmp	r3, #15
 80042ea:	d80a      	bhi.n	8004302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042ec:	2200      	movs	r2, #0
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	f000 f90b 	bl	800450e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042f8:	4a06      	ldr	r2, [pc, #24]	@ (8004314 <HAL_InitTick+0x5c>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000030 	.word	0x20000030
 8004310:	20000038 	.word	0x20000038
 8004314:	20000034 	.word	0x20000034

08004318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800431c:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <HAL_IncTick+0x20>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	4b06      	ldr	r3, [pc, #24]	@ (800433c <HAL_IncTick+0x24>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4413      	add	r3, r2
 8004328:	4a04      	ldr	r2, [pc, #16]	@ (800433c <HAL_IncTick+0x24>)
 800432a:	6013      	str	r3, [r2, #0]
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000038 	.word	0x20000038
 800433c:	20000130 	.word	0x20000130

08004340 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return uwTick;  
 8004344:	4b03      	ldr	r3, [pc, #12]	@ (8004354 <HAL_GetTick+0x14>)
 8004346:	681b      	ldr	r3, [r3, #0]
}
 8004348:	4618      	mov	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000130 	.word	0x20000130

08004358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004368:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <__NVIC_SetPriorityGrouping+0x44>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004374:	4013      	ands	r3, r2
 8004376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004380:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800438a:	4a04      	ldr	r2, [pc, #16]	@ (800439c <__NVIC_SetPriorityGrouping+0x44>)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	60d3      	str	r3, [r2, #12]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043a4:	4b04      	ldr	r3, [pc, #16]	@ (80043b8 <__NVIC_GetPriorityGrouping+0x18>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	0a1b      	lsrs	r3, r3, #8
 80043aa:	f003 0307 	and.w	r3, r3, #7
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	e000ed00 	.word	0xe000ed00

080043bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	db0b      	blt.n	80043e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	f003 021f 	and.w	r2, r3, #31
 80043d4:	4907      	ldr	r1, [pc, #28]	@ (80043f4 <__NVIC_EnableIRQ+0x38>)
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	2001      	movs	r0, #1
 80043de:	fa00 f202 	lsl.w	r2, r0, r2
 80043e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	e000e100 	.word	0xe000e100

080043f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	6039      	str	r1, [r7, #0]
 8004402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004408:	2b00      	cmp	r3, #0
 800440a:	db0a      	blt.n	8004422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	490c      	ldr	r1, [pc, #48]	@ (8004444 <__NVIC_SetPriority+0x4c>)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	0112      	lsls	r2, r2, #4
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	440b      	add	r3, r1
 800441c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004420:	e00a      	b.n	8004438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	4908      	ldr	r1, [pc, #32]	@ (8004448 <__NVIC_SetPriority+0x50>)
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	3b04      	subs	r3, #4
 8004430:	0112      	lsls	r2, r2, #4
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	440b      	add	r3, r1
 8004436:	761a      	strb	r2, [r3, #24]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	e000e100 	.word	0xe000e100
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800444c:	b480      	push	{r7}
 800444e:	b089      	sub	sp, #36	@ 0x24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f1c3 0307 	rsb	r3, r3, #7
 8004466:	2b04      	cmp	r3, #4
 8004468:	bf28      	it	cs
 800446a:	2304      	movcs	r3, #4
 800446c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3304      	adds	r3, #4
 8004472:	2b06      	cmp	r3, #6
 8004474:	d902      	bls.n	800447c <NVIC_EncodePriority+0x30>
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	3b03      	subs	r3, #3
 800447a:	e000      	b.n	800447e <NVIC_EncodePriority+0x32>
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43da      	mvns	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	401a      	ands	r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004494:	f04f 31ff 	mov.w	r1, #4294967295
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	fa01 f303 	lsl.w	r3, r1, r3
 800449e:	43d9      	mvns	r1, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a4:	4313      	orrs	r3, r2
         );
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3724      	adds	r7, #36	@ 0x24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3b01      	subs	r3, #1
 80044c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044c4:	d301      	bcc.n	80044ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044c6:	2301      	movs	r3, #1
 80044c8:	e00f      	b.n	80044ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ca:	4a0a      	ldr	r2, [pc, #40]	@ (80044f4 <SysTick_Config+0x40>)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044d2:	210f      	movs	r1, #15
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295
 80044d8:	f7ff ff8e 	bl	80043f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044dc:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <SysTick_Config+0x40>)
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044e2:	4b04      	ldr	r3, [pc, #16]	@ (80044f4 <SysTick_Config+0x40>)
 80044e4:	2207      	movs	r2, #7
 80044e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	e000e010 	.word	0xe000e010

080044f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff29 	bl	8004358 <__NVIC_SetPriorityGrouping>
}
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b086      	sub	sp, #24
 8004512:	af00      	add	r7, sp, #0
 8004514:	4603      	mov	r3, r0
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004520:	f7ff ff3e 	bl	80043a0 <__NVIC_GetPriorityGrouping>
 8004524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	6978      	ldr	r0, [r7, #20]
 800452c:	f7ff ff8e 	bl	800444c <NVIC_EncodePriority>
 8004530:	4602      	mov	r2, r0
 8004532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff ff5d 	bl	80043f8 <__NVIC_SetPriority>
}
 800453e:	bf00      	nop
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	4603      	mov	r3, r0
 800454e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff ff31 	bl	80043bc <__NVIC_EnableIRQ>
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff ffa2 	bl	80044b4 <SysTick_Config>
 8004570:	4603      	mov	r3, r0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b04      	cmp	r3, #4
 8004588:	d106      	bne.n	8004598 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800458a:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a08      	ldr	r2, [pc, #32]	@ (80045b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004590:	f043 0304 	orr.w	r3, r3, #4
 8004594:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004596:	e005      	b.n	80045a4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a04      	ldr	r2, [pc, #16]	@ (80045b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800459e:	f023 0304 	bic.w	r3, r3, #4
 80045a2:	6013      	str	r3, [r2, #0]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000e010 	.word	0xe000e010

080045b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045c2:	e160      	b.n	8004886 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	2101      	movs	r1, #1
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	fa01 f303 	lsl.w	r3, r1, r3
 80045d0:	4013      	ands	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8152 	beq.w	8004880 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d005      	beq.n	80045f4 <HAL_GPIO_Init+0x40>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d130      	bne.n	8004656 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	2203      	movs	r2, #3
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800462a:	2201      	movs	r2, #1
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4013      	ands	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	091b      	lsrs	r3, r3, #4
 8004640:	f003 0201 	and.w	r2, r3, #1
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b03      	cmp	r3, #3
 8004660:	d017      	beq.n	8004692 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	2203      	movs	r2, #3
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4013      	ands	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d123      	bne.n	80046e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	08da      	lsrs	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3208      	adds	r2, #8
 80046a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	220f      	movs	r2, #15
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	08da      	lsrs	r2, r3, #3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3208      	adds	r2, #8
 80046e0:	6939      	ldr	r1, [r7, #16]
 80046e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	2203      	movs	r2, #3
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43db      	mvns	r3, r3
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 0203 	and.w	r2, r3, #3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80ac 	beq.w	8004880 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004728:	4b5e      	ldr	r3, [pc, #376]	@ (80048a4 <HAL_GPIO_Init+0x2f0>)
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	4a5d      	ldr	r2, [pc, #372]	@ (80048a4 <HAL_GPIO_Init+0x2f0>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6193      	str	r3, [r2, #24]
 8004734:	4b5b      	ldr	r3, [pc, #364]	@ (80048a4 <HAL_GPIO_Init+0x2f0>)
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004740:	4a59      	ldr	r2, [pc, #356]	@ (80048a8 <HAL_GPIO_Init+0x2f4>)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	3302      	adds	r3, #2
 8004748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	220f      	movs	r2, #15
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800476a:	d025      	beq.n	80047b8 <HAL_GPIO_Init+0x204>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a4f      	ldr	r2, [pc, #316]	@ (80048ac <HAL_GPIO_Init+0x2f8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d01f      	beq.n	80047b4 <HAL_GPIO_Init+0x200>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a4e      	ldr	r2, [pc, #312]	@ (80048b0 <HAL_GPIO_Init+0x2fc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d019      	beq.n	80047b0 <HAL_GPIO_Init+0x1fc>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a4d      	ldr	r2, [pc, #308]	@ (80048b4 <HAL_GPIO_Init+0x300>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_GPIO_Init+0x1f8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a4c      	ldr	r2, [pc, #304]	@ (80048b8 <HAL_GPIO_Init+0x304>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00d      	beq.n	80047a8 <HAL_GPIO_Init+0x1f4>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a4b      	ldr	r2, [pc, #300]	@ (80048bc <HAL_GPIO_Init+0x308>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d007      	beq.n	80047a4 <HAL_GPIO_Init+0x1f0>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a4a      	ldr	r2, [pc, #296]	@ (80048c0 <HAL_GPIO_Init+0x30c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d101      	bne.n	80047a0 <HAL_GPIO_Init+0x1ec>
 800479c:	2306      	movs	r3, #6
 800479e:	e00c      	b.n	80047ba <HAL_GPIO_Init+0x206>
 80047a0:	2307      	movs	r3, #7
 80047a2:	e00a      	b.n	80047ba <HAL_GPIO_Init+0x206>
 80047a4:	2305      	movs	r3, #5
 80047a6:	e008      	b.n	80047ba <HAL_GPIO_Init+0x206>
 80047a8:	2304      	movs	r3, #4
 80047aa:	e006      	b.n	80047ba <HAL_GPIO_Init+0x206>
 80047ac:	2303      	movs	r3, #3
 80047ae:	e004      	b.n	80047ba <HAL_GPIO_Init+0x206>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e002      	b.n	80047ba <HAL_GPIO_Init+0x206>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <HAL_GPIO_Init+0x206>
 80047b8:	2300      	movs	r3, #0
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	f002 0203 	and.w	r2, r2, #3
 80047c0:	0092      	lsls	r2, r2, #2
 80047c2:	4093      	lsls	r3, r2
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047ca:	4937      	ldr	r1, [pc, #220]	@ (80048a8 <HAL_GPIO_Init+0x2f4>)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	3302      	adds	r3, #2
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047d8:	4b3a      	ldr	r3, [pc, #232]	@ (80048c4 <HAL_GPIO_Init+0x310>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80047fc:	4a31      	ldr	r2, [pc, #196]	@ (80048c4 <HAL_GPIO_Init+0x310>)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004802:	4b30      	ldr	r3, [pc, #192]	@ (80048c4 <HAL_GPIO_Init+0x310>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	43db      	mvns	r3, r3
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4013      	ands	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004826:	4a27      	ldr	r2, [pc, #156]	@ (80048c4 <HAL_GPIO_Init+0x310>)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800482c:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <HAL_GPIO_Init+0x310>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	43db      	mvns	r3, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004850:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <HAL_GPIO_Init+0x310>)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004856:	4b1b      	ldr	r3, [pc, #108]	@ (80048c4 <HAL_GPIO_Init+0x310>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	43db      	mvns	r3, r3
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4013      	ands	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800487a:	4a12      	ldr	r2, [pc, #72]	@ (80048c4 <HAL_GPIO_Init+0x310>)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	3301      	adds	r3, #1
 8004884:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	f47f ae97 	bne.w	80045c4 <HAL_GPIO_Init+0x10>
  }
}
 8004896:	bf00      	nop
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40010000 	.word	0x40010000
 80048ac:	48000400 	.word	0x48000400
 80048b0:	48000800 	.word	0x48000800
 80048b4:	48000c00 	.word	0x48000c00
 80048b8:	48001000 	.word	0x48001000
 80048bc:	48001400 	.word	0x48001400
 80048c0:	48001800 	.word	0x48001800
 80048c4:	40010400 	.word	0x40010400

080048c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
 80048e4:	e001      	b.n	80048ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	807b      	strh	r3, [r7, #2]
 8004904:	4613      	mov	r3, r2
 8004906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004908:	787b      	ldrb	r3, [r7, #1]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800490e:	887a      	ldrh	r2, [r7, #2]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004914:	e002      	b.n	800491c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004916:	887a      	ldrh	r2, [r7, #2]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800492e:	af00      	add	r7, sp, #0
 8004930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004934:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004938:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800493a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800493e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f001 b83a 	b.w	80059c2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004952:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 816f 	beq.w	8004c42 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004964:	4bb5      	ldr	r3, [pc, #724]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b04      	cmp	r3, #4
 800496e:	d00c      	beq.n	800498a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004970:	4bb2      	ldr	r3, [pc, #712]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d15c      	bne.n	8004a36 <HAL_RCC_OscConfig+0x10e>
 800497c:	4baf      	ldr	r3, [pc, #700]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004988:	d155      	bne.n	8004a36 <HAL_RCC_OscConfig+0x10e>
 800498a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800498e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800499e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d102      	bne.n	80049bc <HAL_RCC_OscConfig+0x94>
 80049b6:	4ba1      	ldr	r3, [pc, #644]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	e015      	b.n	80049e8 <HAL_RCC_OscConfig+0xc0>
 80049bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049c0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80049d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049d4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80049d8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80049dc:	fa93 f3a3 	rbit	r3, r3
 80049e0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80049e4:	4b95      	ldr	r3, [pc, #596]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049ec:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80049f0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80049f4:	fa92 f2a2 	rbit	r2, r2
 80049f8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80049fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004a00:	fab2 f282 	clz	r2, r2
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	f042 0220 	orr.w	r2, r2, #32
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	f002 021f 	and.w	r2, r2, #31
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f202 	lsl.w	r2, r1, r2
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8111 	beq.w	8004c40 <HAL_RCC_OscConfig+0x318>
 8004a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 8108 	bne.w	8004c40 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f000 bfc6 	b.w	80059c2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a46:	d106      	bne.n	8004a56 <HAL_RCC_OscConfig+0x12e>
 8004a48:	4b7c      	ldr	r3, [pc, #496]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a7b      	ldr	r2, [pc, #492]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e036      	b.n	8004ac4 <HAL_RCC_OscConfig+0x19c>
 8004a56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x158>
 8004a66:	4b75      	ldr	r3, [pc, #468]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a74      	ldr	r2, [pc, #464]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b72      	ldr	r3, [pc, #456]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a71      	ldr	r2, [pc, #452]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004a78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e021      	b.n	8004ac4 <HAL_RCC_OscConfig+0x19c>
 8004a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x184>
 8004a92:	4b6a      	ldr	r3, [pc, #424]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a69      	ldr	r2, [pc, #420]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b67      	ldr	r3, [pc, #412]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a66      	ldr	r2, [pc, #408]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0x19c>
 8004aac:	4b63      	ldr	r3, [pc, #396]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a62      	ldr	r2, [pc, #392]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b60      	ldr	r3, [pc, #384]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a5f      	ldr	r2, [pc, #380]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ac2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ac8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d059      	beq.n	8004b88 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7ff fc34 	bl	8004340 <HAL_GetTick>
 8004ad8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004adc:	e00a      	b.n	8004af4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ade:	f7ff fc2f 	bl	8004340 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	@ 0x64
 8004aec:	d902      	bls.n	8004af4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	f000 bf67 	b.w	80059c2 <HAL_RCC_OscConfig+0x109a>
 8004af4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004af8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004b00:	fa93 f3a3 	rbit	r3, r3
 8004b04:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8004b08:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0c:	fab3 f383 	clz	r3, r3
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d102      	bne.n	8004b26 <HAL_RCC_OscConfig+0x1fe>
 8004b20:	4b46      	ldr	r3, [pc, #280]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	e015      	b.n	8004b52 <HAL_RCC_OscConfig+0x22a>
 8004b26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b2a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8004b32:	fa93 f3a3 	rbit	r3, r3
 8004b36:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8004b3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b3e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004b42:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8004b46:	fa93 f3a3 	rbit	r3, r3
 8004b4a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004b56:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8004b5a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8004b5e:	fa92 f2a2 	rbit	r2, r2
 8004b62:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8004b66:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004b6a:	fab2 f282 	clz	r2, r2
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	f042 0220 	orr.w	r2, r2, #32
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	f002 021f 	and.w	r2, r2, #31
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0ab      	beq.n	8004ade <HAL_RCC_OscConfig+0x1b6>
 8004b86:	e05c      	b.n	8004c42 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b88:	f7ff fbda 	bl	8004340 <HAL_GetTick>
 8004b8c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b92:	f7ff fbd5 	bl	8004340 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ba0:	d902      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	f000 bf0d 	b.w	80059c2 <HAL_RCC_OscConfig+0x109a>
 8004ba8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bac:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004bb4:	fa93 f3a3 	rbit	r3, r3
 8004bb8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8004bbc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc0:	fab3 f383 	clz	r3, r3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d102      	bne.n	8004bda <HAL_RCC_OscConfig+0x2b2>
 8004bd4:	4b19      	ldr	r3, [pc, #100]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	e015      	b.n	8004c06 <HAL_RCC_OscConfig+0x2de>
 8004bda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bde:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004be6:	fa93 f3a3 	rbit	r3, r3
 8004bea:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004bee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bf2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004bf6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004bfa:	fa93 f3a3 	rbit	r3, r3
 8004bfe:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004c02:	4b0e      	ldr	r3, [pc, #56]	@ (8004c3c <HAL_RCC_OscConfig+0x314>)
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c0a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004c0e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8004c12:	fa92 f2a2 	rbit	r2, r2
 8004c16:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8004c1a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004c1e:	fab2 f282 	clz	r2, r2
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	f042 0220 	orr.w	r2, r2, #32
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	f002 021f 	and.w	r2, r2, #31
 8004c2e:	2101      	movs	r1, #1
 8004c30:	fa01 f202 	lsl.w	r2, r1, r2
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1ab      	bne.n	8004b92 <HAL_RCC_OscConfig+0x26a>
 8004c3a:	e002      	b.n	8004c42 <HAL_RCC_OscConfig+0x31a>
 8004c3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 817f 	beq.w	8004f56 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c58:	4ba7      	ldr	r3, [pc, #668]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 030c 	and.w	r3, r3, #12
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00c      	beq.n	8004c7e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c64:	4ba4      	ldr	r3, [pc, #656]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d173      	bne.n	8004d58 <HAL_RCC_OscConfig+0x430>
 8004c70:	4ba1      	ldr	r3, [pc, #644]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004c78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c7c:	d16c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x430>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c84:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004c88:	fa93 f3a3 	rbit	r3, r3
 8004c8c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8004c90:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c94:	fab3 f383 	clz	r3, r3
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d102      	bne.n	8004cae <HAL_RCC_OscConfig+0x386>
 8004ca8:	4b93      	ldr	r3, [pc, #588]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	e013      	b.n	8004cd6 <HAL_RCC_OscConfig+0x3ae>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004cb8:	fa93 f3a3 	rbit	r3, r3
 8004cbc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004cc6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004cca:	fa93 f3a3 	rbit	r3, r3
 8004cce:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004cd2:	4b89      	ldr	r3, [pc, #548]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004cdc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8004ce0:	fa92 f2a2 	rbit	r2, r2
 8004ce4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8004ce8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004cec:	fab2 f282 	clz	r2, r2
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	f042 0220 	orr.w	r2, r2, #32
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	f002 021f 	and.w	r2, r2, #31
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCC_OscConfig+0x3f6>
 8004d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d002      	beq.n	8004d1e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f000 be52 	b.w	80059c2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1e:	4b76      	ldr	r3, [pc, #472]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	21f8      	movs	r1, #248	@ 0xf8
 8004d34:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8004d3c:	fa91 f1a1 	rbit	r1, r1
 8004d40:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8004d44:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004d48:	fab1 f181 	clz	r1, r1
 8004d4c:	b2c9      	uxtb	r1, r1
 8004d4e:	408b      	lsls	r3, r1
 8004d50:	4969      	ldr	r1, [pc, #420]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d56:	e0fe      	b.n	8004f56 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8088 	beq.w	8004e7a <HAL_RCC_OscConfig+0x552>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8004d7c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d8a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	461a      	mov	r2, r3
 8004d92:	2301      	movs	r3, #1
 8004d94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d96:	f7ff fad3 	bl	8004340 <HAL_GetTick>
 8004d9a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da0:	f7ff face 	bl	8004340 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d902      	bls.n	8004db6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	f000 be06 	b.w	80059c2 <HAL_RCC_OscConfig+0x109a>
 8004db6:	2302      	movs	r3, #2
 8004db8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004dc0:	fa93 f3a3 	rbit	r3, r3
 8004dc4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8004dc8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dcc:	fab3 f383 	clz	r3, r3
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d102      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4be>
 8004de0:	4b45      	ldr	r3, [pc, #276]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	e013      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e6>
 8004de6:	2302      	movs	r3, #2
 8004de8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004df0:	fa93 f3a3 	rbit	r3, r3
 8004df4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004dfe:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004e14:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004e18:	fa92 f2a2 	rbit	r2, r2
 8004e1c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8004e20:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004e24:	fab2 f282 	clz	r2, r2
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	f042 0220 	orr.w	r2, r2, #32
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	f002 021f 	and.w	r2, r2, #31
 8004e34:	2101      	movs	r1, #1
 8004e36:	fa01 f202 	lsl.w	r2, r1, r2
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0af      	beq.n	8004da0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e40:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	21f8      	movs	r1, #248	@ 0xf8
 8004e56:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8004e5e:	fa91 f1a1 	rbit	r1, r1
 8004e62:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8004e66:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004e6a:	fab1 f181 	clz	r1, r1
 8004e6e:	b2c9      	uxtb	r1, r1
 8004e70:	408b      	lsls	r3, r1
 8004e72:	4921      	ldr	r1, [pc, #132]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	600b      	str	r3, [r1, #0]
 8004e78:	e06d      	b.n	8004f56 <HAL_RCC_OscConfig+0x62e>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e80:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004e84:	fa93 f3a3 	rbit	r3, r3
 8004e88:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8004e8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e90:	fab3 f383 	clz	r3, r3
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004e9a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea6:	f7ff fa4b 	bl	8004340 <HAL_GetTick>
 8004eaa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb0:	f7ff fa46 	bl	8004340 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d902      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	f000 bd7e 	b.w	80059c2 <HAL_RCC_OscConfig+0x109a>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ecc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004ed0:	fa93 f3a3 	rbit	r3, r3
 8004ed4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8004ed8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004edc:	fab3 f383 	clz	r3, r3
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d105      	bne.n	8004efc <HAL_RCC_OscConfig+0x5d4>
 8004ef0:	4b01      	ldr	r3, [pc, #4]	@ (8004ef8 <HAL_RCC_OscConfig+0x5d0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	e016      	b.n	8004f24 <HAL_RCC_OscConfig+0x5fc>
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	2302      	movs	r3, #2
 8004efe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004f0e:	2302      	movs	r3, #2
 8004f10:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004f14:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004f18:	fa93 f3a3 	rbit	r3, r3
 8004f1c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004f20:	4bbf      	ldr	r3, [pc, #764]	@ (8005220 <HAL_RCC_OscConfig+0x8f8>)
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	2202      	movs	r2, #2
 8004f26:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004f2a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004f2e:	fa92 f2a2 	rbit	r2, r2
 8004f32:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8004f36:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004f3a:	fab2 f282 	clz	r2, r2
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	f042 0220 	orr.w	r2, r2, #32
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	f002 021f 	and.w	r2, r2, #31
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1ac      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8113 	beq.w	8005192 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d07c      	beq.n	8005076 <HAL_RCC_OscConfig+0x74e>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8004f8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f92:	fab3 f383 	clz	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4ba2      	ldr	r3, [pc, #648]	@ (8005224 <HAL_RCC_OscConfig+0x8fc>)
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa6:	f7ff f9cb 	bl	8004340 <HAL_GetTick>
 8004faa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb0:	f7ff f9c6 	bl	8004340 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d902      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	f000 bcfe 	b.w	80059c2 <HAL_RCC_OscConfig+0x109a>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fd0:	fa93 f2a3 	rbit	r2, r3
 8004fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	fa93 f2a3 	rbit	r2, r3
 8004ff8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005006:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800500a:	2202      	movs	r2, #2
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005012:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	fa93 f2a3 	rbit	r2, r3
 800501c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005020:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005024:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005026:	4b7e      	ldr	r3, [pc, #504]	@ (8005220 <HAL_RCC_OscConfig+0x8f8>)
 8005028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800502a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800502e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005032:	2102      	movs	r1, #2
 8005034:	6019      	str	r1, [r3, #0]
 8005036:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800503a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	fa93 f1a3 	rbit	r1, r3
 8005044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005048:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800504c:	6019      	str	r1, [r3, #0]
  return result;
 800504e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005052:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	fab3 f383 	clz	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	2101      	movs	r1, #1
 800506a:	fa01 f303 	lsl.w	r3, r1, r3
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d09d      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x688>
 8005074:	e08d      	b.n	8005192 <HAL_RCC_OscConfig+0x86a>
 8005076:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800507a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800507e:	2201      	movs	r2, #1
 8005080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005082:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005086:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	fa93 f2a3 	rbit	r2, r3
 8005090:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005094:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005098:	601a      	str	r2, [r3, #0]
  return result;
 800509a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800509e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80050a2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a4:	fab3 f383 	clz	r3, r3
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b5d      	ldr	r3, [pc, #372]	@ (8005224 <HAL_RCC_OscConfig+0x8fc>)
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	461a      	mov	r2, r3
 80050b4:	2300      	movs	r3, #0
 80050b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b8:	f7ff f942 	bl	8004340 <HAL_GetTick>
 80050bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c2:	f7ff f93d 	bl	8004340 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d902      	bls.n	80050d8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	f000 bc75 	b.w	80059c2 <HAL_RCC_OscConfig+0x109a>
 80050d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80050e0:	2202      	movs	r2, #2
 80050e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	fa93 f2a3 	rbit	r2, r3
 80050f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005100:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005104:	2202      	movs	r2, #2
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800510c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	fa93 f2a3 	rbit	r2, r3
 8005116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800511a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005124:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005128:	2202      	movs	r2, #2
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005130:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	fa93 f2a3 	rbit	r2, r3
 800513a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800513e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005142:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005144:	4b36      	ldr	r3, [pc, #216]	@ (8005220 <HAL_RCC_OscConfig+0x8f8>)
 8005146:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005148:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800514c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005150:	2102      	movs	r1, #2
 8005152:	6019      	str	r1, [r3, #0]
 8005154:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005158:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	fa93 f1a3 	rbit	r1, r3
 8005162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005166:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800516a:	6019      	str	r1, [r3, #0]
  return result;
 800516c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005170:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	fab3 f383 	clz	r3, r3
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	2101      	movs	r1, #1
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d197      	bne.n	80050c2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005192:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005196:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 81a5 	beq.w	80054f2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005220 <HAL_RCC_OscConfig+0x8f8>)
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d116      	bne.n	80051e8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ba:	4b19      	ldr	r3, [pc, #100]	@ (8005220 <HAL_RCC_OscConfig+0x8f8>)
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	4a18      	ldr	r2, [pc, #96]	@ (8005220 <HAL_RCC_OscConfig+0x8f8>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c4:	61d3      	str	r3, [r2, #28]
 80051c6:	4b16      	ldr	r3, [pc, #88]	@ (8005220 <HAL_RCC_OscConfig+0x8f8>)
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80051ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051e0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005228 <HAL_RCC_OscConfig+0x900>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d121      	bne.n	8005238 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005228 <HAL_RCC_OscConfig+0x900>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005228 <HAL_RCC_OscConfig+0x900>)
 80051fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051fe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005200:	f7ff f89e 	bl	8004340 <HAL_GetTick>
 8005204:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	e010      	b.n	800522c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800520a:	f7ff f899 	bl	8004340 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b64      	cmp	r3, #100	@ 0x64
 8005218:	d908      	bls.n	800522c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e3d1      	b.n	80059c2 <HAL_RCC_OscConfig+0x109a>
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000
 8005224:	10908120 	.word	0x10908120
 8005228:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522c:	4b8d      	ldr	r3, [pc, #564]	@ (8005464 <HAL_RCC_OscConfig+0xb3c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0e8      	beq.n	800520a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005238:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800523c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d106      	bne.n	8005256 <HAL_RCC_OscConfig+0x92e>
 8005248:	4b87      	ldr	r3, [pc, #540]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	4a86      	ldr	r2, [pc, #536]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6213      	str	r3, [r2, #32]
 8005254:	e035      	b.n	80052c2 <HAL_RCC_OscConfig+0x99a>
 8005256:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800525a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10c      	bne.n	8005280 <HAL_RCC_OscConfig+0x958>
 8005266:	4b80      	ldr	r3, [pc, #512]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	4a7f      	ldr	r2, [pc, #508]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 800526c:	f023 0301 	bic.w	r3, r3, #1
 8005270:	6213      	str	r3, [r2, #32]
 8005272:	4b7d      	ldr	r3, [pc, #500]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	4a7c      	ldr	r2, [pc, #496]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 8005278:	f023 0304 	bic.w	r3, r3, #4
 800527c:	6213      	str	r3, [r2, #32]
 800527e:	e020      	b.n	80052c2 <HAL_RCC_OscConfig+0x99a>
 8005280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005284:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2b05      	cmp	r3, #5
 800528e:	d10c      	bne.n	80052aa <HAL_RCC_OscConfig+0x982>
 8005290:	4b75      	ldr	r3, [pc, #468]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	4a74      	ldr	r2, [pc, #464]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 8005296:	f043 0304 	orr.w	r3, r3, #4
 800529a:	6213      	str	r3, [r2, #32]
 800529c:	4b72      	ldr	r3, [pc, #456]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	4a71      	ldr	r2, [pc, #452]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	6213      	str	r3, [r2, #32]
 80052a8:	e00b      	b.n	80052c2 <HAL_RCC_OscConfig+0x99a>
 80052aa:	4b6f      	ldr	r3, [pc, #444]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	4a6e      	ldr	r2, [pc, #440]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 80052b0:	f023 0301 	bic.w	r3, r3, #1
 80052b4:	6213      	str	r3, [r2, #32]
 80052b6:	4b6c      	ldr	r3, [pc, #432]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	4a6b      	ldr	r2, [pc, #428]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 80052bc:	f023 0304 	bic.w	r3, r3, #4
 80052c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8081 	beq.w	80053d6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d4:	f7ff f834 	bl	8004340 <HAL_GetTick>
 80052d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	e00b      	b.n	80052f6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7ff f82f 	bl	8004340 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e365      	b.n	80059c2 <HAL_RCC_OscConfig+0x109a>
 80052f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80052fe:	2202      	movs	r2, #2
 8005300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005306:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	fa93 f2a3 	rbit	r2, r3
 8005310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005314:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800531e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005322:	2202      	movs	r2, #2
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800532a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	fa93 f2a3 	rbit	r2, r3
 8005334:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005338:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800533c:	601a      	str	r2, [r3, #0]
  return result;
 800533e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005342:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005346:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005348:	fab3 f383 	clz	r3, r3
 800534c:	b2db      	uxtb	r3, r3
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f043 0302 	orr.w	r3, r3, #2
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d102      	bne.n	8005362 <HAL_RCC_OscConfig+0xa3a>
 800535c:	4b42      	ldr	r3, [pc, #264]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	e013      	b.n	800538a <HAL_RCC_OscConfig+0xa62>
 8005362:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005366:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800536a:	2202      	movs	r2, #2
 800536c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005372:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	fa93 f2a3 	rbit	r2, r3
 800537c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005380:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	4b38      	ldr	r3, [pc, #224]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800538e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005392:	2102      	movs	r1, #2
 8005394:	6011      	str	r1, [r2, #0]
 8005396:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800539a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	fa92 f1a2 	rbit	r1, r2
 80053a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80053a8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80053ac:	6011      	str	r1, [r2, #0]
  return result;
 80053ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80053b2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	fab2 f282 	clz	r2, r2
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	f002 021f 	and.w	r2, r2, #31
 80053c8:	2101      	movs	r1, #1
 80053ca:	fa01 f202 	lsl.w	r2, r1, r2
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d084      	beq.n	80052de <HAL_RCC_OscConfig+0x9b6>
 80053d4:	e083      	b.n	80054de <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d6:	f7fe ffb3 	bl	8004340 <HAL_GetTick>
 80053da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053de:	e00b      	b.n	80053f8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e0:	f7fe ffae 	bl	8004340 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e2e4      	b.n	80059c2 <HAL_RCC_OscConfig+0x109a>
 80053f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005400:	2202      	movs	r2, #2
 8005402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005408:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	fa93 f2a3 	rbit	r2, r3
 8005412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005416:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005420:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005424:	2202      	movs	r2, #2
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800542c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	fa93 f2a3 	rbit	r2, r3
 8005436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800543a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800543e:	601a      	str	r2, [r3, #0]
  return result;
 8005440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005444:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005448:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800544a:	fab3 f383 	clz	r3, r3
 800544e:	b2db      	uxtb	r3, r3
 8005450:	095b      	lsrs	r3, r3, #5
 8005452:	b2db      	uxtb	r3, r3
 8005454:	f043 0302 	orr.w	r3, r3, #2
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d106      	bne.n	800546c <HAL_RCC_OscConfig+0xb44>
 800545e:	4b02      	ldr	r3, [pc, #8]	@ (8005468 <HAL_RCC_OscConfig+0xb40>)
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	e017      	b.n	8005494 <HAL_RCC_OscConfig+0xb6c>
 8005464:	40007000 	.word	0x40007000
 8005468:	40021000 	.word	0x40021000
 800546c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005470:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005474:	2202      	movs	r2, #2
 8005476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800547c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	fa93 f2a3 	rbit	r2, r3
 8005486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800548a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	4bb3      	ldr	r3, [pc, #716]	@ (8005760 <HAL_RCC_OscConfig+0xe38>)
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005498:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800549c:	2102      	movs	r1, #2
 800549e:	6011      	str	r1, [r2, #0]
 80054a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80054a4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	fa92 f1a2 	rbit	r1, r2
 80054ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80054b2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80054b6:	6011      	str	r1, [r2, #0]
  return result;
 80054b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80054bc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	fab2 f282 	clz	r2, r2
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	f002 021f 	and.w	r2, r2, #31
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f202 	lsl.w	r2, r1, r2
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d180      	bne.n	80053e0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054de:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d105      	bne.n	80054f2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e6:	4b9e      	ldr	r3, [pc, #632]	@ (8005760 <HAL_RCC_OscConfig+0xe38>)
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	4a9d      	ldr	r2, [pc, #628]	@ (8005760 <HAL_RCC_OscConfig+0xe38>)
 80054ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054f0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 825e 	beq.w	80059c0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005504:	4b96      	ldr	r3, [pc, #600]	@ (8005760 <HAL_RCC_OscConfig+0xe38>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b08      	cmp	r3, #8
 800550e:	f000 821f 	beq.w	8005950 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005516:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	2b02      	cmp	r3, #2
 8005520:	f040 8170 	bne.w	8005804 <HAL_RCC_OscConfig+0xedc>
 8005524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005528:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800552c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005536:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	fa93 f2a3 	rbit	r2, r3
 8005540:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005544:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005548:	601a      	str	r2, [r3, #0]
  return result;
 800554a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800554e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005552:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005554:	fab3 f383 	clz	r3, r3
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800555e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	461a      	mov	r2, r3
 8005566:	2300      	movs	r3, #0
 8005568:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556a:	f7fe fee9 	bl	8004340 <HAL_GetTick>
 800556e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005572:	e009      	b.n	8005588 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005574:	f7fe fee4 	bl	8004340 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e21c      	b.n	80059c2 <HAL_RCC_OscConfig+0x109a>
 8005588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800558c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005590:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800559a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	fa93 f2a3 	rbit	r2, r3
 80055a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055a8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80055ac:	601a      	str	r2, [r3, #0]
  return result;
 80055ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80055b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055b8:	fab3 f383 	clz	r3, r3
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d102      	bne.n	80055d2 <HAL_RCC_OscConfig+0xcaa>
 80055cc:	4b64      	ldr	r3, [pc, #400]	@ (8005760 <HAL_RCC_OscConfig+0xe38>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	e027      	b.n	8005622 <HAL_RCC_OscConfig+0xcfa>
 80055d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055d6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80055da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055e4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	fa93 f2a3 	rbit	r2, r3
 80055ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055f2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055fc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005600:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800560a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	fa93 f2a3 	rbit	r2, r3
 8005614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005618:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	4b50      	ldr	r3, [pc, #320]	@ (8005760 <HAL_RCC_OscConfig+0xe38>)
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005626:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800562a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800562e:	6011      	str	r1, [r2, #0]
 8005630:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005634:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	fa92 f1a2 	rbit	r1, r2
 800563e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005642:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005646:	6011      	str	r1, [r2, #0]
  return result;
 8005648:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800564c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	fab2 f282 	clz	r2, r2
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	f042 0220 	orr.w	r2, r2, #32
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	f002 021f 	and.w	r2, r2, #31
 8005662:	2101      	movs	r1, #1
 8005664:	fa01 f202 	lsl.w	r2, r1, r2
 8005668:	4013      	ands	r3, r2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d182      	bne.n	8005574 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800566e:	4b3c      	ldr	r3, [pc, #240]	@ (8005760 <HAL_RCC_OscConfig+0xe38>)
 8005670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005672:	f023 020f 	bic.w	r2, r3, #15
 8005676:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800567a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005682:	4937      	ldr	r1, [pc, #220]	@ (8005760 <HAL_RCC_OscConfig+0xe38>)
 8005684:	4313      	orrs	r3, r2
 8005686:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005688:	4b35      	ldr	r3, [pc, #212]	@ (8005760 <HAL_RCC_OscConfig+0xe38>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8005690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005694:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6a19      	ldr	r1, [r3, #32]
 800569c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	430b      	orrs	r3, r1
 80056aa:	492d      	ldr	r1, [pc, #180]	@ (8005760 <HAL_RCC_OscConfig+0xe38>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	604b      	str	r3, [r1, #4]
 80056b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056b4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80056b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056c2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	fa93 f2a3 	rbit	r2, r3
 80056cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056d0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80056d4:	601a      	str	r2, [r3, #0]
  return result;
 80056d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056da:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80056de:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056e0:	fab3 f383 	clz	r3, r3
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80056ea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	461a      	mov	r2, r3
 80056f2:	2301      	movs	r3, #1
 80056f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f6:	f7fe fe23 	bl	8004340 <HAL_GetTick>
 80056fa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056fe:	e009      	b.n	8005714 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005700:	f7fe fe1e 	bl	8004340 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e156      	b.n	80059c2 <HAL_RCC_OscConfig+0x109a>
 8005714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005718:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800571c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005726:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	fa93 f2a3 	rbit	r2, r3
 8005730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005734:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005738:	601a      	str	r2, [r3, #0]
  return result;
 800573a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800573e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005742:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005744:	fab3 f383 	clz	r3, r3
 8005748:	b2db      	uxtb	r3, r3
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d105      	bne.n	8005764 <HAL_RCC_OscConfig+0xe3c>
 8005758:	4b01      	ldr	r3, [pc, #4]	@ (8005760 <HAL_RCC_OscConfig+0xe38>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	e02a      	b.n	80057b4 <HAL_RCC_OscConfig+0xe8c>
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000
 8005764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005768:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800576c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005776:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	fa93 f2a3 	rbit	r2, r3
 8005780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005784:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800578e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005792:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800579c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	fa93 f2a3 	rbit	r2, r3
 80057a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057aa:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	4b86      	ldr	r3, [pc, #536]	@ (80059cc <HAL_RCC_OscConfig+0x10a4>)
 80057b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80057b8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80057bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80057c0:	6011      	str	r1, [r2, #0]
 80057c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80057c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	fa92 f1a2 	rbit	r1, r2
 80057d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80057d4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80057d8:	6011      	str	r1, [r2, #0]
  return result;
 80057da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80057de:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	fab2 f282 	clz	r2, r2
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	f042 0220 	orr.w	r2, r2, #32
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	f002 021f 	and.w	r2, r2, #31
 80057f4:	2101      	movs	r1, #1
 80057f6:	fa01 f202 	lsl.w	r2, r1, r2
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f43f af7f 	beq.w	8005700 <HAL_RCC_OscConfig+0xdd8>
 8005802:	e0dd      	b.n	80059c0 <HAL_RCC_OscConfig+0x1098>
 8005804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005808:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800580c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005816:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	fa93 f2a3 	rbit	r2, r3
 8005820:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005824:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005828:	601a      	str	r2, [r3, #0]
  return result;
 800582a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800582e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005832:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005834:	fab3 f383 	clz	r3, r3
 8005838:	b2db      	uxtb	r3, r3
 800583a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800583e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	461a      	mov	r2, r3
 8005846:	2300      	movs	r3, #0
 8005848:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584a:	f7fe fd79 	bl	8004340 <HAL_GetTick>
 800584e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005852:	e009      	b.n	8005868 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005854:	f7fe fd74 	bl	8004340 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e0ac      	b.n	80059c2 <HAL_RCC_OscConfig+0x109a>
 8005868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800586c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005870:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800587a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	fa93 f2a3 	rbit	r2, r3
 8005884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005888:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800588c:	601a      	str	r2, [r3, #0]
  return result;
 800588e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005892:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005896:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005898:	fab3 f383 	clz	r3, r3
 800589c:	b2db      	uxtb	r3, r3
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d102      	bne.n	80058b2 <HAL_RCC_OscConfig+0xf8a>
 80058ac:	4b47      	ldr	r3, [pc, #284]	@ (80059cc <HAL_RCC_OscConfig+0x10a4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	e027      	b.n	8005902 <HAL_RCC_OscConfig+0xfda>
 80058b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058b6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80058ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058c4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	fa93 f2a3 	rbit	r2, r3
 80058ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058d2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058dc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80058e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058ea:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	fa93 f2a3 	rbit	r2, r3
 80058f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058f8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	4b33      	ldr	r3, [pc, #204]	@ (80059cc <HAL_RCC_OscConfig+0x10a4>)
 8005900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005902:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005906:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800590a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800590e:	6011      	str	r1, [r2, #0]
 8005910:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005914:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	fa92 f1a2 	rbit	r1, r2
 800591e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005922:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005926:	6011      	str	r1, [r2, #0]
  return result;
 8005928:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800592c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	fab2 f282 	clz	r2, r2
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	f042 0220 	orr.w	r2, r2, #32
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	f002 021f 	and.w	r2, r2, #31
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f202 	lsl.w	r2, r1, r2
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d182      	bne.n	8005854 <HAL_RCC_OscConfig+0xf2c>
 800594e:	e037      	b.n	80059c0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005954:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e02e      	b.n	80059c2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005964:	4b19      	ldr	r3, [pc, #100]	@ (80059cc <HAL_RCC_OscConfig+0x10a4>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800596c:	4b17      	ldr	r3, [pc, #92]	@ (80059cc <HAL_RCC_OscConfig+0x10a4>)
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005974:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005978:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 800597c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005980:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	429a      	cmp	r2, r3
 800598a:	d117      	bne.n	80059bc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800598c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005990:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005998:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d10b      	bne.n	80059bc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80059a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d001      	beq.n	80059c0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40021000 	.word	0x40021000

080059d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b09e      	sub	sp, #120	@ 0x78
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e162      	b.n	8005cae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059e8:	4b90      	ldr	r3, [pc, #576]	@ (8005c2c <HAL_RCC_ClockConfig+0x25c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d910      	bls.n	8005a18 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f6:	4b8d      	ldr	r3, [pc, #564]	@ (8005c2c <HAL_RCC_ClockConfig+0x25c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 0207 	bic.w	r2, r3, #7
 80059fe:	498b      	ldr	r1, [pc, #556]	@ (8005c2c <HAL_RCC_ClockConfig+0x25c>)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a06:	4b89      	ldr	r3, [pc, #548]	@ (8005c2c <HAL_RCC_ClockConfig+0x25c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d001      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e14a      	b.n	8005cae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a24:	4b82      	ldr	r3, [pc, #520]	@ (8005c30 <HAL_RCC_ClockConfig+0x260>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	497f      	ldr	r1, [pc, #508]	@ (8005c30 <HAL_RCC_ClockConfig+0x260>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80dc 	beq.w	8005bfc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d13c      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0xf6>
 8005a4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a50:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a54:	fa93 f3a3 	rbit	r3, r3
 8005a58:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5c:	fab3 f383 	clz	r3, r3
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d102      	bne.n	8005a76 <HAL_RCC_ClockConfig+0xa6>
 8005a70:	4b6f      	ldr	r3, [pc, #444]	@ (8005c30 <HAL_RCC_ClockConfig+0x260>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	e00f      	b.n	8005a96 <HAL_RCC_ClockConfig+0xc6>
 8005a76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a7e:	fa93 f3a3 	rbit	r3, r3
 8005a82:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a88:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a8c:	fa93 f3a3 	rbit	r3, r3
 8005a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a92:	4b67      	ldr	r3, [pc, #412]	@ (8005c30 <HAL_RCC_ClockConfig+0x260>)
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005a9a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a9e:	fa92 f2a2 	rbit	r2, r2
 8005aa2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005aa4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005aa6:	fab2 f282 	clz	r2, r2
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	f042 0220 	orr.w	r2, r2, #32
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	f002 021f 	and.w	r2, r2, #31
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8005abc:	4013      	ands	r3, r2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d17b      	bne.n	8005bba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e0f3      	b.n	8005cae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d13c      	bne.n	8005b48 <HAL_RCC_ClockConfig+0x178>
 8005ace:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ad2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ad6:	fa93 f3a3 	rbit	r3, r3
 8005ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ade:	fab3 f383 	clz	r3, r3
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d102      	bne.n	8005af8 <HAL_RCC_ClockConfig+0x128>
 8005af2:	4b4f      	ldr	r3, [pc, #316]	@ (8005c30 <HAL_RCC_ClockConfig+0x260>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	e00f      	b.n	8005b18 <HAL_RCC_ClockConfig+0x148>
 8005af8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005afc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b00:	fa93 f3a3 	rbit	r3, r3
 8005b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b0e:	fa93 f3a3 	rbit	r3, r3
 8005b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b14:	4b46      	ldr	r3, [pc, #280]	@ (8005c30 <HAL_RCC_ClockConfig+0x260>)
 8005b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b1c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005b1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b20:	fa92 f2a2 	rbit	r2, r2
 8005b24:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005b26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b28:	fab2 f282 	clz	r2, r2
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	f042 0220 	orr.w	r2, r2, #32
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	f002 021f 	and.w	r2, r2, #31
 8005b38:	2101      	movs	r1, #1
 8005b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b3e:	4013      	ands	r3, r2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d13a      	bne.n	8005bba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0b2      	b.n	8005cae <HAL_RCC_ClockConfig+0x2de>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4e:	fa93 f3a3 	rbit	r3, r3
 8005b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b56:	fab3 f383 	clz	r3, r3
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d102      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x1a0>
 8005b6a:	4b31      	ldr	r3, [pc, #196]	@ (8005c30 <HAL_RCC_ClockConfig+0x260>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	e00d      	b.n	8005b8c <HAL_RCC_ClockConfig+0x1bc>
 8005b70:	2302      	movs	r3, #2
 8005b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	fa93 f3a3 	rbit	r3, r3
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	fa93 f3a3 	rbit	r3, r3
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	4b29      	ldr	r3, [pc, #164]	@ (8005c30 <HAL_RCC_ClockConfig+0x260>)
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	61ba      	str	r2, [r7, #24]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	fa92 f2a2 	rbit	r2, r2
 8005b96:	617a      	str	r2, [r7, #20]
  return result;
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	fab2 f282 	clz	r2, r2
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	f042 0220 	orr.w	r2, r2, #32
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	f002 021f 	and.w	r2, r2, #31
 8005baa:	2101      	movs	r1, #1
 8005bac:	fa01 f202 	lsl.w	r2, r1, r2
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e079      	b.n	8005cae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bba:	4b1d      	ldr	r3, [pc, #116]	@ (8005c30 <HAL_RCC_ClockConfig+0x260>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f023 0203 	bic.w	r2, r3, #3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	491a      	ldr	r1, [pc, #104]	@ (8005c30 <HAL_RCC_ClockConfig+0x260>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bcc:	f7fe fbb8 	bl	8004340 <HAL_GetTick>
 8005bd0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd2:	e00a      	b.n	8005bea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd4:	f7fe fbb4 	bl	8004340 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e061      	b.n	8005cae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bea:	4b11      	ldr	r3, [pc, #68]	@ (8005c30 <HAL_RCC_ClockConfig+0x260>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f003 020c 	and.w	r2, r3, #12
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d1eb      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <HAL_RCC_ClockConfig+0x25c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d214      	bcs.n	8005c34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b08      	ldr	r3, [pc, #32]	@ (8005c2c <HAL_RCC_ClockConfig+0x25c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 0207 	bic.w	r2, r3, #7
 8005c12:	4906      	ldr	r1, [pc, #24]	@ (8005c2c <HAL_RCC_ClockConfig+0x25c>)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b04      	ldr	r3, [pc, #16]	@ (8005c2c <HAL_RCC_ClockConfig+0x25c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d005      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e040      	b.n	8005cae <HAL_RCC_ClockConfig+0x2de>
 8005c2c:	40022000 	.word	0x40022000
 8005c30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c40:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb8 <HAL_RCC_ClockConfig+0x2e8>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	491a      	ldr	r1, [pc, #104]	@ (8005cb8 <HAL_RCC_ClockConfig+0x2e8>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c5e:	4b16      	ldr	r3, [pc, #88]	@ (8005cb8 <HAL_RCC_ClockConfig+0x2e8>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4912      	ldr	r1, [pc, #72]	@ (8005cb8 <HAL_RCC_ClockConfig+0x2e8>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c72:	f000 f829 	bl	8005cc8 <HAL_RCC_GetSysClockFreq>
 8005c76:	4601      	mov	r1, r0
 8005c78:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb8 <HAL_RCC_ClockConfig+0x2e8>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c80:	22f0      	movs	r2, #240	@ 0xf0
 8005c82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	fa92 f2a2 	rbit	r2, r2
 8005c8a:	60fa      	str	r2, [r7, #12]
  return result;
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	fab2 f282 	clz	r2, r2
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	40d3      	lsrs	r3, r2
 8005c96:	4a09      	ldr	r2, [pc, #36]	@ (8005cbc <HAL_RCC_ClockConfig+0x2ec>)
 8005c98:	5cd3      	ldrb	r3, [r2, r3]
 8005c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8005c9e:	4a08      	ldr	r2, [pc, #32]	@ (8005cc0 <HAL_RCC_ClockConfig+0x2f0>)
 8005ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ca2:	4b08      	ldr	r3, [pc, #32]	@ (8005cc4 <HAL_RCC_ClockConfig+0x2f4>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe fb06 	bl	80042b8 <HAL_InitTick>
  
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3778      	adds	r7, #120	@ 0x78
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	08007950 	.word	0x08007950
 8005cc0:	20000030 	.word	0x20000030
 8005cc4:	20000034 	.word	0x20000034

08005cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d002      	beq.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d003      	beq.n	8005cfe <HAL_RCC_GetSysClockFreq+0x36>
 8005cf6:	e029      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005cfa:	613b      	str	r3, [r7, #16]
      break;
 8005cfc:	e029      	b.n	8005d52 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	0c9b      	lsrs	r3, r3, #18
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	4a18      	ldr	r2, [pc, #96]	@ (8005d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d08:	5cd3      	ldrb	r3, [r2, r3]
 8005d0a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005d0c:	4b14      	ldr	r3, [pc, #80]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	4a15      	ldr	r2, [pc, #84]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d16:	5cd3      	ldrb	r3, [r2, r3]
 8005d18:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d24:	4a0f      	ldr	r2, [pc, #60]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	fb02 f303 	mul.w	r3, r2, r3
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	e007      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d36:	4a0b      	ldr	r2, [pc, #44]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	fb02 f303 	mul.w	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	613b      	str	r3, [r7, #16]
      break;
 8005d4a:	e002      	b.n	8005d52 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d4c:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d4e:	613b      	str	r3, [r7, #16]
      break;
 8005d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d52:	693b      	ldr	r3, [r7, #16]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40021000 	.word	0x40021000
 8005d64:	007a1200 	.word	0x007a1200
 8005d68:	08007960 	.word	0x08007960
 8005d6c:	08007970 	.word	0x08007970

08005d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b092      	sub	sp, #72	@ 0x48
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005d80:	2300      	movs	r3, #0
 8005d82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 80d4 	beq.w	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d94:	4b4e      	ldr	r3, [pc, #312]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10e      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da0:	4b4b      	ldr	r3, [pc, #300]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	4a4a      	ldr	r2, [pc, #296]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005daa:	61d3      	str	r3, [r2, #28]
 8005dac:	4b48      	ldr	r3, [pc, #288]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db4:	60bb      	str	r3, [r7, #8]
 8005db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005db8:	2301      	movs	r3, #1
 8005dba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dbe:	4b45      	ldr	r3, [pc, #276]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d118      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dca:	4b42      	ldr	r3, [pc, #264]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a41      	ldr	r2, [pc, #260]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dd4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dd6:	f7fe fab3 	bl	8004340 <HAL_GetTick>
 8005dda:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ddc:	e008      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dde:	f7fe faaf 	bl	8004340 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b64      	cmp	r3, #100	@ 0x64
 8005dea:	d901      	bls.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e1d6      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df0:	4b38      	ldr	r3, [pc, #224]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f0      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dfc:	4b34      	ldr	r3, [pc, #208]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8084 	beq.w	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d07c      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005e2a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2e:	fa93 f3a3 	rbit	r3, r3
 8005e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e36:	fab3 f383 	clz	r3, r3
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4b26      	ldr	r3, [pc, #152]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	461a      	mov	r2, r3
 8005e46:	2301      	movs	r3, #1
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e52:	fa93 f3a3 	rbit	r3, r3
 8005e56:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e5a:	fab3 f383 	clz	r3, r3
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	461a      	mov	r2, r3
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e6e:	4a18      	ldr	r2, [pc, #96]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e72:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d04b      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7e:	f7fe fa5f 	bl	8004340 <HAL_GetTick>
 8005e82:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e84:	e00a      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e86:	f7fe fa5b 	bl	8004340 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e180      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea2:	fa93 f3a3 	rbit	r3, r3
 8005ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	fa93 f3a3 	rbit	r3, r3
 8005eb2:	61fb      	str	r3, [r7, #28]
  return result;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eb6:	fab3 f383 	clz	r3, r3
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f043 0302 	orr.w	r3, r3, #2
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d108      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005eca:	4b01      	ldr	r3, [pc, #4]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	e00d      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40007000 	.word	0x40007000
 8005ed8:	10908100 	.word	0x10908100
 8005edc:	2302      	movs	r3, #2
 8005ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	fa93 f3a3 	rbit	r3, r3
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	4b9a      	ldr	r3, [pc, #616]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	2202      	movs	r2, #2
 8005eee:	613a      	str	r2, [r7, #16]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	fa92 f2a2 	rbit	r2, r2
 8005ef6:	60fa      	str	r2, [r7, #12]
  return result;
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	fab2 f282 	clz	r2, r2
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	f002 021f 	and.w	r2, r2, #31
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0b7      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005f16:	4b8f      	ldr	r3, [pc, #572]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	498c      	ldr	r1, [pc, #560]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d105      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f30:	4b88      	ldr	r3, [pc, #544]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	4a87      	ldr	r2, [pc, #540]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f48:	4b82      	ldr	r3, [pc, #520]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4c:	f023 0203 	bic.w	r2, r3, #3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	497f      	ldr	r1, [pc, #508]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f66:	4b7b      	ldr	r3, [pc, #492]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	4978      	ldr	r1, [pc, #480]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f84:	4b73      	ldr	r3, [pc, #460]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	4970      	ldr	r1, [pc, #448]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fa2:	4b6c      	ldr	r3, [pc, #432]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa6:	f023 0210 	bic.w	r2, r3, #16
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	4969      	ldr	r1, [pc, #420]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d008      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005fc0:	4b64      	ldr	r3, [pc, #400]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fcc:	4961      	ldr	r1, [pc, #388]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d008      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fde:	4b5d      	ldr	r3, [pc, #372]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe2:	f023 0220 	bic.w	r2, r3, #32
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	495a      	ldr	r1, [pc, #360]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ffc:	4b55      	ldr	r3, [pc, #340]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006000:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006008:	4952      	ldr	r1, [pc, #328]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800600a:	4313      	orrs	r3, r2
 800600c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d008      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800601a:	4b4e      	ldr	r3, [pc, #312]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	494b      	ldr	r1, [pc, #300]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006028:	4313      	orrs	r3, r2
 800602a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006038:	4b46      	ldr	r3, [pc, #280]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800603a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	4943      	ldr	r1, [pc, #268]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006046:	4313      	orrs	r3, r2
 8006048:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006056:	4b3f      	ldr	r3, [pc, #252]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006062:	493c      	ldr	r1, [pc, #240]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006064:	4313      	orrs	r3, r2
 8006066:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006074:	4b37      	ldr	r3, [pc, #220]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006078:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	4934      	ldr	r1, [pc, #208]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006082:	4313      	orrs	r3, r2
 8006084:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608e:	2b00      	cmp	r3, #0
 8006090:	d008      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006092:	4b30      	ldr	r3, [pc, #192]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006096:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	492d      	ldr	r1, [pc, #180]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80060b0:	4b28      	ldr	r3, [pc, #160]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060bc:	4925      	ldr	r1, [pc, #148]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80060ce:	4b21      	ldr	r3, [pc, #132]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060da:	491e      	ldr	r1, [pc, #120]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80060ec:	4b19      	ldr	r3, [pc, #100]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f8:	4916      	ldr	r1, [pc, #88]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d008      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800610a:	4b12      	ldr	r3, [pc, #72]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800610c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006116:	490f      	ldr	r1, [pc, #60]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006118:	4313      	orrs	r3, r2
 800611a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d008      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006128:	4b0a      	ldr	r3, [pc, #40]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800612a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006134:	4907      	ldr	r1, [pc, #28]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006136:	4313      	orrs	r3, r2
 8006138:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00c      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006146:	4b03      	ldr	r3, [pc, #12]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	e002      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006152:	bf00      	nop
 8006154:	40021000 	.word	0x40021000
 8006158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800615a:	4913      	ldr	r1, [pc, #76]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800615c:	4313      	orrs	r3, r2
 800615e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d008      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800616c:	4b0e      	ldr	r3, [pc, #56]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800616e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006170:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006178:	490b      	ldr	r1, [pc, #44]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800617a:	4313      	orrs	r3, r2
 800617c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d008      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800618a:	4b07      	ldr	r3, [pc, #28]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800618c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006196:	4904      	ldr	r1, [pc, #16]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006198:	4313      	orrs	r3, r2
 800619a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3748      	adds	r7, #72	@ 0x48
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40021000 	.word	0x40021000

080061ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e049      	b.n	8006252 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fd ffb2 	bl	800413c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f000 faa4 	bl	8006738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b01      	cmp	r3, #1
 800626e:	d001      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e04f      	b.n	8006314 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0201 	orr.w	r2, r2, #1
 800628a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a23      	ldr	r2, [pc, #140]	@ (8006320 <HAL_TIM_Base_Start_IT+0xc4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01d      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629e:	d018      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006324 <HAL_TIM_Base_Start_IT+0xc8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006328 <HAL_TIM_Base_Start_IT+0xcc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00e      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <HAL_TIM_Base_Start_IT+0xd0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d009      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006330 <HAL_TIM_Base_Start_IT+0xd4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d004      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a19      	ldr	r2, [pc, #100]	@ (8006334 <HAL_TIM_Base_Start_IT+0xd8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d115      	bne.n	80062fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	4b17      	ldr	r3, [pc, #92]	@ (8006338 <HAL_TIM_Base_Start_IT+0xdc>)
 80062da:	4013      	ands	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b06      	cmp	r3, #6
 80062e2:	d015      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0xb4>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ea:	d011      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fc:	e008      	b.n	8006310 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e000      	b.n	8006312 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006310:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800
 800632c:	40013400 	.word	0x40013400
 8006330:	40014000 	.word	0x40014000
 8006334:	40015000 	.word	0x40015000
 8006338:	00010007 	.word	0x00010007

0800633c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d020      	beq.n	80063a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01b      	beq.n	80063a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0202 	mvn.w	r2, #2
 8006370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9b7 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
 800638c:	e005      	b.n	800639a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9a9 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f9ba 	bl	800670e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d020      	beq.n	80063ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01b      	beq.n	80063ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f06f 0204 	mvn.w	r2, #4
 80063bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2202      	movs	r2, #2
 80063c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f991 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
 80063d8:	e005      	b.n	80063e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f983 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f994 	bl	800670e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d020      	beq.n	8006438 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01b      	beq.n	8006438 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0208 	mvn.w	r2, #8
 8006408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2204      	movs	r2, #4
 800640e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f96b 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f95d 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f96e 	bl	800670e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 0310 	and.w	r3, r3, #16
 800643e:	2b00      	cmp	r3, #0
 8006440:	d020      	beq.n	8006484 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01b      	beq.n	8006484 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0210 	mvn.w	r2, #16
 8006454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2208      	movs	r2, #8
 800645a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f945 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
 8006470:	e005      	b.n	800647e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f937 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f948 	bl	800670e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00c      	beq.n	80064a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0201 	mvn.w	r2, #1
 80064a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f915 	bl	80066d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00c      	beq.n	80064cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80064c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fb10 	bl	8006aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00c      	beq.n	80064f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fb08 	bl	8006b00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00c      	beq.n	8006514 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800650c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f907 	bl	8006722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00c      	beq.n	8006538 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0220 	mvn.w	r2, #32
 8006530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fad0 	bl	8006ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_TIM_ConfigClockSource+0x1c>
 8006558:	2302      	movs	r3, #2
 800655a:	e0b6      	b.n	80066ca <HAL_TIM_ConfigClockSource+0x18a>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800657a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800657e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006598:	d03e      	beq.n	8006618 <HAL_TIM_ConfigClockSource+0xd8>
 800659a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800659e:	f200 8087 	bhi.w	80066b0 <HAL_TIM_ConfigClockSource+0x170>
 80065a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065a6:	f000 8086 	beq.w	80066b6 <HAL_TIM_ConfigClockSource+0x176>
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ae:	d87f      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x170>
 80065b0:	2b70      	cmp	r3, #112	@ 0x70
 80065b2:	d01a      	beq.n	80065ea <HAL_TIM_ConfigClockSource+0xaa>
 80065b4:	2b70      	cmp	r3, #112	@ 0x70
 80065b6:	d87b      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x170>
 80065b8:	2b60      	cmp	r3, #96	@ 0x60
 80065ba:	d050      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x11e>
 80065bc:	2b60      	cmp	r3, #96	@ 0x60
 80065be:	d877      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x170>
 80065c0:	2b50      	cmp	r3, #80	@ 0x50
 80065c2:	d03c      	beq.n	800663e <HAL_TIM_ConfigClockSource+0xfe>
 80065c4:	2b50      	cmp	r3, #80	@ 0x50
 80065c6:	d873      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x170>
 80065c8:	2b40      	cmp	r3, #64	@ 0x40
 80065ca:	d058      	beq.n	800667e <HAL_TIM_ConfigClockSource+0x13e>
 80065cc:	2b40      	cmp	r3, #64	@ 0x40
 80065ce:	d86f      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x170>
 80065d0:	2b30      	cmp	r3, #48	@ 0x30
 80065d2:	d064      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x15e>
 80065d4:	2b30      	cmp	r3, #48	@ 0x30
 80065d6:	d86b      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x170>
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d060      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x15e>
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d867      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x170>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d05c      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x15e>
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d05a      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x15e>
 80065e8:	e062      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065fa:	f000 f9c1 	bl	8006980 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800660c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	609a      	str	r2, [r3, #8]
      break;
 8006616:	e04f      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006628:	f000 f9aa 	bl	8006980 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800663a:	609a      	str	r2, [r3, #8]
      break;
 800663c:	e03c      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800664a:	461a      	mov	r2, r3
 800664c:	f000 f91e 	bl	800688c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2150      	movs	r1, #80	@ 0x50
 8006656:	4618      	mov	r0, r3
 8006658:	f000 f977 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 800665c:	e02c      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800666a:	461a      	mov	r2, r3
 800666c:	f000 f93d 	bl	80068ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2160      	movs	r1, #96	@ 0x60
 8006676:	4618      	mov	r0, r3
 8006678:	f000 f967 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 800667c:	e01c      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800668a:	461a      	mov	r2, r3
 800668c:	f000 f8fe 	bl	800688c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2140      	movs	r1, #64	@ 0x40
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f957 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 800669c:	e00c      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f000 f94e 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 80066ae:	e003      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	73fb      	strb	r3, [r7, #15]
      break;
 80066b4:	e000      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80066b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a48      	ldr	r2, [pc, #288]	@ (800686c <TIM_Base_SetConfig+0x134>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d013      	beq.n	8006778 <TIM_Base_SetConfig+0x40>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006756:	d00f      	beq.n	8006778 <TIM_Base_SetConfig+0x40>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a45      	ldr	r2, [pc, #276]	@ (8006870 <TIM_Base_SetConfig+0x138>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d00b      	beq.n	8006778 <TIM_Base_SetConfig+0x40>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a44      	ldr	r2, [pc, #272]	@ (8006874 <TIM_Base_SetConfig+0x13c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d007      	beq.n	8006778 <TIM_Base_SetConfig+0x40>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a43      	ldr	r2, [pc, #268]	@ (8006878 <TIM_Base_SetConfig+0x140>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_Base_SetConfig+0x40>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a42      	ldr	r2, [pc, #264]	@ (800687c <TIM_Base_SetConfig+0x144>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d108      	bne.n	800678a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a37      	ldr	r2, [pc, #220]	@ (800686c <TIM_Base_SetConfig+0x134>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d01f      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006798:	d01b      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a34      	ldr	r2, [pc, #208]	@ (8006870 <TIM_Base_SetConfig+0x138>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d017      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a33      	ldr	r2, [pc, #204]	@ (8006874 <TIM_Base_SetConfig+0x13c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a32      	ldr	r2, [pc, #200]	@ (8006878 <TIM_Base_SetConfig+0x140>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00f      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a32      	ldr	r2, [pc, #200]	@ (8006880 <TIM_Base_SetConfig+0x148>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00b      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a31      	ldr	r2, [pc, #196]	@ (8006884 <TIM_Base_SetConfig+0x14c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d007      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a30      	ldr	r2, [pc, #192]	@ (8006888 <TIM_Base_SetConfig+0x150>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d003      	beq.n	80067d2 <TIM_Base_SetConfig+0x9a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a2b      	ldr	r2, [pc, #172]	@ (800687c <TIM_Base_SetConfig+0x144>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d108      	bne.n	80067e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a18      	ldr	r2, [pc, #96]	@ (800686c <TIM_Base_SetConfig+0x134>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d013      	beq.n	8006838 <TIM_Base_SetConfig+0x100>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a19      	ldr	r2, [pc, #100]	@ (8006878 <TIM_Base_SetConfig+0x140>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00f      	beq.n	8006838 <TIM_Base_SetConfig+0x100>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a19      	ldr	r2, [pc, #100]	@ (8006880 <TIM_Base_SetConfig+0x148>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00b      	beq.n	8006838 <TIM_Base_SetConfig+0x100>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a18      	ldr	r2, [pc, #96]	@ (8006884 <TIM_Base_SetConfig+0x14c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d007      	beq.n	8006838 <TIM_Base_SetConfig+0x100>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a17      	ldr	r2, [pc, #92]	@ (8006888 <TIM_Base_SetConfig+0x150>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d003      	beq.n	8006838 <TIM_Base_SetConfig+0x100>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a12      	ldr	r2, [pc, #72]	@ (800687c <TIM_Base_SetConfig+0x144>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d103      	bne.n	8006840 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b01      	cmp	r3, #1
 8006850:	d105      	bne.n	800685e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f023 0201 	bic.w	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	611a      	str	r2, [r3, #16]
  }
}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	40012c00 	.word	0x40012c00
 8006870:	40000400 	.word	0x40000400
 8006874:	40000800 	.word	0x40000800
 8006878:	40013400 	.word	0x40013400
 800687c:	40015000 	.word	0x40015000
 8006880:	40014000 	.word	0x40014000
 8006884:	40014400 	.word	0x40014400
 8006888:	40014800 	.word	0x40014800

0800688c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f023 0201 	bic.w	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f023 030a 	bic.w	r3, r3, #10
 80068c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b087      	sub	sp, #28
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f023 0210 	bic.w	r2, r3, #16
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	031b      	lsls	r3, r3, #12
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006926:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	f043 0307 	orr.w	r3, r3, #7
 800696c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800699a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	609a      	str	r2, [r3, #8]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e06d      	b.n	8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a30      	ldr	r2, [pc, #192]	@ (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d009      	beq.n	8006a16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a2f      	ldr	r2, [pc, #188]	@ (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d004      	beq.n	8006a16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a2d      	ldr	r2, [pc, #180]	@ (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d108      	bne.n	8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d01d      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a54:	d018      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d013      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00e      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a15      	ldr	r2, [pc, #84]	@ (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d009      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a16      	ldr	r2, [pc, #88]	@ (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a11      	ldr	r2, [pc, #68]	@ (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d10c      	bne.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40013400 	.word	0x40013400
 8006ac8:	40015000 	.word	0x40015000
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40014000 	.word	0x40014000

08006ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <memset>:
 8006b14:	4402      	add	r2, r0
 8006b16:	4603      	mov	r3, r0
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d100      	bne.n	8006b1e <memset+0xa>
 8006b1c:	4770      	bx	lr
 8006b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b22:	e7f9      	b.n	8006b18 <memset+0x4>

08006b24 <__errno>:
 8006b24:	4b01      	ldr	r3, [pc, #4]	@ (8006b2c <__errno+0x8>)
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	2000003c 	.word	0x2000003c

08006b30 <__libc_init_array>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	4d0d      	ldr	r5, [pc, #52]	@ (8006b68 <__libc_init_array+0x38>)
 8006b34:	4c0d      	ldr	r4, [pc, #52]	@ (8006b6c <__libc_init_array+0x3c>)
 8006b36:	1b64      	subs	r4, r4, r5
 8006b38:	10a4      	asrs	r4, r4, #2
 8006b3a:	2600      	movs	r6, #0
 8006b3c:	42a6      	cmp	r6, r4
 8006b3e:	d109      	bne.n	8006b54 <__libc_init_array+0x24>
 8006b40:	4d0b      	ldr	r5, [pc, #44]	@ (8006b70 <__libc_init_array+0x40>)
 8006b42:	4c0c      	ldr	r4, [pc, #48]	@ (8006b74 <__libc_init_array+0x44>)
 8006b44:	f000 f91e 	bl	8006d84 <_init>
 8006b48:	1b64      	subs	r4, r4, r5
 8006b4a:	10a4      	asrs	r4, r4, #2
 8006b4c:	2600      	movs	r6, #0
 8006b4e:	42a6      	cmp	r6, r4
 8006b50:	d105      	bne.n	8006b5e <__libc_init_array+0x2e>
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b58:	4798      	blx	r3
 8006b5a:	3601      	adds	r6, #1
 8006b5c:	e7ee      	b.n	8006b3c <__libc_init_array+0xc>
 8006b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b62:	4798      	blx	r3
 8006b64:	3601      	adds	r6, #1
 8006b66:	e7f2      	b.n	8006b4e <__libc_init_array+0x1e>
 8006b68:	08007980 	.word	0x08007980
 8006b6c:	08007980 	.word	0x08007980
 8006b70:	08007980 	.word	0x08007980
 8006b74:	08007984 	.word	0x08007984

08006b78 <sqrt>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	ed2d 8b02 	vpush	{d8}
 8006b7e:	ec55 4b10 	vmov	r4, r5, d0
 8006b82:	f000 f825 	bl	8006bd0 <__ieee754_sqrt>
 8006b86:	4622      	mov	r2, r4
 8006b88:	462b      	mov	r3, r5
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	eeb0 8a40 	vmov.f32	s16, s0
 8006b92:	eef0 8a60 	vmov.f32	s17, s1
 8006b96:	f7f9 ff75 	bl	8000a84 <__aeabi_dcmpun>
 8006b9a:	b990      	cbnz	r0, 8006bc2 <sqrt+0x4a>
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	f7f9 ff46 	bl	8000a34 <__aeabi_dcmplt>
 8006ba8:	b158      	cbz	r0, 8006bc2 <sqrt+0x4a>
 8006baa:	f7ff ffbb 	bl	8006b24 <__errno>
 8006bae:	2321      	movs	r3, #33	@ 0x21
 8006bb0:	6003      	str	r3, [r0, #0]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f7f9 fdf3 	bl	80007a4 <__aeabi_ddiv>
 8006bbe:	ec41 0b18 	vmov	d8, r0, r1
 8006bc2:	eeb0 0a48 	vmov.f32	s0, s16
 8006bc6:	eef0 0a68 	vmov.f32	s1, s17
 8006bca:	ecbd 8b02 	vpop	{d8}
 8006bce:	bd38      	pop	{r3, r4, r5, pc}

08006bd0 <__ieee754_sqrt>:
 8006bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	4a68      	ldr	r2, [pc, #416]	@ (8006d78 <__ieee754_sqrt+0x1a8>)
 8006bd6:	ec55 4b10 	vmov	r4, r5, d0
 8006bda:	43aa      	bics	r2, r5
 8006bdc:	462b      	mov	r3, r5
 8006bde:	4621      	mov	r1, r4
 8006be0:	d110      	bne.n	8006c04 <__ieee754_sqrt+0x34>
 8006be2:	4622      	mov	r2, r4
 8006be4:	4620      	mov	r0, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7f9 fcb2 	bl	8000550 <__aeabi_dmul>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	f7f9 faf6 	bl	80001e4 <__adddf3>
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	ec45 4b10 	vmov	d0, r4, r5
 8006c00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c04:	2d00      	cmp	r5, #0
 8006c06:	dc0e      	bgt.n	8006c26 <__ieee754_sqrt+0x56>
 8006c08:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006c0c:	4322      	orrs	r2, r4
 8006c0e:	d0f5      	beq.n	8006bfc <__ieee754_sqrt+0x2c>
 8006c10:	b19d      	cbz	r5, 8006c3a <__ieee754_sqrt+0x6a>
 8006c12:	4622      	mov	r2, r4
 8006c14:	4620      	mov	r0, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	f7f9 fae2 	bl	80001e0 <__aeabi_dsub>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	f7f9 fdc0 	bl	80007a4 <__aeabi_ddiv>
 8006c24:	e7e8      	b.n	8006bf8 <__ieee754_sqrt+0x28>
 8006c26:	152a      	asrs	r2, r5, #20
 8006c28:	d115      	bne.n	8006c56 <__ieee754_sqrt+0x86>
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	e009      	b.n	8006c42 <__ieee754_sqrt+0x72>
 8006c2e:	0acb      	lsrs	r3, r1, #11
 8006c30:	3a15      	subs	r2, #21
 8006c32:	0549      	lsls	r1, r1, #21
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0fa      	beq.n	8006c2e <__ieee754_sqrt+0x5e>
 8006c38:	e7f7      	b.n	8006c2a <__ieee754_sqrt+0x5a>
 8006c3a:	462a      	mov	r2, r5
 8006c3c:	e7fa      	b.n	8006c34 <__ieee754_sqrt+0x64>
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	3001      	adds	r0, #1
 8006c42:	02dc      	lsls	r4, r3, #11
 8006c44:	d5fb      	bpl.n	8006c3e <__ieee754_sqrt+0x6e>
 8006c46:	1e44      	subs	r4, r0, #1
 8006c48:	1b12      	subs	r2, r2, r4
 8006c4a:	f1c0 0420 	rsb	r4, r0, #32
 8006c4e:	fa21 f404 	lsr.w	r4, r1, r4
 8006c52:	4323      	orrs	r3, r4
 8006c54:	4081      	lsls	r1, r0
 8006c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c5a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c62:	07d2      	lsls	r2, r2, #31
 8006c64:	bf5c      	itt	pl
 8006c66:	005b      	lslpl	r3, r3, #1
 8006c68:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c70:	bf58      	it	pl
 8006c72:	0049      	lslpl	r1, r1, #1
 8006c74:	2600      	movs	r6, #0
 8006c76:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006c7a:	106d      	asrs	r5, r5, #1
 8006c7c:	0049      	lsls	r1, r1, #1
 8006c7e:	2016      	movs	r0, #22
 8006c80:	4632      	mov	r2, r6
 8006c82:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006c86:	1917      	adds	r7, r2, r4
 8006c88:	429f      	cmp	r7, r3
 8006c8a:	bfde      	ittt	le
 8006c8c:	193a      	addle	r2, r7, r4
 8006c8e:	1bdb      	suble	r3, r3, r7
 8006c90:	1936      	addle	r6, r6, r4
 8006c92:	0fcf      	lsrs	r7, r1, #31
 8006c94:	3801      	subs	r0, #1
 8006c96:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006c9a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006c9e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006ca2:	d1f0      	bne.n	8006c86 <__ieee754_sqrt+0xb6>
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	2720      	movs	r7, #32
 8006ca8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006cac:	429a      	cmp	r2, r3
 8006cae:	eb00 0e0c 	add.w	lr, r0, ip
 8006cb2:	db02      	blt.n	8006cba <__ieee754_sqrt+0xea>
 8006cb4:	d113      	bne.n	8006cde <__ieee754_sqrt+0x10e>
 8006cb6:	458e      	cmp	lr, r1
 8006cb8:	d811      	bhi.n	8006cde <__ieee754_sqrt+0x10e>
 8006cba:	f1be 0f00 	cmp.w	lr, #0
 8006cbe:	eb0e 000c 	add.w	r0, lr, ip
 8006cc2:	da42      	bge.n	8006d4a <__ieee754_sqrt+0x17a>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	db40      	blt.n	8006d4a <__ieee754_sqrt+0x17a>
 8006cc8:	f102 0801 	add.w	r8, r2, #1
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	458e      	cmp	lr, r1
 8006cd0:	bf88      	it	hi
 8006cd2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006cd6:	eba1 010e 	sub.w	r1, r1, lr
 8006cda:	4464      	add	r4, ip
 8006cdc:	4642      	mov	r2, r8
 8006cde:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006ce2:	3f01      	subs	r7, #1
 8006ce4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006ce8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006cec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006cf0:	d1dc      	bne.n	8006cac <__ieee754_sqrt+0xdc>
 8006cf2:	4319      	orrs	r1, r3
 8006cf4:	d01b      	beq.n	8006d2e <__ieee754_sqrt+0x15e>
 8006cf6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006d7c <__ieee754_sqrt+0x1ac>
 8006cfa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006d80 <__ieee754_sqrt+0x1b0>
 8006cfe:	e9da 0100 	ldrd	r0, r1, [sl]
 8006d02:	e9db 2300 	ldrd	r2, r3, [fp]
 8006d06:	f7f9 fa6b 	bl	80001e0 <__aeabi_dsub>
 8006d0a:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4640      	mov	r0, r8
 8006d14:	4649      	mov	r1, r9
 8006d16:	f7f9 fe97 	bl	8000a48 <__aeabi_dcmple>
 8006d1a:	b140      	cbz	r0, 8006d2e <__ieee754_sqrt+0x15e>
 8006d1c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006d20:	e9da 0100 	ldrd	r0, r1, [sl]
 8006d24:	e9db 2300 	ldrd	r2, r3, [fp]
 8006d28:	d111      	bne.n	8006d4e <__ieee754_sqrt+0x17e>
 8006d2a:	3601      	adds	r6, #1
 8006d2c:	463c      	mov	r4, r7
 8006d2e:	1072      	asrs	r2, r6, #1
 8006d30:	0863      	lsrs	r3, r4, #1
 8006d32:	07f1      	lsls	r1, r6, #31
 8006d34:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006d38:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006d3c:	bf48      	it	mi
 8006d3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006d42:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006d46:	4618      	mov	r0, r3
 8006d48:	e756      	b.n	8006bf8 <__ieee754_sqrt+0x28>
 8006d4a:	4690      	mov	r8, r2
 8006d4c:	e7be      	b.n	8006ccc <__ieee754_sqrt+0xfc>
 8006d4e:	f7f9 fa49 	bl	80001e4 <__adddf3>
 8006d52:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	f7f9 fe69 	bl	8000a34 <__aeabi_dcmplt>
 8006d62:	b120      	cbz	r0, 8006d6e <__ieee754_sqrt+0x19e>
 8006d64:	1ca0      	adds	r0, r4, #2
 8006d66:	bf08      	it	eq
 8006d68:	3601      	addeq	r6, #1
 8006d6a:	3402      	adds	r4, #2
 8006d6c:	e7df      	b.n	8006d2e <__ieee754_sqrt+0x15e>
 8006d6e:	1c63      	adds	r3, r4, #1
 8006d70:	f023 0401 	bic.w	r4, r3, #1
 8006d74:	e7db      	b.n	8006d2e <__ieee754_sqrt+0x15e>
 8006d76:	bf00      	nop
 8006d78:	7ff00000 	.word	0x7ff00000
 8006d7c:	20000098 	.word	0x20000098
 8006d80:	20000090 	.word	0x20000090

08006d84 <_init>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	bf00      	nop
 8006d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8a:	bc08      	pop	{r3}
 8006d8c:	469e      	mov	lr, r3
 8006d8e:	4770      	bx	lr

08006d90 <_fini>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	bf00      	nop
 8006d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d96:	bc08      	pop	{r3}
 8006d98:	469e      	mov	lr, r3
 8006d9a:	4770      	bx	lr
