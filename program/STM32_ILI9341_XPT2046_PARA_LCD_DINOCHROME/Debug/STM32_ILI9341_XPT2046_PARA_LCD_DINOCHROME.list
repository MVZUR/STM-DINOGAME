
STM32_ILI9341_XPT2046_PARA_LCD_DINOCHROME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08006b48  08006b48  00007b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b78  08006b78  00008018  2**0
                  CONTENTS
  4 .ARM          00000000  08006b78  08006b78  00008018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b78  08006b78  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b78  08006b78  00007b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b7c  08006b7c  00007b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006b80  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008018  2**0
                  CONTENTS
 10 .bss          000000fc  20000018  20000018  00008018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000114  20000114  00008018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3b6  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022fe  00000000  00000000  000153fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00017700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3d  00000000  00000000  00018440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d0a  00000000  00000000  00018e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129e6  00000000  00000000  0003ab87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf09c  00000000  00000000  0004d56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c609  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003654  00000000  00000000  0011c64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0011fca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006b30 	.word	0x08006b30

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08006b30 	.word	0x08006b30

080001d4 <LCD_write>:
u16 DeviceCode;	 



void LCD_write(u16 VAL)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	80fb      	strh	r3, [r7, #6]
	LCD_CS_CLR;  
 80001de:	4b0a      	ldr	r3, [pc, #40]	@ (8000208 <LCD_write+0x34>)
 80001e0:	2202      	movs	r2, #2
 80001e2:	629a      	str	r2, [r3, #40]	@ 0x28
	DATAOUT(VAL);
 80001e4:	4a09      	ldr	r2, [pc, #36]	@ (800020c <LCD_write+0x38>)
 80001e6:	88fb      	ldrh	r3, [r7, #6]
 80001e8:	6153      	str	r3, [r2, #20]
	LCD_WR_CLR;
 80001ea:	4b07      	ldr	r3, [pc, #28]	@ (8000208 <LCD_write+0x34>)
 80001ec:	2208      	movs	r2, #8
 80001ee:	629a      	str	r2, [r3, #40]	@ 0x28
	LCD_WR_SET;
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <LCD_write+0x34>)
 80001f2:	2208      	movs	r2, #8
 80001f4:	619a      	str	r2, [r3, #24]
	LCD_CS_SET;
 80001f6:	4b04      	ldr	r3, [pc, #16]	@ (8000208 <LCD_write+0x34>)
 80001f8:	2202      	movs	r2, #2
 80001fa:	619a      	str	r2, [r3, #24]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	48000800 	.word	0x48000800
 800020c:	48000400 	.word	0x48000400

08000210 <LCD_WR_REG>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u16 data)
{ 
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	80fb      	strh	r3, [r7, #6]
   LCD_RS_CLR;     
 800021a:	4b05      	ldr	r3, [pc, #20]	@ (8000230 <LCD_WR_REG+0x20>)
 800021c:	2204      	movs	r2, #4
 800021e:	629a      	str	r2, [r3, #40]	@ 0x28
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8000220:	88fb      	ldrh	r3, [r7, #6]
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ffd6 	bl	80001d4 <LCD_write>
	 #endif
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	48000800 	.word	0x48000800

08000234 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{	
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	460a      	mov	r2, r1
 800023e:	80fb      	strh	r3, [r7, #6]
 8000240:	4613      	mov	r3, r2
 8000242:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ffe2 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 800024c:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <LCD_WriteReg+0x44>)
 800024e:	2204      	movs	r2, #4
 8000250:	619a      	str	r2, [r3, #24]
 8000252:	4b09      	ldr	r3, [pc, #36]	@ (8000278 <LCD_WriteReg+0x44>)
 8000254:	2202      	movs	r2, #2
 8000256:	629a      	str	r2, [r3, #40]	@ 0x28
 8000258:	4a08      	ldr	r2, [pc, #32]	@ (800027c <LCD_WriteReg+0x48>)
 800025a:	88bb      	ldrh	r3, [r7, #4]
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <LCD_WriteReg+0x44>)
 8000260:	2208      	movs	r2, #8
 8000262:	629a      	str	r2, [r3, #40]	@ 0x28
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <LCD_WriteReg+0x44>)
 8000266:	2208      	movs	r2, #8
 8000268:	619a      	str	r2, [r3, #24]
 800026a:	4b03      	ldr	r3, [pc, #12]	@ (8000278 <LCD_WriteReg+0x44>)
 800026c:	2202      	movs	r2, #2
 800026e:	619a      	str	r2, [r3, #24]
}	   
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	48000800 	.word	0x48000800
 800027c:	48000400 	.word	0x48000400

08000280 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000284:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <LCD_WriteRAM_Prepare+0x14>)
 8000286:	891b      	ldrh	r3, [r3, #8]
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ffc1 	bl	8000210 <LCD_WR_REG>
}	 
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000034 	.word	0x20000034

08000298 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	80fb      	strh	r3, [r7, #6]
   LCD_RS_SET; 
 80002a2:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <Lcd_WriteData_16Bit+0x20>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	619a      	str	r2, [r3, #24]
		LCD_WR_SET;
		LCD_CS_SET;
 //  LCD_write(Data&0xFF00);
//	 LCD_write(Data<<8);
	 #else
	 LCD_write(Data);
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ff92 	bl	80001d4 <LCD_write>
	 #endif
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	48000800 	.word	0x48000800

080002bc <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	460a      	mov	r2, r1
 80002c6:	80fb      	strh	r3, [r7, #6]
 80002c8:	4613      	mov	r3, r2
 80002ca:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 80002cc:	88ba      	ldrh	r2, [r7, #4]
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	4611      	mov	r1, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fe56 	bl	8000f84 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <LCD_DrawPoint+0x30>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ffdb 	bl	8000298 <Lcd_WriteData_16Bit>
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000044 	.word	0x20000044

080002f0 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	80fb      	strh	r3, [r7, #6]
  unsigned int i;//,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 80002fa:	4b13      	ldr	r3, [pc, #76]	@ (8000348 <LCD_Clear+0x58>)
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	3b01      	subs	r3, #1
 8000300:	b29a      	uxth	r2, r3
 8000302:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <LCD_Clear+0x58>)
 8000304:	885b      	ldrh	r3, [r3, #2]
 8000306:	3b01      	subs	r3, #1
 8000308:	b29b      	uxth	r3, r3
 800030a:	2100      	movs	r1, #0
 800030c:	2000      	movs	r0, #0
 800030e:	f000 fd77 	bl	8000e00 <LCD_SetWindows>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	e006      	b.n	8000326 <LCD_Clear+0x36>
	{
 //   for(m=0;m<lcddev.width;m++)
  //  {	
			Lcd_WriteData_16Bit(Color);
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffbc 	bl	8000298 <Lcd_WriteData_16Bit>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3301      	adds	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <LCD_Clear+0x58>)
 8000328:	885b      	ldrh	r3, [r3, #2]
 800032a:	461a      	mov	r2, r3
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <LCD_Clear+0x58>)
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	fb02 f303 	mul.w	r3, r2, r3
 8000334:	461a      	mov	r2, r3
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	4293      	cmp	r3, r2
 800033a:	d3ed      	bcc.n	8000318 <LCD_Clear+0x28>
	//	}
	}
} 
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000034 	.word	0x20000034

0800034c <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <LCD_RESET+0x20>)
 8000352:	2201      	movs	r2, #1
 8000354:	629a      	str	r2, [r3, #40]	@ 0x28
	delay_ms(100);	
 8000356:	2064      	movs	r0, #100	@ 0x64
 8000358:	f000 ffaa 	bl	80012b0 <delay_ms>
	LCD_RST_SET;
 800035c:	4b03      	ldr	r3, [pc, #12]	@ (800036c <LCD_RESET+0x20>)
 800035e:	2201      	movs	r2, #1
 8000360:	619a      	str	r2, [r3, #24]
	delay_ms(50);
 8000362:	2032      	movs	r0, #50	@ 0x32
 8000364:	f000 ffa4 	bl	80012b0 <delay_ms>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	48000800 	.word	0x48000800

08000370 <ILI9341_paradriver_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void ILI9341_paradriver_Init(void)
{  
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	//LCD_GPIOInit();	// already done with CUBE MX
 	LCD_RESET(); //LCD ��λ
 8000374:	f7ff ffea 	bl	800034c <LCD_RESET>
//*************2.4inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 8000378:	20cf      	movs	r0, #207	@ 0xcf
 800037a:	f7ff ff49 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800037e:	4b9b      	ldr	r3, [pc, #620]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000380:	2204      	movs	r2, #4
 8000382:	619a      	str	r2, [r3, #24]
 8000384:	4b99      	ldr	r3, [pc, #612]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000386:	2202      	movs	r2, #2
 8000388:	629a      	str	r2, [r3, #40]	@ 0x28
 800038a:	4b99      	ldr	r3, [pc, #612]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	4b96      	ldr	r3, [pc, #600]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000392:	2208      	movs	r2, #8
 8000394:	629a      	str	r2, [r3, #40]	@ 0x28
 8000396:	4b95      	ldr	r3, [pc, #596]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000398:	2208      	movs	r2, #8
 800039a:	619a      	str	r2, [r3, #24]
 800039c:	4b93      	ldr	r3, [pc, #588]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800039e:	2202      	movs	r2, #2
 80003a0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xD9); //0xC1 
 80003a2:	4b92      	ldr	r3, [pc, #584]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003a4:	2204      	movs	r2, #4
 80003a6:	619a      	str	r2, [r3, #24]
 80003a8:	4b90      	ldr	r3, [pc, #576]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003aa:	2202      	movs	r2, #2
 80003ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80003ae:	4b90      	ldr	r3, [pc, #576]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80003b0:	22d9      	movs	r2, #217	@ 0xd9
 80003b2:	615a      	str	r2, [r3, #20]
 80003b4:	4b8d      	ldr	r3, [pc, #564]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80003ba:	4b8c      	ldr	r3, [pc, #560]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003bc:	2208      	movs	r2, #8
 80003be:	619a      	str	r2, [r3, #24]
 80003c0:	4b8a      	ldr	r3, [pc, #552]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X30); 
 80003c6:	4b89      	ldr	r3, [pc, #548]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003c8:	2204      	movs	r2, #4
 80003ca:	619a      	str	r2, [r3, #24]
 80003cc:	4b87      	ldr	r3, [pc, #540]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003ce:	2202      	movs	r2, #2
 80003d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80003d2:	4b87      	ldr	r3, [pc, #540]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80003d4:	2230      	movs	r2, #48	@ 0x30
 80003d6:	615a      	str	r2, [r3, #20]
 80003d8:	4b84      	ldr	r3, [pc, #528]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003da:	2208      	movs	r2, #8
 80003dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80003de:	4b83      	ldr	r3, [pc, #524]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003e0:	2208      	movs	r2, #8
 80003e2:	619a      	str	r2, [r3, #24]
 80003e4:	4b81      	ldr	r3, [pc, #516]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003e6:	2202      	movs	r2, #2
 80003e8:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xED);  
 80003ea:	20ed      	movs	r0, #237	@ 0xed
 80003ec:	f7ff ff10 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 80003f0:	4b7e      	ldr	r3, [pc, #504]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003f2:	2204      	movs	r2, #4
 80003f4:	619a      	str	r2, [r3, #24]
 80003f6:	4b7d      	ldr	r3, [pc, #500]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003f8:	2202      	movs	r2, #2
 80003fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80003fc:	4b7c      	ldr	r3, [pc, #496]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80003fe:	2264      	movs	r2, #100	@ 0x64
 8000400:	615a      	str	r2, [r3, #20]
 8000402:	4b7a      	ldr	r3, [pc, #488]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000404:	2208      	movs	r2, #8
 8000406:	629a      	str	r2, [r3, #40]	@ 0x28
 8000408:	4b78      	ldr	r3, [pc, #480]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800040a:	2208      	movs	r2, #8
 800040c:	619a      	str	r2, [r3, #24]
 800040e:	4b77      	ldr	r3, [pc, #476]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000410:	2202      	movs	r2, #2
 8000412:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x03); 
 8000414:	4b75      	ldr	r3, [pc, #468]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000416:	2204      	movs	r2, #4
 8000418:	619a      	str	r2, [r3, #24]
 800041a:	4b74      	ldr	r3, [pc, #464]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800041c:	2202      	movs	r2, #2
 800041e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000420:	4b73      	ldr	r3, [pc, #460]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000422:	2203      	movs	r2, #3
 8000424:	615a      	str	r2, [r3, #20]
 8000426:	4b71      	ldr	r3, [pc, #452]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000428:	2208      	movs	r2, #8
 800042a:	629a      	str	r2, [r3, #40]	@ 0x28
 800042c:	4b6f      	ldr	r3, [pc, #444]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800042e:	2208      	movs	r2, #8
 8000430:	619a      	str	r2, [r3, #24]
 8000432:	4b6e      	ldr	r3, [pc, #440]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000434:	2202      	movs	r2, #2
 8000436:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X12); 
 8000438:	4b6c      	ldr	r3, [pc, #432]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800043a:	2204      	movs	r2, #4
 800043c:	619a      	str	r2, [r3, #24]
 800043e:	4b6b      	ldr	r3, [pc, #428]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000440:	2202      	movs	r2, #2
 8000442:	629a      	str	r2, [r3, #40]	@ 0x28
 8000444:	4b6a      	ldr	r3, [pc, #424]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000446:	2212      	movs	r2, #18
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	4b68      	ldr	r3, [pc, #416]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800044c:	2208      	movs	r2, #8
 800044e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000450:	4b66      	ldr	r3, [pc, #408]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000452:	2208      	movs	r2, #8
 8000454:	619a      	str	r2, [r3, #24]
 8000456:	4b65      	ldr	r3, [pc, #404]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000458:	2202      	movs	r2, #2
 800045a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X81); 
 800045c:	4b63      	ldr	r3, [pc, #396]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800045e:	2204      	movs	r2, #4
 8000460:	619a      	str	r2, [r3, #24]
 8000462:	4b62      	ldr	r3, [pc, #392]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000464:	2202      	movs	r2, #2
 8000466:	629a      	str	r2, [r3, #40]	@ 0x28
 8000468:	4b61      	ldr	r3, [pc, #388]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800046a:	2281      	movs	r2, #129	@ 0x81
 800046c:	615a      	str	r2, [r3, #20]
 800046e:	4b5f      	ldr	r3, [pc, #380]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000470:	2208      	movs	r2, #8
 8000472:	629a      	str	r2, [r3, #40]	@ 0x28
 8000474:	4b5d      	ldr	r3, [pc, #372]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000476:	2208      	movs	r2, #8
 8000478:	619a      	str	r2, [r3, #24]
 800047a:	4b5c      	ldr	r3, [pc, #368]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800047c:	2202      	movs	r2, #2
 800047e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xE8);  
 8000480:	20e8      	movs	r0, #232	@ 0xe8
 8000482:	f7ff fec5 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8000486:	4b59      	ldr	r3, [pc, #356]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000488:	2204      	movs	r2, #4
 800048a:	619a      	str	r2, [r3, #24]
 800048c:	4b57      	ldr	r3, [pc, #348]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800048e:	2202      	movs	r2, #2
 8000490:	629a      	str	r2, [r3, #40]	@ 0x28
 8000492:	4b57      	ldr	r3, [pc, #348]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000494:	2285      	movs	r2, #133	@ 0x85
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	4b54      	ldr	r3, [pc, #336]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800049a:	2208      	movs	r2, #8
 800049c:	629a      	str	r2, [r3, #40]	@ 0x28
 800049e:	4b53      	ldr	r3, [pc, #332]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004a0:	2208      	movs	r2, #8
 80004a2:	619a      	str	r2, [r3, #24]
 80004a4:	4b51      	ldr	r3, [pc, #324]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004a6:	2202      	movs	r2, #2
 80004a8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x10); 
 80004aa:	4b50      	ldr	r3, [pc, #320]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004ac:	2204      	movs	r2, #4
 80004ae:	619a      	str	r2, [r3, #24]
 80004b0:	4b4e      	ldr	r3, [pc, #312]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004b2:	2202      	movs	r2, #2
 80004b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80004b6:	4b4e      	ldr	r3, [pc, #312]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80004b8:	2210      	movs	r2, #16
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	4b4b      	ldr	r3, [pc, #300]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004be:	2208      	movs	r2, #8
 80004c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80004c2:	4b4a      	ldr	r3, [pc, #296]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004c4:	2208      	movs	r2, #8
 80004c6:	619a      	str	r2, [r3, #24]
 80004c8:	4b48      	ldr	r3, [pc, #288]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x7A); 
 80004ce:	4b47      	ldr	r3, [pc, #284]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004d0:	2204      	movs	r2, #4
 80004d2:	619a      	str	r2, [r3, #24]
 80004d4:	4b45      	ldr	r3, [pc, #276]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004d6:	2202      	movs	r2, #2
 80004d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80004da:	4b45      	ldr	r3, [pc, #276]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80004dc:	227a      	movs	r2, #122	@ 0x7a
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	4b42      	ldr	r3, [pc, #264]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80004e6:	4b41      	ldr	r3, [pc, #260]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004e8:	2208      	movs	r2, #8
 80004ea:	619a      	str	r2, [r3, #24]
 80004ec:	4b3f      	ldr	r3, [pc, #252]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004ee:	2202      	movs	r2, #2
 80004f0:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xCB);  
 80004f2:	20cb      	movs	r0, #203	@ 0xcb
 80004f4:	f7ff fe8c 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 80004f8:	4b3c      	ldr	r3, [pc, #240]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	619a      	str	r2, [r3, #24]
 80004fe:	4b3b      	ldr	r3, [pc, #236]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000500:	2202      	movs	r2, #2
 8000502:	629a      	str	r2, [r3, #40]	@ 0x28
 8000504:	4b3a      	ldr	r3, [pc, #232]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000506:	2239      	movs	r2, #57	@ 0x39
 8000508:	615a      	str	r2, [r3, #20]
 800050a:	4b38      	ldr	r3, [pc, #224]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800050c:	2208      	movs	r2, #8
 800050e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000510:	4b36      	ldr	r3, [pc, #216]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000512:	2208      	movs	r2, #8
 8000514:	619a      	str	r2, [r3, #24]
 8000516:	4b35      	ldr	r3, [pc, #212]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000518:	2202      	movs	r2, #2
 800051a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2C); 
 800051c:	4b33      	ldr	r3, [pc, #204]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800051e:	2204      	movs	r2, #4
 8000520:	619a      	str	r2, [r3, #24]
 8000522:	4b32      	ldr	r3, [pc, #200]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000524:	2202      	movs	r2, #2
 8000526:	629a      	str	r2, [r3, #40]	@ 0x28
 8000528:	4b31      	ldr	r3, [pc, #196]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800052a:	222c      	movs	r2, #44	@ 0x2c
 800052c:	615a      	str	r2, [r3, #20]
 800052e:	4b2f      	ldr	r3, [pc, #188]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000530:	2208      	movs	r2, #8
 8000532:	629a      	str	r2, [r3, #40]	@ 0x28
 8000534:	4b2d      	ldr	r3, [pc, #180]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000536:	2208      	movs	r2, #8
 8000538:	619a      	str	r2, [r3, #24]
 800053a:	4b2c      	ldr	r3, [pc, #176]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800053c:	2202      	movs	r2, #2
 800053e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00); 
 8000540:	4b2a      	ldr	r3, [pc, #168]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000542:	2204      	movs	r2, #4
 8000544:	619a      	str	r2, [r3, #24]
 8000546:	4b29      	ldr	r3, [pc, #164]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000548:	2202      	movs	r2, #2
 800054a:	629a      	str	r2, [r3, #40]	@ 0x28
 800054c:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800054e:	2200      	movs	r2, #0
 8000550:	615a      	str	r2, [r3, #20]
 8000552:	4b26      	ldr	r3, [pc, #152]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000554:	2208      	movs	r2, #8
 8000556:	629a      	str	r2, [r3, #40]	@ 0x28
 8000558:	4b24      	ldr	r3, [pc, #144]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800055a:	2208      	movs	r2, #8
 800055c:	619a      	str	r2, [r3, #24]
 800055e:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000560:	2202      	movs	r2, #2
 8000562:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x34); 
 8000564:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000566:	2204      	movs	r2, #4
 8000568:	619a      	str	r2, [r3, #24]
 800056a:	4b20      	ldr	r3, [pc, #128]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800056c:	2202      	movs	r2, #2
 800056e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000572:	2234      	movs	r2, #52	@ 0x34
 8000574:	615a      	str	r2, [r3, #20]
 8000576:	4b1d      	ldr	r3, [pc, #116]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000578:	2208      	movs	r2, #8
 800057a:	629a      	str	r2, [r3, #40]	@ 0x28
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800057e:	2208      	movs	r2, #8
 8000580:	619a      	str	r2, [r3, #24]
 8000582:	4b1a      	ldr	r3, [pc, #104]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000584:	2202      	movs	r2, #2
 8000586:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x02); 
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800058a:	2204      	movs	r2, #4
 800058c:	619a      	str	r2, [r3, #24]
 800058e:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000590:	2202      	movs	r2, #2
 8000592:	629a      	str	r2, [r3, #40]	@ 0x28
 8000594:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000596:	2202      	movs	r2, #2
 8000598:	615a      	str	r2, [r3, #20]
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800059c:	2208      	movs	r2, #8
 800059e:	629a      	str	r2, [r3, #40]	@ 0x28
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005a2:	2208      	movs	r2, #8
 80005a4:	619a      	str	r2, [r3, #24]
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xF7);  
 80005ac:	20f7      	movs	r0, #247	@ 0xf7
 80005ae:	f7ff fe2f 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005b4:	2204      	movs	r2, #4
 80005b6:	619a      	str	r2, [r3, #24]
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80005c0:	2220      	movs	r2, #32
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005c6:	2208      	movs	r2, #8
 80005c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80005ca:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	619a      	str	r2, [r3, #24]
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xEA);  
 80005d6:	20ea      	movs	r0, #234	@ 0xea
 80005d8:	f7ff fe1a 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80005dc:	4b03      	ldr	r3, [pc, #12]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005de:	2204      	movs	r2, #4
 80005e0:	619a      	str	r2, [r3, #24]
 80005e2:	4b02      	ldr	r3, [pc, #8]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80005e8:	e004      	b.n	80005f4 <ILI9341_paradriver_Init+0x284>
 80005ea:	bf00      	nop
 80005ec:	48000800 	.word	0x48000800
 80005f0:	48000400 	.word	0x48000400
 80005f4:	4b9f      	ldr	r3, [pc, #636]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
 80005fa:	4b9f      	ldr	r3, [pc, #636]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8000600:	4b9d      	ldr	r3, [pc, #628]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000602:	2208      	movs	r2, #8
 8000604:	619a      	str	r2, [r3, #24]
 8000606:	4b9c      	ldr	r3, [pc, #624]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000608:	2202      	movs	r2, #2
 800060a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00); 
 800060c:	4b9a      	ldr	r3, [pc, #616]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800060e:	2204      	movs	r2, #4
 8000610:	619a      	str	r2, [r3, #24]
 8000612:	4b99      	ldr	r3, [pc, #612]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000614:	2202      	movs	r2, #2
 8000616:	629a      	str	r2, [r3, #40]	@ 0x28
 8000618:	4b96      	ldr	r3, [pc, #600]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
 800061e:	4b96      	ldr	r3, [pc, #600]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000620:	2208      	movs	r2, #8
 8000622:	629a      	str	r2, [r3, #40]	@ 0x28
 8000624:	4b94      	ldr	r3, [pc, #592]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000626:	2208      	movs	r2, #8
 8000628:	619a      	str	r2, [r3, #24]
 800062a:	4b93      	ldr	r3, [pc, #588]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800062c:	2202      	movs	r2, #2
 800062e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC0);    //Power control 
 8000630:	20c0      	movs	r0, #192	@ 0xc0
 8000632:	f7ff fded 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 8000636:	4b90      	ldr	r3, [pc, #576]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000638:	2204      	movs	r2, #4
 800063a:	619a      	str	r2, [r3, #24]
 800063c:	4b8e      	ldr	r3, [pc, #568]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800063e:	2202      	movs	r2, #2
 8000640:	629a      	str	r2, [r3, #40]	@ 0x28
 8000642:	4b8c      	ldr	r3, [pc, #560]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000644:	221b      	movs	r2, #27
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	4b8b      	ldr	r3, [pc, #556]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800064a:	2208      	movs	r2, #8
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
 800064e:	4b8a      	ldr	r3, [pc, #552]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000650:	2208      	movs	r2, #8
 8000652:	619a      	str	r2, [r3, #24]
 8000654:	4b88      	ldr	r3, [pc, #544]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000656:	2202      	movs	r2, #2
 8000658:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC1);    //Power control 
 800065a:	20c1      	movs	r0, #193	@ 0xc1
 800065c:	f7ff fdd8 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] 0x01
 8000660:	4b85      	ldr	r3, [pc, #532]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000662:	2204      	movs	r2, #4
 8000664:	619a      	str	r2, [r3, #24]
 8000666:	4b84      	ldr	r3, [pc, #528]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000668:	2202      	movs	r2, #2
 800066a:	629a      	str	r2, [r3, #40]	@ 0x28
 800066c:	4b81      	ldr	r3, [pc, #516]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800066e:	2212      	movs	r2, #18
 8000670:	615a      	str	r2, [r3, #20]
 8000672:	4b81      	ldr	r3, [pc, #516]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000674:	2208      	movs	r2, #8
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
 8000678:	4b7f      	ldr	r3, [pc, #508]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800067a:	2208      	movs	r2, #8
 800067c:	619a      	str	r2, [r3, #24]
 800067e:	4b7e      	ldr	r3, [pc, #504]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000680:	2202      	movs	r2, #2
 8000682:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC5);    //VCM control 
 8000684:	20c5      	movs	r0, #197	@ 0xc5
 8000686:	f7ff fdc3 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 	 //30
 800068a:	4b7b      	ldr	r3, [pc, #492]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800068c:	2204      	movs	r2, #4
 800068e:	619a      	str	r2, [r3, #24]
 8000690:	4b79      	ldr	r3, [pc, #484]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000692:	2202      	movs	r2, #2
 8000694:	629a      	str	r2, [r3, #40]	@ 0x28
 8000696:	4b77      	ldr	r3, [pc, #476]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000698:	2208      	movs	r2, #8
 800069a:	615a      	str	r2, [r3, #20]
 800069c:	4b76      	ldr	r3, [pc, #472]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800069e:	2208      	movs	r2, #8
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80006a2:	4b75      	ldr	r3, [pc, #468]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006a4:	2208      	movs	r2, #8
 80006a6:	619a      	str	r2, [r3, #24]
 80006a8:	4b73      	ldr	r3, [pc, #460]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x26); 	 //30
 80006ae:	4b72      	ldr	r3, [pc, #456]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	619a      	str	r2, [r3, #24]
 80006b4:	4b70      	ldr	r3, [pc, #448]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80006ba:	4b6e      	ldr	r3, [pc, #440]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80006bc:	2226      	movs	r2, #38	@ 0x26
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	4b6d      	ldr	r3, [pc, #436]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006c2:	2208      	movs	r2, #8
 80006c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80006c6:	4b6c      	ldr	r3, [pc, #432]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006c8:	2208      	movs	r2, #8
 80006ca:	619a      	str	r2, [r3, #24]
 80006cc:	4b6a      	ldr	r3, [pc, #424]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006ce:	2202      	movs	r2, #2
 80006d0:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC7);    //VCM control2 
 80006d2:	20c7      	movs	r0, #199	@ 0xc7
 80006d4:	f7ff fd9c 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 80006d8:	4b67      	ldr	r3, [pc, #412]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006da:	2204      	movs	r2, #4
 80006dc:	619a      	str	r2, [r3, #24]
 80006de:	4b66      	ldr	r3, [pc, #408]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80006e4:	4b63      	ldr	r3, [pc, #396]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80006e6:	22b7      	movs	r2, #183	@ 0xb7
 80006e8:	615a      	str	r2, [r3, #20]
 80006ea:	4b63      	ldr	r3, [pc, #396]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006ec:	2208      	movs	r2, #8
 80006ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80006f0:	4b61      	ldr	r3, [pc, #388]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006f2:	2208      	movs	r2, #8
 80006f4:	619a      	str	r2, [r3, #24]
 80006f6:	4b60      	ldr	r3, [pc, #384]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x36);    // Memory Access Control 
 80006fc:	2036      	movs	r0, #54	@ 0x36
 80006fe:	f7ff fd87 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 8000702:	4b5d      	ldr	r3, [pc, #372]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000704:	2204      	movs	r2, #4
 8000706:	619a      	str	r2, [r3, #24]
 8000708:	4b5b      	ldr	r3, [pc, #364]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800070a:	2202      	movs	r2, #2
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28
 800070e:	4b59      	ldr	r3, [pc, #356]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000710:	2208      	movs	r2, #8
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	4b58      	ldr	r3, [pc, #352]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000716:	2208      	movs	r2, #8
 8000718:	629a      	str	r2, [r3, #40]	@ 0x28
 800071a:	4b57      	ldr	r3, [pc, #348]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800071c:	2208      	movs	r2, #8
 800071e:	619a      	str	r2, [r3, #24]
 8000720:	4b55      	ldr	r3, [pc, #340]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000722:	2202      	movs	r2, #2
 8000724:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x3A);   
 8000726:	203a      	movs	r0, #58	@ 0x3a
 8000728:	f7ff fd72 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 800072c:	4b52      	ldr	r3, [pc, #328]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800072e:	2204      	movs	r2, #4
 8000730:	619a      	str	r2, [r3, #24]
 8000732:	4b51      	ldr	r3, [pc, #324]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000734:	2202      	movs	r2, #2
 8000736:	629a      	str	r2, [r3, #40]	@ 0x28
 8000738:	4b4e      	ldr	r3, [pc, #312]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800073a:	2255      	movs	r2, #85	@ 0x55
 800073c:	615a      	str	r2, [r3, #20]
 800073e:	4b4e      	ldr	r3, [pc, #312]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000740:	2208      	movs	r2, #8
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
 8000744:	4b4c      	ldr	r3, [pc, #304]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000746:	2208      	movs	r2, #8
 8000748:	619a      	str	r2, [r3, #24]
 800074a:	4b4b      	ldr	r3, [pc, #300]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800074c:	2202      	movs	r2, #2
 800074e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xB1);   
 8000750:	20b1      	movs	r0, #177	@ 0xb1
 8000752:	f7ff fd5d 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 8000756:	4b48      	ldr	r3, [pc, #288]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000758:	2204      	movs	r2, #4
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	4b46      	ldr	r3, [pc, #280]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800075e:	2202      	movs	r2, #2
 8000760:	629a      	str	r2, [r3, #40]	@ 0x28
 8000762:	4b44      	ldr	r3, [pc, #272]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	4b43      	ldr	r3, [pc, #268]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800076a:	2208      	movs	r2, #8
 800076c:	629a      	str	r2, [r3, #40]	@ 0x28
 800076e:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000770:	2208      	movs	r2, #8
 8000772:	619a      	str	r2, [r3, #24]
 8000774:	4b40      	ldr	r3, [pc, #256]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000776:	2202      	movs	r2, #2
 8000778:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1A); 
 800077a:	4b3f      	ldr	r3, [pc, #252]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800077c:	2204      	movs	r2, #4
 800077e:	619a      	str	r2, [r3, #24]
 8000780:	4b3d      	ldr	r3, [pc, #244]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000782:	2202      	movs	r2, #2
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
 8000786:	4b3b      	ldr	r3, [pc, #236]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000788:	221a      	movs	r2, #26
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800078e:	2208      	movs	r2, #8
 8000790:	629a      	str	r2, [r3, #40]	@ 0x28
 8000792:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000794:	2208      	movs	r2, #8
 8000796:	619a      	str	r2, [r3, #24]
 8000798:	4b37      	ldr	r3, [pc, #220]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800079a:	2202      	movs	r2, #2
 800079c:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xB6);    // Display Function Control 
 800079e:	20b6      	movs	r0, #182	@ 0xb6
 80007a0:	f7ff fd36 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 80007a4:	4b34      	ldr	r3, [pc, #208]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	619a      	str	r2, [r3, #24]
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80007b0:	4b30      	ldr	r3, [pc, #192]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80007b2:	220a      	movs	r2, #10
 80007b4:	615a      	str	r2, [r3, #20]
 80007b6:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007b8:	2208      	movs	r2, #8
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80007bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007be:	2208      	movs	r2, #8
 80007c0:	619a      	str	r2, [r3, #24]
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xA2); 
 80007c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	619a      	str	r2, [r3, #24]
 80007ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80007d6:	22a2      	movs	r2, #162	@ 0xa2
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007dc:	2208      	movs	r2, #8
 80007de:	629a      	str	r2, [r3, #40]	@ 0x28
 80007e0:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007e2:	2208      	movs	r2, #8
 80007e4:	619a      	str	r2, [r3, #24]
 80007e6:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80007ec:	20f2      	movs	r0, #242	@ 0xf2
 80007ee:	f7ff fd0f 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007f4:	2204      	movs	r2, #4
 80007f6:	619a      	str	r2, [r3, #24]
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000806:	2208      	movs	r2, #8
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800080c:	2208      	movs	r2, #8
 800080e:	619a      	str	r2, [r3, #24]
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000812:	2202      	movs	r2, #2
 8000814:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x26);    //Gamma curve selected 
 8000816:	2026      	movs	r0, #38	@ 0x26
 8000818:	f7ff fcfa 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800081e:	2204      	movs	r2, #4
 8000820:	619a      	str	r2, [r3, #24]
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000824:	2202      	movs	r2, #2
 8000826:	629a      	str	r2, [r3, #40]	@ 0x28
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800082a:	2201      	movs	r2, #1
 800082c:	615a      	str	r2, [r3, #20]
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000830:	2208      	movs	r2, #8
 8000832:	629a      	str	r2, [r3, #40]	@ 0x28
 8000834:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000836:	2208      	movs	r2, #8
 8000838:	619a      	str	r2, [r3, #24]
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800083c:	2202      	movs	r2, #2
 800083e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xE0);    //Set Gamma 
 8000840:	20e0      	movs	r0, #224	@ 0xe0
 8000842:	f7ff fce5 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000848:	2204      	movs	r2, #4
 800084a:	619a      	str	r2, [r3, #24]
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800084e:	2202      	movs	r2, #2
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000854:	220f      	movs	r2, #15
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800085a:	2208      	movs	r2, #8
 800085c:	629a      	str	r2, [r3, #40]	@ 0x28
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000860:	2208      	movs	r2, #8
 8000862:	619a      	str	r2, [r3, #24]
 8000864:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000866:	2202      	movs	r2, #2
 8000868:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1D); 
 800086a:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800086c:	2204      	movs	r2, #4
 800086e:	619a      	str	r2, [r3, #24]
 8000870:	e004      	b.n	800087c <ILI9341_paradriver_Init+0x50c>
 8000872:	bf00      	nop
 8000874:	48000400 	.word	0x48000400
 8000878:	48000800 	.word	0x48000800
 800087c:	4b99      	ldr	r3, [pc, #612]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800087e:	2202      	movs	r2, #2
 8000880:	629a      	str	r2, [r3, #40]	@ 0x28
 8000882:	4b99      	ldr	r3, [pc, #612]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000884:	221d      	movs	r2, #29
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	4b96      	ldr	r3, [pc, #600]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800088a:	2208      	movs	r2, #8
 800088c:	629a      	str	r2, [r3, #40]	@ 0x28
 800088e:	4b95      	ldr	r3, [pc, #596]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000890:	2208      	movs	r2, #8
 8000892:	619a      	str	r2, [r3, #24]
 8000894:	4b93      	ldr	r3, [pc, #588]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000896:	2202      	movs	r2, #2
 8000898:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1A); 
 800089a:	4b92      	ldr	r3, [pc, #584]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800089c:	2204      	movs	r2, #4
 800089e:	619a      	str	r2, [r3, #24]
 80008a0:	4b90      	ldr	r3, [pc, #576]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80008a6:	4b90      	ldr	r3, [pc, #576]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80008a8:	221a      	movs	r2, #26
 80008aa:	615a      	str	r2, [r3, #20]
 80008ac:	4b8d      	ldr	r3, [pc, #564]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008ae:	2208      	movs	r2, #8
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80008b2:	4b8c      	ldr	r3, [pc, #560]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	619a      	str	r2, [r3, #24]
 80008b8:	4b8a      	ldr	r3, [pc, #552]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0A); 
 80008be:	4b89      	ldr	r3, [pc, #548]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008c0:	2204      	movs	r2, #4
 80008c2:	619a      	str	r2, [r3, #24]
 80008c4:	4b87      	ldr	r3, [pc, #540]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80008ca:	4b87      	ldr	r3, [pc, #540]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80008cc:	220a      	movs	r2, #10
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	4b84      	ldr	r3, [pc, #528]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008d2:	2208      	movs	r2, #8
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80008d6:	4b83      	ldr	r3, [pc, #524]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008d8:	2208      	movs	r2, #8
 80008da:	619a      	str	r2, [r3, #24]
 80008dc:	4b81      	ldr	r3, [pc, #516]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008de:	2202      	movs	r2, #2
 80008e0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0D); 
 80008e2:	4b80      	ldr	r3, [pc, #512]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	619a      	str	r2, [r3, #24]
 80008e8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80008ee:	4b7e      	ldr	r3, [pc, #504]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80008f0:	220d      	movs	r2, #13
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b7b      	ldr	r3, [pc, #492]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008f6:	2208      	movs	r2, #8
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80008fa:	4b7a      	ldr	r3, [pc, #488]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008fc:	2208      	movs	r2, #8
 80008fe:	619a      	str	r2, [r3, #24]
 8000900:	4b78      	ldr	r3, [pc, #480]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000902:	2202      	movs	r2, #2
 8000904:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8000906:	4b77      	ldr	r3, [pc, #476]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000908:	2204      	movs	r2, #4
 800090a:	619a      	str	r2, [r3, #24]
 800090c:	4b75      	ldr	r3, [pc, #468]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800090e:	2202      	movs	r2, #2
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28
 8000912:	4b75      	ldr	r3, [pc, #468]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000914:	2207      	movs	r2, #7
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	4b72      	ldr	r3, [pc, #456]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800091a:	2208      	movs	r2, #8
 800091c:	629a      	str	r2, [r3, #40]	@ 0x28
 800091e:	4b71      	ldr	r3, [pc, #452]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000920:	2208      	movs	r2, #8
 8000922:	619a      	str	r2, [r3, #24]
 8000924:	4b6f      	ldr	r3, [pc, #444]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000926:	2202      	movs	r2, #2
 8000928:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x49); 
 800092a:	4b6e      	ldr	r3, [pc, #440]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800092c:	2204      	movs	r2, #4
 800092e:	619a      	str	r2, [r3, #24]
 8000930:	4b6c      	ldr	r3, [pc, #432]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000932:	2202      	movs	r2, #2
 8000934:	629a      	str	r2, [r3, #40]	@ 0x28
 8000936:	4b6c      	ldr	r3, [pc, #432]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000938:	2249      	movs	r2, #73	@ 0x49
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	4b69      	ldr	r3, [pc, #420]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800093e:	2208      	movs	r2, #8
 8000940:	629a      	str	r2, [r3, #40]	@ 0x28
 8000942:	4b68      	ldr	r3, [pc, #416]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000944:	2208      	movs	r2, #8
 8000946:	619a      	str	r2, [r3, #24]
 8000948:	4b66      	ldr	r3, [pc, #408]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800094a:	2202      	movs	r2, #2
 800094c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X66); 
 800094e:	4b65      	ldr	r3, [pc, #404]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000950:	2204      	movs	r2, #4
 8000952:	619a      	str	r2, [r3, #24]
 8000954:	4b63      	ldr	r3, [pc, #396]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000956:	2202      	movs	r2, #2
 8000958:	629a      	str	r2, [r3, #40]	@ 0x28
 800095a:	4b63      	ldr	r3, [pc, #396]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 800095c:	2266      	movs	r2, #102	@ 0x66
 800095e:	615a      	str	r2, [r3, #20]
 8000960:	4b60      	ldr	r3, [pc, #384]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000962:	2208      	movs	r2, #8
 8000964:	629a      	str	r2, [r3, #40]	@ 0x28
 8000966:	4b5f      	ldr	r3, [pc, #380]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000968:	2208      	movs	r2, #8
 800096a:	619a      	str	r2, [r3, #24]
 800096c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800096e:	2202      	movs	r2, #2
 8000970:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x3B); 
 8000972:	4b5c      	ldr	r3, [pc, #368]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000974:	2204      	movs	r2, #4
 8000976:	619a      	str	r2, [r3, #24]
 8000978:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800097a:	2202      	movs	r2, #2
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
 800097e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000980:	223b      	movs	r2, #59	@ 0x3b
 8000982:	615a      	str	r2, [r3, #20]
 8000984:	4b57      	ldr	r3, [pc, #348]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000986:	2208      	movs	r2, #8
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
 800098a:	4b56      	ldr	r3, [pc, #344]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800098c:	2208      	movs	r2, #8
 800098e:	619a      	str	r2, [r3, #24]
 8000990:	4b54      	ldr	r3, [pc, #336]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000992:	2202      	movs	r2, #2
 8000994:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8000996:	4b53      	ldr	r3, [pc, #332]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000998:	2204      	movs	r2, #4
 800099a:	619a      	str	r2, [r3, #24]
 800099c:	4b51      	ldr	r3, [pc, #324]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800099e:	2202      	movs	r2, #2
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80009a2:	4b51      	ldr	r3, [pc, #324]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	4b4e      	ldr	r3, [pc, #312]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80009ae:	4b4d      	ldr	r3, [pc, #308]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009b0:	2208      	movs	r2, #8
 80009b2:	619a      	str	r2, [r3, #24]
 80009b4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009b6:	2202      	movs	r2, #2
 80009b8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x11); 
 80009ba:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009bc:	2204      	movs	r2, #4
 80009be:	619a      	str	r2, [r3, #24]
 80009c0:	4b48      	ldr	r3, [pc, #288]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80009c6:	4b48      	ldr	r3, [pc, #288]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80009c8:	2211      	movs	r2, #17
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	4b45      	ldr	r3, [pc, #276]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80009d2:	4b44      	ldr	r3, [pc, #272]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009d4:	2208      	movs	r2, #8
 80009d6:	619a      	str	r2, [r3, #24]
 80009d8:	4b42      	ldr	r3, [pc, #264]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009da:	2202      	movs	r2, #2
 80009dc:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x01); 
 80009de:	4b41      	ldr	r3, [pc, #260]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009e0:	2204      	movs	r2, #4
 80009e2:	619a      	str	r2, [r3, #24]
 80009e4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80009ea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009f2:	2208      	movs	r2, #8
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80009f6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009f8:	2208      	movs	r2, #8
 80009fa:	619a      	str	r2, [r3, #24]
 80009fc:	4b39      	ldr	r3, [pc, #228]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009fe:	2202      	movs	r2, #2
 8000a00:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x09); 
 8000a02:	4b38      	ldr	r3, [pc, #224]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a04:	2204      	movs	r2, #4
 8000a06:	619a      	str	r2, [r3, #24]
 8000a08:	4b36      	ldr	r3, [pc, #216]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a0e:	4b36      	ldr	r3, [pc, #216]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a10:	2209      	movs	r2, #9
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	4b33      	ldr	r3, [pc, #204]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	619a      	str	r2, [r3, #24]
 8000a20:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x05); 
 8000a26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a28:	2204      	movs	r2, #4
 8000a2a:	619a      	str	r2, [r3, #24]
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a34:	2205      	movs	r2, #5
 8000a36:	615a      	str	r2, [r3, #20]
 8000a38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a40:	2208      	movs	r2, #8
 8000a42:	619a      	str	r2, [r3, #24]
 8000a44:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x04); 		 
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	619a      	str	r2, [r3, #24]
 8000a50:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a56:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a58:	2204      	movs	r2, #4
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a62:	4b20      	ldr	r3, [pc, #128]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a64:	2208      	movs	r2, #8
 8000a66:	619a      	str	r2, [r3, #24]
 8000a68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0XE1);    //Set Gamma 
 8000a6e:	20e1      	movs	r0, #225	@ 0xe1
 8000a70:	f7ff fbce 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000a74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	619a      	str	r2, [r3, #24]
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a80:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a88:	2208      	movs	r2, #8
 8000a8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	619a      	str	r2, [r3, #24]
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x18); 
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	619a      	str	r2, [r3, #24]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000aa4:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000aa6:	2218      	movs	r2, #24
 8000aa8:	615a      	str	r2, [r3, #20]
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000aac:	2208      	movs	r2, #8
 8000aae:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	619a      	str	r2, [r3, #24]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1D); 
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000abe:	2204      	movs	r2, #4
 8000ac0:	619a      	str	r2, [r3, #24]
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ac8:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000aca:	221d      	movs	r2, #29
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ad0:	2208      	movs	r2, #8
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	619a      	str	r2, [r3, #24]
 8000ada:	4b02      	ldr	r3, [pc, #8]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	619a      	str	r2, [r3, #24]
 8000ae0:	e004      	b.n	8000aec <ILI9341_paradriver_Init+0x77c>
 8000ae2:	bf00      	nop
 8000ae4:	48000800 	.word	0x48000800
 8000ae8:	48000400 	.word	0x48000400
	LCD_WR_DATA(0x02); 
 8000aec:	4b99      	ldr	r3, [pc, #612]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	619a      	str	r2, [r3, #24]
 8000af2:	4b98      	ldr	r3, [pc, #608]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000af8:	4b97      	ldr	r3, [pc, #604]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000afa:	2202      	movs	r2, #2
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	4b95      	ldr	r3, [pc, #596]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b00:	2208      	movs	r2, #8
 8000b02:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b04:	4b93      	ldr	r3, [pc, #588]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b06:	2208      	movs	r2, #8
 8000b08:	619a      	str	r2, [r3, #24]
 8000b0a:	4b92      	ldr	r3, [pc, #584]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0F); 
 8000b10:	4b90      	ldr	r3, [pc, #576]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	619a      	str	r2, [r3, #24]
 8000b16:	4b8f      	ldr	r3, [pc, #572]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b1c:	4b8e      	ldr	r3, [pc, #568]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b1e:	220f      	movs	r2, #15
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	4b8c      	ldr	r3, [pc, #560]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b24:	2208      	movs	r2, #8
 8000b26:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b28:	4b8a      	ldr	r3, [pc, #552]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	619a      	str	r2, [r3, #24]
 8000b2e:	4b89      	ldr	r3, [pc, #548]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x04); 
 8000b34:	4b87      	ldr	r3, [pc, #540]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b36:	2204      	movs	r2, #4
 8000b38:	619a      	str	r2, [r3, #24]
 8000b3a:	4b86      	ldr	r3, [pc, #536]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b40:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	4b83      	ldr	r3, [pc, #524]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b48:	2208      	movs	r2, #8
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b4c:	4b81      	ldr	r3, [pc, #516]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b4e:	2208      	movs	r2, #8
 8000b50:	619a      	str	r2, [r3, #24]
 8000b52:	4b80      	ldr	r3, [pc, #512]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x36); 
 8000b58:	4b7e      	ldr	r3, [pc, #504]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	619a      	str	r2, [r3, #24]
 8000b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b64:	4b7c      	ldr	r3, [pc, #496]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b66:	2236      	movs	r2, #54	@ 0x36
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b70:	4b78      	ldr	r3, [pc, #480]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	619a      	str	r2, [r3, #24]
 8000b76:	4b77      	ldr	r3, [pc, #476]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x13); 
 8000b7c:	4b75      	ldr	r3, [pc, #468]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	619a      	str	r2, [r3, #24]
 8000b82:	4b74      	ldr	r3, [pc, #464]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b88:	4b73      	ldr	r3, [pc, #460]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b8a:	2213      	movs	r2, #19
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	4b71      	ldr	r3, [pc, #452]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b90:	2208      	movs	r2, #8
 8000b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b94:	4b6f      	ldr	r3, [pc, #444]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b96:	2208      	movs	r2, #8
 8000b98:	619a      	str	r2, [r3, #24]
 8000b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x4C); 
 8000ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	619a      	str	r2, [r3, #24]
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bac:	4b6a      	ldr	r3, [pc, #424]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000bae:	224c      	movs	r2, #76	@ 0x4c
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	4b68      	ldr	r3, [pc, #416]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bb8:	4b66      	ldr	r3, [pc, #408]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bba:	2208      	movs	r2, #8
 8000bbc:	619a      	str	r2, [r3, #24]
 8000bbe:	4b65      	ldr	r3, [pc, #404]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8000bc4:	4b63      	ldr	r3, [pc, #396]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	619a      	str	r2, [r3, #24]
 8000bca:	4b62      	ldr	r3, [pc, #392]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bd0:	4b61      	ldr	r3, [pc, #388]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bd8:	2208      	movs	r2, #8
 8000bda:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bdc:	4b5d      	ldr	r3, [pc, #372]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bde:	2208      	movs	r2, #8
 8000be0:	619a      	str	r2, [r3, #24]
 8000be2:	4b5c      	ldr	r3, [pc, #368]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x13); 
 8000be8:	4b5a      	ldr	r3, [pc, #360]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	619a      	str	r2, [r3, #24]
 8000bee:	4b59      	ldr	r3, [pc, #356]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bf4:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000bf6:	2213      	movs	r2, #19
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	4b56      	ldr	r3, [pc, #344]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c00:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c02:	2208      	movs	r2, #8
 8000c04:	619a      	str	r2, [r3, #24]
 8000c06:	4b53      	ldr	r3, [pc, #332]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c08:	2202      	movs	r2, #2
 8000c0a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0F); 
 8000c0c:	4b51      	ldr	r3, [pc, #324]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c0e:	2204      	movs	r2, #4
 8000c10:	619a      	str	r2, [r3, #24]
 8000c12:	4b50      	ldr	r3, [pc, #320]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c14:	2202      	movs	r2, #2
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c18:	4b4f      	ldr	r3, [pc, #316]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c20:	2208      	movs	r2, #8
 8000c22:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c24:	4b4b      	ldr	r3, [pc, #300]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c26:	2208      	movs	r2, #8
 8000c28:	619a      	str	r2, [r3, #24]
 8000c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2E); 
 8000c30:	4b48      	ldr	r3, [pc, #288]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c32:	2204      	movs	r2, #4
 8000c34:	619a      	str	r2, [r3, #24]
 8000c36:	4b47      	ldr	r3, [pc, #284]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c3c:	4b46      	ldr	r3, [pc, #280]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c3e:	222e      	movs	r2, #46	@ 0x2e
 8000c40:	615a      	str	r2, [r3, #20]
 8000c42:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c44:	2208      	movs	r2, #8
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c48:	4b42      	ldr	r3, [pc, #264]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	619a      	str	r2, [r3, #24]
 8000c4e:	4b41      	ldr	r3, [pc, #260]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2F); 
 8000c54:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c56:	2204      	movs	r2, #4
 8000c58:	619a      	str	r2, [r3, #24]
 8000c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c60:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c62:	222f      	movs	r2, #47	@ 0x2f
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c68:	2208      	movs	r2, #8
 8000c6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c6c:	4b39      	ldr	r3, [pc, #228]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c6e:	2208      	movs	r2, #8
 8000c70:	619a      	str	r2, [r3, #24]
 8000c72:	4b38      	ldr	r3, [pc, #224]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x05); 
 8000c78:	4b36      	ldr	r3, [pc, #216]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	619a      	str	r2, [r3, #24]
 8000c7e:	4b35      	ldr	r3, [pc, #212]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c84:	4b34      	ldr	r3, [pc, #208]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c86:	2205      	movs	r2, #5
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	4b32      	ldr	r3, [pc, #200]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c90:	4b30      	ldr	r3, [pc, #192]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c92:	2208      	movs	r2, #8
 8000c94:	619a      	str	r2, [r3, #24]
 8000c96:	4b2f      	ldr	r3, [pc, #188]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c98:	2202      	movs	r2, #2
 8000c9a:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x2B); 
 8000c9c:	202b      	movs	r0, #43	@ 0x2b
 8000c9e:	f7ff fab7 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000caa:	2202      	movs	r2, #2
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cae:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cba:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	619a      	str	r2, [r3, #24]
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000cc6:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cc8:	2204      	movs	r2, #4
 8000cca:	619a      	str	r2, [r3, #24]
 8000ccc:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cda:	2208      	movs	r2, #8
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cde:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ce0:	2208      	movs	r2, #8
 8000ce2:	619a      	str	r2, [r3, #24]
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x01);
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	619a      	str	r2, [r3, #24]
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cfe:	2208      	movs	r2, #8
 8000d00:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d02:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d04:	2208      	movs	r2, #8
 8000d06:	619a      	str	r2, [r3, #24]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x3f);
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	619a      	str	r2, [r3, #24]
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000d1c:	223f      	movs	r2, #63	@ 0x3f
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d22:	2208      	movs	r2, #8
 8000d24:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d28:	2208      	movs	r2, #8
 8000d2a:	619a      	str	r2, [r3, #24]
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x2A); 
 8000d32:	202a      	movs	r0, #42	@ 0x2a
 8000d34:	f7ff fa6c 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	619a      	str	r2, [r3, #24]
 8000d3e:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	4b02      	ldr	r3, [pc, #8]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d4c:	2208      	movs	r2, #8
 8000d4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d50:	e004      	b.n	8000d5c <ILI9341_paradriver_Init+0x9ec>
 8000d52:	bf00      	nop
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d5e:	2208      	movs	r2, #8
 8000d60:	619a      	str	r2, [r3, #24]
 8000d62:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000d68:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	619a      	str	r2, [r3, #24]
 8000d6e:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <ILI9341_paradriver_Init+0xa8c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	619a      	str	r2, [r3, #24]
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	619a      	str	r2, [r3, #24]
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d94:	2202      	movs	r2, #2
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <ILI9341_paradriver_Init+0xa8c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000da0:	2208      	movs	r2, #8
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000da4:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000da6:	2208      	movs	r2, #8
 8000da8:	619a      	str	r2, [r3, #24]
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xef);	 
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000db2:	2204      	movs	r2, #4
 8000db4:	619a      	str	r2, [r3, #24]
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <ILI9341_paradriver_Init+0xa8c>)
 8000dbe:	22ef      	movs	r2, #239	@ 0xef
 8000dc0:	615a      	str	r2, [r3, #20]
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dc4:	2208      	movs	r2, #8
 8000dc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	619a      	str	r2, [r3, #24]
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x11); //Exit Sleep
 8000dd4:	2011      	movs	r0, #17
 8000dd6:	f7ff fa1b 	bl	8000210 <LCD_WR_REG>
	delay_ms(120);
 8000dda:	2078      	movs	r0, #120	@ 0x78
 8000ddc:	f000 fa68 	bl	80012b0 <delay_ms>
	LCD_WR_REG(0x29); //display on		
 8000de0:	2029      	movs	r0, #41	@ 0x29
 8000de2:	f7ff fa15 	bl	8000210 <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 f8de 	bl	8000fa8 <LCD_direction>
//	LCD_LED=1;//��������	 
	LCD_Clear(WHITE);//��ȫ����ɫ
 8000dec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000df0:	f7ff fa7e 	bl	80002f0 <LCD_Clear>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	48000800 	.word	0x48000800
 8000dfc:	48000400 	.word	0x48000400

08000e00 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4623      	mov	r3, r4
 8000e10:	80fb      	strh	r3, [r7, #6]
 8000e12:	4603      	mov	r3, r0
 8000e14:	80bb      	strh	r3, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	807b      	strh	r3, [r7, #2]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8000e1e:	4b56      	ldr	r3, [pc, #344]	@ (8000f78 <LCD_SetWindows+0x178>)
 8000e20:	899b      	ldrh	r3, [r3, #12]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f9f4 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8000e28:	4b54      	ldr	r3, [pc, #336]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	4b53      	ldr	r3, [pc, #332]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b51      	ldr	r3, [pc, #324]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000e3c:	615a      	str	r2, [r3, #20]
 8000e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e40:	2208      	movs	r2, #8
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e44:	4b4d      	ldr	r3, [pc, #308]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e46:	2208      	movs	r2, #8
 8000e48:	619a      	str	r2, [r3, #24]
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&xStar);		
 8000e50:	4b4a      	ldr	r3, [pc, #296]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	619a      	str	r2, [r3, #24]
 8000e56:	4b49      	ldr	r3, [pc, #292]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	4a48      	ldr	r2, [pc, #288]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	6153      	str	r3, [r2, #20]
 8000e64:	4b45      	ldr	r3, [pc, #276]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e66:	2208      	movs	r2, #8
 8000e68:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e6a:	4b44      	ldr	r3, [pc, #272]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	619a      	str	r2, [r3, #24]
 8000e70:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(xEnd>>8);
 8000e76:	4b41      	ldr	r3, [pc, #260]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	619a      	str	r2, [r3, #24]
 8000e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e8e:	2208      	movs	r2, #8
 8000e90:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e92:	4b3a      	ldr	r3, [pc, #232]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e94:	2208      	movs	r2, #8
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	4b38      	ldr	r3, [pc, #224]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&xEnd);
 8000e9e:	4b37      	ldr	r3, [pc, #220]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	619a      	str	r2, [r3, #24]
 8000ea4:	4b35      	ldr	r3, [pc, #212]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eaa:	887b      	ldrh	r3, [r7, #2]
 8000eac:	4a34      	ldr	r2, [pc, #208]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eb8:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000eba:	2208      	movs	r2, #8
 8000ebc:	619a      	str	r2, [r3, #24]
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	619a      	str	r2, [r3, #24]

	LCD_WR_REG(lcddev.setycmd);	
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <LCD_SetWindows+0x178>)
 8000ec6:	89db      	ldrh	r3, [r3, #14]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f9a1 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8000ece:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	619a      	str	r2, [r3, #24]
 8000ed4:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eda:	88bb      	ldrh	r3, [r7, #4]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	4b25      	ldr	r3, [pc, #148]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000eec:	2208      	movs	r2, #8
 8000eee:	619a      	str	r2, [r3, #24]
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&yStar);		
 8000ef6:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	619a      	str	r2, [r3, #24]
 8000efc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f02:	88bb      	ldrh	r3, [r7, #4]
 8000f04:	4a1e      	ldr	r2, [pc, #120]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f12:	2208      	movs	r2, #8
 8000f14:	619a      	str	r2, [r3, #24]
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(yEnd>>8);
 8000f1c:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	619a      	str	r2, [r3, #24]
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f28:	883b      	ldrh	r3, [r7, #0]
 8000f2a:	0a1b      	lsrs	r3, r3, #8
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f34:	2208      	movs	r2, #8
 8000f36:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	619a      	str	r2, [r3, #24]
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&yEnd);
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f46:	2204      	movs	r2, #4
 8000f48:	619a      	str	r2, [r3, #24]
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f50:	883b      	ldrh	r3, [r7, #0]
 8000f52:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	6153      	str	r3, [r2, #20]
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f60:	2208      	movs	r2, #8
 8000f62:	619a      	str	r2, [r3, #24]
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f66:	2202      	movs	r2, #2
 8000f68:	619a      	str	r2, [r3, #24]

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 8000f6a:	f7ff f989 	bl	8000280 <LCD_WriteRAM_Prepare>
}   
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000034 	.word	0x20000034
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	48000400 	.word	0x48000400

08000f84 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	80fb      	strh	r3, [r7, #6]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 8000f94:	88bb      	ldrh	r3, [r7, #4]
 8000f96:	88fa      	ldrh	r2, [r7, #6]
 8000f98:	88b9      	ldrh	r1, [r7, #4]
 8000f9a:	88f8      	ldrh	r0, [r7, #6]
 8000f9c:	f7ff ff30 	bl	8000e00 <LCD_SetWindows>
} 
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <LCD_direction+0xac>)
 8000fb4:	222a      	movs	r2, #42	@ 0x2a
 8000fb6:	819a      	strh	r2, [r3, #12]
			lcddev.setycmd=0x2B;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <LCD_direction+0xac>)
 8000fba:	222b      	movs	r2, #43	@ 0x2b
 8000fbc:	81da      	strh	r2, [r3, #14]
			lcddev.wramcmd=0x2C;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <LCD_direction+0xac>)
 8000fc0:	222c      	movs	r2, #44	@ 0x2c
 8000fc2:	811a      	strh	r2, [r3, #8]
			lcddev.rramcmd=0x2E;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <LCD_direction+0xac>)
 8000fc6:	222e      	movs	r2, #46	@ 0x2e
 8000fc8:	815a      	strh	r2, [r3, #10]
	switch(direction){		  
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d83b      	bhi.n	8001048 <LCD_direction+0xa0>
 8000fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd8 <LCD_direction+0x30>)
 8000fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd6:	bf00      	nop
 8000fd8:	08000fe9 	.word	0x08000fe9
 8000fdc:	08001001 	.word	0x08001001
 8000fe0:	08001019 	.word	0x08001019
 8000fe4:	08001031 	.word	0x08001031
		case 0:						 	 		
			lcddev.width=LCD_W;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <LCD_direction+0xac>)
 8000fea:	22f0      	movs	r2, #240	@ 0xf0
 8000fec:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <LCD_direction+0xac>)
 8000ff0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ff4:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3));
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	2036      	movs	r0, #54	@ 0x36
 8000ffa:	f7ff f91b 	bl	8000234 <LCD_WriteReg>
		break;
 8000ffe:	e024      	b.n	800104a <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <LCD_direction+0xac>)
 8001002:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001006:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <LCD_direction+0xac>)
 800100a:	22f0      	movs	r2, #240	@ 0xf0
 800100c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6));
 800100e:	2168      	movs	r1, #104	@ 0x68
 8001010:	2036      	movs	r0, #54	@ 0x36
 8001012:	f7ff f90f 	bl	8000234 <LCD_WriteReg>
		break;
 8001016:	e018      	b.n	800104a <LCD_direction+0xa2>
		case 2:						 	 		
			lcddev.width=LCD_W;
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <LCD_direction+0xac>)
 800101a:	22f0      	movs	r2, #240	@ 0xf0
 800101c:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <LCD_direction+0xac>)
 8001020:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001024:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<4)|(1<<6));
 8001026:	21d8      	movs	r1, #216	@ 0xd8
 8001028:	2036      	movs	r0, #54	@ 0x36
 800102a:	f7ff f903 	bl	8000234 <LCD_WriteReg>
		break;
 800102e:	e00c      	b.n	800104a <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <LCD_direction+0xac>)
 8001032:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001036:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <LCD_direction+0xac>)
 800103a:	22f0      	movs	r2, #240	@ 0xf0
 800103c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5)|(1<<4));
 800103e:	21b8      	movs	r1, #184	@ 0xb8
 8001040:	2036      	movs	r0, #54	@ 0x36
 8001042:	f7ff f8f7 	bl	8000234 <LCD_WriteReg>
		break;	
 8001046:	e000      	b.n	800104a <LCD_direction+0xa2>
		default:break;
 8001048:	bf00      	nop
	}		
}	 
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000034 	.word	0x20000034

08001058 <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(int16_t sx,u16 sy,int16_t ex,u16 ey,u16 color)	// x must be not less than 0 for obstacle shifting
{																// changing u16 to int16_t
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4604      	mov	r4, r0
 8001060:	4608      	mov	r0, r1
 8001062:	4611      	mov	r1, r2
 8001064:	461a      	mov	r2, r3
 8001066:	4623      	mov	r3, r4
 8001068:	80fb      	strh	r3, [r7, #6]
 800106a:	4603      	mov	r3, r0
 800106c:	80bb      	strh	r3, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	807b      	strh	r3, [r7, #2]
 8001072:	4613      	mov	r3, r2
 8001074:	803b      	strh	r3, [r7, #0]

	if(sx<0)
 8001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da01      	bge.n	8001082 <LCD_Fill+0x2a>
	{
		sx=0;
 800107e:	2300      	movs	r3, #0
 8001080:	80fb      	strh	r3, [r7, #6]
	}

	if(ex<0)
 8001082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001086:	2b00      	cmp	r3, #0
 8001088:	da01      	bge.n	800108e <LCD_Fill+0x36>
	{
		ex=0;
 800108a:	2300      	movs	r3, #0
 800108c:	807b      	strh	r3, [r7, #2]
	}

	u16 i,j;
	u16 width=ex-sx+1; 		//�õ����Ŀ��
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	b29b      	uxth	r3, r3
 8001096:	3301      	adds	r3, #1
 8001098:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;		//�߶�
 800109a:	883a      	ldrh	r2, [r7, #0]
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);//������ʾ����
 80010a6:	88f8      	ldrh	r0, [r7, #6]
 80010a8:	887a      	ldrh	r2, [r7, #2]
 80010aa:	883b      	ldrh	r3, [r7, #0]
 80010ac:	88b9      	ldrh	r1, [r7, #4]
 80010ae:	f7ff fea7 	bl	8000e00 <LCD_SetWindows>
	for(i=0;i<height;i++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	81fb      	strh	r3, [r7, #14]
 80010b6:	e010      	b.n	80010da <LCD_Fill+0x82>
	{
		for(j=0;j<width;j++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	81bb      	strh	r3, [r7, #12]
 80010bc:	e006      	b.n	80010cc <LCD_Fill+0x74>
		Lcd_WriteData_16Bit(color);	//д������
 80010be:	8c3b      	ldrh	r3, [r7, #32]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f8e9 	bl	8000298 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	81bb      	strh	r3, [r7, #12]
 80010cc:	89ba      	ldrh	r2, [r7, #12]
 80010ce:	897b      	ldrh	r3, [r7, #10]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d3f4      	bcc.n	80010be <LCD_Fill+0x66>
	for(i=0;i<height;i++)
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	3301      	adds	r3, #1
 80010d8:	81fb      	strh	r3, [r7, #14]
 80010da:	89fa      	ldrh	r2, [r7, #14]
 80010dc:	893b      	ldrh	r3, [r7, #8]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3ea      	bcc.n	80010b8 <LCD_Fill+0x60>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ���������Ϊȫ��
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <LCD_Fill+0xac>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <LCD_Fill+0xac>)
 80010ec:	885b      	ldrh	r3, [r3, #2]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fe83 	bl	8000e00 <LCD_SetWindows>
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	20000034 	.word	0x20000034

08001108 <LCD_DrawLine>:
								x2:the ending x coordinate of the line
								y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b08d      	sub	sp, #52	@ 0x34
 800110c:	af00      	add	r7, sp, #0
 800110e:	4604      	mov	r4, r0
 8001110:	4608      	mov	r0, r1
 8001112:	4611      	mov	r1, r2
 8001114:	461a      	mov	r2, r3
 8001116:	4623      	mov	r3, r4
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	4603      	mov	r3, r0
 800111c:	80bb      	strh	r3, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	807b      	strh	r3, [r7, #2]
 8001122:	4613      	mov	r3, r2
 8001124:	803b      	strh	r3, [r7, #0]
	u16 t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;

	delta_x=x2-x1; //������������
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //���õ�������
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dd02      	ble.n	8001152 <LCD_DrawLine+0x4a>
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	e00b      	b.n	800116a <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//��ֱ��
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <LCD_DrawLine+0x56>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e005      	b.n	800116a <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	425b      	negs	r3, r3
 8001168:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	2b00      	cmp	r3, #0
 800116e:	dd02      	ble.n	8001176 <LCD_DrawLine+0x6e>
 8001170:	2301      	movs	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	e00b      	b.n	800118e <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//ˮƽ��
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <LCD_DrawLine+0x7a>
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	e005      	b.n	800118e <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	425b      	negs	r3, r3
 800118c:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //ѡȡ��������������
 800118e:	6a3a      	ldr	r2, [r7, #32]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	429a      	cmp	r2, r3
 8001194:	dd02      	ble.n	800119c <LCD_DrawLine+0x94>
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	e001      	b.n	80011a0 <LCD_DrawLine+0x98>
	else distance=delta_y;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//�������
 80011a0:	2300      	movs	r3, #0
 80011a2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80011a4:	e02a      	b.n	80011fc <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//����
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	b292      	uxth	r2, r2
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f883 	bl	80002bc <LCD_DrawPoint>
		xerr+=delta_x ;
 80011b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	4413      	add	r3, r2
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y ;
 80011be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	4413      	add	r3, r2
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 80011c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dd07      	ble.n	80011de <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 80011ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80011de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dd07      	ble.n	80011f6 <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 80011e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4413      	add	r3, r2
 80011f4:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//�������
 80011f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80011f8:	3301      	adds	r3, #1
 80011fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80011fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	3301      	adds	r3, #1
 8001202:	429a      	cmp	r2, r3
 8001204:	ddcf      	ble.n	80011a6 <LCD_DrawLine+0x9e>
		}
	}
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3734      	adds	r7, #52	@ 0x34
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}

08001210 <delay_init>:
// Initialize delay function
// When using uC/OS, this function initializes the uC/OS clock tick.
// The SYSTICK clock is fixed to the AHB clock.
// SYSCLK: System clock frequency
void delay_init(u8 SYSCLK)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS                         // If OS support is needed
    u32 reload;
#endif
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); // SysTick frequency is HCLK
 800121a:	2004      	movs	r0, #4
 800121c:	f003 f990 	bl	8004540 <HAL_SYSTICK_CLKSourceConfig>
    fac_us=SYSCLK;                        // fac_us is used regardless of OS usage
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4a03      	ldr	r2, [pc, #12]	@ (8001230 <delay_init+0x20>)
 8001224:	6013      	str	r3, [r2, #0]
    SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk; // Enable SysTick interrupt
    SysTick->LOAD=reload;                   // Interrupt every 1/OS_TICKS_PER_SEC second
    SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; // Enable SysTick
#else
#endif
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000048 	.word	0x20000048

08001234 <delay_us>:

// Delay for nus microseconds
// nus: Number of microseconds to delay
// nus: 0~190887435 (maximum value is 2^32/fac_us when fac_us=22.5)
void delay_us(u32 nus)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told,tnow,tcnt=0;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
    u32 reload=SysTick->LOAD;                // Value of LOAD
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <delay_us+0x74>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	617b      	str	r3, [r7, #20]
    ticks=nus*fac_us;                        // Number of ticks needed
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <delay_us+0x78>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	613b      	str	r3, [r7, #16]
    told=SysTick->VAL;                        // Counter value upon entry
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <delay_us+0x74>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61fb      	str	r3, [r7, #28]
    while(1)
    {
        tnow=SysTick->VAL;
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <delay_us+0x74>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	60fb      	str	r3, [r7, #12]
        if(tnow!=told)
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	429a      	cmp	r2, r3
 8001264:	d0f8      	beq.n	8001258 <delay_us+0x24>
        {
            if(tnow<told)tcnt+=told-tnow;    // Note that SYSTICK is a decrementing counter.
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	429a      	cmp	r2, r3
 800126c:	d206      	bcs.n	800127c <delay_us+0x48>
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4413      	add	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	e007      	b.n	800128c <delay_us+0x58>
            else tcnt+=reload-tnow+told;
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad2      	subs	r2, r2, r3
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	4413      	add	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4413      	add	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
            told=tnow;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	61fb      	str	r3, [r7, #28]
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d200      	bcs.n	800129a <delay_us+0x66>
        tnow=SysTick->VAL;
 8001298:	e7de      	b.n	8001258 <delay_us+0x24>
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 800129a:	bf00      	nop
        }
    };
}
 800129c:	bf00      	nop
 800129e:	3724      	adds	r7, #36	@ 0x24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000e010 	.word	0xe000e010
 80012ac:	20000048 	.word	0x20000048

080012b0 <delay_ms>:

// Delay for nms milliseconds
// nms: Number of milliseconds to delay
void delay_ms(u16 nms)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
    u32 i;
    for(i=0;i<nms;i++) delay_us(1000);
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e006      	b.n	80012ce <delay_ms+0x1e>
 80012c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012c4:	f7ff ffb6 	bl	8001234 <delay_us>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3f4      	bcc.n	80012c0 <delay_ms+0x10>
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <DinoDetector>:
static uint16_t obs_y2s=0;	// ..



void DinoDetector(uint16_t altitude)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	// include jumping
	dino_y1 = 160 - altitude;
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <DinoDetector+0x30>)
 80012f4:	801a      	strh	r2, [r3, #0]
	dino_y2 = 207 - altitude;
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <DinoDetector+0x34>)
 8001300:	801a      	strh	r2, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000002 	.word	0x20000002
 8001314:	20000006 	.word	0x20000006

08001318 <ObsDetector>:



void ObsDetector(uint16_t shift)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
	if(obstacle_type == 1)
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <ObsDetector+0xc8>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d112      	bne.n	8001350 <ObsDetector+0x38>
	{
		// include moving
		obs_x1 = 340 - shift;
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	f5c3 73aa 	rsb	r3, r3, #340	@ 0x154
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <ObsDetector+0xcc>)
 8001334:	801a      	strh	r2, [r3, #0]
		obs_y1 = 150;
 8001336:	4b2c      	ldr	r3, [pc, #176]	@ (80013e8 <ObsDetector+0xd0>)
 8001338:	2296      	movs	r2, #150	@ 0x96
 800133a:	801a      	strh	r2, [r3, #0]
		obs_x2 = 372 - shift;
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <ObsDetector+0xd4>)
 8001346:	801a      	strh	r2, [r3, #0]
		obs_y2 = 210;
 8001348:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <ObsDetector+0xd8>)
 800134a:	22d2      	movs	r2, #210	@ 0xd2
 800134c:	801a      	strh	r2, [r3, #0]
		obs_x1s = 379 - shift;
		obs_y1s = 170;
		obs_x2s = 401 - shift;
		obs_y2s = 210;
	}
}
 800134e:	e040      	b.n	80013d2 <ObsDetector+0xba>
	else if(obstacle_type == 2)
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <ObsDetector+0xc8>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d112      	bne.n	800137e <ObsDetector+0x66>
		obs_x1 = 344 - shift;
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <ObsDetector+0xcc>)
 8001362:	801a      	strh	r2, [r3, #0]
		obs_y1 = 170;
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <ObsDetector+0xd0>)
 8001366:	22aa      	movs	r2, #170	@ 0xaa
 8001368:	801a      	strh	r2, [r3, #0]
		obs_x2 = 366 - shift;
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <ObsDetector+0xd4>)
 8001374:	801a      	strh	r2, [r3, #0]
		obs_y2 = 210;
 8001376:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <ObsDetector+0xd8>)
 8001378:	22d2      	movs	r2, #210	@ 0xd2
 800137a:	801a      	strh	r2, [r3, #0]
}
 800137c:	e029      	b.n	80013d2 <ObsDetector+0xba>
	else if(obstacle_type == 3)
 800137e:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <ObsDetector+0xc8>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d125      	bne.n	80013d2 <ObsDetector+0xba>
		obs_x1 = 344 - shift;
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <ObsDetector+0xcc>)
 8001390:	801a      	strh	r2, [r3, #0]
		obs_y1 = 150;
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <ObsDetector+0xd0>)
 8001394:	2296      	movs	r2, #150	@ 0x96
 8001396:	801a      	strh	r2, [r3, #0]
		obs_x2 = 376 - shift;
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 800139e:	b29a      	uxth	r2, r3
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <ObsDetector+0xd4>)
 80013a2:	801a      	strh	r2, [r3, #0]
		obs_y2 = 210;
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <ObsDetector+0xd8>)
 80013a6:	22d2      	movs	r2, #210	@ 0xd2
 80013a8:	801a      	strh	r2, [r3, #0]
		obs_x1s = 379 - shift;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <ObsDetector+0xdc>)
 80013b6:	801a      	strh	r2, [r3, #0]
		obs_y1s = 170;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <ObsDetector+0xe0>)
 80013ba:	22aa      	movs	r2, #170	@ 0xaa
 80013bc:	801a      	strh	r2, [r3, #0]
		obs_x2s = 401 - shift;
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 80013c4:	3301      	adds	r3, #1
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <ObsDetector+0xe4>)
 80013ca:	801a      	strh	r2, [r3, #0]
		obs_y2s = 210;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <ObsDetector+0xe8>)
 80013ce:	22d2      	movs	r2, #210	@ 0xd2
 80013d0:	801a      	strh	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000008 	.word	0x20000008
 80013e4:	2000004c 	.word	0x2000004c
 80013e8:	2000004e 	.word	0x2000004e
 80013ec:	20000050 	.word	0x20000050
 80013f0:	20000052 	.word	0x20000052
 80013f4:	20000054 	.word	0x20000054
 80013f8:	20000056 	.word	0x20000056
 80013fc:	20000058 	.word	0x20000058
 8001400:	2000005a 	.word	0x2000005a

08001404 <CollisionDetector>:



uint8_t CollisionDetector(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	// check if coordinates do not overlap
	if(((obs_x1 <= dino_x2) && (obs_x2 >= dino_x1) && (dino_y2 >= obs_y1)) ||			// first obstacle
 8001408:	4b38      	ldr	r3, [pc, #224]	@ (80014ec <CollisionDetector+0xe8>)
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	4b38      	ldr	r3, [pc, #224]	@ (80014f0 <CollisionDetector+0xec>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d80b      	bhi.n	800142c <CollisionDetector+0x28>
 8001414:	4b37      	ldr	r3, [pc, #220]	@ (80014f4 <CollisionDetector+0xf0>)
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <CollisionDetector+0xf4>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d305      	bcc.n	800142c <CollisionDetector+0x28>
 8001420:	4b36      	ldr	r3, [pc, #216]	@ (80014fc <CollisionDetector+0xf8>)
 8001422:	881a      	ldrh	r2, [r3, #0]
 8001424:	4b36      	ldr	r3, [pc, #216]	@ (8001500 <CollisionDetector+0xfc>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d211      	bcs.n	8001450 <CollisionDetector+0x4c>
			((obs_x1s <= dino_x2) && (obs_x2s >= dino_x1) && (dino_y2 >= obs_y1s)) )	// second obstacle (if is)
 800142c:	4b35      	ldr	r3, [pc, #212]	@ (8001504 <CollisionDetector+0x100>)
 800142e:	881a      	ldrh	r2, [r3, #0]
 8001430:	4b2f      	ldr	r3, [pc, #188]	@ (80014f0 <CollisionDetector+0xec>)
 8001432:	881b      	ldrh	r3, [r3, #0]
	if(((obs_x1 <= dino_x2) && (obs_x2 >= dino_x1) && (dino_y2 >= obs_y1)) ||			// first obstacle
 8001434:	429a      	cmp	r2, r3
 8001436:	d853      	bhi.n	80014e0 <CollisionDetector+0xdc>
			((obs_x1s <= dino_x2) && (obs_x2s >= dino_x1) && (dino_y2 >= obs_y1s)) )	// second obstacle (if is)
 8001438:	4b33      	ldr	r3, [pc, #204]	@ (8001508 <CollisionDetector+0x104>)
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <CollisionDetector+0xf4>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d34d      	bcc.n	80014e0 <CollisionDetector+0xdc>
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <CollisionDetector+0xf8>)
 8001446:	881a      	ldrh	r2, [r3, #0]
 8001448:	4b30      	ldr	r3, [pc, #192]	@ (800150c <CollisionDetector+0x108>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d347      	bcc.n	80014e0 <CollisionDetector+0xdc>
	{
		// obstacle get into half of dino while jumping XD
		if( ((obs_x1 < dino_x2) && (obs_x1 > ((dino_x1+dino_x2)/2)) && (dino_y2 < ((obs_y1+obs_y2)/2))) ||			// first obstacle
 8001450:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <CollisionDetector+0xe8>)
 8001452:	881a      	ldrh	r2, [r3, #0]
 8001454:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <CollisionDetector+0xec>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d21b      	bcs.n	8001494 <CollisionDetector+0x90>
 800145c:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <CollisionDetector+0xe8>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <CollisionDetector+0xf4>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b21      	ldr	r3, [pc, #132]	@ (80014f0 <CollisionDetector+0xec>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	4413      	add	r3, r2
 800146e:	0fda      	lsrs	r2, r3, #31
 8001470:	4413      	add	r3, r2
 8001472:	105b      	asrs	r3, r3, #1
 8001474:	4299      	cmp	r1, r3
 8001476:	dd0d      	ble.n	8001494 <CollisionDetector+0x90>
 8001478:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <CollisionDetector+0xf8>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <CollisionDetector+0xfc>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <CollisionDetector+0x10c>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	4413      	add	r3, r2
 800148a:	0fda      	lsrs	r2, r3, #31
 800148c:	4413      	add	r3, r2
 800148e:	105b      	asrs	r3, r3, #1
 8001490:	4299      	cmp	r1, r3
 8001492:	db21      	blt.n	80014d8 <CollisionDetector+0xd4>
				((obs_x1s < dino_x2) && (obs_x1s > ((dino_x1+dino_x2)/2)) && (dino_y2 < ((obs_y1s+obs_y2s)/2))) )	// second obstacle (if is)
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <CollisionDetector+0x100>)
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <CollisionDetector+0xec>)
 800149a:	881b      	ldrh	r3, [r3, #0]
		if( ((obs_x1 < dino_x2) && (obs_x1 > ((dino_x1+dino_x2)/2)) && (dino_y2 < ((obs_y1+obs_y2)/2))) ||			// first obstacle
 800149c:	429a      	cmp	r2, r3
 800149e:	d21d      	bcs.n	80014dc <CollisionDetector+0xd8>
				((obs_x1s < dino_x2) && (obs_x1s > ((dino_x1+dino_x2)/2)) && (dino_y2 < ((obs_y1s+obs_y2s)/2))) )	// second obstacle (if is)
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <CollisionDetector+0x100>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <CollisionDetector+0xf4>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <CollisionDetector+0xec>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	0fda      	lsrs	r2, r3, #31
 80014b4:	4413      	add	r3, r2
 80014b6:	105b      	asrs	r3, r3, #1
 80014b8:	4299      	cmp	r1, r3
 80014ba:	dd0f      	ble.n	80014dc <CollisionDetector+0xd8>
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <CollisionDetector+0xf8>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <CollisionDetector+0x108>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <CollisionDetector+0x110>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	0fda      	lsrs	r2, r3, #31
 80014d0:	4413      	add	r3, r2
 80014d2:	105b      	asrs	r3, r3, #1
 80014d4:	4299      	cmp	r1, r3
 80014d6:	da01      	bge.n	80014dc <CollisionDetector+0xd8>
		{
			return 2;	// wait a moment
 80014d8:	2302      	movs	r3, #2
 80014da:	e002      	b.n	80014e2 <CollisionDetector+0xde>
		}

		else return 1;	// collision detected GAME OVER
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <CollisionDetector+0xde>
	}

	else return 0;	// no colision WP
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	2000004c 	.word	0x2000004c
 80014f0:	20000004 	.word	0x20000004
 80014f4:	20000050 	.word	0x20000050
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000006 	.word	0x20000006
 8001500:	2000004e 	.word	0x2000004e
 8001504:	20000054 	.word	0x20000054
 8001508:	20000058 	.word	0x20000058
 800150c:	20000056 	.word	0x20000056
 8001510:	20000052 	.word	0x20000052
 8001514:	2000005a 	.word	0x2000005a

08001518 <DinoAnimation>:

// ------------------------------------------------------------------------------------
// ----------------------------------- ANIMATIONS -------------------------------------
// ------------------------------------------------------------------------------------
void DinoAnimation(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	if((TOUCH==0) || (jump_step != 0))	// jumping
 800151c:	2110      	movs	r1, #16
 800151e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001522:	f003 f9b3 	bl	800488c <HAL_GPIO_ReadPin>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <DinoAnimation+0x1e>
 800152c:	4b5e      	ldr	r3, [pc, #376]	@ (80016a8 <DinoAnimation+0x190>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8092 	beq.w	800165a <DinoAnimation+0x142>
	{
		if(refresh == 1)
 8001536:	4b5d      	ldr	r3, [pc, #372]	@ (80016ac <DinoAnimation+0x194>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	f040 80b2 	bne.w	80016a4 <DinoAnimation+0x18c>
		{
			switch(jump_step)
 8001540:	4b59      	ldr	r3, [pc, #356]	@ (80016a8 <DinoAnimation+0x190>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d047      	beq.n	80015d8 <DinoAnimation+0xc0>
 8001548:	2b00      	cmp	r3, #0
 800154a:	db61      	blt.n	8001610 <DinoAnimation+0xf8>
 800154c:	2b3b      	cmp	r3, #59	@ 0x3b
 800154e:	dc5f      	bgt.n	8001610 <DinoAnimation+0xf8>
 8001550:	2b1e      	cmp	r3, #30
 8001552:	db5d      	blt.n	8001610 <DinoAnimation+0xf8>
 8001554:	3b1e      	subs	r3, #30
 8001556:	2b1d      	cmp	r3, #29
 8001558:	d85a      	bhi.n	8001610 <DinoAnimation+0xf8>
 800155a:	a201      	add	r2, pc, #4	@ (adr r2, 8001560 <DinoAnimation+0x48>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	080015e1 	.word	0x080015e1
 8001564:	08001611 	.word	0x08001611
 8001568:	08001611 	.word	0x08001611
 800156c:	08001611 	.word	0x08001611
 8001570:	08001611 	.word	0x08001611
 8001574:	08001611 	.word	0x08001611
 8001578:	08001611 	.word	0x08001611
 800157c:	08001611 	.word	0x08001611
 8001580:	08001611 	.word	0x08001611
 8001584:	08001611 	.word	0x08001611
 8001588:	080015e9 	.word	0x080015e9
 800158c:	08001611 	.word	0x08001611
 8001590:	08001611 	.word	0x08001611
 8001594:	080015f1 	.word	0x080015f1
 8001598:	08001611 	.word	0x08001611
 800159c:	08001611 	.word	0x08001611
 80015a0:	080015f9 	.word	0x080015f9
 80015a4:	08001611 	.word	0x08001611
 80015a8:	08001611 	.word	0x08001611
 80015ac:	08001601 	.word	0x08001601
 80015b0:	08001611 	.word	0x08001611
 80015b4:	08001611 	.word	0x08001611
 80015b8:	08001611 	.word	0x08001611
 80015bc:	08001611 	.word	0x08001611
 80015c0:	08001611 	.word	0x08001611
 80015c4:	08001611 	.word	0x08001611
 80015c8:	08001611 	.word	0x08001611
 80015cc:	08001611 	.word	0x08001611
 80015d0:	08001611 	.word	0x08001611
 80015d4:	08001609 	.word	0x08001609
			{
				case 0:
					velocity = 4;	//30
 80015d8:	4b35      	ldr	r3, [pc, #212]	@ (80016b0 <DinoAnimation+0x198>)
 80015da:	2204      	movs	r2, #4
 80015dc:	701a      	strb	r2, [r3, #0]
					break;
 80015de:	e018      	b.n	8001612 <DinoAnimation+0xfa>
				case 30:
					velocity = 2;	//10
 80015e0:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <DinoAnimation+0x198>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	701a      	strb	r2, [r3, #0]
					break;
 80015e6:	e014      	b.n	8001612 <DinoAnimation+0xfa>
				case 40:
					velocity = 1;	//3
 80015e8:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <DinoAnimation+0x198>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
					break;
 80015ee:	e010      	b.n	8001612 <DinoAnimation+0xfa>
				case 43:
					velocity = 0;	//3
 80015f0:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <DinoAnimation+0x198>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
					break;
 80015f6:	e00c      	b.n	8001612 <DinoAnimation+0xfa>
				case 46:
					velocity = -1;	//3
 80015f8:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <DinoAnimation+0x198>)
 80015fa:	22ff      	movs	r2, #255	@ 0xff
 80015fc:	701a      	strb	r2, [r3, #0]
					break;
 80015fe:	e008      	b.n	8001612 <DinoAnimation+0xfa>
				case 49:
					velocity = -2;	//10
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <DinoAnimation+0x198>)
 8001602:	22fe      	movs	r2, #254	@ 0xfe
 8001604:	701a      	strb	r2, [r3, #0]
					break;
 8001606:	e004      	b.n	8001612 <DinoAnimation+0xfa>
				case 59:
					velocity = -4;	//30
 8001608:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <DinoAnimation+0x198>)
 800160a:	22fc      	movs	r2, #252	@ 0xfc
 800160c:	701a      	strb	r2, [r3, #0]
					break;
 800160e:	e000      	b.n	8001612 <DinoAnimation+0xfa>
				default:
					break;
 8001610:	bf00      	nop
			}

			jump_step++;
 8001612:	4b25      	ldr	r3, [pc, #148]	@ (80016a8 <DinoAnimation+0x190>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	b29a      	uxth	r2, r3
 800161a:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <DinoAnimation+0x190>)
 800161c:	801a      	strh	r2, [r3, #0]

			if(jump_step>88)	// in fact "jumping resolution"
 800161e:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <DinoAnimation+0x190>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	2b58      	cmp	r3, #88	@ 0x58
 8001624:	d902      	bls.n	800162c <DinoAnimation+0x114>
			{
				jump_step = 0;	// get back on base position
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <DinoAnimation+0x190>)
 8001628:	2200      	movs	r2, #0
 800162a:	801a      	strh	r2, [r3, #0]
			}

			jump_pos = jump_pos + velocity;		// calculate position while jumping
 800162c:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <DinoAnimation+0x198>)
 800162e:	f993 3000 	ldrsb.w	r3, [r3]
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <DinoAnimation+0x19c>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	4413      	add	r3, r2
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <DinoAnimation+0x19c>)
 800163e:	801a      	strh	r2, [r3, #0]

			DrawDino(jump_pos,0,0);
 8001640:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <DinoAnimation+0x19c>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f9d9 	bl	8001a00 <DrawDino>
			DinoDetector(jump_pos);
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <DinoAnimation+0x19c>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fe44 	bl	80012e0 <DinoDetector>
		if(refresh == 1)
 8001658:	e024      	b.n	80016a4 <DinoAnimation+0x18c>
		}
	}

	else	// walking with leg animation
	{
		if(refresh == 1)
 800165a:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <DinoAnimation+0x194>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d120      	bne.n	80016a4 <DinoAnimation+0x18c>
		{
			walk_step++;
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <DinoAnimation+0x1a0>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <DinoAnimation+0x1a0>)
 800166c:	701a      	strb	r2, [r3, #0]

			if(walk_step>40)		//delay between steps
 800166e:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <DinoAnimation+0x1a0>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b28      	cmp	r3, #40	@ 0x28
 8001674:	d902      	bls.n	800167c <DinoAnimation+0x164>
			{
				walk_step = 0;
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <DinoAnimation+0x1a0>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
			}

			if(walk_step < 20)
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <DinoAnimation+0x1a0>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b13      	cmp	r3, #19
 8001682:	d805      	bhi.n	8001690 <DinoAnimation+0x178>
			{
				DrawDino(0,0,3);
 8001684:	2203      	movs	r2, #3
 8001686:	2100      	movs	r1, #0
 8001688:	2000      	movs	r0, #0
 800168a:	f000 f9b9 	bl	8001a00 <DrawDino>
				DrawDino(0,3,0);
			}

		}
	}
}
 800168e:	e009      	b.n	80016a4 <DinoAnimation+0x18c>
			else if(walk_step >= 20)
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <DinoAnimation+0x1a0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b13      	cmp	r3, #19
 8001696:	d905      	bls.n	80016a4 <DinoAnimation+0x18c>
				DrawDino(0,3,0);
 8001698:	2200      	movs	r2, #0
 800169a:	2103      	movs	r1, #3
 800169c:	2000      	movs	r0, #0
 800169e:	f000 f9af 	bl	8001a00 <DrawDino>
}
 80016a2:	e7ff      	b.n	80016a4 <DinoAnimation+0x18c>
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000005c 	.word	0x2000005c
 80016ac:	2000010c 	.word	0x2000010c
 80016b0:	20000060 	.word	0x20000060
 80016b4:	2000005e 	.word	0x2000005e
 80016b8:	20000061 	.word	0x20000061

080016bc <ObstacleRandomizer>:

void ObstacleRandomizer(void)	// place random type of obstacle
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	RandomNumbers();
 80016c0:	f001 fa10 	bl	8002ae4 <RandomNumbers>
	if(adc_value < 1600)
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <ObstacleRandomizer+0x48>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80016cc:	d203      	bcs.n	80016d6 <ObstacleRandomizer+0x1a>
	{
		obstacle_type = 1;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <ObstacleRandomizer+0x4c>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
		{
			obstacle_type = 1;
		}

	}
}
 80016d4:	e013      	b.n	80016fe <ObstacleRandomizer+0x42>
	else if(adc_value < 1800)
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <ObstacleRandomizer+0x48>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80016de:	d203      	bcs.n	80016e8 <ObstacleRandomizer+0x2c>
		obstacle_type = 2;
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <ObstacleRandomizer+0x4c>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
}
 80016e6:	e00a      	b.n	80016fe <ObstacleRandomizer+0x42>
		if(spd > 2)
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <ObstacleRandomizer+0x50>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d903      	bls.n	80016f8 <ObstacleRandomizer+0x3c>
			obstacle_type = 3;
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <ObstacleRandomizer+0x4c>)
 80016f2:	2203      	movs	r2, #3
 80016f4:	701a      	strb	r2, [r3, #0]
}
 80016f6:	e002      	b.n	80016fe <ObstacleRandomizer+0x42>
			obstacle_type = 1;
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <ObstacleRandomizer+0x4c>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000108 	.word	0x20000108
 8001708:	20000008 	.word	0x20000008
 800170c:	20000009 	.word	0x20000009

08001710 <ObstacleAnimation>:


void ObstacleAnimation(uint8_t obs_acc)		// obs_acc - obstacle velocity (max 7)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	if(obs_refresh==0)
 800171a:	4b52      	ldr	r3, [pc, #328]	@ (8001864 <ObstacleAnimation+0x154>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 809b 	bne.w	800185a <ObstacleAnimation+0x14a>
	{
		obs_step++;
 8001724:	4b50      	ldr	r3, [pc, #320]	@ (8001868 <ObstacleAnimation+0x158>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b4e      	ldr	r3, [pc, #312]	@ (8001868 <ObstacleAnimation+0x158>)
 800172e:	801a      	strh	r2, [r3, #0]

		switch(obs_acc)		// calculate obstacle speed
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	3b01      	subs	r3, #1
 8001734:	2b06      	cmp	r3, #6
 8001736:	d84e      	bhi.n	80017d6 <ObstacleAnimation+0xc6>
 8001738:	a201      	add	r2, pc, #4	@ (adr r2, 8001740 <ObstacleAnimation+0x30>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	0800175d 	.word	0x0800175d
 8001744:	08001765 	.word	0x08001765
 8001748:	08001783 	.word	0x08001783
 800174c:	0800178b 	.word	0x0800178b
 8001750:	080017a9 	.word	0x080017a9
 8001754:	080017b1 	.word	0x080017b1
 8001758:	080017cf 	.word	0x080017cf
		{
			case 1:
				obs_acc_temp = 1;
 800175c:	4b43      	ldr	r3, [pc, #268]	@ (800186c <ObstacleAnimation+0x15c>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
				break;
 8001762:	e03c      	b.n	80017de <ObstacleAnimation+0xce>
			case 2:
				if(obs_step%2 == 0) obs_acc_temp = 1; else obs_acc_temp = 2;
 8001764:	4b40      	ldr	r3, [pc, #256]	@ (8001868 <ObstacleAnimation+0x158>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d103      	bne.n	800177a <ObstacleAnimation+0x6a>
 8001772:	4b3e      	ldr	r3, [pc, #248]	@ (800186c <ObstacleAnimation+0x15c>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
				break;
 8001778:	e031      	b.n	80017de <ObstacleAnimation+0xce>
				if(obs_step%2 == 0) obs_acc_temp = 1; else obs_acc_temp = 2;
 800177a:	4b3c      	ldr	r3, [pc, #240]	@ (800186c <ObstacleAnimation+0x15c>)
 800177c:	2202      	movs	r2, #2
 800177e:	701a      	strb	r2, [r3, #0]
				break;
 8001780:	e02d      	b.n	80017de <ObstacleAnimation+0xce>
			case 3:
				obs_acc_temp = 2;
 8001782:	4b3a      	ldr	r3, [pc, #232]	@ (800186c <ObstacleAnimation+0x15c>)
 8001784:	2202      	movs	r2, #2
 8001786:	701a      	strb	r2, [r3, #0]
				break;
 8001788:	e029      	b.n	80017de <ObstacleAnimation+0xce>
			case 4:
				if(obs_step%2 == 0) obs_acc_temp = 2; else obs_acc_temp = 3;
 800178a:	4b37      	ldr	r3, [pc, #220]	@ (8001868 <ObstacleAnimation+0x158>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	b29b      	uxth	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <ObstacleAnimation+0x90>
 8001798:	4b34      	ldr	r3, [pc, #208]	@ (800186c <ObstacleAnimation+0x15c>)
 800179a:	2202      	movs	r2, #2
 800179c:	701a      	strb	r2, [r3, #0]
				break;
 800179e:	e01e      	b.n	80017de <ObstacleAnimation+0xce>
				if(obs_step%2 == 0) obs_acc_temp = 2; else obs_acc_temp = 3;
 80017a0:	4b32      	ldr	r3, [pc, #200]	@ (800186c <ObstacleAnimation+0x15c>)
 80017a2:	2203      	movs	r2, #3
 80017a4:	701a      	strb	r2, [r3, #0]
				break;
 80017a6:	e01a      	b.n	80017de <ObstacleAnimation+0xce>
			case 5:
				obs_acc_temp = 3;
 80017a8:	4b30      	ldr	r3, [pc, #192]	@ (800186c <ObstacleAnimation+0x15c>)
 80017aa:	2203      	movs	r2, #3
 80017ac:	701a      	strb	r2, [r3, #0]
				break;
 80017ae:	e016      	b.n	80017de <ObstacleAnimation+0xce>
			case 6:
				if(obs_step%2 == 0) obs_acc_temp = 3; else obs_acc_temp = 4;
 80017b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <ObstacleAnimation+0x158>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <ObstacleAnimation+0xb6>
 80017be:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <ObstacleAnimation+0x15c>)
 80017c0:	2203      	movs	r2, #3
 80017c2:	701a      	strb	r2, [r3, #0]
				break;
 80017c4:	e00b      	b.n	80017de <ObstacleAnimation+0xce>
				if(obs_step%2 == 0) obs_acc_temp = 3; else obs_acc_temp = 4;
 80017c6:	4b29      	ldr	r3, [pc, #164]	@ (800186c <ObstacleAnimation+0x15c>)
 80017c8:	2204      	movs	r2, #4
 80017ca:	701a      	strb	r2, [r3, #0]
				break;
 80017cc:	e007      	b.n	80017de <ObstacleAnimation+0xce>
			case 7:
				obs_acc_temp = 4;
 80017ce:	4b27      	ldr	r3, [pc, #156]	@ (800186c <ObstacleAnimation+0x15c>)
 80017d0:	2204      	movs	r2, #4
 80017d2:	701a      	strb	r2, [r3, #0]
				break;
 80017d4:	e003      	b.n	80017de <ObstacleAnimation+0xce>
			default:
				obs_acc_temp = 0;
 80017d6:	4b25      	ldr	r3, [pc, #148]	@ (800186c <ObstacleAnimation+0x15c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
				break;
 80017dc:	bf00      	nop
		}

		obs_pos = obs_pos + obs_acc;	// calculate obstacle position
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	4b23      	ldr	r3, [pc, #140]	@ (8001870 <ObstacleAnimation+0x160>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <ObstacleAnimation+0x160>)
 80017ec:	801a      	strh	r2, [r3, #0]

		if(obs_pos>410)		// do not go too far..
 80017ee:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <ObstacleAnimation+0x160>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	f5b3 7fcd 	cmp.w	r3, #410	@ 0x19a
 80017f6:	d90d      	bls.n	8001814 <ObstacleAnimation+0x104>
		{
			obs_step = 0;			// reset step
 80017f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <ObstacleAnimation+0x158>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	801a      	strh	r2, [r3, #0]
			obs_pos = 0;			// place obstacle on base position - out of screen (TYPE OF OBSTACLE CAN BE CHANGED NOW)
 80017fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <ObstacleAnimation+0x160>)
 8001800:	2200      	movs	r2, #0
 8001802:	801a      	strh	r2, [r3, #0]
			ObstacleRandomizer();	// place random type of obstacle
 8001804:	f7ff ff5a 	bl	80016bc <ObstacleRandomizer>
			obs_passed++;			// ...obstacle were passed
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <ObstacleAnimation+0x164>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <ObstacleAnimation+0x164>)
 8001812:	801a      	strh	r2, [r3, #0]
		}

		switch(obstacle_type)	// which obstacle to draw
 8001814:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <ObstacleAnimation+0x168>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d012      	beq.n	8001842 <ObstacleAnimation+0x132>
 800181c:	2b03      	cmp	r3, #3
 800181e:	dc16      	bgt.n	800184e <ObstacleAnimation+0x13e>
 8001820:	2b01      	cmp	r3, #1
 8001822:	d002      	beq.n	800182a <ObstacleAnimation+0x11a>
 8001824:	2b02      	cmp	r3, #2
 8001826:	d006      	beq.n	8001836 <ObstacleAnimation+0x126>
				break;
			case 3:
				DrawObstacle3(obs_pos);
				break;
			default:
				break;
 8001828:	e011      	b.n	800184e <ObstacleAnimation+0x13e>
				DrawObstacle1(obs_pos);
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <ObstacleAnimation+0x160>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fcb8 	bl	80021a4 <DrawObstacle1>
				break;
 8001834:	e00c      	b.n	8001850 <ObstacleAnimation+0x140>
				DrawObstacle2(obs_pos);
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <ObstacleAnimation+0x160>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fddd 	bl	80023fa <DrawObstacle2>
				break;
 8001840:	e006      	b.n	8001850 <ObstacleAnimation+0x140>
				DrawObstacle3(obs_pos);
 8001842:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <ObstacleAnimation+0x160>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f000 ff02 	bl	8002650 <DrawObstacle3>
				break;
 800184c:	e000      	b.n	8001850 <ObstacleAnimation+0x140>
				break;
 800184e:	bf00      	nop
		}

		ObsDetector(obs_pos);	// detect proper obstacle type
 8001850:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <ObstacleAnimation+0x160>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fd5f 	bl	8001318 <ObsDetector>
	}
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000010d 	.word	0x2000010d
 8001868:	20000062 	.word	0x20000062
 800186c:	20000066 	.word	0x20000066
 8001870:	20000064 	.word	0x20000064
 8001874:	20000068 	.word	0x20000068
 8001878:	20000008 	.word	0x20000008

0800187c <GAME>:

// ------------------------------------------------------------------------------------
// ---------------------------------- GAME PENDING ------------------------------------
// ------------------------------------------------------------------------------------
void GAME(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	if(CollisionDetector() == 0)
 8001880:	f7ff fdc0 	bl	8001404 <CollisionDetector>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 8080 	bne.w	800198c <GAME+0x110>
	{
		if(refresh==0)
 800188c:	4b58      	ldr	r3, [pc, #352]	@ (80019f0 <GAME+0x174>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d173      	bne.n	800197c <GAME+0x100>
		{
			POINT_COLOR=GRAY;
 8001894:	4b57      	ldr	r3, [pc, #348]	@ (80019f4 <GAME+0x178>)
 8001896:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800189a:	801a      	strh	r2, [r3, #0]
			LCD_DrawLine(0,190,320,190);	// draw ground
 800189c:	23be      	movs	r3, #190	@ 0xbe
 800189e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80018a2:	21be      	movs	r1, #190	@ 0xbe
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff fc2f 	bl	8001108 <LCD_DrawLine>
			if(time>2800)
			{
				time = 0;
			}*/

			switch(obs_passed)
 80018aa:	4b53      	ldr	r3, [pc, #332]	@ (80019f8 <GAME+0x17c>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	2b50      	cmp	r3, #80	@ 0x50
 80018b0:	d05f      	beq.n	8001972 <GAME+0xf6>
 80018b2:	2b50      	cmp	r3, #80	@ 0x50
 80018b4:	dc61      	bgt.n	800197a <GAME+0xfe>
 80018b6:	2b1e      	cmp	r3, #30
 80018b8:	dc44      	bgt.n	8001944 <GAME+0xc8>
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db5d      	blt.n	800197a <GAME+0xfe>
 80018be:	2b1e      	cmp	r3, #30
 80018c0:	d85b      	bhi.n	800197a <GAME+0xfe>
 80018c2:	a201      	add	r2, pc, #4	@ (adr r2, 80018c8 <GAME+0x4c>)
 80018c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c8:	0800194b 	.word	0x0800194b
 80018cc:	0800197b 	.word	0x0800197b
 80018d0:	0800197b 	.word	0x0800197b
 80018d4:	0800197b 	.word	0x0800197b
 80018d8:	0800197b 	.word	0x0800197b
 80018dc:	08001953 	.word	0x08001953
 80018e0:	0800197b 	.word	0x0800197b
 80018e4:	0800197b 	.word	0x0800197b
 80018e8:	0800197b 	.word	0x0800197b
 80018ec:	0800197b 	.word	0x0800197b
 80018f0:	0800197b 	.word	0x0800197b
 80018f4:	0800197b 	.word	0x0800197b
 80018f8:	0800197b 	.word	0x0800197b
 80018fc:	0800197b 	.word	0x0800197b
 8001900:	0800197b 	.word	0x0800197b
 8001904:	0800195b 	.word	0x0800195b
 8001908:	0800197b 	.word	0x0800197b
 800190c:	0800197b 	.word	0x0800197b
 8001910:	0800197b 	.word	0x0800197b
 8001914:	0800197b 	.word	0x0800197b
 8001918:	0800197b 	.word	0x0800197b
 800191c:	0800197b 	.word	0x0800197b
 8001920:	0800197b 	.word	0x0800197b
 8001924:	0800197b 	.word	0x0800197b
 8001928:	0800197b 	.word	0x0800197b
 800192c:	0800197b 	.word	0x0800197b
 8001930:	0800197b 	.word	0x0800197b
 8001934:	0800197b 	.word	0x0800197b
 8001938:	0800197b 	.word	0x0800197b
 800193c:	0800197b 	.word	0x0800197b
 8001940:	08001963 	.word	0x08001963
 8001944:	2b32      	cmp	r3, #50	@ 0x32
 8001946:	d010      	beq.n	800196a <GAME+0xee>
					break;
				case 80:
					spd = 7;
					break;
				default:
					break;
 8001948:	e017      	b.n	800197a <GAME+0xfe>
					spd = 2;
 800194a:	4b2c      	ldr	r3, [pc, #176]	@ (80019fc <GAME+0x180>)
 800194c:	2202      	movs	r2, #2
 800194e:	701a      	strb	r2, [r3, #0]
					break;
 8001950:	e014      	b.n	800197c <GAME+0x100>
					spd = 3;
 8001952:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <GAME+0x180>)
 8001954:	2203      	movs	r2, #3
 8001956:	701a      	strb	r2, [r3, #0]
					break;
 8001958:	e010      	b.n	800197c <GAME+0x100>
					spd = 4;
 800195a:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <GAME+0x180>)
 800195c:	2204      	movs	r2, #4
 800195e:	701a      	strb	r2, [r3, #0]
					break;
 8001960:	e00c      	b.n	800197c <GAME+0x100>
					spd = 5;
 8001962:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <GAME+0x180>)
 8001964:	2205      	movs	r2, #5
 8001966:	701a      	strb	r2, [r3, #0]
					break;
 8001968:	e008      	b.n	800197c <GAME+0x100>
					spd = 6;
 800196a:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <GAME+0x180>)
 800196c:	2206      	movs	r2, #6
 800196e:	701a      	strb	r2, [r3, #0]
					break;
 8001970:	e004      	b.n	800197c <GAME+0x100>
					spd = 7;
 8001972:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <GAME+0x180>)
 8001974:	2207      	movs	r2, #7
 8001976:	701a      	strb	r2, [r3, #0]
					break;
 8001978:	e000      	b.n	800197c <GAME+0x100>
					break;
 800197a:	bf00      	nop
			}
		}

		DinoAnimation();
 800197c:	f7ff fdcc 	bl	8001518 <DinoAnimation>
		ObstacleAnimation(spd);
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <GAME+0x180>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fec3 	bl	8001710 <ObstacleAnimation>
		DinoAnimation();
		ObstacleAnimation(spd);
	}


}
 800198a:	e02e      	b.n	80019ea <GAME+0x16e>
	else if(CollisionDetector() == 1)
 800198c:	f7ff fd3a 	bl	8001404 <CollisionDetector>
 8001990:	4603      	mov	r3, r0
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10e      	bne.n	80019b4 <GAME+0x138>
			DinoAnimation();
 8001996:	f7ff fdbf 	bl	8001518 <DinoAnimation>
			POINT_COLOR=RED;
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <GAME+0x178>)
 800199c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80019a0:	801a      	strh	r2, [r3, #0]
			LCD_DrawLine(0,190,320,190);	// DO SOMETHING AT THE END
 80019a2:	23be      	movs	r3, #190	@ 0xbe
 80019a4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019a8:	21be      	movs	r1, #190	@ 0xbe
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff fbac 	bl	8001108 <LCD_DrawLine>
			while(1);	// game over
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <GAME+0x134>
	else if(CollisionDetector() == 2)		// game pending for a moment (get closer to obstacle, but over the game anyway)
 80019b4:	f7ff fd26 	bl	8001404 <CollisionDetector>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d115      	bne.n	80019ea <GAME+0x16e>
		if(refresh==0)
 80019be:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <GAME+0x174>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10a      	bne.n	80019dc <GAME+0x160>
			POINT_COLOR=GRAY;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <GAME+0x178>)
 80019c8:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80019cc:	801a      	strh	r2, [r3, #0]
			LCD_DrawLine(0,190,320,190);
 80019ce:	23be      	movs	r3, #190	@ 0xbe
 80019d0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019d4:	21be      	movs	r1, #190	@ 0xbe
 80019d6:	2000      	movs	r0, #0
 80019d8:	f7ff fb96 	bl	8001108 <LCD_DrawLine>
		DinoAnimation();
 80019dc:	f7ff fd9c 	bl	8001518 <DinoAnimation>
		ObstacleAnimation(spd);
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <GAME+0x180>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fe93 	bl	8001710 <ObstacleAnimation>
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000010c 	.word	0x2000010c
 80019f4:	20000044 	.word	0x20000044
 80019f8:	20000068 	.word	0x20000068
 80019fc:	20000009 	.word	0x20000009

08001a00 <DrawDino>:
// ------------------------------------- FIGURES ---------------------------------------
// -------------------------------------------------------------------------------------

// dino
void DrawDino(uint16_t altitude,uint8_t left_leg, uint8_t right_leg)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	717b      	strb	r3, [r7, #5]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	713b      	strb	r3, [r7, #4]
	// ----------- HEAD -----------
	LCD_Fill(27,160 - altitude,42,170 - altitude,GRAY);      // head
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001a18:	b299      	uxth	r1, r3
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	f1c3 03aa 	rsb	r3, r3, #170	@ 0xaa
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001a26:	9200      	str	r2, [sp, #0]
 8001a28:	222a      	movs	r2, #42	@ 0x2a
 8001a2a:	201b      	movs	r0, #27
 8001a2c:	f7ff fb14 	bl	8001058 <LCD_Fill>
	LCD_Fill(25,162 - altitude,45,172 - altitude,GRAY);
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	f1c3 03a2 	rsb	r3, r3, #162	@ 0xa2
 8001a36:	b299      	uxth	r1, r3
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	222d      	movs	r2, #45	@ 0x2d
 8001a48:	2019      	movs	r0, #25
 8001a4a:	f7ff fb05 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8001a4e:	4ba7      	ldr	r3, [pc, #668]	@ (8001cec <DrawDino+0x2ec>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	2b2b      	cmp	r3, #43	@ 0x2b
 8001a54:	d803      	bhi.n	8001a5e <DrawDino+0x5e>
 8001a56:	4ba5      	ldr	r3, [pc, #660]	@ (8001cec <DrawDino+0x2ec>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d12c      	bne.n	8001ab8 <DrawDino+0xb8>
	{
		LCD_Fill(25,158 - altitude,26,161 - altitude,RUBBER);		// clear head top 1
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 8001a64:	b299      	uxth	r1, r3
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a72:	9200      	str	r2, [sp, #0]
 8001a74:	221a      	movs	r2, #26
 8001a76:	2019      	movs	r0, #25
 8001a78:	f7ff faee 	bl	8001058 <LCD_Fill>
		LCD_Fill(27,156 - altitude,42,159 - altitude,RUBBER);		// clear head top 2
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	f1c3 039c 	rsb	r3, r3, #156	@ 0x9c
 8001a82:	b299      	uxth	r1, r3
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	f1c3 039f 	rsb	r3, r3, #159	@ 0x9f
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a90:	9200      	str	r2, [sp, #0]
 8001a92:	222a      	movs	r2, #42	@ 0x2a
 8001a94:	201b      	movs	r0, #27
 8001a96:	f7ff fadf 	bl	8001058 <LCD_Fill>
		LCD_Fill(43,158 - altitude,45,161 - altitude,RUBBER);		// clear head top 3
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 8001aa0:	b299      	uxth	r1, r3
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aae:	9200      	str	r2, [sp, #0]
 8001ab0:	222d      	movs	r2, #45	@ 0x2d
 8001ab2:	202b      	movs	r0, #43	@ 0x2b
 8001ab4:	f7ff fad0 	bl	8001058 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 8001ab8:	4b8c      	ldr	r3, [pc, #560]	@ (8001cec <DrawDino+0x2ec>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	2b2c      	cmp	r3, #44	@ 0x2c
 8001abe:	d81d      	bhi.n	8001afc <DrawDino+0xfc>
	{
		LCD_Fill(37,173 - altitude,45,174 - altitude,RUBBER);		// clear head bottom
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 8001ac6:	b299      	uxth	r1, r3
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ad4:	9200      	str	r2, [sp, #0]
 8001ad6:	222d      	movs	r2, #45	@ 0x2d
 8001ad8:	2025      	movs	r0, #37	@ 0x25
 8001ada:	f7ff fabd 	bl	8001058 <LCD_Fill>
		LCD_Fill(42,173 - altitude,45,177 - altitude,RUBBER);		// clear head bottom
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 8001ae4:	b299      	uxth	r1, r3
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001af2:	9200      	str	r2, [sp, #0]
 8001af4:	222d      	movs	r2, #45	@ 0x2d
 8001af6:	202a      	movs	r0, #42	@ 0x2a
 8001af8:	f7ff faae 	bl	8001058 <LCD_Fill>
	}



	// ----------- EYE -----------
	LCD_Fill(30,163 - altitude,32,166 - altitude,RUBBER);     // eye
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	f1c3 03a3 	rsb	r3, r3, #163	@ 0xa3
 8001b02:	b299      	uxth	r1, r3
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	f1c3 03a6 	rsb	r3, r3, #166	@ 0xa6
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b10:	9200      	str	r2, [sp, #0]
 8001b12:	2220      	movs	r2, #32
 8001b14:	201e      	movs	r0, #30
 8001b16:	f7ff fa9f 	bl	8001058 <LCD_Fill>



	// ----------- MOUTH -----------
	LCD_Fill(25,172 - altitude,36,175 - altitude,GRAY);      // mouth
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 8001b20:	b299      	uxth	r1, r3
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001b2e:	9200      	str	r2, [sp, #0]
 8001b30:	2224      	movs	r2, #36	@ 0x24
 8001b32:	2019      	movs	r0, #25
 8001b34:	f7ff fa90 	bl	8001058 <LCD_Fill>
	LCD_Fill(25,175 - altitude,41,176 - altitude,GRAY);      // mouth (tongue)
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 8001b3e:	b299      	uxth	r1, r3
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001b4c:	9200      	str	r2, [sp, #0]
 8001b4e:	2229      	movs	r2, #41	@ 0x29
 8001b50:	2019      	movs	r0, #25
 8001b52:	f7ff fa81 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8001b56:	4b65      	ldr	r3, [pc, #404]	@ (8001cec <DrawDino+0x2ec>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	2b2b      	cmp	r3, #43	@ 0x2b
 8001b5c:	d803      	bhi.n	8001b66 <DrawDino+0x166>
 8001b5e:	4b63      	ldr	r3, [pc, #396]	@ (8001cec <DrawDino+0x2ec>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10e      	bne.n	8001b84 <DrawDino+0x184>
	{
		LCD_Fill(37,173 - altitude,45,174 - altitude,RUBBER);		// clear mouth (tongue) top
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 8001b6c:	b299      	uxth	r1, r3
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b7a:	9200      	str	r2, [sp, #0]
 8001b7c:	222d      	movs	r2, #45	@ 0x2d
 8001b7e:	2025      	movs	r0, #37	@ 0x25
 8001b80:	f7ff fa6a 	bl	8001058 <LCD_Fill>
	}

	if(jump_step <=44)	// going up
 8001b84:	4b59      	ldr	r3, [pc, #356]	@ (8001cec <DrawDino+0x2ec>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b8a:	d80e      	bhi.n	8001baa <DrawDino+0x1aa>
	{
		LCD_Fill(36,177 - altitude,41,180 - altitude,RUBBER);      // clear mouth (tongue) bottom
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8001b92:	b299      	uxth	r1, r3
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ba0:	9200      	str	r2, [sp, #0]
 8001ba2:	2229      	movs	r2, #41	@ 0x29
 8001ba4:	2024      	movs	r0, #36	@ 0x24
 8001ba6:	f7ff fa57 	bl	8001058 <LCD_Fill>
	}



	// ----------- NECK & CHEST -----------
	LCD_Fill(25,176 - altitude,35,177 - altitude,GRAY);     // neck
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8001bb0:	b299      	uxth	r1, r3
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001bbe:	9200      	str	r2, [sp, #0]
 8001bc0:	2223      	movs	r2, #35	@ 0x23
 8001bc2:	2019      	movs	r0, #25
 8001bc4:	f7ff fa48 	bl	8001058 <LCD_Fill>
	LCD_Fill(23,177 - altitude,35,192 - altitude,GRAY);     // neck & chest
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8001bce:	b299      	uxth	r1, r3
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001bdc:	9200      	str	r2, [sp, #0]
 8001bde:	2223      	movs	r2, #35	@ 0x23
 8001be0:	2017      	movs	r0, #23
 8001be2:	f7ff fa39 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8001be6:	4b41      	ldr	r3, [pc, #260]	@ (8001cec <DrawDino+0x2ec>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	2b2b      	cmp	r3, #43	@ 0x2b
 8001bec:	d803      	bhi.n	8001bf6 <DrawDino+0x1f6>
 8001bee:	4b3f      	ldr	r3, [pc, #252]	@ (8001cec <DrawDino+0x2ec>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10e      	bne.n	8001c14 <DrawDino+0x214>
	{
		LCD_Fill(23,173 - altitude,24,176 - altitude,RUBBER);     // clear neck & chest top
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 8001bfc:	b299      	uxth	r1, r3
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c0a:	9200      	str	r2, [sp, #0]
 8001c0c:	2218      	movs	r2, #24
 8001c0e:	2017      	movs	r0, #23
 8001c10:	f7ff fa22 	bl	8001058 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 8001c14:	4b35      	ldr	r3, [pc, #212]	@ (8001cec <DrawDino+0x2ec>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	2b2c      	cmp	r3, #44	@ 0x2c
 8001c1a:	d80e      	bhi.n	8001c3a <DrawDino+0x23a>
	{
		LCD_Fill(33,193 - altitude,35,196 - altitude,RUBBER);    // clear neck & chest bottom
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	f1c3 03c1 	rsb	r3, r3, #193	@ 0xc1
 8001c22:	b299      	uxth	r1, r3
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c30:	9200      	str	r2, [sp, #0]
 8001c32:	2223      	movs	r2, #35	@ 0x23
 8001c34:	2021      	movs	r0, #33	@ 0x21
 8001c36:	f7ff fa0f 	bl	8001058 <LCD_Fill>
	}



	// ----------- ARM -----------
	LCD_Fill(35,181 - altitude,39,183 - altitude,GRAY);      // arm1
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 8001c40:	b299      	uxth	r1, r3
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	f1c3 03b7 	rsb	r3, r3, #183	@ 0xb7
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001c4e:	9200      	str	r2, [sp, #0]
 8001c50:	2227      	movs	r2, #39	@ 0x27
 8001c52:	2023      	movs	r0, #35	@ 0x23
 8001c54:	f7ff fa00 	bl	8001058 <LCD_Fill>
	LCD_Fill(37,181 - altitude,39,185 - altitude,GRAY);		 // arm2
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 8001c5e:	b299      	uxth	r1, r3
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	f1c3 03b9 	rsb	r3, r3, #185	@ 0xb9
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001c6c:	9200      	str	r2, [sp, #0]
 8001c6e:	2227      	movs	r2, #39	@ 0x27
 8001c70:	2025      	movs	r0, #37	@ 0x25
 8001c72:	f7ff f9f1 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8001c76:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <DrawDino+0x2ec>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	2b2b      	cmp	r3, #43	@ 0x2b
 8001c7c:	d803      	bhi.n	8001c86 <DrawDino+0x286>
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <DrawDino+0x2ec>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10e      	bne.n	8001ca4 <DrawDino+0x2a4>
	{
		LCD_Fill(36,177 - altitude,41,178 - altitude,RUBBER);      // clear arm1 & arm2 top
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8001c8c:	b299      	uxth	r1, r3
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	f1c3 03b2 	rsb	r3, r3, #178	@ 0xb2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c9a:	9200      	str	r2, [sp, #0]
 8001c9c:	2229      	movs	r2, #41	@ 0x29
 8001c9e:	2024      	movs	r0, #36	@ 0x24
 8001ca0:	f7ff f9da 	bl	8001058 <LCD_Fill>
	}

	if(jump_step <=44)	// going up
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <DrawDino+0x2ec>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	2b2c      	cmp	r3, #44	@ 0x2c
 8001caa:	d821      	bhi.n	8001cf0 <DrawDino+0x2f0>
	{
		LCD_Fill(35,184 - altitude,36,187 - altitude,RUBBER);      // clear arm1 bottom
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	f1c3 03b8 	rsb	r3, r3, #184	@ 0xb8
 8001cb2:	b299      	uxth	r1, r3
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	f1c3 03bb 	rsb	r3, r3, #187	@ 0xbb
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cc0:	9200      	str	r2, [sp, #0]
 8001cc2:	2224      	movs	r2, #36	@ 0x24
 8001cc4:	2023      	movs	r0, #35	@ 0x23
 8001cc6:	f7ff f9c7 	bl	8001058 <LCD_Fill>
		LCD_Fill(37,186 - altitude,39,189 - altitude,RUBBER);      // clear arm2 bottom
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	f1c3 03ba 	rsb	r3, r3, #186	@ 0xba
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	f1c3 03bd 	rsb	r3, r3, #189	@ 0xbd
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cde:	9200      	str	r2, [sp, #0]
 8001ce0:	2227      	movs	r2, #39	@ 0x27
 8001ce2:	2025      	movs	r0, #37	@ 0x25
 8001ce4:	f7ff f9b8 	bl	8001058 <LCD_Fill>
 8001ce8:	e002      	b.n	8001cf0 <DrawDino+0x2f0>
 8001cea:	bf00      	nop
 8001cec:	2000005c 	.word	0x2000005c
	}



	// ----------- BODY -----------
	LCD_Fill(20,180 - altitude,32,195 - altitude,GRAY);     // body1
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8001cf6:	b299      	uxth	r1, r3
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001d04:	9200      	str	r2, [sp, #0]
 8001d06:	2220      	movs	r2, #32
 8001d08:	2014      	movs	r0, #20
 8001d0a:	f7ff f9a5 	bl	8001058 <LCD_Fill>
	LCD_Fill(17,182 - altitude,30,197 - altitude,GRAY);     // body2
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 8001d14:	b299      	uxth	r1, r3
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001d22:	9200      	str	r2, [sp, #0]
 8001d24:	221e      	movs	r2, #30
 8001d26:	2011      	movs	r0, #17
 8001d28:	f7ff f996 	bl	8001058 <LCD_Fill>
	LCD_Fill(12,185 - altitude,27,197 - altitude,GRAY);     // body3
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	f1c3 03b9 	rsb	r3, r3, #185	@ 0xb9
 8001d32:	b299      	uxth	r1, r3
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001d40:	9200      	str	r2, [sp, #0]
 8001d42:	221b      	movs	r2, #27
 8001d44:	200c      	movs	r0, #12
 8001d46:	f7ff f987 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8001d4a:	4bb2      	ldr	r3, [pc, #712]	@ (8002014 <DrawDino+0x614>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8001d50:	d803      	bhi.n	8001d5a <DrawDino+0x35a>
 8001d52:	4bb0      	ldr	r3, [pc, #704]	@ (8002014 <DrawDino+0x614>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d12c      	bne.n	8001db4 <DrawDino+0x3b4>
	{
		LCD_Fill(20,176 - altitude,22,179 - altitude,RUBBER);    // clear body1 top
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8001d60:	b299      	uxth	r1, r3
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	2216      	movs	r2, #22
 8001d72:	2014      	movs	r0, #20
 8001d74:	f7ff f970 	bl	8001058 <LCD_Fill>
		LCD_Fill(17,178 - altitude,19,181 - altitude,RUBBER);    // clear body2 top
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	f1c3 03b2 	rsb	r3, r3, #178	@ 0xb2
 8001d7e:	b299      	uxth	r1, r3
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d8c:	9200      	str	r2, [sp, #0]
 8001d8e:	2213      	movs	r2, #19
 8001d90:	2011      	movs	r0, #17
 8001d92:	f7ff f961 	bl	8001058 <LCD_Fill>
		LCD_Fill(13,181 - altitude,16,184 - altitude,RUBBER);    // clear body3 top (tail part)
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 8001d9c:	b299      	uxth	r1, r3
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f1c3 03b8 	rsb	r3, r3, #184	@ 0xb8
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001daa:	9200      	str	r2, [sp, #0]
 8001dac:	2210      	movs	r2, #16
 8001dae:	200d      	movs	r0, #13
 8001db0:	f7ff f952 	bl	8001058 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 8001db4:	4b97      	ldr	r3, [pc, #604]	@ (8002014 <DrawDino+0x614>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	2b2c      	cmp	r3, #44	@ 0x2c
 8001dba:	d83b      	bhi.n	8001e34 <DrawDino+0x434>
	{
		LCD_Fill(31,196 - altitude,32,199 - altitude,RUBBER);    // clear body1 bottom
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 8001dc2:	b299      	uxth	r1, r3
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	f1c3 03c7 	rsb	r3, r3, #199	@ 0xc7
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dd0:	9200      	str	r2, [sp, #0]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	201f      	movs	r0, #31
 8001dd6:	f7ff f93f 	bl	8001058 <LCD_Fill>
		LCD_Fill(28,198 - altitude,30,201 - altitude,RUBBER);    // clear body2 bottom
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	f1c3 03c6 	rsb	r3, r3, #198	@ 0xc6
 8001de0:	b299      	uxth	r1, r3
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	f1c3 03c9 	rsb	r3, r3, #201	@ 0xc9
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dee:	9200      	str	r2, [sp, #0]
 8001df0:	221e      	movs	r2, #30
 8001df2:	201c      	movs	r0, #28
 8001df4:	f7ff f930 	bl	8001058 <LCD_Fill>
		LCD_Fill(12,197 - altitude,14,200 - altitude,RUBBER);    // clear body3 leg break 1 bottom
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001dfe:	b299      	uxth	r1, r3
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e0c:	9200      	str	r2, [sp, #0]
 8001e0e:	220e      	movs	r2, #14
 8001e10:	200c      	movs	r0, #12
 8001e12:	f7ff f921 	bl	8001058 <LCD_Fill>
		LCD_Fill(20,197 - altitude,22,202 - altitude,RUBBER);    // clear body3 leg break 2 bottom
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001e1c:	b299      	uxth	r1, r3
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e2a:	9200      	str	r2, [sp, #0]
 8001e2c:	2216      	movs	r2, #22
 8001e2e:	2014      	movs	r0, #20
 8001e30:	f7ff f912 	bl	8001058 <LCD_Fill>
	}



	// ----------- TAIL -----------
	LCD_Fill(10,182 - altitude,12,195 - altitude,GRAY);     // tail1
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 8001e3a:	b299      	uxth	r1, r3
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001e48:	9200      	str	r2, [sp, #0]
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	200a      	movs	r0, #10
 8001e4e:	f7ff f903 	bl	8001058 <LCD_Fill>
	LCD_Fill(8,180 - altitude,10,192 - altitude,GRAY);		// tail2
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001e66:	9200      	str	r2, [sp, #0]
 8001e68:	220a      	movs	r2, #10
 8001e6a:	2008      	movs	r0, #8
 8001e6c:	f7ff f8f4 	bl	8001058 <LCD_Fill>
	LCD_Fill(7,175 - altitude,8,188 - altitude,GRAY);		// tail3
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 8001e76:	b299      	uxth	r1, r3
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	f1c3 03bc 	rsb	r3, r3, #188	@ 0xbc
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001e84:	9200      	str	r2, [sp, #0]
 8001e86:	2208      	movs	r2, #8
 8001e88:	2007      	movs	r0, #7
 8001e8a:	f7ff f8e5 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8001e8e:	4b61      	ldr	r3, [pc, #388]	@ (8002014 <DrawDino+0x614>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	2b2b      	cmp	r3, #43	@ 0x2b
 8001e94:	d803      	bhi.n	8001e9e <DrawDino+0x49e>
 8001e96:	4b5f      	ldr	r3, [pc, #380]	@ (8002014 <DrawDino+0x614>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d12c      	bne.n	8001ef8 <DrawDino+0x4f8>
	{
		LCD_Fill(10,178 - altitude,12,181 - altitude,RUBBER);	// clear tail1 top
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	f1c3 03b2 	rsb	r3, r3, #178	@ 0xb2
 8001ea4:	b299      	uxth	r1, r3
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eb2:	9200      	str	r2, [sp, #0]
 8001eb4:	220c      	movs	r2, #12
 8001eb6:	200a      	movs	r0, #10
 8001eb8:	f7ff f8ce 	bl	8001058 <LCD_Fill>
		LCD_Fill(9,176 - altitude,10,179 - altitude,RUBBER);		// clear tail2 top
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8001ec2:	b299      	uxth	r1, r3
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ed0:	9200      	str	r2, [sp, #0]
 8001ed2:	220a      	movs	r2, #10
 8001ed4:	2009      	movs	r0, #9
 8001ed6:	f7ff f8bf 	bl	8001058 <LCD_Fill>
		LCD_Fill(7,171 - altitude,8,174 - altitude,RUBBER);		// clear tail3 top
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	f1c3 03ab 	rsb	r3, r3, #171	@ 0xab
 8001ee0:	b299      	uxth	r1, r3
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eee:	9200      	str	r2, [sp, #0]
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	2007      	movs	r0, #7
 8001ef4:	f7ff f8b0 	bl	8001058 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 8001ef8:	4b46      	ldr	r3, [pc, #280]	@ (8002014 <DrawDino+0x614>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	2b2c      	cmp	r3, #44	@ 0x2c
 8001efe:	d82c      	bhi.n	8001f5a <DrawDino+0x55a>
	{
		LCD_Fill(10,196 - altitude,12,199 - altitude,RUBBER);	// clear tail1 bottom
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 8001f06:	b299      	uxth	r1, r3
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	f1c3 03c7 	rsb	r3, r3, #199	@ 0xc7
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f14:	9200      	str	r2, [sp, #0]
 8001f16:	220c      	movs	r2, #12
 8001f18:	200a      	movs	r0, #10
 8001f1a:	f7ff f89d 	bl	8001058 <LCD_Fill>
		LCD_Fill(8,193 - altitude,9,196 - altitude,RUBBER);		// clear tail2 bottom
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	f1c3 03c1 	rsb	r3, r3, #193	@ 0xc1
 8001f24:	b299      	uxth	r1, r3
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f32:	9200      	str	r2, [sp, #0]
 8001f34:	2209      	movs	r2, #9
 8001f36:	2008      	movs	r0, #8
 8001f38:	f7ff f88e 	bl	8001058 <LCD_Fill>
		LCD_Fill(6,189 - altitude,7,192 - altitude,RUBBER);		// clear tail3 bottom
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	f1c3 03bd 	rsb	r3, r3, #189	@ 0xbd
 8001f42:	b299      	uxth	r1, r3
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f50:	9200      	str	r2, [sp, #0]
 8001f52:	2207      	movs	r2, #7
 8001f54:	2006      	movs	r0, #6
 8001f56:	f7ff f87f 	bl	8001058 <LCD_Fill>
	}



	// ----------- RIGHT LEG -----------
	LCD_Fill(23,197 - altitude,27,200 - altitude,GRAY);      						// right leg
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001f60:	b299      	uxth	r1, r3
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001f6e:	9200      	str	r2, [sp, #0]
 8001f70:	221b      	movs	r2, #27
 8001f72:	2017      	movs	r0, #23
 8001f74:	f7ff f870 	bl	8001058 <LCD_Fill>
	LCD_Fill(25,200 - altitude - right_leg,27,207 - altitude - right_leg,GRAY);		// leg animation
 8001f78:	793b      	ldrb	r3, [r7, #4]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	4413      	add	r3, r2
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001f86:	b299      	uxth	r1, r3
 8001f88:	793b      	ldrb	r3, [r7, #4]
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	4413      	add	r3, r2
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001f9c:	9200      	str	r2, [sp, #0]
 8001f9e:	221b      	movs	r2, #27
 8001fa0:	2019      	movs	r0, #25
 8001fa2:	f7ff f859 	bl	8001058 <LCD_Fill>
	LCD_Fill(27,205 - altitude - right_leg,30,207 - altitude - right_leg,GRAY);
 8001fa6:	793b      	ldrb	r3, [r7, #4]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	4413      	add	r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	f1c3 03cd 	rsb	r3, r3, #205	@ 0xcd
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	793b      	ldrb	r3, [r7, #4]
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001fca:	9200      	str	r2, [sp, #0]
 8001fcc:	221e      	movs	r2, #30
 8001fce:	201b      	movs	r0, #27
 8001fd0:	f7ff f842 	bl	8001058 <LCD_Fill>

	LCD_Fill(23,202 - altitude - right_leg,24,204 - altitude - right_leg,RUBBER);	// clear thigh
 8001fd4:	793b      	ldrb	r3, [r7, #4]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	4413      	add	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 8001fe2:	b299      	uxth	r1, r3
 8001fe4:	793b      	ldrb	r3, [r7, #4]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ff8:	9200      	str	r2, [sp, #0]
 8001ffa:	2218      	movs	r2, #24
 8001ffc:	2017      	movs	r0, #23
 8001ffe:	f7ff f82b 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8002002:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <DrawDino+0x614>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	2b2b      	cmp	r3, #43	@ 0x2b
 8002008:	d806      	bhi.n	8002018 <DrawDino+0x618>
 800200a:	4b02      	ldr	r3, [pc, #8]	@ (8002014 <DrawDino+0x614>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d119      	bne.n	8002046 <DrawDino+0x646>
 8002012:	e001      	b.n	8002018 <DrawDino+0x618>
 8002014:	2000005c 	.word	0x2000005c
	{
		LCD_Fill(28,202 - altitude - right_leg,30,204 - altitude - right_leg,RUBBER);	// clear foot top
 8002018:	793b      	ldrb	r3, [r7, #4]
 800201a:	b29a      	uxth	r2, r3
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	4413      	add	r3, r2
 8002020:	b29b      	uxth	r3, r3
 8002022:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 8002026:	b299      	uxth	r1, r3
 8002028:	793b      	ldrb	r3, [r7, #4]
 800202a:	b29a      	uxth	r2, r3
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	4413      	add	r3, r2
 8002030:	b29b      	uxth	r3, r3
 8002032:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 8002036:	b29b      	uxth	r3, r3
 8002038:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800203c:	9200      	str	r2, [sp, #0]
 800203e:	221e      	movs	r2, #30
 8002040:	201c      	movs	r0, #28
 8002042:	f7ff f809 	bl	8001058 <LCD_Fill>

	}
	if(jump_step <=44)	// going up
 8002046:	4b56      	ldr	r3, [pc, #344]	@ (80021a0 <DrawDino+0x7a0>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	2b2c      	cmp	r3, #44	@ 0x2c
 800204c:	d816      	bhi.n	800207c <DrawDino+0x67c>
	{
		LCD_Fill(23,209 - altitude - right_leg,30,212 - altitude - right_leg,RUBBER);	// clear foot bottom
 800204e:	793b      	ldrb	r3, [r7, #4]
 8002050:	b29a      	uxth	r2, r3
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	4413      	add	r3, r2
 8002056:	b29b      	uxth	r3, r3
 8002058:	f1c3 03d1 	rsb	r3, r3, #209	@ 0xd1
 800205c:	b299      	uxth	r1, r3
 800205e:	793b      	ldrb	r3, [r7, #4]
 8002060:	b29a      	uxth	r2, r3
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	4413      	add	r3, r2
 8002066:	b29b      	uxth	r3, r3
 8002068:	f1c3 03d4 	rsb	r3, r3, #212	@ 0xd4
 800206c:	b29b      	uxth	r3, r3
 800206e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002072:	9200      	str	r2, [sp, #0]
 8002074:	221e      	movs	r2, #30
 8002076:	2017      	movs	r0, #23
 8002078:	f7fe ffee 	bl	8001058 <LCD_Fill>
	}



	// ----------- LEFT LEG -----------
	LCD_Fill(15,197 - altitude,19,200 - altitude,GRAY);      						// left leg
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8002082:	b299      	uxth	r1, r3
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800208a:	b29b      	uxth	r3, r3
 800208c:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8002090:	9200      	str	r2, [sp, #0]
 8002092:	2213      	movs	r2, #19
 8002094:	200f      	movs	r0, #15
 8002096:	f7fe ffdf 	bl	8001058 <LCD_Fill>
	LCD_Fill(15,200 - altitude - left_leg,17,207 - altitude - left_leg,GRAY);		// leg animation
 800209a:	797b      	ldrb	r3, [r7, #5]
 800209c:	b29a      	uxth	r2, r3
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	4413      	add	r3, r2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 80020a8:	b299      	uxth	r1, r3
 80020aa:	797b      	ldrb	r3, [r7, #5]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	4413      	add	r3, r2
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80020be:	9200      	str	r2, [sp, #0]
 80020c0:	2211      	movs	r2, #17
 80020c2:	200f      	movs	r0, #15
 80020c4:	f7fe ffc8 	bl	8001058 <LCD_Fill>
	LCD_Fill(17,205 - altitude - left_leg,20,207 - altitude - left_leg,GRAY);
 80020c8:	797b      	ldrb	r3, [r7, #5]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	4413      	add	r3, r2
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f1c3 03cd 	rsb	r3, r3, #205	@ 0xcd
 80020d6:	b299      	uxth	r1, r3
 80020d8:	797b      	ldrb	r3, [r7, #5]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	4413      	add	r3, r2
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80020ec:	9200      	str	r2, [sp, #0]
 80020ee:	2214      	movs	r2, #20
 80020f0:	2011      	movs	r0, #17
 80020f2:	f7fe ffb1 	bl	8001058 <LCD_Fill>

	if((jump_step>=44) || (jump_step == 0))	// going down
 80020f6:	4b2a      	ldr	r3, [pc, #168]	@ (80021a0 <DrawDino+0x7a0>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	2b2b      	cmp	r3, #43	@ 0x2b
 80020fc:	d803      	bhi.n	8002106 <DrawDino+0x706>
 80020fe:	4b28      	ldr	r3, [pc, #160]	@ (80021a0 <DrawDino+0x7a0>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d116      	bne.n	8002134 <DrawDino+0x734>
	{
		LCD_Fill(18,202 - altitude - left_leg,20,204 - altitude - left_leg,RUBBER);		// clear foot top with thigh
 8002106:	797b      	ldrb	r3, [r7, #5]
 8002108:	b29a      	uxth	r2, r3
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	4413      	add	r3, r2
 800210e:	b29b      	uxth	r3, r3
 8002110:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 8002114:	b299      	uxth	r1, r3
 8002116:	797b      	ldrb	r3, [r7, #5]
 8002118:	b29a      	uxth	r2, r3
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	4413      	add	r3, r2
 800211e:	b29b      	uxth	r3, r3
 8002120:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 8002124:	b29b      	uxth	r3, r3
 8002126:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800212a:	9200      	str	r2, [sp, #0]
 800212c:	2214      	movs	r2, #20
 800212e:	2012      	movs	r0, #18
 8002130:	f7fe ff92 	bl	8001058 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 8002134:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <DrawDino+0x7a0>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	2b2c      	cmp	r3, #44	@ 0x2c
 800213a:	d82d      	bhi.n	8002198 <DrawDino+0x798>
	{
		LCD_Fill(18,202 - altitude - left_leg,20,204 - altitude - left_leg,RUBBER);		// clear foot top with thigh
 800213c:	797b      	ldrb	r3, [r7, #5]
 800213e:	b29a      	uxth	r2, r3
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	4413      	add	r3, r2
 8002144:	b29b      	uxth	r3, r3
 8002146:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 800214a:	b299      	uxth	r1, r3
 800214c:	797b      	ldrb	r3, [r7, #5]
 800214e:	b29a      	uxth	r2, r3
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	4413      	add	r3, r2
 8002154:	b29b      	uxth	r3, r3
 8002156:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 800215a:	b29b      	uxth	r3, r3
 800215c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002160:	9200      	str	r2, [sp, #0]
 8002162:	2214      	movs	r2, #20
 8002164:	2012      	movs	r0, #18
 8002166:	f7fe ff77 	bl	8001058 <LCD_Fill>
		LCD_Fill(15,209 - altitude - left_leg,20,212 - altitude - left_leg,RUBBER);		// clear foot bottom
 800216a:	797b      	ldrb	r3, [r7, #5]
 800216c:	b29a      	uxth	r2, r3
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	4413      	add	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	f1c3 03d1 	rsb	r3, r3, #209	@ 0xd1
 8002178:	b299      	uxth	r1, r3
 800217a:	797b      	ldrb	r3, [r7, #5]
 800217c:	b29a      	uxth	r2, r3
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	4413      	add	r3, r2
 8002182:	b29b      	uxth	r3, r3
 8002184:	f1c3 03d4 	rsb	r3, r3, #212	@ 0xd4
 8002188:	b29b      	uxth	r3, r3
 800218a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800218e:	9200      	str	r2, [sp, #0]
 8002190:	2214      	movs	r2, #20
 8002192:	200f      	movs	r0, #15
 8002194:	f7fe ff60 	bl	8001058 <LCD_Fill>
	}
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	2000005c 	.word	0x2000005c

080021a4 <DrawObstacle1>:


// obstacle 1
void DrawObstacle1(uint16_t shift)	// single BIG
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	4603      	mov	r3, r0
 80021ac:	80fb      	strh	r3, [r7, #6]
	// ----------- VERTICAL PART -----------
	LCD_Fill(353 - shift,150,359 - shift,153,GRAY);     // vertical
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	f5c3 73b0 	rsb	r3, r3, #352	@ 0x160
 80021b4:	3301      	adds	r3, #1
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b218      	sxth	r0, r3
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 80021c0:	3301      	adds	r3, #1
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2399      	movs	r3, #153	@ 0x99
 80021ce:	2196      	movs	r1, #150	@ 0x96
 80021d0:	f7fe ff42 	bl	8001058 <LCD_Fill>
	LCD_Fill(352 - shift,153,360 - shift,210,GRAY);
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	f5c3 73b0 	rsb	r3, r3, #352	@ 0x160
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b218      	sxth	r0, r3
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	23d2      	movs	r3, #210	@ 0xd2
 80021f0:	2199      	movs	r1, #153	@ 0x99
 80021f2:	f7fe ff31 	bl	8001058 <LCD_Fill>

	LCD_Fill(360 - shift,150,366 - shift,153,RUBBER);		// clear vertical
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b218      	sxth	r0, r3
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8002206:	b29b      	uxth	r3, r3
 8002208:	b21a      	sxth	r2, r3
 800220a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2399      	movs	r3, #153	@ 0x99
 8002212:	2196      	movs	r1, #150	@ 0x96
 8002214:	f7fe ff20 	bl	8001058 <LCD_Fill>
	LCD_Fill(361 - shift,153,367 - shift,161,RUBBER);		// clear vertical upper1
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 800221e:	3301      	adds	r3, #1
 8002220:	b29b      	uxth	r3, r3
 8002222:	b218      	sxth	r0, r3
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 800222a:	3301      	adds	r3, #1
 800222c:	b29b      	uxth	r3, r3
 800222e:	b21a      	sxth	r2, r3
 8002230:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	23a1      	movs	r3, #161	@ 0xa1
 8002238:	2199      	movs	r1, #153	@ 0x99
 800223a:	f7fe ff0d 	bl	8001058 <LCD_Fill>
	LCD_Fill(361 - shift,162,365 - shift,174,RUBBER);		// clear vertical upper2
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8002244:	3301      	adds	r3, #1
 8002246:	b29b      	uxth	r3, r3
 8002248:	b218      	sxth	r0, r3
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8002250:	3301      	adds	r3, #1
 8002252:	b29b      	uxth	r3, r3
 8002254:	b21a      	sxth	r2, r3
 8002256:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	23ae      	movs	r3, #174	@ 0xae
 800225e:	21a2      	movs	r1, #162	@ 0xa2
 8002260:	f7fe fefa 	bl	8001058 <LCD_Fill>
	LCD_Fill(361 - shift,181,367 - shift,210,RUBBER);		// clear vertical lower
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 800226a:	3301      	adds	r3, #1
 800226c:	b29b      	uxth	r3, r3
 800226e:	b218      	sxth	r0, r3
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8002276:	3301      	adds	r3, #1
 8002278:	b29b      	uxth	r3, r3
 800227a:	b21a      	sxth	r2, r3
 800227c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	23d2      	movs	r3, #210	@ 0xd2
 8002284:	21b5      	movs	r1, #181	@ 0xb5
 8002286:	f7fe fee7 	bl	8001058 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(342 - shift,175,370 - shift,180,GRAY);     // horizontal
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	f5c3 73ab 	rsb	r3, r3, #342	@ 0x156
 8002290:	b29b      	uxth	r3, r3
 8002292:	b218      	sxth	r0, r3
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 800229a:	b29b      	uxth	r3, r3
 800229c:	b21a      	sxth	r2, r3
 800229e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	23b4      	movs	r3, #180	@ 0xb4
 80022a6:	21af      	movs	r1, #175	@ 0xaf
 80022a8:	f7fe fed6 	bl	8001058 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(341 - shift,165,345 - shift,167,GRAY);     // left
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	f5c3 73aa 	rsb	r3, r3, #340	@ 0x154
 80022b2:	3301      	adds	r3, #1
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	b218      	sxth	r0, r3
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 80022be:	3301      	adds	r3, #1
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	b21a      	sxth	r2, r3
 80022c4:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	23a7      	movs	r3, #167	@ 0xa7
 80022cc:	21a5      	movs	r1, #165	@ 0xa5
 80022ce:	f7fe fec3 	bl	8001058 <LCD_Fill>
	LCD_Fill(340 - shift,167,346 - shift,178,GRAY);
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	f5c3 73aa 	rsb	r3, r3, #340	@ 0x154
 80022d8:	b29b      	uxth	r3, r3
 80022da:	b218      	sxth	r0, r3
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	23b2      	movs	r3, #178	@ 0xb2
 80022ee:	21a7      	movs	r1, #167	@ 0xa7
 80022f0:	f7fe feb2 	bl	8001058 <LCD_Fill>

	LCD_Fill(346 - shift,165,351 - shift,167,RUBBER);		// clear left
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	b218      	sxth	r0, r3
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8002304:	3301      	adds	r3, #1
 8002306:	b29b      	uxth	r3, r3
 8002308:	b21a      	sxth	r2, r3
 800230a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	23a7      	movs	r3, #167	@ 0xa7
 8002312:	21a5      	movs	r1, #165	@ 0xa5
 8002314:	f7fe fea0 	bl	8001058 <LCD_Fill>
	LCD_Fill(347 - shift,167,351 - shift,174,RUBBER);		// clear left
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 800231e:	3301      	adds	r3, #1
 8002320:	b29b      	uxth	r3, r3
 8002322:	b218      	sxth	r0, r3
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 800232a:	3301      	adds	r3, #1
 800232c:	b29b      	uxth	r3, r3
 800232e:	b21a      	sxth	r2, r3
 8002330:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	23ae      	movs	r3, #174	@ 0xae
 8002338:	21a7      	movs	r1, #167	@ 0xa7
 800233a:	f7fe fe8d 	bl	8001058 <LCD_Fill>


	// ----------- RIGHT PART -----------
	LCD_Fill(367 - shift,160,371 - shift,162,GRAY);     // right
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8002344:	3301      	adds	r3, #1
 8002346:	b29b      	uxth	r3, r3
 8002348:	b218      	sxth	r0, r3
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 8002350:	3301      	adds	r3, #1
 8002352:	b29b      	uxth	r3, r3
 8002354:	b21a      	sxth	r2, r3
 8002356:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	23a2      	movs	r3, #162	@ 0xa2
 800235e:	21a0      	movs	r1, #160	@ 0xa0
 8002360:	f7fe fe7a 	bl	8001058 <LCD_Fill>
	LCD_Fill(366 - shift,162,372 - shift,178,GRAY);
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 800236a:	b29b      	uxth	r3, r3
 800236c:	b218      	sxth	r0, r3
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 8002374:	b29b      	uxth	r3, r3
 8002376:	b21a      	sxth	r2, r3
 8002378:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	23b2      	movs	r3, #178	@ 0xb2
 8002380:	21a2      	movs	r1, #162	@ 0xa2
 8002382:	f7fe fe69 	bl	8001058 <LCD_Fill>

	LCD_Fill(372 - shift,160,378 - shift,162,RUBBER);     // clear right
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 800238c:	b29b      	uxth	r3, r3
 800238e:	b218      	sxth	r0, r3
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8002396:	b29b      	uxth	r3, r3
 8002398:	b21a      	sxth	r2, r3
 800239a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	23a2      	movs	r3, #162	@ 0xa2
 80023a2:	21a0      	movs	r1, #160	@ 0xa0
 80023a4:	f7fe fe58 	bl	8001058 <LCD_Fill>
	LCD_Fill(373 - shift,162,379 - shift,178,RUBBER);
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 80023ae:	3301      	adds	r3, #1
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b218      	sxth	r0, r3
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 80023ba:	3301      	adds	r3, #1
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b21a      	sxth	r2, r3
 80023c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	23b2      	movs	r3, #178	@ 0xb2
 80023c8:	21a2      	movs	r1, #162	@ 0xa2
 80023ca:	f7fe fe45 	bl	8001058 <LCD_Fill>
	LCD_Fill(371 - shift,179,378 - shift,181,RUBBER);
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 80023d4:	3301      	adds	r3, #1
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	b218      	sxth	r0, r3
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	23b5      	movs	r3, #181	@ 0xb5
 80023ec:	21b3      	movs	r1, #179	@ 0xb3
 80023ee:	f7fe fe33 	bl	8001058 <LCD_Fill>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <DrawObstacle2>:


// obstacle 2
void DrawObstacle2(uint16_t shift)	// single small
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af02      	add	r7, sp, #8
 8002400:	4603      	mov	r3, r0
 8002402:	80fb      	strh	r3, [r7, #6]
	// ----------- VERTICAL PART -----------
	LCD_Fill(353 - shift,170,357 - shift,172,GRAY);      // vertical
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	f5c3 73b0 	rsb	r3, r3, #352	@ 0x160
 800240a:	3301      	adds	r3, #1
 800240c:	b29b      	uxth	r3, r3
 800240e:	b218      	sxth	r0, r3
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 8002416:	3301      	adds	r3, #1
 8002418:	b29b      	uxth	r3, r3
 800241a:	b21a      	sxth	r2, r3
 800241c:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	23ac      	movs	r3, #172	@ 0xac
 8002424:	21aa      	movs	r1, #170	@ 0xaa
 8002426:	f7fe fe17 	bl	8001058 <LCD_Fill>
	LCD_Fill(352 - shift,172,358 - shift,210,GRAY);
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f5c3 73b0 	rsb	r3, r3, #352	@ 0x160
 8002430:	b29b      	uxth	r3, r3
 8002432:	b218      	sxth	r0, r3
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 800243a:	b29b      	uxth	r3, r3
 800243c:	b21a      	sxth	r2, r3
 800243e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	23d2      	movs	r3, #210	@ 0xd2
 8002446:	21ac      	movs	r1, #172	@ 0xac
 8002448:	f7fe fe06 	bl	8001058 <LCD_Fill>

	LCD_Fill(358 - shift,170,364 - shift,172,RUBBER);		// clear vertical
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 8002452:	b29b      	uxth	r3, r3
 8002454:	b218      	sxth	r0, r3
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 800245c:	b29b      	uxth	r3, r3
 800245e:	b21a      	sxth	r2, r3
 8002460:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	23ac      	movs	r3, #172	@ 0xac
 8002468:	21aa      	movs	r1, #170	@ 0xaa
 800246a:	f7fe fdf5 	bl	8001058 <LCD_Fill>
	LCD_Fill(359 - shift,172,365 - shift,179,RUBBER);		// clear vertical upper1
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 8002474:	3301      	adds	r3, #1
 8002476:	b29b      	uxth	r3, r3
 8002478:	b218      	sxth	r0, r3
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8002480:	3301      	adds	r3, #1
 8002482:	b29b      	uxth	r3, r3
 8002484:	b21a      	sxth	r2, r3
 8002486:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	23b3      	movs	r3, #179	@ 0xb3
 800248e:	21ac      	movs	r1, #172	@ 0xac
 8002490:	f7fe fde2 	bl	8001058 <LCD_Fill>
	LCD_Fill(359 - shift,180,361 - shift,185,RUBBER);		// clear vertical upper2
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 800249a:	3301      	adds	r3, #1
 800249c:	b29b      	uxth	r3, r3
 800249e:	b218      	sxth	r0, r3
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 80024a6:	3301      	adds	r3, #1
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b21a      	sxth	r2, r3
 80024ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	23b9      	movs	r3, #185	@ 0xb9
 80024b4:	21b4      	movs	r1, #180	@ 0xb4
 80024b6:	f7fe fdcf 	bl	8001058 <LCD_Fill>
	LCD_Fill(359 - shift,191,365 - shift,210,RUBBER);		// clear vertical lower
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 80024c0:	3301      	adds	r3, #1
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	b218      	sxth	r0, r3
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 80024cc:	3301      	adds	r3, #1
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	23d2      	movs	r3, #210	@ 0xd2
 80024da:	21bf      	movs	r1, #191	@ 0xbf
 80024dc:	f7fe fdbc 	bl	8001058 <LCD_Fill>

	// ----------- HORIZONTAL PART -----------
	LCD_Fill(346 - shift,186,364 - shift,190,GRAY);      // horizontal
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	b218      	sxth	r0, r3
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b21a      	sxth	r2, r3
 80024f4:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	23be      	movs	r3, #190	@ 0xbe
 80024fc:	21ba      	movs	r1, #186	@ 0xba
 80024fe:	f7fe fdab 	bl	8001058 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(345 - shift,177,347 - shift,178,GRAY);     // left
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 8002508:	3301      	adds	r3, #1
 800250a:	b29b      	uxth	r3, r3
 800250c:	b218      	sxth	r0, r3
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 8002514:	3301      	adds	r3, #1
 8002516:	b29b      	uxth	r3, r3
 8002518:	b21a      	sxth	r2, r3
 800251a:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	23b2      	movs	r3, #178	@ 0xb2
 8002522:	21b1      	movs	r1, #177	@ 0xb1
 8002524:	f7fe fd98 	bl	8001058 <LCD_Fill>
	LCD_Fill(344 - shift,178,348 - shift,188,GRAY);
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 800252e:	b29b      	uxth	r3, r3
 8002530:	b218      	sxth	r0, r3
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	f5c3 73ae 	rsb	r3, r3, #348	@ 0x15c
 8002538:	b29b      	uxth	r3, r3
 800253a:	b21a      	sxth	r2, r3
 800253c:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	23bc      	movs	r3, #188	@ 0xbc
 8002544:	21b2      	movs	r1, #178	@ 0xb2
 8002546:	f7fe fd87 	bl	8001058 <LCD_Fill>

	LCD_Fill(348 - shift,177,351 - shift,178,RUBBER);		// clear left1
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	f5c3 73ae 	rsb	r3, r3, #348	@ 0x15c
 8002550:	b29b      	uxth	r3, r3
 8002552:	b218      	sxth	r0, r3
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 800255a:	3301      	adds	r3, #1
 800255c:	b29b      	uxth	r3, r3
 800255e:	b21a      	sxth	r2, r3
 8002560:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	23b2      	movs	r3, #178	@ 0xb2
 8002568:	21b1      	movs	r1, #177	@ 0xb1
 800256a:	f7fe fd75 	bl	8001058 <LCD_Fill>
	LCD_Fill(349 - shift,179,351 - shift,185,RUBBER);		// clear left2
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	f5c3 73ae 	rsb	r3, r3, #348	@ 0x15c
 8002574:	3301      	adds	r3, #1
 8002576:	b29b      	uxth	r3, r3
 8002578:	b218      	sxth	r0, r3
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8002580:	3301      	adds	r3, #1
 8002582:	b29b      	uxth	r3, r3
 8002584:	b21a      	sxth	r2, r3
 8002586:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	23b9      	movs	r3, #185	@ 0xb9
 800258e:	21b3      	movs	r1, #179	@ 0xb3
 8002590:	f7fe fd62 	bl	8001058 <LCD_Fill>

	// ----------- RIGHT PART -----------
	LCD_Fill(362 - shift,180,365 - shift,181,GRAY);      // right
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 800259a:	b29b      	uxth	r3, r3
 800259c:	b218      	sxth	r0, r3
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 80025a4:	3301      	adds	r3, #1
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	23b5      	movs	r3, #181	@ 0xb5
 80025b2:	21b4      	movs	r1, #180	@ 0xb4
 80025b4:	f7fe fd50 	bl	8001058 <LCD_Fill>
	LCD_Fill(361 - shift,181,366 - shift,188,GRAY);
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 80025be:	3301      	adds	r3, #1
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	b218      	sxth	r0, r3
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	b21a      	sxth	r2, r3
 80025ce:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	23bc      	movs	r3, #188	@ 0xbc
 80025d6:	21b5      	movs	r1, #181	@ 0xb5
 80025d8:	f7fe fd3e 	bl	8001058 <LCD_Fill>

	LCD_Fill(366 - shift,180,372 - shift,181,RUBBER);      // clear right
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	b218      	sxth	r0, r3
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	b21a      	sxth	r2, r3
 80025f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	23b5      	movs	r3, #181	@ 0xb5
 80025f8:	21b4      	movs	r1, #180	@ 0xb4
 80025fa:	f7fe fd2d 	bl	8001058 <LCD_Fill>
	LCD_Fill(367 - shift,181,373 - shift,188,RUBBER);
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8002604:	3301      	adds	r3, #1
 8002606:	b29b      	uxth	r3, r3
 8002608:	b218      	sxth	r0, r3
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 8002610:	3301      	adds	r3, #1
 8002612:	b29b      	uxth	r3, r3
 8002614:	b21a      	sxth	r2, r3
 8002616:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	23bc      	movs	r3, #188	@ 0xbc
 800261e:	21b5      	movs	r1, #181	@ 0xb5
 8002620:	f7fe fd1a 	bl	8001058 <LCD_Fill>
	LCD_Fill(365 - shift,189,372 - shift,190,RUBBER);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 800262a:	3301      	adds	r3, #1
 800262c:	b29b      	uxth	r3, r3
 800262e:	b218      	sxth	r0, r3
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 8002636:	b29b      	uxth	r3, r3
 8002638:	b21a      	sxth	r2, r3
 800263a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	23be      	movs	r3, #190	@ 0xbe
 8002642:	21bd      	movs	r1, #189	@ 0xbd
 8002644:	f7fe fd08 	bl	8001058 <LCD_Fill>
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <DrawObstacle3>:


// obstacle 3
void DrawObstacle3(uint16_t shift)		// BIG & small
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af02      	add	r7, sp, #8
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
	// big one
	// ----------- VERTICAL PART -----------
	LCD_Fill(357 - shift,150,361 - shift,153,GRAY);     // vertical1
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 8002660:	3301      	adds	r3, #1
 8002662:	b29b      	uxth	r3, r3
 8002664:	b218      	sxth	r0, r3
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 800266c:	3301      	adds	r3, #1
 800266e:	b29b      	uxth	r3, r3
 8002670:	b21a      	sxth	r2, r3
 8002672:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2399      	movs	r3, #153	@ 0x99
 800267a:	2196      	movs	r1, #150	@ 0x96
 800267c:	f7fe fcec 	bl	8001058 <LCD_Fill>
	LCD_Fill(356 - shift,153,362 - shift,210,GRAY);
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 8002686:	b29b      	uxth	r3, r3
 8002688:	b218      	sxth	r0, r3
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8002690:	b29b      	uxth	r3, r3
 8002692:	b21a      	sxth	r2, r3
 8002694:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	23d2      	movs	r3, #210	@ 0xd2
 800269c:	2199      	movs	r1, #153	@ 0x99
 800269e:	f7fe fcdb 	bl	8001058 <LCD_Fill>

	LCD_Fill(362 - shift,150,368 - shift,152,RUBBER);		// clear vertical1
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b218      	sxth	r0, r3
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	f5c3 73b8 	rsb	r3, r3, #368	@ 0x170
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	b21a      	sxth	r2, r3
 80026b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2398      	movs	r3, #152	@ 0x98
 80026be:	2196      	movs	r1, #150	@ 0x96
 80026c0:	f7fe fcca 	bl	8001058 <LCD_Fill>
	LCD_Fill(363 - shift,153,369 - shift,174,RUBBER);		// clear vertical1 upper
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	b218      	sxth	r0, r3
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	f5c3 73b8 	rsb	r3, r3, #368	@ 0x170
 80026d6:	3301      	adds	r3, #1
 80026d8:	b29b      	uxth	r3, r3
 80026da:	b21a      	sxth	r2, r3
 80026dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	23ae      	movs	r3, #174	@ 0xae
 80026e4:	2199      	movs	r1, #153	@ 0x99
 80026e6:	f7fe fcb7 	bl	8001058 <LCD_Fill>
	LCD_Fill(363 - shift,181,369 - shift,210,RUBBER);		// clear vertical1 lower
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 80026f0:	3301      	adds	r3, #1
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b218      	sxth	r0, r3
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	f5c3 73b8 	rsb	r3, r3, #368	@ 0x170
 80026fc:	3301      	adds	r3, #1
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b21a      	sxth	r2, r3
 8002702:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	23d2      	movs	r3, #210	@ 0xd2
 800270a:	21b5      	movs	r1, #181	@ 0xb5
 800270c:	f7fe fca4 	bl	8001058 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(346 - shift,175,374 - shift,180,GRAY);     // horizontal1
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 8002716:	b29b      	uxth	r3, r3
 8002718:	b218      	sxth	r0, r3
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8002720:	b29b      	uxth	r3, r3
 8002722:	b21a      	sxth	r2, r3
 8002724:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	23b4      	movs	r3, #180	@ 0xb4
 800272c:	21af      	movs	r1, #175	@ 0xaf
 800272e:	f7fe fc93 	bl	8001058 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(345 - shift,160,349 - shift,162,GRAY);     // left1
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 8002738:	3301      	adds	r3, #1
 800273a:	b29b      	uxth	r3, r3
 800273c:	b218      	sxth	r0, r3
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	f5c3 73ae 	rsb	r3, r3, #348	@ 0x15c
 8002744:	3301      	adds	r3, #1
 8002746:	b29b      	uxth	r3, r3
 8002748:	b21a      	sxth	r2, r3
 800274a:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	23a2      	movs	r3, #162	@ 0xa2
 8002752:	21a0      	movs	r1, #160	@ 0xa0
 8002754:	f7fe fc80 	bl	8001058 <LCD_Fill>
	LCD_Fill(344 - shift,162,350 - shift,178,GRAY);
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 800275e:	b29b      	uxth	r3, r3
 8002760:	b218      	sxth	r0, r3
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8002768:	b29b      	uxth	r3, r3
 800276a:	b21a      	sxth	r2, r3
 800276c:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	23b2      	movs	r3, #178	@ 0xb2
 8002774:	21a2      	movs	r1, #162	@ 0xa2
 8002776:	f7fe fc6f 	bl	8001058 <LCD_Fill>

	LCD_Fill(350 - shift,160,355 - shift,162,RUBBER);     // clear left1
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8002780:	b29b      	uxth	r3, r3
 8002782:	b218      	sxth	r0, r3
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	f5c3 73b1 	rsb	r3, r3, #354	@ 0x162
 800278a:	3301      	adds	r3, #1
 800278c:	b29b      	uxth	r3, r3
 800278e:	b21a      	sxth	r2, r3
 8002790:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	23a2      	movs	r3, #162	@ 0xa2
 8002798:	21a0      	movs	r1, #160	@ 0xa0
 800279a:	f7fe fc5d 	bl	8001058 <LCD_Fill>
	LCD_Fill(351 - shift,162,355 - shift,174,RUBBER);
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 80027a4:	3301      	adds	r3, #1
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	b218      	sxth	r0, r3
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	f5c3 73b1 	rsb	r3, r3, #354	@ 0x162
 80027b0:	3301      	adds	r3, #1
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	23ae      	movs	r3, #174	@ 0xae
 80027be:	21a2      	movs	r1, #162	@ 0xa2
 80027c0:	f7fe fc4a 	bl	8001058 <LCD_Fill>

	// ----------- RIGHT PART -----------
	LCD_Fill(371 - shift,165,375 - shift,167,GRAY);     // right1
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 80027ca:	3301      	adds	r3, #1
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	b218      	sxth	r0, r3
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 80027d6:	3301      	adds	r3, #1
 80027d8:	b29b      	uxth	r3, r3
 80027da:	b21a      	sxth	r2, r3
 80027dc:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	23a7      	movs	r3, #167	@ 0xa7
 80027e4:	21a5      	movs	r1, #165	@ 0xa5
 80027e6:	f7fe fc37 	bl	8001058 <LCD_Fill>
	LCD_Fill(370 - shift,167,376 - shift,178,GRAY);
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	b218      	sxth	r0, r3
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	b21a      	sxth	r2, r3
 80027fe:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	23b2      	movs	r3, #178	@ 0xb2
 8002806:	21a7      	movs	r1, #167	@ 0xa7
 8002808:	f7fe fc26 	bl	8001058 <LCD_Fill>

	LCD_Fill(376 - shift,165,382 - shift,167,RUBBER);     // clear right1
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8002812:	b29b      	uxth	r3, r3
 8002814:	b218      	sxth	r0, r3
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 800281c:	b29b      	uxth	r3, r3
 800281e:	b21a      	sxth	r2, r3
 8002820:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	23a7      	movs	r3, #167	@ 0xa7
 8002828:	21a5      	movs	r1, #165	@ 0xa5
 800282a:	f7fe fc15 	bl	8001058 <LCD_Fill>
	LCD_Fill(377 - shift,167,383 - shift,178,RUBBER);
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8002834:	3301      	adds	r3, #1
 8002836:	b29b      	uxth	r3, r3
 8002838:	b218      	sxth	r0, r3
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8002840:	3301      	adds	r3, #1
 8002842:	b29b      	uxth	r3, r3
 8002844:	b21a      	sxth	r2, r3
 8002846:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	23b2      	movs	r3, #178	@ 0xb2
 800284e:	21a7      	movs	r1, #167	@ 0xa7
 8002850:	f7fe fc02 	bl	8001058 <LCD_Fill>
	LCD_Fill(375 - shift,179,381 - shift,180,RUBBER);
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 800285a:	3301      	adds	r3, #1
 800285c:	b29b      	uxth	r3, r3
 800285e:	b218      	sxth	r0, r3
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8002866:	3301      	adds	r3, #1
 8002868:	b29b      	uxth	r3, r3
 800286a:	b21a      	sxth	r2, r3
 800286c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	23b4      	movs	r3, #180	@ 0xb4
 8002874:	21b3      	movs	r1, #179	@ 0xb3
 8002876:	f7fe fbef 	bl	8001058 <LCD_Fill>



	// small one
	// ----------- VERTICAL PART -----------
	LCD_Fill(388 - shift,170,392 - shift,172,GRAY);     // vertical2
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	f5c3 73c2 	rsb	r3, r3, #388	@ 0x184
 8002880:	b29b      	uxth	r3, r3
 8002882:	b218      	sxth	r0, r3
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 800288a:	b29b      	uxth	r3, r3
 800288c:	b21a      	sxth	r2, r3
 800288e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	23ac      	movs	r3, #172	@ 0xac
 8002896:	21aa      	movs	r1, #170	@ 0xaa
 8002898:	f7fe fbde 	bl	8001058 <LCD_Fill>
	LCD_Fill(387 - shift,172,393 - shift,210,GRAY);
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 80028a2:	3301      	adds	r3, #1
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	b218      	sxth	r0, r3
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 80028ae:	3301      	adds	r3, #1
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	23d2      	movs	r3, #210	@ 0xd2
 80028bc:	21ac      	movs	r1, #172	@ 0xac
 80028be:	f7fe fbcb 	bl	8001058 <LCD_Fill>

	LCD_Fill(393 - shift,170,399 - shift,172,RUBBER);		// clear vertical2
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 80028c8:	3301      	adds	r3, #1
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	b218      	sxth	r0, r3
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 80028d4:	3301      	adds	r3, #1
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	b21a      	sxth	r2, r3
 80028da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	23ac      	movs	r3, #172	@ 0xac
 80028e2:	21aa      	movs	r1, #170	@ 0xaa
 80028e4:	f7fe fbb8 	bl	8001058 <LCD_Fill>
	LCD_Fill(394 - shift,172,400 - shift,176,RUBBER);		// clear vertical2 upper1
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	b218      	sxth	r0, r3
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	23b0      	movs	r3, #176	@ 0xb0
 8002904:	21ac      	movs	r1, #172	@ 0xac
 8002906:	f7fe fba7 	bl	8001058 <LCD_Fill>
	LCD_Fill(394 - shift,177,396 - shift,185,RUBBER);		// clear vertical2 upper2
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8002910:	b29b      	uxth	r3, r3
 8002912:	b218      	sxth	r0, r3
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 800291a:	b29b      	uxth	r3, r3
 800291c:	b21a      	sxth	r2, r3
 800291e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	23b9      	movs	r3, #185	@ 0xb9
 8002926:	21b1      	movs	r1, #177	@ 0xb1
 8002928:	f7fe fb96 	bl	8001058 <LCD_Fill>
	LCD_Fill(394 - shift,191,400 - shift,210,RUBBER);		// clear vertical2 lower
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8002932:	b29b      	uxth	r3, r3
 8002934:	b218      	sxth	r0, r3
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 800293c:	b29b      	uxth	r3, r3
 800293e:	b21a      	sxth	r2, r3
 8002940:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	23d2      	movs	r3, #210	@ 0xd2
 8002948:	21bf      	movs	r1, #191	@ 0xbf
 800294a:	f7fe fb85 	bl	8001058 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(381 - shift,186,399 - shift,190,GRAY);     // horizontal2
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8002954:	3301      	adds	r3, #1
 8002956:	b29b      	uxth	r3, r3
 8002958:	b218      	sxth	r0, r3
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8002960:	3301      	adds	r3, #1
 8002962:	b29b      	uxth	r3, r3
 8002964:	b21a      	sxth	r2, r3
 8002966:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	23be      	movs	r3, #190	@ 0xbe
 800296e:	21ba      	movs	r1, #186	@ 0xba
 8002970:	f7fe fb72 	bl	8001058 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(380 - shift,180,382 - shift,181,GRAY);     // left2
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 800297a:	b29b      	uxth	r3, r3
 800297c:	b218      	sxth	r0, r3
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8002984:	b29b      	uxth	r3, r3
 8002986:	b21a      	sxth	r2, r3
 8002988:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	23b5      	movs	r3, #181	@ 0xb5
 8002990:	21b4      	movs	r1, #180	@ 0xb4
 8002992:	f7fe fb61 	bl	8001058 <LCD_Fill>
	LCD_Fill(379 - shift,181,383 - shift,188,GRAY);
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 800299c:	3301      	adds	r3, #1
 800299e:	b29b      	uxth	r3, r3
 80029a0:	b218      	sxth	r0, r3
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 80029a8:	3301      	adds	r3, #1
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	23bc      	movs	r3, #188	@ 0xbc
 80029b6:	21b5      	movs	r1, #181	@ 0xb5
 80029b8:	f7fe fb4e 	bl	8001058 <LCD_Fill>

	LCD_Fill(383 - shift,180,386 - shift,181,RUBBER);     // clear left2
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 80029c2:	3301      	adds	r3, #1
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	b218      	sxth	r0, r3
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b21a      	sxth	r2, r3
 80029d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	23b5      	movs	r3, #181	@ 0xb5
 80029da:	21b4      	movs	r1, #180	@ 0xb4
 80029dc:	f7fe fb3c 	bl	8001058 <LCD_Fill>
	LCD_Fill(384 - shift,181,386 - shift,185,RUBBER);
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	f5c3 73c0 	rsb	r3, r3, #384	@ 0x180
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	b218      	sxth	r0, r3
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	b21a      	sxth	r2, r3
 80029f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	23b9      	movs	r3, #185	@ 0xb9
 80029fc:	21b5      	movs	r1, #181	@ 0xb5
 80029fe:	f7fe fb2b 	bl	8001058 <LCD_Fill>


	// ----------- RIGHT PART -----------
	LCD_Fill(397 - shift,177,400 - shift,178,GRAY);     // right2
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8002a08:	3301      	adds	r3, #1
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	b218      	sxth	r0, r3
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	23b2      	movs	r3, #178	@ 0xb2
 8002a20:	21b1      	movs	r1, #177	@ 0xb1
 8002a22:	f7fe fb19 	bl	8001058 <LCD_Fill>
	LCD_Fill(396 - shift,178,401 - shift,188,GRAY);
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	b218      	sxth	r0, r3
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8002a36:	3301      	adds	r3, #1
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	23bc      	movs	r3, #188	@ 0xbc
 8002a44:	21b2      	movs	r1, #178	@ 0xb2
 8002a46:	f7fe fb07 	bl	8001058 <LCD_Fill>

	LCD_Fill(401 - shift,177,407 - shift,178,RUBBER);     // clear right2
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8002a50:	3301      	adds	r3, #1
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	b218      	sxth	r0, r3
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	f5c3 73cb 	rsb	r3, r3, #406	@ 0x196
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	23b2      	movs	r3, #178	@ 0xb2
 8002a6a:	21b1      	movs	r1, #177	@ 0xb1
 8002a6c:	f7fe faf4 	bl	8001058 <LCD_Fill>
	LCD_Fill(402 - shift,178,408 - shift,188,RUBBER);
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	f5c3 73c9 	rsb	r3, r3, #402	@ 0x192
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	b218      	sxth	r0, r3
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	f5c3 73cc 	rsb	r3, r3, #408	@ 0x198
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b21a      	sxth	r2, r3
 8002a84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	23bc      	movs	r3, #188	@ 0xbc
 8002a8c:	21b2      	movs	r1, #178	@ 0xb2
 8002a8e:	f7fe fae3 	bl	8001058 <LCD_Fill>
	LCD_Fill(400 - shift,189,406 - shift,190,RUBBER);
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	b218      	sxth	r0, r3
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	f5c3 73cb 	rsb	r3, r3, #406	@ 0x196
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	b21a      	sxth	r2, r3
 8002aa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	23be      	movs	r3, #190	@ 0xbe
 8002aae:	21bd      	movs	r1, #189	@ 0xbd
 8002ab0:	f7fe fad2 	bl	8001058 <LCD_Fill>
	LCD_Fill(399 - shift,190,405 - shift,191,RUBBER);
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8002aba:	3301      	adds	r3, #1
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	b218      	sxth	r0, r3
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	f5c3 73ca 	rsb	r3, r3, #404	@ 0x194
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	b21a      	sxth	r2, r3
 8002acc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	23bf      	movs	r3, #191	@ 0xbf
 8002ad4:	21be      	movs	r1, #190	@ 0xbe
 8002ad6:	f7fe fabf 	bl	8001058 <LCD_Fill>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <RandomNumbers>:
/* USER CODE BEGIN 0 */

uint32_t adc_value;

void RandomNumbers(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	  HAL_ADC_Start(&hadc2); // ADC start conversion
 8002ae8:	480a      	ldr	r0, [pc, #40]	@ (8002b14 <RandomNumbers+0x30>)
 8002aea:	f000 fd51 	bl	8003590 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8002aee:	f04f 31ff 	mov.w	r1, #4294967295
 8002af2:	4808      	ldr	r0, [pc, #32]	@ (8002b14 <RandomNumbers+0x30>)
 8002af4:	f000 fe98 	bl	8003828 <HAL_ADC_PollForConversion>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <RandomNumbers+0x26>
	  {
		  adc_value = HAL_ADC_GetValue(&hadc2); // ADC value
 8002afe:	4805      	ldr	r0, [pc, #20]	@ (8002b14 <RandomNumbers+0x30>)
 8002b00:	f000 ff94 	bl	8003a2c <HAL_ADC_GetValue>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4a04      	ldr	r2, [pc, #16]	@ (8002b18 <RandomNumbers+0x34>)
 8002b08:	6013      	str	r3, [r2, #0]
	  }
	  HAL_ADC_Stop(&hadc2); // ADC stop conversion
 8002b0a:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <RandomNumbers+0x30>)
 8002b0c:	f000 fe56 	bl	80037bc <HAL_ADC_Stop>
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	2000006c 	.word	0x2000006c
 8002b18:	20000108 	.word	0x20000108

08002b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b20:	f000 fad6 	bl	80030d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b24:	f000 f814 	bl	8002b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b28:	f000 f922 	bl	8002d70 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002b2c:	f000 f8d2 	bl	8002cd4 <MX_TIM2_Init>
  MX_ADC2_Init();
 8002b30:	f000 f872 	bl	8002c18 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  delay_init(72);			// delay initialization (System Clock [MHz])
 8002b34:	2048      	movs	r0, #72	@ 0x48
 8002b36:	f7fe fb6b 	bl	8001210 <delay_init>
  ILI9341_paradriver_Init();			// initialization of LCD driver
 8002b3a:	f7fd fc19 	bl	8000370 <ILI9341_paradriver_Init>

  HAL_TIM_Base_Start_IT(&htim2);	// timer start (60Hz refresh rate)
 8002b3e:	4803      	ldr	r0, [pc, #12]	@ (8002b4c <main+0x30>)
 8002b40:	f003 fb6e 	bl	8006220 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	GAME();
 8002b44:	f7fe fe9a 	bl	800187c <GAME>
 8002b48:	e7fc      	b.n	8002b44 <main+0x28>
 8002b4a:	bf00      	nop
 8002b4c:	200000bc 	.word	0x200000bc

08002b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b0a6      	sub	sp, #152	@ 0x98
 8002b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b56:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002b5a:	2228      	movs	r2, #40	@ 0x28
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f003 ffba 	bl	8006ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	2258      	movs	r2, #88	@ 0x58
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 ffac 	bl	8006ad8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b80:	2302      	movs	r3, #2
 8002b82:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b84:	2301      	movs	r3, #1
 8002b86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b88:	2310      	movs	r3, #16
 8002b8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b9c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002ba0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002baa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 fe9c 	bl	80048ec <HAL_RCC_OscConfig>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002bba:	f000 f969 	bl	8002e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bbe:	230f      	movs	r3, #15
 8002bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bd4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002bd8:	2102      	movs	r1, #2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 feda 	bl	8005994 <HAL_RCC_ClockConfig>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002be6:	f000 f953 	bl	8002e90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
 8002bea:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <SystemClock_Config+0xc4>)
 8002bec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002bee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 f89a 	bl	8005d34 <HAL_RCCEx_PeriphCLKConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002c06:	f000 f943 	bl	8002e90 <Error_Handler>
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	3798      	adds	r7, #152	@ 0x98
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	00100080 	.word	0x00100080

08002c18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c1e:	463b      	mov	r3, r7
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
 8002c2c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002c2e:	4b27      	ldr	r3, [pc, #156]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c30:	4a27      	ldr	r2, [pc, #156]	@ (8002cd0 <MX_ADC2_Init+0xb8>)
 8002c32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c34:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002c3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c40:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002c46:	4b21      	ldr	r3, [pc, #132]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c60:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002c66:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002c6c:	4b17      	ldr	r3, [pc, #92]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c74:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c76:	2204      	movs	r2, #4
 8002c78:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002c7a:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002c80:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002c86:	4811      	ldr	r0, [pc, #68]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002c88:	f000 fa88 	bl	800319c <HAL_ADC_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8002c92:	f000 f8fd 	bl	8002e90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002c96:	2303      	movs	r3, #3
 8002c98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002cae:	463b      	mov	r3, r7
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4806      	ldr	r0, [pc, #24]	@ (8002ccc <MX_ADC2_Init+0xb4>)
 8002cb4:	f000 fec8 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8002cbe:	f000 f8e7 	bl	8002e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000006c 	.word	0x2000006c
 8002cd0:	50000100 	.word	0x50000100

08002cd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cda:	f107 0310 	add.w	r3, r7, #16
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d6c <MX_TIM2_Init+0x98>)
 8002cf4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 179;
 8002cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8002d6c <MX_TIM2_Init+0x98>)
 8002cfc:	22b3      	movs	r2, #179	@ 0xb3
 8002cfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d00:	4b1a      	ldr	r3, [pc, #104]	@ (8002d6c <MX_TIM2_Init+0x98>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 8002d06:	4b19      	ldr	r3, [pc, #100]	@ (8002d6c <MX_TIM2_Init+0x98>)
 8002d08:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0e:	4b17      	ldr	r3, [pc, #92]	@ (8002d6c <MX_TIM2_Init+0x98>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d14:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <MX_TIM2_Init+0x98>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d1a:	4814      	ldr	r0, [pc, #80]	@ (8002d6c <MX_TIM2_Init+0x98>)
 8002d1c:	f003 fa28 	bl	8006170 <HAL_TIM_Base_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002d26:	f000 f8b3 	bl	8002e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	4619      	mov	r1, r3
 8002d36:	480d      	ldr	r0, [pc, #52]	@ (8002d6c <MX_TIM2_Init+0x98>)
 8002d38:	f003 fbe4 	bl	8006504 <HAL_TIM_ConfigClockSource>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002d42:	f000 f8a5 	bl	8002e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4806      	ldr	r0, [pc, #24]	@ (8002d6c <MX_TIM2_Init+0x98>)
 8002d54:	f003 fe16 	bl	8006984 <HAL_TIMEx_MasterConfigSynchronization>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d5e:	f000 f897 	bl	8002e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d62:	bf00      	nop
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200000bc 	.word	0x200000bc

08002d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	60da      	str	r2, [r3, #12]
 8002d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d86:	4b3f      	ldr	r3, [pc, #252]	@ (8002e84 <MX_GPIO_Init+0x114>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e84 <MX_GPIO_Init+0x114>)
 8002d8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d90:	6153      	str	r3, [r2, #20]
 8002d92:	4b3c      	ldr	r3, [pc, #240]	@ (8002e84 <MX_GPIO_Init+0x114>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	4b39      	ldr	r3, [pc, #228]	@ (8002e84 <MX_GPIO_Init+0x114>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4a38      	ldr	r2, [pc, #224]	@ (8002e84 <MX_GPIO_Init+0x114>)
 8002da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da8:	6153      	str	r3, [r2, #20]
 8002daa:	4b36      	ldr	r3, [pc, #216]	@ (8002e84 <MX_GPIO_Init+0x114>)
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	4b33      	ldr	r3, [pc, #204]	@ (8002e84 <MX_GPIO_Init+0x114>)
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	4a32      	ldr	r2, [pc, #200]	@ (8002e84 <MX_GPIO_Init+0x114>)
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dc0:	6153      	str	r3, [r2, #20]
 8002dc2:	4b30      	ldr	r3, [pc, #192]	@ (8002e84 <MX_GPIO_Init+0x114>)
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002dce:	2201      	movs	r2, #1
 8002dd0:	211f      	movs	r1, #31
 8002dd2:	482d      	ldr	r0, [pc, #180]	@ (8002e88 <MX_GPIO_Init+0x118>)
 8002dd4:	f001 fd72 	bl	80048bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	21aa      	movs	r1, #170	@ 0xaa
 8002ddc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002de0:	f001 fd6c 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002de4:	2201      	movs	r2, #1
 8002de6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002dea:	4828      	ldr	r0, [pc, #160]	@ (8002e8c <MX_GPIO_Init+0x11c>)
 8002dec:	f001 fd66 	bl	80048bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002df0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfe:	f107 030c 	add.w	r3, r7, #12
 8002e02:	4619      	mov	r1, r3
 8002e04:	4820      	ldr	r0, [pc, #128]	@ (8002e88 <MX_GPIO_Init+0x118>)
 8002e06:	f001 fbb7 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002e0a:	231f      	movs	r3, #31
 8002e0c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e1a:	f107 030c 	add.w	r3, r7, #12
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4819      	ldr	r0, [pc, #100]	@ (8002e88 <MX_GPIO_Init+0x118>)
 8002e22:	f001 fba9 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 8002e26:	23aa      	movs	r3, #170	@ 0xaa
 8002e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e36:	f107 030c 	add.w	r3, r7, #12
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e40:	f001 fb9a 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8002e44:	2314      	movs	r3, #20
 8002e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e50:	f107 030c 	add.w	r3, r7, #12
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e5a:	f001 fb8d 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002e5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e62:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e64:	2301      	movs	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e70:	f107 030c 	add.w	r3, r7, #12
 8002e74:	4619      	mov	r1, r3
 8002e76:	4805      	ldr	r0, [pc, #20]	@ (8002e8c <MX_GPIO_Init+0x11c>)
 8002e78:	f001 fb7e 	bl	8004578 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e7c:	bf00      	nop
 8002e7e:	3720      	adds	r7, #32
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	48000800 	.word	0x48000800
 8002e8c:	48000400 	.word	0x48000400

08002e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e94:	b672      	cpsid	i
}
 8002e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <Error_Handler+0x8>

08002e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <HAL_MspInit+0x44>)
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee0 <HAL_MspInit+0x44>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6193      	str	r3, [r2, #24]
 8002eae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <HAL_MspInit+0x44>)
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <HAL_MspInit+0x44>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4a08      	ldr	r2, [pc, #32]	@ (8002ee0 <HAL_MspInit+0x44>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec4:	61d3      	str	r3, [r2, #28]
 8002ec6:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <HAL_MspInit+0x44>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	@ 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a15      	ldr	r2, [pc, #84]	@ (8002f58 <HAL_ADC_MspInit+0x74>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d124      	bne.n	8002f50 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f06:	4b15      	ldr	r3, [pc, #84]	@ (8002f5c <HAL_ADC_MspInit+0x78>)
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	4a14      	ldr	r2, [pc, #80]	@ (8002f5c <HAL_ADC_MspInit+0x78>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	6153      	str	r3, [r2, #20]
 8002f12:	4b12      	ldr	r3, [pc, #72]	@ (8002f5c <HAL_ADC_MspInit+0x78>)
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f5c <HAL_ADC_MspInit+0x78>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4a0e      	ldr	r2, [pc, #56]	@ (8002f5c <HAL_ADC_MspInit+0x78>)
 8002f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f28:	6153      	str	r3, [r2, #20]
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <HAL_ADC_MspInit+0x78>)
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f36:	2340      	movs	r3, #64	@ 0x40
 8002f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	4619      	mov	r1, r3
 8002f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f4c:	f001 fb14 	bl	8004578 <HAL_GPIO_Init>

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 8002f50:	bf00      	nop
 8002f52:	3728      	adds	r7, #40	@ 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	50000100 	.word	0x50000100
 8002f5c:	40021000 	.word	0x40021000

08002f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f70:	d113      	bne.n	8002f9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f72:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <HAL_TIM_Base_MspInit+0x44>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4a0b      	ldr	r2, [pc, #44]	@ (8002fa4 <HAL_TIM_Base_MspInit+0x44>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	61d3      	str	r3, [r2, #28]
 8002f7e:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <HAL_TIM_Base_MspInit+0x44>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	201c      	movs	r0, #28
 8002f90:	f001 fa9f 	bl	80044d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f94:	201c      	movs	r0, #28
 8002f96:	f001 fab8 	bl	800450a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <NMI_Handler+0x4>

08002fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fb4:	bf00      	nop
 8002fb6:	e7fd      	b.n	8002fb4 <HardFault_Handler+0x4>

08002fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <MemManage_Handler+0x4>

08002fc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <BusFault_Handler+0x4>

08002fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fcc:	bf00      	nop
 8002fce:	e7fd      	b.n	8002fcc <UsageFault_Handler+0x4>

08002fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ffe:	f000 f8ad 	bl	800315c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800300c:	480f      	ldr	r0, [pc, #60]	@ (800304c <TIM2_IRQHandler+0x44>)
 800300e:	f003 f977 	bl	8006300 <HAL_TIM_IRQHandler>
  }
  else
  {
	  refresh = 0;
  }*/
refresh++;
 8003012:	4b0f      	ldr	r3, [pc, #60]	@ (8003050 <TIM2_IRQHandler+0x48>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <TIM2_IRQHandler+0x48>)
 800301c:	701a      	strb	r2, [r3, #0]
if(refresh>1)
 800301e:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <TIM2_IRQHandler+0x48>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d902      	bls.n	800302c <TIM2_IRQHandler+0x24>
{
	refresh=0;
 8003026:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <TIM2_IRQHandler+0x48>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
}

obs_refresh++;
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <TIM2_IRQHandler+0x4c>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	b2da      	uxtb	r2, r3
 8003034:	4b07      	ldr	r3, [pc, #28]	@ (8003054 <TIM2_IRQHandler+0x4c>)
 8003036:	701a      	strb	r2, [r3, #0]
if(obs_refresh>3)
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <TIM2_IRQHandler+0x4c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d902      	bls.n	8003046 <TIM2_IRQHandler+0x3e>
{
	obs_refresh=0;
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <TIM2_IRQHandler+0x4c>)
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
}


  /* USER CODE END TIM2_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200000bc 	.word	0x200000bc
 8003050:	2000010c 	.word	0x2000010c
 8003054:	2000010d 	.word	0x2000010d

08003058 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800305c:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <SystemInit+0x20>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003062:	4a05      	ldr	r2, [pc, #20]	@ (8003078 <SystemInit+0x20>)
 8003064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800307c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003080:	f7ff ffea 	bl	8003058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003084:	480c      	ldr	r0, [pc, #48]	@ (80030b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003086:	490d      	ldr	r1, [pc, #52]	@ (80030bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003088:	4a0d      	ldr	r2, [pc, #52]	@ (80030c0 <LoopForever+0xe>)
  movs r3, #0
 800308a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800308c:	e002      	b.n	8003094 <LoopCopyDataInit>

0800308e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800308e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003092:	3304      	adds	r3, #4

08003094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003098:	d3f9      	bcc.n	800308e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800309a:	4a0a      	ldr	r2, [pc, #40]	@ (80030c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800309c:	4c0a      	ldr	r4, [pc, #40]	@ (80030c8 <LoopForever+0x16>)
  movs r3, #0
 800309e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a0:	e001      	b.n	80030a6 <LoopFillZerobss>

080030a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a4:	3204      	adds	r2, #4

080030a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030a8:	d3fb      	bcc.n	80030a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030aa:	f003 fd1d 	bl	8006ae8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030ae:	f7ff fd35 	bl	8002b1c <main>

080030b2 <LoopForever>:

LoopForever:
    b LoopForever
 80030b2:	e7fe      	b.n	80030b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80030b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030bc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80030c0:	08006b80 	.word	0x08006b80
  ldr r2, =_sbss
 80030c4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80030c8:	20000114 	.word	0x20000114

080030cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030cc:	e7fe      	b.n	80030cc <ADC1_2_IRQHandler>
	...

080030d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d4:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <HAL_Init+0x28>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a07      	ldr	r2, [pc, #28]	@ (80030f8 <HAL_Init+0x28>)
 80030da:	f043 0310 	orr.w	r3, r3, #16
 80030de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e0:	2003      	movs	r0, #3
 80030e2:	f001 f9eb 	bl	80044bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030e6:	200f      	movs	r0, #15
 80030e8:	f000 f808 	bl	80030fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ec:	f7ff fed6 	bl	8002e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40022000 	.word	0x40022000

080030fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003104:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <HAL_InitTick+0x54>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <HAL_InitTick+0x58>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4619      	mov	r1, r3
 800310e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003112:	fbb3 f3f1 	udiv	r3, r3, r1
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	4618      	mov	r0, r3
 800311c:	f001 fa03 	bl	8004526 <HAL_SYSTICK_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e00e      	b.n	8003148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d80a      	bhi.n	8003146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003130:	2200      	movs	r2, #0
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	f001 f9cb 	bl	80044d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800313c:	4a06      	ldr	r2, [pc, #24]	@ (8003158 <HAL_InitTick+0x5c>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	2000000c 	.word	0x2000000c
 8003154:	20000014 	.word	0x20000014
 8003158:	20000010 	.word	0x20000010

0800315c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_IncTick+0x20>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_IncTick+0x24>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4413      	add	r3, r2
 800316c:	4a04      	ldr	r2, [pc, #16]	@ (8003180 <HAL_IncTick+0x24>)
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000014 	.word	0x20000014
 8003180:	20000110 	.word	0x20000110

08003184 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return uwTick;  
 8003188:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <HAL_GetTick+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000110 	.word	0x20000110

0800319c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b09a      	sub	sp, #104	@ 0x68
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e1e3      	b.n	8003584 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d176      	bne.n	80032bc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d152      	bne.n	800327c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff fe77 	bl	8002ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d13b      	bne.n	800327c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 ff6d 	bl	80040e4 <ADC_Disable>
 800320a:	4603      	mov	r3, r0
 800320c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	d12f      	bne.n	800327c <HAL_ADC_Init+0xe0>
 800321c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003220:	2b00      	cmp	r3, #0
 8003222:	d12b      	bne.n	800327c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800322c:	f023 0302 	bic.w	r3, r3, #2
 8003230:	f043 0202 	orr.w	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003246:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003256:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003258:	4b92      	ldr	r3, [pc, #584]	@ (80034a4 <HAL_ADC_Init+0x308>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a92      	ldr	r2, [pc, #584]	@ (80034a8 <HAL_ADC_Init+0x30c>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	0c9a      	lsrs	r2, r3, #18
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800326e:	e002      	b.n	8003276 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	3b01      	subs	r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f9      	bne.n	8003270 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003298:	d110      	bne.n	80032bc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f023 0312 	bic.w	r3, r3, #18
 80032a2:	f043 0210 	orr.w	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	f043 0201 	orr.w	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 8150 	bne.w	800356a <HAL_ADC_Init+0x3ce>
 80032ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f040 814b 	bne.w	800356a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f040 8143 	bne.w	800356a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80032ec:	f043 0202 	orr.w	r2, r3, #2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032fc:	d004      	beq.n	8003308 <HAL_ADC_Init+0x16c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a6a      	ldr	r2, [pc, #424]	@ (80034ac <HAL_ADC_Init+0x310>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d101      	bne.n	800330c <HAL_ADC_Init+0x170>
 8003308:	4b69      	ldr	r3, [pc, #420]	@ (80034b0 <HAL_ADC_Init+0x314>)
 800330a:	e000      	b.n	800330e <HAL_ADC_Init+0x172>
 800330c:	4b69      	ldr	r3, [pc, #420]	@ (80034b4 <HAL_ADC_Init+0x318>)
 800330e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003318:	d102      	bne.n	8003320 <HAL_ADC_Init+0x184>
 800331a:	4b64      	ldr	r3, [pc, #400]	@ (80034ac <HAL_ADC_Init+0x310>)
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e01a      	b.n	8003356 <HAL_ADC_Init+0x1ba>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a61      	ldr	r2, [pc, #388]	@ (80034ac <HAL_ADC_Init+0x310>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d103      	bne.n	8003332 <HAL_ADC_Init+0x196>
 800332a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e011      	b.n	8003356 <HAL_ADC_Init+0x1ba>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a60      	ldr	r2, [pc, #384]	@ (80034b8 <HAL_ADC_Init+0x31c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d102      	bne.n	8003342 <HAL_ADC_Init+0x1a6>
 800333c:	4b5f      	ldr	r3, [pc, #380]	@ (80034bc <HAL_ADC_Init+0x320>)
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	e009      	b.n	8003356 <HAL_ADC_Init+0x1ba>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a5d      	ldr	r2, [pc, #372]	@ (80034bc <HAL_ADC_Init+0x320>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d102      	bne.n	8003352 <HAL_ADC_Init+0x1b6>
 800334c:	4b5a      	ldr	r3, [pc, #360]	@ (80034b8 <HAL_ADC_Init+0x31c>)
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e001      	b.n	8003356 <HAL_ADC_Init+0x1ba>
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d108      	bne.n	8003376 <HAL_ADC_Init+0x1da>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_ADC_Init+0x1da>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_ADC_Init+0x1dc>
 8003376:	2300      	movs	r3, #0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11c      	bne.n	80033b6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800337c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800337e:	2b00      	cmp	r3, #0
 8003380:	d010      	beq.n	80033a4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d107      	bne.n	800339e <HAL_ADC_Init+0x202>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_ADC_Init+0x202>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_ADC_Init+0x204>
 800339e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d108      	bne.n	80033b6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80033a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033b4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7e5b      	ldrb	r3, [r3, #25]
 80033ba:	035b      	lsls	r3, r3, #13
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033c0:	2a01      	cmp	r2, #1
 80033c2:	d002      	beq.n	80033ca <HAL_ADC_Init+0x22e>
 80033c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033c8:	e000      	b.n	80033cc <HAL_ADC_Init+0x230>
 80033ca:	2200      	movs	r2, #0
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4313      	orrs	r3, r2
 80033da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80033dc:	4313      	orrs	r3, r2
 80033de:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d11b      	bne.n	8003422 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	7e5b      	ldrb	r3, [r3, #25]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	3b01      	subs	r3, #1
 80033f8:	045a      	lsls	r2, r3, #17
 80033fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003402:	663b      	str	r3, [r7, #96]	@ 0x60
 8003404:	e00d      	b.n	8003422 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003426:	2b01      	cmp	r3, #1
 8003428:	d054      	beq.n	80034d4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a22      	ldr	r2, [pc, #136]	@ (80034b8 <HAL_ADC_Init+0x31c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d004      	beq.n	800343e <HAL_ADC_Init+0x2a2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a20      	ldr	r2, [pc, #128]	@ (80034bc <HAL_ADC_Init+0x320>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d140      	bne.n	80034c0 <HAL_ADC_Init+0x324>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003442:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8003446:	d02a      	beq.n	800349e <HAL_ADC_Init+0x302>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003450:	d022      	beq.n	8003498 <HAL_ADC_Init+0x2fc>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003456:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800345a:	d01a      	beq.n	8003492 <HAL_ADC_Init+0x2f6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003460:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8003464:	d012      	beq.n	800348c <HAL_ADC_Init+0x2f0>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 800346e:	d00a      	beq.n	8003486 <HAL_ADC_Init+0x2ea>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003474:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8003478:	d002      	beq.n	8003480 <HAL_ADC_Init+0x2e4>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347e:	e023      	b.n	80034c8 <HAL_ADC_Init+0x32c>
 8003480:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003484:	e020      	b.n	80034c8 <HAL_ADC_Init+0x32c>
 8003486:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800348a:	e01d      	b.n	80034c8 <HAL_ADC_Init+0x32c>
 800348c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003490:	e01a      	b.n	80034c8 <HAL_ADC_Init+0x32c>
 8003492:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003496:	e017      	b.n	80034c8 <HAL_ADC_Init+0x32c>
 8003498:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 800349c:	e014      	b.n	80034c8 <HAL_ADC_Init+0x32c>
 800349e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80034a2:	e011      	b.n	80034c8 <HAL_ADC_Init+0x32c>
 80034a4:	2000000c 	.word	0x2000000c
 80034a8:	431bde83 	.word	0x431bde83
 80034ac:	50000100 	.word	0x50000100
 80034b0:	50000300 	.word	0x50000300
 80034b4:	50000700 	.word	0x50000700
 80034b8:	50000400 	.word	0x50000400
 80034bc:	50000500 	.word	0x50000500
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034cc:	4313      	orrs	r3, r2
 80034ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80034d0:	4313      	orrs	r3, r2
 80034d2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d114      	bne.n	800350c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034f0:	f023 0302 	bic.w	r3, r3, #2
 80034f4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	7e1b      	ldrb	r3, [r3, #24]
 80034fa:	039a      	lsls	r2, r3, #14
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4313      	orrs	r3, r2
 8003506:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003508:	4313      	orrs	r3, r2
 800350a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <HAL_ADC_Init+0x3f0>)
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800351c:	430b      	orrs	r3, r1
 800351e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d10c      	bne.n	8003542 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	f023 010f 	bic.w	r1, r3, #15
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	1e5a      	subs	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003540:	e007      	b.n	8003552 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 020f 	bic.w	r2, r2, #15
 8003550:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	f023 0303 	bic.w	r3, r3, #3
 8003560:	f043 0201 	orr.w	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40
 8003568:	e00a      	b.n	8003580 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f023 0312 	bic.w	r3, r3, #18
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800357a:	2301      	movs	r3, #1
 800357c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003580:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003584:	4618      	mov	r0, r3
 8003586:	3768      	adds	r7, #104	@ 0x68
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	fff0c007 	.word	0xfff0c007

08003590 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f040 80f9 	bne.w	800379e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_ADC_Start+0x2a>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e0f4      	b.n	80037a4 <HAL_ADC_Start+0x214>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fd2a 	bl	800401c <ADC_Enable>
 80035c8:	4603      	mov	r3, r0
 80035ca:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 80e0 	bne.w	8003794 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035f0:	d004      	beq.n	80035fc <HAL_ADC_Start+0x6c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a6d      	ldr	r2, [pc, #436]	@ (80037ac <HAL_ADC_Start+0x21c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d106      	bne.n	800360a <HAL_ADC_Start+0x7a>
 80035fc:	4b6c      	ldr	r3, [pc, #432]	@ (80037b0 <HAL_ADC_Start+0x220>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2b00      	cmp	r3, #0
 8003606:	d010      	beq.n	800362a <HAL_ADC_Start+0x9a>
 8003608:	e005      	b.n	8003616 <HAL_ADC_Start+0x86>
 800360a:	4b6a      	ldr	r3, [pc, #424]	@ (80037b4 <HAL_ADC_Start+0x224>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_ADC_Start+0x9a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800361e:	d004      	beq.n	800362a <HAL_ADC_Start+0x9a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a64      	ldr	r2, [pc, #400]	@ (80037b8 <HAL_ADC_Start+0x228>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d115      	bne.n	8003656 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d036      	beq.n	80036b2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800364c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003654:	e02d      	b.n	80036b2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800366a:	d004      	beq.n	8003676 <HAL_ADC_Start+0xe6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a4e      	ldr	r2, [pc, #312]	@ (80037ac <HAL_ADC_Start+0x21c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10a      	bne.n	800368c <HAL_ADC_Start+0xfc>
 8003676:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e008      	b.n	800369e <HAL_ADC_Start+0x10e>
 800368c:	4b4a      	ldr	r3, [pc, #296]	@ (80037b8 <HAL_ADC_Start+0x228>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036be:	d106      	bne.n	80036ce <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c4:	f023 0206 	bic.w	r2, r3, #6
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80036cc:	e002      	b.n	80036d4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	221c      	movs	r2, #28
 80036e2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ec:	d004      	beq.n	80036f8 <HAL_ADC_Start+0x168>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2e      	ldr	r2, [pc, #184]	@ (80037ac <HAL_ADC_Start+0x21c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d106      	bne.n	8003706 <HAL_ADC_Start+0x176>
 80036f8:	4b2d      	ldr	r3, [pc, #180]	@ (80037b0 <HAL_ADC_Start+0x220>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	2b00      	cmp	r3, #0
 8003702:	d03e      	beq.n	8003782 <HAL_ADC_Start+0x1f2>
 8003704:	e005      	b.n	8003712 <HAL_ADC_Start+0x182>
 8003706:	4b2b      	ldr	r3, [pc, #172]	@ (80037b4 <HAL_ADC_Start+0x224>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	2b00      	cmp	r3, #0
 8003710:	d037      	beq.n	8003782 <HAL_ADC_Start+0x1f2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800371a:	d004      	beq.n	8003726 <HAL_ADC_Start+0x196>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a22      	ldr	r2, [pc, #136]	@ (80037ac <HAL_ADC_Start+0x21c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d106      	bne.n	8003734 <HAL_ADC_Start+0x1a4>
 8003726:	4b22      	ldr	r3, [pc, #136]	@ (80037b0 <HAL_ADC_Start+0x220>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2b05      	cmp	r3, #5
 8003730:	d027      	beq.n	8003782 <HAL_ADC_Start+0x1f2>
 8003732:	e005      	b.n	8003740 <HAL_ADC_Start+0x1b0>
 8003734:	4b1f      	ldr	r3, [pc, #124]	@ (80037b4 <HAL_ADC_Start+0x224>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2b05      	cmp	r3, #5
 800373e:	d020      	beq.n	8003782 <HAL_ADC_Start+0x1f2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003748:	d004      	beq.n	8003754 <HAL_ADC_Start+0x1c4>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a17      	ldr	r2, [pc, #92]	@ (80037ac <HAL_ADC_Start+0x21c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d106      	bne.n	8003762 <HAL_ADC_Start+0x1d2>
 8003754:	4b16      	ldr	r3, [pc, #88]	@ (80037b0 <HAL_ADC_Start+0x220>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	2b09      	cmp	r3, #9
 800375e:	d010      	beq.n	8003782 <HAL_ADC_Start+0x1f2>
 8003760:	e005      	b.n	800376e <HAL_ADC_Start+0x1de>
 8003762:	4b14      	ldr	r3, [pc, #80]	@ (80037b4 <HAL_ADC_Start+0x224>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2b09      	cmp	r3, #9
 800376c:	d009      	beq.n	8003782 <HAL_ADC_Start+0x1f2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003776:	d004      	beq.n	8003782 <HAL_ADC_Start+0x1f2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0e      	ldr	r2, [pc, #56]	@ (80037b8 <HAL_ADC_Start+0x228>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10f      	bne.n	80037a2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0204 	orr.w	r2, r2, #4
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	e006      	b.n	80037a2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800379c:	e001      	b.n	80037a2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	50000100 	.word	0x50000100
 80037b0:	50000300 	.word	0x50000300
 80037b4:	50000700 	.word	0x50000700
 80037b8:	50000400 	.word	0x50000400

080037bc <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_Stop+0x1a>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e023      	b.n	800381e <HAL_ADC_Stop+0x62>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80037de:	216c      	movs	r1, #108	@ 0x6c
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fce5 	bl	80041b0 <ADC_ConversionStop>
 80037e6:	4603      	mov	r3, r0
 80037e8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d111      	bne.n	8003814 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fc77 	bl	80040e4 <ADC_Disable>
 80037f6:	4603      	mov	r3, r0
 80037f8:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	f043 0201 	orr.w	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	2b08      	cmp	r3, #8
 800383c:	d102      	bne.n	8003844 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800383e:	2308      	movs	r3, #8
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e03a      	b.n	80038ba <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800384c:	d004      	beq.n	8003858 <HAL_ADC_PollForConversion+0x30>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a72      	ldr	r2, [pc, #456]	@ (8003a1c <HAL_ADC_PollForConversion+0x1f4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <HAL_ADC_PollForConversion+0x34>
 8003858:	4b71      	ldr	r3, [pc, #452]	@ (8003a20 <HAL_ADC_PollForConversion+0x1f8>)
 800385a:	e000      	b.n	800385e <HAL_ADC_PollForConversion+0x36>
 800385c:	4b71      	ldr	r3, [pc, #452]	@ (8003a24 <HAL_ADC_PollForConversion+0x1fc>)
 800385e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	2b00      	cmp	r3, #0
 800386a:	d112      	bne.n	8003892 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d11d      	bne.n	80038b6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	f043 0220 	orr.w	r2, r3, #32
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0bf      	b.n	8003a12 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0ad      	b.n	8003a12 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80038b6:	230c      	movs	r3, #12
 80038b8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c2:	d004      	beq.n	80038ce <HAL_ADC_PollForConversion+0xa6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a54      	ldr	r2, [pc, #336]	@ (8003a1c <HAL_ADC_PollForConversion+0x1f4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d106      	bne.n	80038dc <HAL_ADC_PollForConversion+0xb4>
 80038ce:	4b54      	ldr	r3, [pc, #336]	@ (8003a20 <HAL_ADC_PollForConversion+0x1f8>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d010      	beq.n	80038fc <HAL_ADC_PollForConversion+0xd4>
 80038da:	e005      	b.n	80038e8 <HAL_ADC_PollForConversion+0xc0>
 80038dc:	4b51      	ldr	r3, [pc, #324]	@ (8003a24 <HAL_ADC_PollForConversion+0x1fc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_ADC_PollForConversion+0xd4>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f0:	d004      	beq.n	80038fc <HAL_ADC_PollForConversion+0xd4>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003a28 <HAL_ADC_PollForConversion+0x200>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d104      	bne.n	8003906 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	e00f      	b.n	8003926 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800390e:	d004      	beq.n	800391a <HAL_ADC_PollForConversion+0xf2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a41      	ldr	r2, [pc, #260]	@ (8003a1c <HAL_ADC_PollForConversion+0x1f4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d102      	bne.n	8003920 <HAL_ADC_PollForConversion+0xf8>
 800391a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800391e:	e000      	b.n	8003922 <HAL_ADC_PollForConversion+0xfa>
 8003920:	4b41      	ldr	r3, [pc, #260]	@ (8003a28 <HAL_ADC_PollForConversion+0x200>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003926:	f7ff fc2d 	bl	8003184 <HAL_GetTick>
 800392a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800392c:	e021      	b.n	8003972 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d01d      	beq.n	8003972 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_ADC_PollForConversion+0x124>
 800393c:	f7ff fc22 	bl	8003184 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d212      	bcs.n	8003972 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e04f      	b.n	8003a12 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0d6      	beq.n	800392e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003996:	2b00      	cmp	r3, #0
 8003998:	d131      	bne.n	80039fe <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d12c      	bne.n	80039fe <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d125      	bne.n	80039fe <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d112      	bne.n	80039e6 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d112      	bne.n	80039fe <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	f043 0201 	orr.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80039e4:	e00b      	b.n	80039fe <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f043 0220 	orr.w	r2, r3, #32
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	50000100 	.word	0x50000100
 8003a20:	50000300 	.word	0x50000300
 8003a24:	50000700 	.word	0x50000700
 8003a28:	50000400 	.word	0x50000400

08003a2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b09b      	sub	sp, #108	@ 0x6c
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x22>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e2c8      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x5b4>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f040 82ac 	bne.w	8003fda <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d81c      	bhi.n	8003ac4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	231f      	movs	r3, #31
 8003aa0:	4093      	lsls	r3, r2
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	4019      	ands	r1, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ac2:	e063      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b09      	cmp	r3, #9
 8003aca:	d81e      	bhi.n	8003b0a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4413      	add	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	3b1e      	subs	r3, #30
 8003ae0:	221f      	movs	r2, #31
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	4019      	ands	r1, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4413      	add	r3, r2
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	3b1e      	subs	r3, #30
 8003afc:	fa00 f203 	lsl.w	r2, r0, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b08:	e040      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b0e      	cmp	r3, #14
 8003b10:	d81e      	bhi.n	8003b50 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4413      	add	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	3b3c      	subs	r3, #60	@ 0x3c
 8003b26:	221f      	movs	r2, #31
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	4019      	ands	r1, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4413      	add	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	3b3c      	subs	r3, #60	@ 0x3c
 8003b42:	fa00 f203 	lsl.w	r2, r0, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b4e:	e01d      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	4413      	add	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	3b5a      	subs	r3, #90	@ 0x5a
 8003b64:	221f      	movs	r2, #31
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	4019      	ands	r1, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	3b5a      	subs	r3, #90	@ 0x5a
 8003b80:	fa00 f203 	lsl.w	r2, r0, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 80e5 	bne.w	8003d66 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b09      	cmp	r3, #9
 8003ba2:	d91c      	bls.n	8003bde <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6999      	ldr	r1, [r3, #24]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3b1e      	subs	r3, #30
 8003bb6:	2207      	movs	r2, #7
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	4019      	ands	r1, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6898      	ldr	r0, [r3, #8]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	4413      	add	r3, r2
 8003bce:	3b1e      	subs	r3, #30
 8003bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	619a      	str	r2, [r3, #24]
 8003bdc:	e019      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6959      	ldr	r1, [r3, #20]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	2207      	movs	r2, #7
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	4019      	ands	r1, r3
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	6898      	ldr	r0, [r3, #8]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4413      	add	r3, r2
 8003c06:	fa00 f203 	lsl.w	r2, r0, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	08db      	lsrs	r3, r3, #3
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d84f      	bhi.n	8003cd4 <HAL_ADC_ConfigChannel+0x28c>
 8003c34:	a201      	add	r2, pc, #4	@ (adr r2, 8003c3c <HAL_ADC_ConfigChannel+0x1f4>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c4d 	.word	0x08003c4d
 8003c40:	08003c6f 	.word	0x08003c6f
 8003c44:	08003c91 	.word	0x08003c91
 8003c48:	08003cb3 	.word	0x08003cb3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c52:	4b99      	ldr	r3, [pc, #612]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x470>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	0691      	lsls	r1, r2, #26
 8003c5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003c6a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003c6c:	e07b      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003c74:	4b90      	ldr	r3, [pc, #576]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x470>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	0691      	lsls	r1, r2, #26
 8003c7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c80:	430a      	orrs	r2, r1
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003c8c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003c8e:	e06a      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003c96:	4b88      	ldr	r3, [pc, #544]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x470>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	0691      	lsls	r1, r2, #26
 8003ca0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003cae:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003cb0:	e059      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003cb8:	4b7f      	ldr	r3, [pc, #508]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x470>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	0691      	lsls	r1, r2, #26
 8003cc2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003cd0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003cd2:	e048      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	069b      	lsls	r3, r3, #26
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d107      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003cf6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	069b      	lsls	r3, r3, #26
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d1a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	069b      	lsls	r3, r3, #26
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d107      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d3e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	069b      	lsls	r3, r3, #26
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d107      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d62:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8003d64:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d108      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x33e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x33e>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x340>
 8003d86:	2300      	movs	r3, #0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f040 8131 	bne.w	8003ff0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d00f      	beq.n	8003db6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43da      	mvns	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	400a      	ands	r2, r1
 8003db0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003db4:	e049      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b09      	cmp	r3, #9
 8003dd6:	d91c      	bls.n	8003e12 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6999      	ldr	r1, [r3, #24]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	4413      	add	r3, r2
 8003de8:	3b1b      	subs	r3, #27
 8003dea:	2207      	movs	r2, #7
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	4019      	ands	r1, r3
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6898      	ldr	r0, [r3, #8]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	3b1b      	subs	r3, #27
 8003e04:	fa00 f203 	lsl.w	r2, r0, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	619a      	str	r2, [r3, #24]
 8003e10:	e01b      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6959      	ldr	r1, [r3, #20]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	4613      	mov	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4413      	add	r3, r2
 8003e24:	2207      	movs	r2, #7
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	4019      	ands	r1, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6898      	ldr	r0, [r3, #8]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	4413      	add	r3, r2
 8003e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e52:	d004      	beq.n	8003e5e <HAL_ADC_ConfigChannel+0x416>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a18      	ldr	r2, [pc, #96]	@ (8003ebc <HAL_ADC_ConfigChannel+0x474>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x41a>
 8003e5e:	4b18      	ldr	r3, [pc, #96]	@ (8003ec0 <HAL_ADC_ConfigChannel+0x478>)
 8003e60:	e000      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x41c>
 8003e62:	4b18      	ldr	r3, [pc, #96]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x47c>)
 8003e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d105      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d015      	beq.n	8003ea6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003e7e:	2b11      	cmp	r3, #17
 8003e80:	d105      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003e82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003e92:	2b12      	cmp	r3, #18
 8003e94:	f040 80ac 	bne.w	8003ff0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 80a5 	bne.w	8003ff0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eae:	d10b      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x480>
 8003eb0:	4b02      	ldr	r3, [pc, #8]	@ (8003ebc <HAL_ADC_ConfigChannel+0x474>)
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e023      	b.n	8003efe <HAL_ADC_ConfigChannel+0x4b6>
 8003eb6:	bf00      	nop
 8003eb8:	83fff000 	.word	0x83fff000
 8003ebc:	50000100 	.word	0x50000100
 8003ec0:	50000300 	.word	0x50000300
 8003ec4:	50000700 	.word	0x50000700
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a4e      	ldr	r2, [pc, #312]	@ (8004008 <HAL_ADC_ConfigChannel+0x5c0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d103      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x492>
 8003ed2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e011      	b.n	8003efe <HAL_ADC_ConfigChannel+0x4b6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a4b      	ldr	r2, [pc, #300]	@ (800400c <HAL_ADC_ConfigChannel+0x5c4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d102      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x4a2>
 8003ee4:	4b4a      	ldr	r3, [pc, #296]	@ (8004010 <HAL_ADC_ConfigChannel+0x5c8>)
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	e009      	b.n	8003efe <HAL_ADC_ConfigChannel+0x4b6>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a48      	ldr	r2, [pc, #288]	@ (8004010 <HAL_ADC_ConfigChannel+0x5c8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d102      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x4b2>
 8003ef4:	4b45      	ldr	r3, [pc, #276]	@ (800400c <HAL_ADC_ConfigChannel+0x5c4>)
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e001      	b.n	8003efe <HAL_ADC_ConfigChannel+0x4b6>
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d108      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x4d6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x4d6>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x4d8>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d150      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003f24:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d010      	beq.n	8003f4c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d107      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x4fe>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x4fe>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x500>
 8003f46:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d13c      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d11d      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x548>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f5c:	d118      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f68:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004014 <HAL_ADC_ConfigChannel+0x5cc>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004018 <HAL_ADC_ConfigChannel+0x5d0>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	0c9a      	lsrs	r2, r3, #18
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f80:	e002      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f9      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f8e:	e02e      	b.n	8003fee <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b11      	cmp	r3, #17
 8003f96:	d10b      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x568>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fa0:	d106      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003fa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fac:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003fae:	e01e      	b.n	8003fee <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b12      	cmp	r3, #18
 8003fb6:	d11a      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003fb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003fc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fc2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003fc4:	e013      	b.n	8003fee <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003fd8:	e00a      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	f043 0220 	orr.w	r2, r3, #32
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003fec:	e000      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003fee:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003ff8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	376c      	adds	r7, #108	@ 0x6c
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	50000100 	.word	0x50000100
 800400c:	50000400 	.word	0x50000400
 8004010:	50000500 	.word	0x50000500
 8004014:	2000000c 	.word	0x2000000c
 8004018:	431bde83 	.word	0x431bde83

0800401c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b01      	cmp	r3, #1
 8004034:	d108      	bne.n	8004048 <ADC_Enable+0x2c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <ADC_Enable+0x2c>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <ADC_Enable+0x2e>
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d143      	bne.n	80040d6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	4b22      	ldr	r3, [pc, #136]	@ (80040e0 <ADC_Enable+0xc4>)
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00d      	beq.n	8004078 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	f043 0210 	orr.w	r2, r3, #16
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406c:	f043 0201 	orr.w	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e02f      	b.n	80040d8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004088:	f7ff f87c 	bl	8003184 <HAL_GetTick>
 800408c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800408e:	e01b      	b.n	80040c8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004090:	f7ff f878 	bl	8003184 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d914      	bls.n	80040c8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d00d      	beq.n	80040c8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	f043 0210 	orr.w	r2, r3, #16
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040bc:	f043 0201 	orr.w	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e007      	b.n	80040d8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d1dc      	bne.n	8004090 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	8000003f 	.word	0x8000003f

080040e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d108      	bne.n	8004110 <ADC_Disable+0x2c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <ADC_Disable+0x2c>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <ADC_Disable+0x2e>
 8004110:	2300      	movs	r3, #0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d047      	beq.n	80041a6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 030d 	and.w	r3, r3, #13
 8004120:	2b01      	cmp	r3, #1
 8004122:	d10f      	bne.n	8004144 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0202 	orr.w	r2, r2, #2
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2203      	movs	r2, #3
 800413a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800413c:	f7ff f822 	bl	8003184 <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004142:	e029      	b.n	8004198 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	f043 0210 	orr.w	r2, r3, #16
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004154:	f043 0201 	orr.w	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e023      	b.n	80041a8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004160:	f7ff f810 	bl	8003184 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d914      	bls.n	8004198 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d10d      	bne.n	8004198 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	f043 0210 	orr.w	r2, r3, #16
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418c:	f043 0201 	orr.w	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e007      	b.n	80041a8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d0dc      	beq.n	8004160 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 809b 	beq.w	800430c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041e4:	d12a      	bne.n	800423c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d126      	bne.n	800423c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d122      	bne.n	800423c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80041f6:	230c      	movs	r3, #12
 80041f8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80041fa:	e014      	b.n	8004226 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4a46      	ldr	r2, [pc, #280]	@ (8004318 <ADC_ConversionStop+0x168>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d90d      	bls.n	8004220 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	f043 0210 	orr.w	r2, r3, #16
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004214:	f043 0201 	orr.w	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e076      	b.n	800430e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3301      	adds	r3, #1
 8004224:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004230:	2b40      	cmp	r3, #64	@ 0x40
 8004232:	d1e3      	bne.n	80041fc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2240      	movs	r2, #64	@ 0x40
 800423a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b60      	cmp	r3, #96	@ 0x60
 8004240:	d015      	beq.n	800426e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d10e      	bne.n	800426e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800425a:	2b00      	cmp	r3, #0
 800425c:	d107      	bne.n	800426e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0210 	orr.w	r2, r2, #16
 800426c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b0c      	cmp	r3, #12
 8004272:	d015      	beq.n	80042a0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b08      	cmp	r3, #8
 8004280:	d10e      	bne.n	80042a0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0220 	orr.w	r2, r2, #32
 800429e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b60      	cmp	r3, #96	@ 0x60
 80042a4:	d005      	beq.n	80042b2 <ADC_ConversionStop+0x102>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b6c      	cmp	r3, #108	@ 0x6c
 80042aa:	d105      	bne.n	80042b8 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80042ac:	230c      	movs	r3, #12
 80042ae:	617b      	str	r3, [r7, #20]
        break;
 80042b0:	e005      	b.n	80042be <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80042b2:	2308      	movs	r3, #8
 80042b4:	617b      	str	r3, [r7, #20]
        break;
 80042b6:	e002      	b.n	80042be <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80042b8:	2304      	movs	r3, #4
 80042ba:	617b      	str	r3, [r7, #20]
        break;
 80042bc:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80042be:	f7fe ff61 	bl	8003184 <HAL_GetTick>
 80042c2:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80042c4:	e01b      	b.n	80042fe <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80042c6:	f7fe ff5d 	bl	8003184 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b0b      	cmp	r3, #11
 80042d2:	d914      	bls.n	80042fe <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00d      	beq.n	80042fe <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	f043 0210 	orr.w	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	f043 0201 	orr.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e007      	b.n	800430e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1dc      	bne.n	80042c6 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	000993ff 	.word	0x000993ff

0800431c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800432c:	4b0c      	ldr	r3, [pc, #48]	@ (8004360 <__NVIC_SetPriorityGrouping+0x44>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004338:	4013      	ands	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004344:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800434c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800434e:	4a04      	ldr	r2, [pc, #16]	@ (8004360 <__NVIC_SetPriorityGrouping+0x44>)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	60d3      	str	r3, [r2, #12]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004368:	4b04      	ldr	r3, [pc, #16]	@ (800437c <__NVIC_GetPriorityGrouping+0x18>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	0a1b      	lsrs	r3, r3, #8
 800436e:	f003 0307 	and.w	r3, r3, #7
}
 8004372:	4618      	mov	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	e000ed00 	.word	0xe000ed00

08004380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	2b00      	cmp	r3, #0
 8004390:	db0b      	blt.n	80043aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	f003 021f 	and.w	r2, r3, #31
 8004398:	4907      	ldr	r1, [pc, #28]	@ (80043b8 <__NVIC_EnableIRQ+0x38>)
 800439a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	2001      	movs	r0, #1
 80043a2:	fa00 f202 	lsl.w	r2, r0, r2
 80043a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	e000e100 	.word	0xe000e100

080043bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db0a      	blt.n	80043e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	490c      	ldr	r1, [pc, #48]	@ (8004408 <__NVIC_SetPriority+0x4c>)
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	0112      	lsls	r2, r2, #4
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	440b      	add	r3, r1
 80043e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e4:	e00a      	b.n	80043fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4908      	ldr	r1, [pc, #32]	@ (800440c <__NVIC_SetPriority+0x50>)
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	3b04      	subs	r3, #4
 80043f4:	0112      	lsls	r2, r2, #4
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	440b      	add	r3, r1
 80043fa:	761a      	strb	r2, [r3, #24]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000e100 	.word	0xe000e100
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	@ 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f1c3 0307 	rsb	r3, r3, #7
 800442a:	2b04      	cmp	r3, #4
 800442c:	bf28      	it	cs
 800442e:	2304      	movcs	r3, #4
 8004430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	3304      	adds	r3, #4
 8004436:	2b06      	cmp	r3, #6
 8004438:	d902      	bls.n	8004440 <NVIC_EncodePriority+0x30>
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3b03      	subs	r3, #3
 800443e:	e000      	b.n	8004442 <NVIC_EncodePriority+0x32>
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004444:	f04f 32ff 	mov.w	r2, #4294967295
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43da      	mvns	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	401a      	ands	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004458:	f04f 31ff 	mov.w	r1, #4294967295
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	43d9      	mvns	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004468:	4313      	orrs	r3, r2
         );
}
 800446a:	4618      	mov	r0, r3
 800446c:	3724      	adds	r7, #36	@ 0x24
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3b01      	subs	r3, #1
 8004484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004488:	d301      	bcc.n	800448e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800448a:	2301      	movs	r3, #1
 800448c:	e00f      	b.n	80044ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800448e:	4a0a      	ldr	r2, [pc, #40]	@ (80044b8 <SysTick_Config+0x40>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3b01      	subs	r3, #1
 8004494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004496:	210f      	movs	r1, #15
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	f7ff ff8e 	bl	80043bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044a0:	4b05      	ldr	r3, [pc, #20]	@ (80044b8 <SysTick_Config+0x40>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044a6:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <SysTick_Config+0x40>)
 80044a8:	2207      	movs	r2, #7
 80044aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	e000e010 	.word	0xe000e010

080044bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff29 	bl	800431c <__NVIC_SetPriorityGrouping>
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	4603      	mov	r3, r0
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
 80044de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044e4:	f7ff ff3e 	bl	8004364 <__NVIC_GetPriorityGrouping>
 80044e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	6978      	ldr	r0, [r7, #20]
 80044f0:	f7ff ff8e 	bl	8004410 <NVIC_EncodePriority>
 80044f4:	4602      	mov	r2, r0
 80044f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fa:	4611      	mov	r1, r2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff ff5d 	bl	80043bc <__NVIC_SetPriority>
}
 8004502:	bf00      	nop
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	4603      	mov	r3, r0
 8004512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff ff31 	bl	8004380 <__NVIC_EnableIRQ>
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff ffa2 	bl	8004478 <SysTick_Config>
 8004534:	4603      	mov	r3, r0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b04      	cmp	r3, #4
 800454c:	d106      	bne.n	800455c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800454e:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a08      	ldr	r2, [pc, #32]	@ (8004574 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004554:	f043 0304 	orr.w	r3, r3, #4
 8004558:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800455a:	e005      	b.n	8004568 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800455c:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a04      	ldr	r2, [pc, #16]	@ (8004574 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004562:	f023 0304 	bic.w	r3, r3, #4
 8004566:	6013      	str	r3, [r2, #0]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000e010 	.word	0xe000e010

08004578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004586:	e160      	b.n	800484a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	2101      	movs	r1, #1
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	4013      	ands	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 8152 	beq.w	8004844 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d005      	beq.n	80045b8 <HAL_GPIO_Init+0x40>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d130      	bne.n	800461a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	2203      	movs	r2, #3
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4013      	ands	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045ee:	2201      	movs	r2, #1
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f003 0201 	and.w	r2, r3, #1
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b03      	cmp	r3, #3
 8004624:	d017      	beq.n	8004656 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	2203      	movs	r2, #3
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4013      	ands	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d123      	bne.n	80046aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	08da      	lsrs	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3208      	adds	r2, #8
 800466a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	220f      	movs	r2, #15
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4013      	ands	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	08da      	lsrs	r2, r3, #3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3208      	adds	r2, #8
 80046a4:	6939      	ldr	r1, [r7, #16]
 80046a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	2203      	movs	r2, #3
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0203 	and.w	r2, r3, #3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80ac 	beq.w	8004844 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004868 <HAL_GPIO_Init+0x2f0>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004868 <HAL_GPIO_Init+0x2f0>)
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6193      	str	r3, [r2, #24]
 80046f8:	4b5b      	ldr	r3, [pc, #364]	@ (8004868 <HAL_GPIO_Init+0x2f0>)
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004704:	4a59      	ldr	r2, [pc, #356]	@ (800486c <HAL_GPIO_Init+0x2f4>)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	089b      	lsrs	r3, r3, #2
 800470a:	3302      	adds	r3, #2
 800470c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	220f      	movs	r2, #15
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800472e:	d025      	beq.n	800477c <HAL_GPIO_Init+0x204>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a4f      	ldr	r2, [pc, #316]	@ (8004870 <HAL_GPIO_Init+0x2f8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d01f      	beq.n	8004778 <HAL_GPIO_Init+0x200>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a4e      	ldr	r2, [pc, #312]	@ (8004874 <HAL_GPIO_Init+0x2fc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d019      	beq.n	8004774 <HAL_GPIO_Init+0x1fc>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a4d      	ldr	r2, [pc, #308]	@ (8004878 <HAL_GPIO_Init+0x300>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d013      	beq.n	8004770 <HAL_GPIO_Init+0x1f8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a4c      	ldr	r2, [pc, #304]	@ (800487c <HAL_GPIO_Init+0x304>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00d      	beq.n	800476c <HAL_GPIO_Init+0x1f4>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a4b      	ldr	r2, [pc, #300]	@ (8004880 <HAL_GPIO_Init+0x308>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d007      	beq.n	8004768 <HAL_GPIO_Init+0x1f0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a4a      	ldr	r2, [pc, #296]	@ (8004884 <HAL_GPIO_Init+0x30c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d101      	bne.n	8004764 <HAL_GPIO_Init+0x1ec>
 8004760:	2306      	movs	r3, #6
 8004762:	e00c      	b.n	800477e <HAL_GPIO_Init+0x206>
 8004764:	2307      	movs	r3, #7
 8004766:	e00a      	b.n	800477e <HAL_GPIO_Init+0x206>
 8004768:	2305      	movs	r3, #5
 800476a:	e008      	b.n	800477e <HAL_GPIO_Init+0x206>
 800476c:	2304      	movs	r3, #4
 800476e:	e006      	b.n	800477e <HAL_GPIO_Init+0x206>
 8004770:	2303      	movs	r3, #3
 8004772:	e004      	b.n	800477e <HAL_GPIO_Init+0x206>
 8004774:	2302      	movs	r3, #2
 8004776:	e002      	b.n	800477e <HAL_GPIO_Init+0x206>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <HAL_GPIO_Init+0x206>
 800477c:	2300      	movs	r3, #0
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	f002 0203 	and.w	r2, r2, #3
 8004784:	0092      	lsls	r2, r2, #2
 8004786:	4093      	lsls	r3, r2
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800478e:	4937      	ldr	r1, [pc, #220]	@ (800486c <HAL_GPIO_Init+0x2f4>)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	3302      	adds	r3, #2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800479c:	4b3a      	ldr	r3, [pc, #232]	@ (8004888 <HAL_GPIO_Init+0x310>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80047c0:	4a31      	ldr	r2, [pc, #196]	@ (8004888 <HAL_GPIO_Init+0x310>)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047c6:	4b30      	ldr	r3, [pc, #192]	@ (8004888 <HAL_GPIO_Init+0x310>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80047ea:	4a27      	ldr	r2, [pc, #156]	@ (8004888 <HAL_GPIO_Init+0x310>)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047f0:	4b25      	ldr	r3, [pc, #148]	@ (8004888 <HAL_GPIO_Init+0x310>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004814:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <HAL_GPIO_Init+0x310>)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800481a:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <HAL_GPIO_Init+0x310>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	43db      	mvns	r3, r3
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4013      	ands	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800483e:	4a12      	ldr	r2, [pc, #72]	@ (8004888 <HAL_GPIO_Init+0x310>)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3301      	adds	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	f47f ae97 	bne.w	8004588 <HAL_GPIO_Init+0x10>
  }
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	40021000 	.word	0x40021000
 800486c:	40010000 	.word	0x40010000
 8004870:	48000400 	.word	0x48000400
 8004874:	48000800 	.word	0x48000800
 8004878:	48000c00 	.word	0x48000c00
 800487c:	48001000 	.word	0x48001000
 8004880:	48001400 	.word	0x48001400
 8004884:	48001800 	.word	0x48001800
 8004888:	40010400 	.word	0x40010400

0800488c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	887b      	ldrh	r3, [r7, #2]
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
 80048a8:	e001      	b.n	80048ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
 80048c8:	4613      	mov	r3, r2
 80048ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048cc:	787b      	ldrb	r3, [r7, #1]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048d8:	e002      	b.n	80048e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048da:	887a      	ldrh	r2, [r7, #2]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048fc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004902:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d102      	bne.n	8004912 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f001 b83a 	b.w	8005986 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004912:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004916:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 816f 	beq.w	8004c06 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004928:	4bb5      	ldr	r3, [pc, #724]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 030c 	and.w	r3, r3, #12
 8004930:	2b04      	cmp	r3, #4
 8004932:	d00c      	beq.n	800494e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004934:	4bb2      	ldr	r3, [pc, #712]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	2b08      	cmp	r3, #8
 800493e:	d15c      	bne.n	80049fa <HAL_RCC_OscConfig+0x10e>
 8004940:	4baf      	ldr	r3, [pc, #700]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800494c:	d155      	bne.n	80049fa <HAL_RCC_OscConfig+0x10e>
 800494e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004952:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800495a:	fa93 f3a3 	rbit	r3, r3
 800495e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004962:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d102      	bne.n	8004980 <HAL_RCC_OscConfig+0x94>
 800497a:	4ba1      	ldr	r3, [pc, #644]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	e015      	b.n	80049ac <HAL_RCC_OscConfig+0xc0>
 8004980:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004984:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004988:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800498c:	fa93 f3a3 	rbit	r3, r3
 8004990:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8004994:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004998:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800499c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80049a8:	4b95      	ldr	r3, [pc, #596]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049b0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80049b4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80049b8:	fa92 f2a2 	rbit	r2, r2
 80049bc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80049c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80049c4:	fab2 f282 	clz	r2, r2
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	f042 0220 	orr.w	r2, r2, #32
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	f002 021f 	and.w	r2, r2, #31
 80049d4:	2101      	movs	r1, #1
 80049d6:	fa01 f202 	lsl.w	r2, r1, r2
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8111 	beq.w	8004c04 <HAL_RCC_OscConfig+0x318>
 80049e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 8108 	bne.w	8004c04 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f000 bfc6 	b.w	8005986 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a0a:	d106      	bne.n	8004a1a <HAL_RCC_OscConfig+0x12e>
 8004a0c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a7b      	ldr	r2, [pc, #492]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	e036      	b.n	8004a88 <HAL_RCC_OscConfig+0x19c>
 8004a1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x158>
 8004a2a:	4b75      	ldr	r3, [pc, #468]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a74      	ldr	r2, [pc, #464]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	4b72      	ldr	r3, [pc, #456]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a71      	ldr	r2, [pc, #452]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e021      	b.n	8004a88 <HAL_RCC_OscConfig+0x19c>
 8004a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x184>
 8004a56:	4b6a      	ldr	r3, [pc, #424]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a69      	ldr	r2, [pc, #420]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	4b67      	ldr	r3, [pc, #412]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a66      	ldr	r2, [pc, #408]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e00b      	b.n	8004a88 <HAL_RCC_OscConfig+0x19c>
 8004a70:	4b63      	ldr	r3, [pc, #396]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a62      	ldr	r2, [pc, #392]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	4b60      	ldr	r3, [pc, #384]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a5f      	ldr	r2, [pc, #380]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a86:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d059      	beq.n	8004b4c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fe fb74 	bl	8003184 <HAL_GetTick>
 8004a9c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa0:	e00a      	b.n	8004ab8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa2:	f7fe fb6f 	bl	8003184 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	@ 0x64
 8004ab0:	d902      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	f000 bf67 	b.w	8005986 <HAL_RCC_OscConfig+0x109a>
 8004ab8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004abc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004ac4:	fa93 f3a3 	rbit	r3, r3
 8004ac8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8004acc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad0:	fab3 f383 	clz	r3, r3
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d102      	bne.n	8004aea <HAL_RCC_OscConfig+0x1fe>
 8004ae4:	4b46      	ldr	r3, [pc, #280]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	e015      	b.n	8004b16 <HAL_RCC_OscConfig+0x22a>
 8004aea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004aee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8004afe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b02:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004b06:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004b12:	4b3b      	ldr	r3, [pc, #236]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004b1a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8004b1e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8004b22:	fa92 f2a2 	rbit	r2, r2
 8004b26:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8004b2a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004b2e:	fab2 f282 	clz	r2, r2
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	f042 0220 	orr.w	r2, r2, #32
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	f002 021f 	and.w	r2, r2, #31
 8004b3e:	2101      	movs	r1, #1
 8004b40:	fa01 f202 	lsl.w	r2, r1, r2
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ab      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x1b6>
 8004b4a:	e05c      	b.n	8004c06 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fe fb1a 	bl	8003184 <HAL_GetTick>
 8004b50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b56:	f7fe fb15 	bl	8003184 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	@ 0x64
 8004b64:	d902      	bls.n	8004b6c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	f000 bf0d 	b.w	8005986 <HAL_RCC_OscConfig+0x109a>
 8004b6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b70:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004b78:	fa93 f3a3 	rbit	r3, r3
 8004b7c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8004b80:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b84:	fab3 f383 	clz	r3, r3
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d102      	bne.n	8004b9e <HAL_RCC_OscConfig+0x2b2>
 8004b98:	4b19      	ldr	r3, [pc, #100]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	e015      	b.n	8004bca <HAL_RCC_OscConfig+0x2de>
 8004b9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ba2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004baa:	fa93 f3a3 	rbit	r3, r3
 8004bae:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004bb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bb6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004bba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004bbe:	fa93 f3a3 	rbit	r3, r3
 8004bc2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c00 <HAL_RCC_OscConfig+0x314>)
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004bce:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004bd2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8004bd6:	fa92 f2a2 	rbit	r2, r2
 8004bda:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8004bde:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004be2:	fab2 f282 	clz	r2, r2
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	f042 0220 	orr.w	r2, r2, #32
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	f002 021f 	and.w	r2, r2, #31
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1ab      	bne.n	8004b56 <HAL_RCC_OscConfig+0x26a>
 8004bfe:	e002      	b.n	8004c06 <HAL_RCC_OscConfig+0x31a>
 8004c00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 817f 	beq.w	8004f1a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c1c:	4ba7      	ldr	r3, [pc, #668]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00c      	beq.n	8004c42 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c28:	4ba4      	ldr	r3, [pc, #656]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d173      	bne.n	8004d1c <HAL_RCC_OscConfig+0x430>
 8004c34:	4ba1      	ldr	r3, [pc, #644]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c40:	d16c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x430>
 8004c42:	2302      	movs	r3, #2
 8004c44:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004c4c:	fa93 f3a3 	rbit	r3, r3
 8004c50:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8004c54:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c58:	fab3 f383 	clz	r3, r3
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d102      	bne.n	8004c72 <HAL_RCC_OscConfig+0x386>
 8004c6c:	4b93      	ldr	r3, [pc, #588]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	e013      	b.n	8004c9a <HAL_RCC_OscConfig+0x3ae>
 8004c72:	2302      	movs	r3, #2
 8004c74:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c78:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004c7c:	fa93 f3a3 	rbit	r3, r3
 8004c80:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004c84:	2302      	movs	r3, #2
 8004c86:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004c8a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004c8e:	fa93 f3a3 	rbit	r3, r3
 8004c92:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004c96:	4b89      	ldr	r3, [pc, #548]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004ca0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8004ca4:	fa92 f2a2 	rbit	r2, r2
 8004ca8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8004cac:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004cb0:	fab2 f282 	clz	r2, r2
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	f042 0220 	orr.w	r2, r2, #32
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	f002 021f 	and.w	r2, r2, #31
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x3f6>
 8004ccc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004cd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d002      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f000 be52 	b.w	8005986 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce2:	4b76      	ldr	r3, [pc, #472]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004cee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	21f8      	movs	r1, #248	@ 0xf8
 8004cf8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfc:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8004d00:	fa91 f1a1 	rbit	r1, r1
 8004d04:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8004d08:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004d0c:	fab1 f181 	clz	r1, r1
 8004d10:	b2c9      	uxtb	r1, r1
 8004d12:	408b      	lsls	r3, r1
 8004d14:	4969      	ldr	r1, [pc, #420]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1a:	e0fe      	b.n	8004f1a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8088 	beq.w	8004e3e <HAL_RCC_OscConfig+0x552>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d34:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004d38:	fa93 f3a3 	rbit	r3, r3
 8004d3c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8004d40:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d44:	fab3 f383 	clz	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d4e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	461a      	mov	r2, r3
 8004d56:	2301      	movs	r3, #1
 8004d58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fe fa13 	bl	8003184 <HAL_GetTick>
 8004d5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d64:	f7fe fa0e 	bl	8003184 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d902      	bls.n	8004d7a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	f000 be06 	b.w	8005986 <HAL_RCC_OscConfig+0x109a>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d80:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004d84:	fa93 f3a3 	rbit	r3, r3
 8004d88:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8004d8c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d90:	fab3 f383 	clz	r3, r3
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d102      	bne.n	8004daa <HAL_RCC_OscConfig+0x4be>
 8004da4:	4b45      	ldr	r3, [pc, #276]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	e013      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e6>
 8004daa:	2302      	movs	r3, #2
 8004dac:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004db4:	fa93 f3a3 	rbit	r3, r3
 8004db8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004dc2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004dce:	4b3b      	ldr	r3, [pc, #236]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004dd8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004ddc:	fa92 f2a2 	rbit	r2, r2
 8004de0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8004de4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004de8:	fab2 f282 	clz	r2, r2
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	f042 0220 	orr.w	r2, r2, #32
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	f002 021f 	and.w	r2, r2, #31
 8004df8:	2101      	movs	r1, #1
 8004dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0af      	beq.n	8004d64 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e04:	4b2d      	ldr	r3, [pc, #180]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	21f8      	movs	r1, #248	@ 0xf8
 8004e1a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8004e22:	fa91 f1a1 	rbit	r1, r1
 8004e26:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8004e2a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004e2e:	fab1 f181 	clz	r1, r1
 8004e32:	b2c9      	uxtb	r1, r1
 8004e34:	408b      	lsls	r3, r1
 8004e36:	4921      	ldr	r1, [pc, #132]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	e06d      	b.n	8004f1a <HAL_RCC_OscConfig+0x62e>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e44:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004e48:	fa93 f3a3 	rbit	r3, r3
 8004e4c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8004e50:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e54:	fab3 f383 	clz	r3, r3
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004e5e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	461a      	mov	r2, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6a:	f7fe f98b 	bl	8003184 <HAL_GetTick>
 8004e6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e74:	f7fe f986 	bl	8003184 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d902      	bls.n	8004e8a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	f000 bd7e 	b.w	8005986 <HAL_RCC_OscConfig+0x109a>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004e94:	fa93 f3a3 	rbit	r3, r3
 8004e98:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8004e9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ea0:	fab3 f383 	clz	r3, r3
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d105      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x5d4>
 8004eb4:	4b01      	ldr	r3, [pc, #4]	@ (8004ebc <HAL_RCC_OscConfig+0x5d0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	e016      	b.n	8004ee8 <HAL_RCC_OscConfig+0x5fc>
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004eca:	fa93 f3a3 	rbit	r3, r3
 8004ece:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004ed8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004edc:	fa93 f3a3 	rbit	r3, r3
 8004ee0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004ee4:	4bbf      	ldr	r3, [pc, #764]	@ (80051e4 <HAL_RCC_OscConfig+0x8f8>)
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004eee:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004ef2:	fa92 f2a2 	rbit	r2, r2
 8004ef6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8004efa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004efe:	fab2 f282 	clz	r2, r2
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	f042 0220 	orr.w	r2, r2, #32
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	f002 021f 	and.w	r2, r2, #31
 8004f0e:	2101      	movs	r1, #1
 8004f10:	fa01 f202 	lsl.w	r2, r1, r2
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ac      	bne.n	8004e74 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8113 	beq.w	8005156 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d07c      	beq.n	800503a <HAL_RCC_OscConfig+0x74e>
 8004f40:	2301      	movs	r3, #1
 8004f42:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4a:	fa93 f3a3 	rbit	r3, r3
 8004f4e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8004f52:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f56:	fab3 f383 	clz	r3, r3
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4ba2      	ldr	r3, [pc, #648]	@ (80051e8 <HAL_RCC_OscConfig+0x8fc>)
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	461a      	mov	r2, r3
 8004f66:	2301      	movs	r3, #1
 8004f68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f6a:	f7fe f90b 	bl	8003184 <HAL_GetTick>
 8004f6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f72:	e00a      	b.n	8004f8a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f74:	f7fe f906 	bl	8003184 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d902      	bls.n	8004f8a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	f000 bcfe 	b.w	8005986 <HAL_RCC_OscConfig+0x109a>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f94:	fa93 f2a3 	rbit	r2, r3
 8004f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004faa:	2202      	movs	r2, #2
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	fa93 f2a3 	rbit	r2, r3
 8004fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004fce:	2202      	movs	r2, #2
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	fa93 f2a3 	rbit	r2, r3
 8004fe0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fe4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004fe8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fea:	4b7e      	ldr	r3, [pc, #504]	@ (80051e4 <HAL_RCC_OscConfig+0x8f8>)
 8004fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ff2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004ff6:	2102      	movs	r1, #2
 8004ff8:	6019      	str	r1, [r3, #0]
 8004ffa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ffe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	fa93 f1a3 	rbit	r1, r3
 8005008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800500c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005010:	6019      	str	r1, [r3, #0]
  return result;
 8005012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005016:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	fab3 f383 	clz	r3, r3
 8005020:	b2db      	uxtb	r3, r3
 8005022:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	2101      	movs	r1, #1
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d09d      	beq.n	8004f74 <HAL_RCC_OscConfig+0x688>
 8005038:	e08d      	b.n	8005156 <HAL_RCC_OscConfig+0x86a>
 800503a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800503e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005046:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800504a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	fa93 f2a3 	rbit	r2, r3
 8005054:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005058:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800505c:	601a      	str	r2, [r3, #0]
  return result;
 800505e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005062:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005066:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005068:	fab3 f383 	clz	r3, r3
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	4b5d      	ldr	r3, [pc, #372]	@ (80051e8 <HAL_RCC_OscConfig+0x8fc>)
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	461a      	mov	r2, r3
 8005078:	2300      	movs	r3, #0
 800507a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507c:	f7fe f882 	bl	8003184 <HAL_GetTick>
 8005080:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005086:	f7fe f87d 	bl	8003184 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d902      	bls.n	800509c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	f000 bc75 	b.w	8005986 <HAL_RCC_OscConfig+0x109a>
 800509c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80050a4:	2202      	movs	r2, #2
 80050a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	fa93 f2a3 	rbit	r2, r3
 80050b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80050c8:	2202      	movs	r2, #2
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	fa93 f2a3 	rbit	r2, r3
 80050da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80050ec:	2202      	movs	r2, #2
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	fa93 f2a3 	rbit	r2, r3
 80050fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005102:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005106:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005108:	4b36      	ldr	r3, [pc, #216]	@ (80051e4 <HAL_RCC_OscConfig+0x8f8>)
 800510a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800510c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005110:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005114:	2102      	movs	r1, #2
 8005116:	6019      	str	r1, [r3, #0]
 8005118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800511c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	fa93 f1a3 	rbit	r1, r3
 8005126:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800512a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800512e:	6019      	str	r1, [r3, #0]
  return result;
 8005130:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005134:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	2101      	movs	r1, #1
 800514c:	fa01 f303 	lsl.w	r3, r1, r3
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d197      	bne.n	8005086 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005156:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800515a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 81a5 	beq.w	80054b6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800516c:	2300      	movs	r3, #0
 800516e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005172:	4b1c      	ldr	r3, [pc, #112]	@ (80051e4 <HAL_RCC_OscConfig+0x8f8>)
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d116      	bne.n	80051ac <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800517e:	4b19      	ldr	r3, [pc, #100]	@ (80051e4 <HAL_RCC_OscConfig+0x8f8>)
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	4a18      	ldr	r2, [pc, #96]	@ (80051e4 <HAL_RCC_OscConfig+0x8f8>)
 8005184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005188:	61d3      	str	r3, [r2, #28]
 800518a:	4b16      	ldr	r3, [pc, #88]	@ (80051e4 <HAL_RCC_OscConfig+0x8f8>)
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005192:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005196:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ac:	4b0f      	ldr	r3, [pc, #60]	@ (80051ec <HAL_RCC_OscConfig+0x900>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d121      	bne.n	80051fc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b8:	4b0c      	ldr	r3, [pc, #48]	@ (80051ec <HAL_RCC_OscConfig+0x900>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a0b      	ldr	r2, [pc, #44]	@ (80051ec <HAL_RCC_OscConfig+0x900>)
 80051be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c4:	f7fd ffde 	bl	8003184 <HAL_GetTick>
 80051c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051cc:	e010      	b.n	80051f0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ce:	f7fd ffd9 	bl	8003184 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	@ 0x64
 80051dc:	d908      	bls.n	80051f0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e3d1      	b.n	8005986 <HAL_RCC_OscConfig+0x109a>
 80051e2:	bf00      	nop
 80051e4:	40021000 	.word	0x40021000
 80051e8:	10908120 	.word	0x10908120
 80051ec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f0:	4b8d      	ldr	r3, [pc, #564]	@ (8005428 <HAL_RCC_OscConfig+0xb3c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0e8      	beq.n	80051ce <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005200:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d106      	bne.n	800521a <HAL_RCC_OscConfig+0x92e>
 800520c:	4b87      	ldr	r3, [pc, #540]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	4a86      	ldr	r2, [pc, #536]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	6213      	str	r3, [r2, #32]
 8005218:	e035      	b.n	8005286 <HAL_RCC_OscConfig+0x99a>
 800521a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800521e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10c      	bne.n	8005244 <HAL_RCC_OscConfig+0x958>
 800522a:	4b80      	ldr	r3, [pc, #512]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	4a7f      	ldr	r2, [pc, #508]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 8005230:	f023 0301 	bic.w	r3, r3, #1
 8005234:	6213      	str	r3, [r2, #32]
 8005236:	4b7d      	ldr	r3, [pc, #500]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	4a7c      	ldr	r2, [pc, #496]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 800523c:	f023 0304 	bic.w	r3, r3, #4
 8005240:	6213      	str	r3, [r2, #32]
 8005242:	e020      	b.n	8005286 <HAL_RCC_OscConfig+0x99a>
 8005244:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005248:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b05      	cmp	r3, #5
 8005252:	d10c      	bne.n	800526e <HAL_RCC_OscConfig+0x982>
 8005254:	4b75      	ldr	r3, [pc, #468]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	4a74      	ldr	r2, [pc, #464]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 800525a:	f043 0304 	orr.w	r3, r3, #4
 800525e:	6213      	str	r3, [r2, #32]
 8005260:	4b72      	ldr	r3, [pc, #456]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4a71      	ldr	r2, [pc, #452]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	6213      	str	r3, [r2, #32]
 800526c:	e00b      	b.n	8005286 <HAL_RCC_OscConfig+0x99a>
 800526e:	4b6f      	ldr	r3, [pc, #444]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	4a6e      	ldr	r2, [pc, #440]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 8005274:	f023 0301 	bic.w	r3, r3, #1
 8005278:	6213      	str	r3, [r2, #32]
 800527a:	4b6c      	ldr	r3, [pc, #432]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	4a6b      	ldr	r2, [pc, #428]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 8005280:	f023 0304 	bic.w	r3, r3, #4
 8005284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800528a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8081 	beq.w	800539a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005298:	f7fd ff74 	bl	8003184 <HAL_GetTick>
 800529c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a0:	e00b      	b.n	80052ba <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7fd ff6f 	bl	8003184 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e365      	b.n	8005986 <HAL_RCC_OscConfig+0x109a>
 80052ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80052c2:	2202      	movs	r2, #2
 80052c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	fa93 f2a3 	rbit	r2, r3
 80052d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052e2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80052e6:	2202      	movs	r2, #2
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	fa93 f2a3 	rbit	r2, r3
 80052f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005300:	601a      	str	r2, [r3, #0]
  return result;
 8005302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005306:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800530a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530c:	fab3 f383 	clz	r3, r3
 8005310:	b2db      	uxtb	r3, r3
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f043 0302 	orr.w	r3, r3, #2
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d102      	bne.n	8005326 <HAL_RCC_OscConfig+0xa3a>
 8005320:	4b42      	ldr	r3, [pc, #264]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	e013      	b.n	800534e <HAL_RCC_OscConfig+0xa62>
 8005326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800532a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800532e:	2202      	movs	r2, #2
 8005330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005332:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005336:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	fa93 f2a3 	rbit	r2, r3
 8005340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005344:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	4b38      	ldr	r3, [pc, #224]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005352:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005356:	2102      	movs	r1, #2
 8005358:	6011      	str	r1, [r2, #0]
 800535a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800535e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	fa92 f1a2 	rbit	r1, r2
 8005368:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800536c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8005370:	6011      	str	r1, [r2, #0]
  return result;
 8005372:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005376:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	fab2 f282 	clz	r2, r2
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	f002 021f 	and.w	r2, r2, #31
 800538c:	2101      	movs	r1, #1
 800538e:	fa01 f202 	lsl.w	r2, r1, r2
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d084      	beq.n	80052a2 <HAL_RCC_OscConfig+0x9b6>
 8005398:	e083      	b.n	80054a2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800539a:	f7fd fef3 	bl	8003184 <HAL_GetTick>
 800539e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a2:	e00b      	b.n	80053bc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a4:	f7fd feee 	bl	8003184 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e2e4      	b.n	8005986 <HAL_RCC_OscConfig+0x109a>
 80053bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053c0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80053c4:	2202      	movs	r2, #2
 80053c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053cc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	fa93 f2a3 	rbit	r2, r3
 80053d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053e4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80053e8:	2202      	movs	r2, #2
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	fa93 f2a3 	rbit	r2, r3
 80053fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053fe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005402:	601a      	str	r2, [r3, #0]
  return result;
 8005404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005408:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800540c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800540e:	fab3 f383 	clz	r3, r3
 8005412:	b2db      	uxtb	r3, r3
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f043 0302 	orr.w	r3, r3, #2
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d106      	bne.n	8005430 <HAL_RCC_OscConfig+0xb44>
 8005422:	4b02      	ldr	r3, [pc, #8]	@ (800542c <HAL_RCC_OscConfig+0xb40>)
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	e017      	b.n	8005458 <HAL_RCC_OscConfig+0xb6c>
 8005428:	40007000 	.word	0x40007000
 800542c:	40021000 	.word	0x40021000
 8005430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005434:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005438:	2202      	movs	r2, #2
 800543a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005440:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	fa93 f2a3 	rbit	r2, r3
 800544a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800544e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	4bb3      	ldr	r3, [pc, #716]	@ (8005724 <HAL_RCC_OscConfig+0xe38>)
 8005456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005458:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800545c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005460:	2102      	movs	r1, #2
 8005462:	6011      	str	r1, [r2, #0]
 8005464:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005468:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	fa92 f1a2 	rbit	r1, r2
 8005472:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005476:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800547a:	6011      	str	r1, [r2, #0]
  return result;
 800547c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005480:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	fab2 f282 	clz	r2, r2
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	f002 021f 	and.w	r2, r2, #31
 8005496:	2101      	movs	r1, #1
 8005498:	fa01 f202 	lsl.w	r2, r1, r2
 800549c:	4013      	ands	r3, r2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d180      	bne.n	80053a4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054a2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d105      	bne.n	80054b6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054aa:	4b9e      	ldr	r3, [pc, #632]	@ (8005724 <HAL_RCC_OscConfig+0xe38>)
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	4a9d      	ldr	r2, [pc, #628]	@ (8005724 <HAL_RCC_OscConfig+0xe38>)
 80054b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 825e 	beq.w	8005984 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054c8:	4b96      	ldr	r3, [pc, #600]	@ (8005724 <HAL_RCC_OscConfig+0xe38>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 030c 	and.w	r3, r3, #12
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	f000 821f 	beq.w	8005914 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	f040 8170 	bne.w	80057c8 <HAL_RCC_OscConfig+0xedc>
 80054e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054ec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80054f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054fa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	fa93 f2a3 	rbit	r2, r3
 8005504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005508:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800550c:	601a      	str	r2, [r3, #0]
  return result;
 800550e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005512:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005516:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005518:	fab3 f383 	clz	r3, r3
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005522:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	461a      	mov	r2, r3
 800552a:	2300      	movs	r3, #0
 800552c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552e:	f7fd fe29 	bl	8003184 <HAL_GetTick>
 8005532:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005536:	e009      	b.n	800554c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005538:	f7fd fe24 	bl	8003184 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e21c      	b.n	8005986 <HAL_RCC_OscConfig+0x109a>
 800554c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005550:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005554:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800555e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	fa93 f2a3 	rbit	r2, r3
 8005568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800556c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005570:	601a      	str	r2, [r3, #0]
  return result;
 8005572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005576:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800557a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800557c:	fab3 f383 	clz	r3, r3
 8005580:	b2db      	uxtb	r3, r3
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	b2db      	uxtb	r3, r3
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d102      	bne.n	8005596 <HAL_RCC_OscConfig+0xcaa>
 8005590:	4b64      	ldr	r3, [pc, #400]	@ (8005724 <HAL_RCC_OscConfig+0xe38>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	e027      	b.n	80055e6 <HAL_RCC_OscConfig+0xcfa>
 8005596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800559a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800559e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055a8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	fa93 f2a3 	rbit	r2, r3
 80055b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055b6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055c0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80055c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055ce:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	fa93 f2a3 	rbit	r2, r3
 80055d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055dc:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	4b50      	ldr	r3, [pc, #320]	@ (8005724 <HAL_RCC_OscConfig+0xe38>)
 80055e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80055ea:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80055ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80055f2:	6011      	str	r1, [r2, #0]
 80055f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80055f8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	fa92 f1a2 	rbit	r1, r2
 8005602:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005606:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800560a:	6011      	str	r1, [r2, #0]
  return result;
 800560c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005610:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	fab2 f282 	clz	r2, r2
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	f042 0220 	orr.w	r2, r2, #32
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	f002 021f 	and.w	r2, r2, #31
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f202 	lsl.w	r2, r1, r2
 800562c:	4013      	ands	r3, r2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d182      	bne.n	8005538 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005632:	4b3c      	ldr	r3, [pc, #240]	@ (8005724 <HAL_RCC_OscConfig+0xe38>)
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005636:	f023 020f 	bic.w	r2, r3, #15
 800563a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800563e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005646:	4937      	ldr	r1, [pc, #220]	@ (8005724 <HAL_RCC_OscConfig+0xe38>)
 8005648:	4313      	orrs	r3, r2
 800564a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800564c:	4b35      	ldr	r3, [pc, #212]	@ (8005724 <HAL_RCC_OscConfig+0xe38>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8005654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005658:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a19      	ldr	r1, [r3, #32]
 8005660:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005664:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	430b      	orrs	r3, r1
 800566e:	492d      	ldr	r1, [pc, #180]	@ (8005724 <HAL_RCC_OscConfig+0xe38>)
 8005670:	4313      	orrs	r3, r2
 8005672:	604b      	str	r3, [r1, #4]
 8005674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005678:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800567c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005686:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	fa93 f2a3 	rbit	r2, r3
 8005690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005694:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005698:	601a      	str	r2, [r3, #0]
  return result;
 800569a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800569e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80056a2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a4:	fab3 f383 	clz	r3, r3
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80056ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	461a      	mov	r2, r3
 80056b6:	2301      	movs	r3, #1
 80056b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fd fd63 	bl	8003184 <HAL_GetTick>
 80056be:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056c2:	e009      	b.n	80056d8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c4:	f7fd fd5e 	bl	8003184 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e156      	b.n	8005986 <HAL_RCC_OscConfig+0x109a>
 80056d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056dc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80056e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80056e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056ea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	fa93 f2a3 	rbit	r2, r3
 80056f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056f8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80056fc:	601a      	str	r2, [r3, #0]
  return result;
 80056fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005702:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005706:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005708:	fab3 f383 	clz	r3, r3
 800570c:	b2db      	uxtb	r3, r3
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f043 0301 	orr.w	r3, r3, #1
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d105      	bne.n	8005728 <HAL_RCC_OscConfig+0xe3c>
 800571c:	4b01      	ldr	r3, [pc, #4]	@ (8005724 <HAL_RCC_OscConfig+0xe38>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	e02a      	b.n	8005778 <HAL_RCC_OscConfig+0xe8c>
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000
 8005728:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800572c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005730:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800573a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	fa93 f2a3 	rbit	r2, r3
 8005744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005748:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005752:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005756:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005760:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	fa93 f2a3 	rbit	r2, r3
 800576a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800576e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	4b86      	ldr	r3, [pc, #536]	@ (8005990 <HAL_RCC_OscConfig+0x10a4>)
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800577c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005780:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005784:	6011      	str	r1, [r2, #0]
 8005786:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800578a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	fa92 f1a2 	rbit	r1, r2
 8005794:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005798:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800579c:	6011      	str	r1, [r2, #0]
  return result;
 800579e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80057a2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	fab2 f282 	clz	r2, r2
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	f042 0220 	orr.w	r2, r2, #32
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	f002 021f 	and.w	r2, r2, #31
 80057b8:	2101      	movs	r1, #1
 80057ba:	fa01 f202 	lsl.w	r2, r1, r2
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f43f af7f 	beq.w	80056c4 <HAL_RCC_OscConfig+0xdd8>
 80057c6:	e0dd      	b.n	8005984 <HAL_RCC_OscConfig+0x1098>
 80057c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057cc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80057d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057da:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	fa93 f2a3 	rbit	r2, r3
 80057e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057e8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80057ec:	601a      	str	r2, [r3, #0]
  return result;
 80057ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057f2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80057f6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f8:	fab3 f383 	clz	r3, r3
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005802:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	461a      	mov	r2, r3
 800580a:	2300      	movs	r3, #0
 800580c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580e:	f7fd fcb9 	bl	8003184 <HAL_GetTick>
 8005812:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005816:	e009      	b.n	800582c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005818:	f7fd fcb4 	bl	8003184 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e0ac      	b.n	8005986 <HAL_RCC_OscConfig+0x109a>
 800582c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005830:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005834:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800583e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	fa93 f2a3 	rbit	r2, r3
 8005848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800584c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005850:	601a      	str	r2, [r3, #0]
  return result;
 8005852:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005856:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800585a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800585c:	fab3 f383 	clz	r3, r3
 8005860:	b2db      	uxtb	r3, r3
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	b2db      	uxtb	r3, r3
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d102      	bne.n	8005876 <HAL_RCC_OscConfig+0xf8a>
 8005870:	4b47      	ldr	r3, [pc, #284]	@ (8005990 <HAL_RCC_OscConfig+0x10a4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	e027      	b.n	80058c6 <HAL_RCC_OscConfig+0xfda>
 8005876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800587a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800587e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005888:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	fa93 f2a3 	rbit	r2, r3
 8005892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005896:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058a0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80058a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058ae:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	fa93 f2a3 	rbit	r2, r3
 80058b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058bc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	4b33      	ldr	r3, [pc, #204]	@ (8005990 <HAL_RCC_OscConfig+0x10a4>)
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80058ca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80058ce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80058d2:	6011      	str	r1, [r2, #0]
 80058d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80058d8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	fa92 f1a2 	rbit	r1, r2
 80058e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80058e6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80058ea:	6011      	str	r1, [r2, #0]
  return result;
 80058ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80058f0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	fab2 f282 	clz	r2, r2
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	f042 0220 	orr.w	r2, r2, #32
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	f002 021f 	and.w	r2, r2, #31
 8005906:	2101      	movs	r1, #1
 8005908:	fa01 f202 	lsl.w	r2, r1, r2
 800590c:	4013      	ands	r3, r2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d182      	bne.n	8005818 <HAL_RCC_OscConfig+0xf2c>
 8005912:	e037      	b.n	8005984 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005914:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005918:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e02e      	b.n	8005986 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005928:	4b19      	ldr	r3, [pc, #100]	@ (8005990 <HAL_RCC_OscConfig+0x10a4>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005930:	4b17      	ldr	r3, [pc, #92]	@ (8005990 <HAL_RCC_OscConfig+0x10a4>)
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005938:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800593c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8005940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005944:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	429a      	cmp	r2, r3
 800594e:	d117      	bne.n	8005980 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005950:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005954:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800595c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005964:	429a      	cmp	r2, r3
 8005966:	d10b      	bne.n	8005980 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005974:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40021000 	.word	0x40021000

08005994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b09e      	sub	sp, #120	@ 0x78
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e162      	b.n	8005c72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059ac:	4b90      	ldr	r3, [pc, #576]	@ (8005bf0 <HAL_RCC_ClockConfig+0x25c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d910      	bls.n	80059dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ba:	4b8d      	ldr	r3, [pc, #564]	@ (8005bf0 <HAL_RCC_ClockConfig+0x25c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 0207 	bic.w	r2, r3, #7
 80059c2:	498b      	ldr	r1, [pc, #556]	@ (8005bf0 <HAL_RCC_ClockConfig+0x25c>)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b89      	ldr	r3, [pc, #548]	@ (8005bf0 <HAL_RCC_ClockConfig+0x25c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e14a      	b.n	8005c72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e8:	4b82      	ldr	r3, [pc, #520]	@ (8005bf4 <HAL_RCC_ClockConfig+0x260>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	497f      	ldr	r1, [pc, #508]	@ (8005bf4 <HAL_RCC_ClockConfig+0x260>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80dc 	beq.w	8005bc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d13c      	bne.n	8005a8a <HAL_RCC_ClockConfig+0xf6>
 8005a10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a14:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a18:	fa93 f3a3 	rbit	r3, r3
 8005a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a20:	fab3 f383 	clz	r3, r3
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d102      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xa6>
 8005a34:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf4 <HAL_RCC_ClockConfig+0x260>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	e00f      	b.n	8005a5a <HAL_RCC_ClockConfig+0xc6>
 8005a3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a42:	fa93 f3a3 	rbit	r3, r3
 8005a46:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a50:	fa93 f3a3 	rbit	r3, r3
 8005a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a56:	4b67      	ldr	r3, [pc, #412]	@ (8005bf4 <HAL_RCC_ClockConfig+0x260>)
 8005a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005a5e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a62:	fa92 f2a2 	rbit	r2, r2
 8005a66:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005a68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a6a:	fab2 f282 	clz	r2, r2
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	f042 0220 	orr.w	r2, r2, #32
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	f002 021f 	and.w	r2, r2, #31
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d17b      	bne.n	8005b7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e0f3      	b.n	8005c72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d13c      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x178>
 8005a92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a96:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a9a:	fa93 f3a3 	rbit	r3, r3
 8005a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa2:	fab3 f383 	clz	r3, r3
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f043 0301 	orr.w	r3, r3, #1
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d102      	bne.n	8005abc <HAL_RCC_ClockConfig+0x128>
 8005ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf4 <HAL_RCC_ClockConfig+0x260>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	e00f      	b.n	8005adc <HAL_RCC_ClockConfig+0x148>
 8005abc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ac4:	fa93 f3a3 	rbit	r3, r3
 8005ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ace:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad2:	fa93 f3a3 	rbit	r3, r3
 8005ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ad8:	4b46      	ldr	r3, [pc, #280]	@ (8005bf4 <HAL_RCC_ClockConfig+0x260>)
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005ae0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005ae2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ae4:	fa92 f2a2 	rbit	r2, r2
 8005ae8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005aea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005aec:	fab2 f282 	clz	r2, r2
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	f042 0220 	orr.w	r2, r2, #32
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	f002 021f 	and.w	r2, r2, #31
 8005afc:	2101      	movs	r1, #1
 8005afe:	fa01 f202 	lsl.w	r2, r1, r2
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d13a      	bne.n	8005b7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0b2      	b.n	8005c72 <HAL_RCC_ClockConfig+0x2de>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b12:	fa93 f3a3 	rbit	r3, r3
 8005b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b1a:	fab3 f383 	clz	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f043 0301 	orr.w	r3, r3, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d102      	bne.n	8005b34 <HAL_RCC_ClockConfig+0x1a0>
 8005b2e:	4b31      	ldr	r3, [pc, #196]	@ (8005bf4 <HAL_RCC_ClockConfig+0x260>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	e00d      	b.n	8005b50 <HAL_RCC_ClockConfig+0x1bc>
 8005b34:	2302      	movs	r3, #2
 8005b36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3a:	fa93 f3a3 	rbit	r3, r3
 8005b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b40:	2302      	movs	r3, #2
 8005b42:	623b      	str	r3, [r7, #32]
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	fa93 f3a3 	rbit	r3, r3
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	4b29      	ldr	r3, [pc, #164]	@ (8005bf4 <HAL_RCC_ClockConfig+0x260>)
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b50:	2202      	movs	r2, #2
 8005b52:	61ba      	str	r2, [r7, #24]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	fa92 f2a2 	rbit	r2, r2
 8005b5a:	617a      	str	r2, [r7, #20]
  return result;
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	fab2 f282 	clz	r2, r2
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	f042 0220 	orr.w	r2, r2, #32
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	f002 021f 	and.w	r2, r2, #31
 8005b6e:	2101      	movs	r1, #1
 8005b70:	fa01 f202 	lsl.w	r2, r1, r2
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e079      	b.n	8005c72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf4 <HAL_RCC_ClockConfig+0x260>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f023 0203 	bic.w	r2, r3, #3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	491a      	ldr	r1, [pc, #104]	@ (8005bf4 <HAL_RCC_ClockConfig+0x260>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b90:	f7fd faf8 	bl	8003184 <HAL_GetTick>
 8005b94:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	e00a      	b.n	8005bae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b98:	f7fd faf4 	bl	8003184 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e061      	b.n	8005c72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bae:	4b11      	ldr	r3, [pc, #68]	@ (8005bf4 <HAL_RCC_ClockConfig+0x260>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f003 020c 	and.w	r2, r3, #12
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d1eb      	bne.n	8005b98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf0 <HAL_RCC_ClockConfig+0x25c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d214      	bcs.n	8005bf8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bce:	4b08      	ldr	r3, [pc, #32]	@ (8005bf0 <HAL_RCC_ClockConfig+0x25c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f023 0207 	bic.w	r2, r3, #7
 8005bd6:	4906      	ldr	r1, [pc, #24]	@ (8005bf0 <HAL_RCC_ClockConfig+0x25c>)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bde:	4b04      	ldr	r3, [pc, #16]	@ (8005bf0 <HAL_RCC_ClockConfig+0x25c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d005      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e040      	b.n	8005c72 <HAL_RCC_ClockConfig+0x2de>
 8005bf0:	40022000 	.word	0x40022000
 8005bf4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c04:	4b1d      	ldr	r3, [pc, #116]	@ (8005c7c <HAL_RCC_ClockConfig+0x2e8>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	491a      	ldr	r1, [pc, #104]	@ (8005c7c <HAL_RCC_ClockConfig+0x2e8>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c22:	4b16      	ldr	r3, [pc, #88]	@ (8005c7c <HAL_RCC_ClockConfig+0x2e8>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	4912      	ldr	r1, [pc, #72]	@ (8005c7c <HAL_RCC_ClockConfig+0x2e8>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c36:	f000 f829 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c7c <HAL_RCC_ClockConfig+0x2e8>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c44:	22f0      	movs	r2, #240	@ 0xf0
 8005c46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	fa92 f2a2 	rbit	r2, r2
 8005c4e:	60fa      	str	r2, [r7, #12]
  return result;
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	fab2 f282 	clz	r2, r2
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	40d3      	lsrs	r3, r2
 8005c5a:	4a09      	ldr	r2, [pc, #36]	@ (8005c80 <HAL_RCC_ClockConfig+0x2ec>)
 8005c5c:	5cd3      	ldrb	r3, [r2, r3]
 8005c5e:	fa21 f303 	lsr.w	r3, r1, r3
 8005c62:	4a08      	ldr	r2, [pc, #32]	@ (8005c84 <HAL_RCC_ClockConfig+0x2f0>)
 8005c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c66:	4b08      	ldr	r3, [pc, #32]	@ (8005c88 <HAL_RCC_ClockConfig+0x2f4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fd fa46 	bl	80030fc <HAL_InitTick>
  
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3778      	adds	r7, #120	@ 0x78
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	08006b48 	.word	0x08006b48
 8005c84:	2000000c 	.word	0x2000000c
 8005c88:	20000010 	.word	0x20000010

08005c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 030c 	and.w	r3, r3, #12
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d002      	beq.n	8005cbc <HAL_RCC_GetSysClockFreq+0x30>
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	d003      	beq.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x36>
 8005cba:	e029      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005cbe:	613b      	str	r3, [r7, #16]
      break;
 8005cc0:	e029      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	0c9b      	lsrs	r3, r3, #18
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	4a18      	ldr	r2, [pc, #96]	@ (8005d2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ccc:	5cd3      	ldrb	r3, [r2, r3]
 8005cce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005cd0:	4b14      	ldr	r3, [pc, #80]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8005cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	4a15      	ldr	r2, [pc, #84]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005cda:	5cd3      	ldrb	r3, [r2, r3]
 8005cdc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d008      	beq.n	8005cfa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	fb02 f303 	mul.w	r3, r2, r3
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	e007      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	fb02 f303 	mul.w	r3, r2, r3
 8005d08:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	613b      	str	r3, [r7, #16]
      break;
 8005d0e:	e002      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d10:	4b05      	ldr	r3, [pc, #20]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d12:	613b      	str	r3, [r7, #16]
      break;
 8005d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d16:	693b      	ldr	r3, [r7, #16]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	40021000 	.word	0x40021000
 8005d28:	007a1200 	.word	0x007a1200
 8005d2c:	08006b58 	.word	0x08006b58
 8005d30:	08006b68 	.word	0x08006b68

08005d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b092      	sub	sp, #72	@ 0x48
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80d4 	beq.w	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d58:	4b4e      	ldr	r3, [pc, #312]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10e      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d64:	4b4b      	ldr	r3, [pc, #300]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	4a4a      	ldr	r2, [pc, #296]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d6e:	61d3      	str	r3, [r2, #28]
 8005d70:	4b48      	ldr	r3, [pc, #288]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d82:	4b45      	ldr	r3, [pc, #276]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d118      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d8e:	4b42      	ldr	r3, [pc, #264]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a41      	ldr	r2, [pc, #260]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9a:	f7fd f9f3 	bl	8003184 <HAL_GetTick>
 8005d9e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da0:	e008      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da2:	f7fd f9ef 	bl	8003184 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b64      	cmp	r3, #100	@ 0x64
 8005dae:	d901      	bls.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e1d6      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db4:	4b38      	ldr	r3, [pc, #224]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dc0:	4b34      	ldr	r3, [pc, #208]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8084 	beq.w	8005eda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d07c      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005de0:	4b2c      	ldr	r3, [pc, #176]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005dee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df2:	fa93 f3a3 	rbit	r3, r3
 8005df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dfa:	fab3 f383 	clz	r3, r3
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	4b26      	ldr	r3, [pc, #152]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	461a      	mov	r2, r3
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e16:	fa93 f3a3 	rbit	r3, r3
 8005e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e1e:	fab3 f383 	clz	r3, r3
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	4b1d      	ldr	r3, [pc, #116]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	2300      	movs	r3, #0
 8005e30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e32:	4a18      	ldr	r2, [pc, #96]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d04b      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e42:	f7fd f99f 	bl	8003184 <HAL_GetTick>
 8005e46:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e48:	e00a      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e4a:	f7fd f99b 	bl	8003184 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e180      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005e60:	2302      	movs	r3, #2
 8005e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e66:	fa93 f3a3 	rbit	r3, r3
 8005e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	623b      	str	r3, [r7, #32]
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	fa93 f3a3 	rbit	r3, r3
 8005e76:	61fb      	str	r3, [r7, #28]
  return result;
 8005e78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7a:	fab3 f383 	clz	r3, r3
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	f043 0302 	orr.w	r3, r3, #2
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d108      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005e8e:	4b01      	ldr	r3, [pc, #4]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	e00d      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40007000 	.word	0x40007000
 8005e9c:	10908100 	.word	0x10908100
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	fa93 f3a3 	rbit	r3, r3
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	4b9a      	ldr	r3, [pc, #616]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	613a      	str	r2, [r7, #16]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	fa92 f2a2 	rbit	r2, r2
 8005eba:	60fa      	str	r2, [r7, #12]
  return result;
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	fab2 f282 	clz	r2, r2
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	f002 021f 	and.w	r2, r2, #31
 8005ece:	2101      	movs	r1, #1
 8005ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0b7      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005eda:	4b8f      	ldr	r3, [pc, #572]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	498c      	ldr	r1, [pc, #560]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005eec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d105      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ef4:	4b88      	ldr	r3, [pc, #544]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	4a87      	ldr	r2, [pc, #540]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005efe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d008      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f0c:	4b82      	ldr	r3, [pc, #520]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f10:	f023 0203 	bic.w	r2, r3, #3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	497f      	ldr	r1, [pc, #508]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d008      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	4978      	ldr	r1, [pc, #480]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f48:	4b73      	ldr	r3, [pc, #460]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	4970      	ldr	r1, [pc, #448]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f66:	4b6c      	ldr	r3, [pc, #432]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6a:	f023 0210 	bic.w	r2, r3, #16
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	4969      	ldr	r1, [pc, #420]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005f84:	4b64      	ldr	r3, [pc, #400]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f90:	4961      	ldr	r1, [pc, #388]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa6:	f023 0220 	bic.w	r2, r3, #32
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	495a      	ldr	r1, [pc, #360]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d008      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fc0:	4b55      	ldr	r3, [pc, #340]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	4952      	ldr	r1, [pc, #328]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d008      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fde:	4b4e      	ldr	r3, [pc, #312]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	494b      	ldr	r1, [pc, #300]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ffc:	4b46      	ldr	r3, [pc, #280]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006000:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	4943      	ldr	r1, [pc, #268]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800600a:	4313      	orrs	r3, r2
 800600c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006016:	2b00      	cmp	r3, #0
 8006018:	d008      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800601a:	4b3f      	ldr	r3, [pc, #252]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006026:	493c      	ldr	r1, [pc, #240]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006028:	4313      	orrs	r3, r2
 800602a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006038:	4b37      	ldr	r3, [pc, #220]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800603a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006044:	4934      	ldr	r1, [pc, #208]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006046:	4313      	orrs	r3, r2
 8006048:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006056:	4b30      	ldr	r3, [pc, #192]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006062:	492d      	ldr	r1, [pc, #180]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006064:	4313      	orrs	r3, r2
 8006066:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006074:	4b28      	ldr	r3, [pc, #160]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006078:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006080:	4925      	ldr	r1, [pc, #148]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006082:	4313      	orrs	r3, r2
 8006084:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d008      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006092:	4b21      	ldr	r3, [pc, #132]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006096:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609e:	491e      	ldr	r1, [pc, #120]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80060b0:	4b19      	ldr	r3, [pc, #100]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	4916      	ldr	r1, [pc, #88]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80060ce:	4b12      	ldr	r3, [pc, #72]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060da:	490f      	ldr	r1, [pc, #60]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80060ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f8:	4907      	ldr	r1, [pc, #28]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00c      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800610a:	4b03      	ldr	r3, [pc, #12]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800610c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	e002      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006116:	bf00      	nop
 8006118:	40021000 	.word	0x40021000
 800611c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800611e:	4913      	ldr	r1, [pc, #76]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006120:	4313      	orrs	r3, r2
 8006122:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006130:	4b0e      	ldr	r3, [pc, #56]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006134:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800613c:	490b      	ldr	r1, [pc, #44]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800613e:	4313      	orrs	r3, r2
 8006140:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800614e:	4b07      	ldr	r3, [pc, #28]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006152:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800615a:	4904      	ldr	r1, [pc, #16]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800615c:	4313      	orrs	r3, r2
 800615e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3748      	adds	r7, #72	@ 0x48
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000

08006170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e049      	b.n	8006216 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fc fee2 	bl	8002f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f000 faa4 	bl	80066fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	d001      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e04f      	b.n	80062d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a23      	ldr	r2, [pc, #140]	@ (80062e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01d      	beq.n	8006296 <HAL_TIM_Base_Start_IT+0x76>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006262:	d018      	beq.n	8006296 <HAL_TIM_Base_Start_IT+0x76>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1f      	ldr	r2, [pc, #124]	@ (80062e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_TIM_Base_Start_IT+0x76>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1e      	ldr	r2, [pc, #120]	@ (80062ec <HAL_TIM_Base_Start_IT+0xcc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_TIM_Base_Start_IT+0x76>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1c      	ldr	r2, [pc, #112]	@ (80062f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_TIM_Base_Start_IT+0x76>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1b      	ldr	r2, [pc, #108]	@ (80062f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_TIM_Base_Start_IT+0x76>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a19      	ldr	r2, [pc, #100]	@ (80062f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d115      	bne.n	80062c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	4b17      	ldr	r3, [pc, #92]	@ (80062fc <HAL_TIM_Base_Start_IT+0xdc>)
 800629e:	4013      	ands	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b06      	cmp	r3, #6
 80062a6:	d015      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0xb4>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ae:	d011      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c0:	e008      	b.n	80062d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0201 	orr.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e000      	b.n	80062d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40013400 	.word	0x40013400
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40015000 	.word	0x40015000
 80062fc:	00010007 	.word	0x00010007

08006300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d020      	beq.n	8006364 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01b      	beq.n	8006364 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0202 	mvn.w	r2, #2
 8006334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f9b7 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 8006350:	e005      	b.n	800635e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f9a9 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f9ba 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d020      	beq.n	80063b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01b      	beq.n	80063b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0204 	mvn.w	r2, #4
 8006380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2202      	movs	r2, #2
 8006386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f991 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f983 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f994 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d020      	beq.n	80063fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01b      	beq.n	80063fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0208 	mvn.w	r2, #8
 80063cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2204      	movs	r2, #4
 80063d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f96b 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f95d 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f96e 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	d020      	beq.n	8006448 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01b      	beq.n	8006448 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0210 	mvn.w	r2, #16
 8006418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2208      	movs	r2, #8
 800641e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f945 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f937 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f948 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0201 	mvn.w	r2, #1
 8006464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f915 	bl	8006696 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00c      	beq.n	8006490 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fb10 	bl	8006ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00c      	beq.n	80064b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d007      	beq.n	80064b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fb08 	bl	8006ac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f907 	bl	80066e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00c      	beq.n	80064fc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d007      	beq.n	80064fc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0220 	mvn.w	r2, #32
 80064f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fad0 	bl	8006a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064fc:	bf00      	nop
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_TIM_ConfigClockSource+0x1c>
 800651c:	2302      	movs	r3, #2
 800651e:	e0b6      	b.n	800668e <HAL_TIM_ConfigClockSource+0x18a>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800653e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800654a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800655c:	d03e      	beq.n	80065dc <HAL_TIM_ConfigClockSource+0xd8>
 800655e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006562:	f200 8087 	bhi.w	8006674 <HAL_TIM_ConfigClockSource+0x170>
 8006566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800656a:	f000 8086 	beq.w	800667a <HAL_TIM_ConfigClockSource+0x176>
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006572:	d87f      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x170>
 8006574:	2b70      	cmp	r3, #112	@ 0x70
 8006576:	d01a      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0xaa>
 8006578:	2b70      	cmp	r3, #112	@ 0x70
 800657a:	d87b      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x170>
 800657c:	2b60      	cmp	r3, #96	@ 0x60
 800657e:	d050      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x11e>
 8006580:	2b60      	cmp	r3, #96	@ 0x60
 8006582:	d877      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x170>
 8006584:	2b50      	cmp	r3, #80	@ 0x50
 8006586:	d03c      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0xfe>
 8006588:	2b50      	cmp	r3, #80	@ 0x50
 800658a:	d873      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x170>
 800658c:	2b40      	cmp	r3, #64	@ 0x40
 800658e:	d058      	beq.n	8006642 <HAL_TIM_ConfigClockSource+0x13e>
 8006590:	2b40      	cmp	r3, #64	@ 0x40
 8006592:	d86f      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x170>
 8006594:	2b30      	cmp	r3, #48	@ 0x30
 8006596:	d064      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x15e>
 8006598:	2b30      	cmp	r3, #48	@ 0x30
 800659a:	d86b      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x170>
 800659c:	2b20      	cmp	r3, #32
 800659e:	d060      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x15e>
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d867      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x170>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d05c      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x15e>
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d05a      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x15e>
 80065ac:	e062      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065be:	f000 f9c1 	bl	8006944 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	609a      	str	r2, [r3, #8]
      break;
 80065da:	e04f      	b.n	800667c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065ec:	f000 f9aa 	bl	8006944 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065fe:	609a      	str	r2, [r3, #8]
      break;
 8006600:	e03c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800660e:	461a      	mov	r2, r3
 8006610:	f000 f91e 	bl	8006850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2150      	movs	r1, #80	@ 0x50
 800661a:	4618      	mov	r0, r3
 800661c:	f000 f977 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 8006620:	e02c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800662e:	461a      	mov	r2, r3
 8006630:	f000 f93d 	bl	80068ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2160      	movs	r1, #96	@ 0x60
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f967 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 8006640:	e01c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800664e:	461a      	mov	r2, r3
 8006650:	f000 f8fe 	bl	8006850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2140      	movs	r1, #64	@ 0x40
 800665a:	4618      	mov	r0, r3
 800665c:	f000 f957 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 8006660:	e00c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f000 f94e 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 8006672:	e003      	b.n	800667c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	73fb      	strb	r3, [r7, #15]
      break;
 8006678:	e000      	b.n	800667c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800667a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a48      	ldr	r2, [pc, #288]	@ (8006830 <TIM_Base_SetConfig+0x134>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d013      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671a:	d00f      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a45      	ldr	r2, [pc, #276]	@ (8006834 <TIM_Base_SetConfig+0x138>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00b      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a44      	ldr	r2, [pc, #272]	@ (8006838 <TIM_Base_SetConfig+0x13c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d007      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a43      	ldr	r2, [pc, #268]	@ (800683c <TIM_Base_SetConfig+0x140>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d003      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a42      	ldr	r2, [pc, #264]	@ (8006840 <TIM_Base_SetConfig+0x144>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d108      	bne.n	800674e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a37      	ldr	r2, [pc, #220]	@ (8006830 <TIM_Base_SetConfig+0x134>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d01f      	beq.n	8006796 <TIM_Base_SetConfig+0x9a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800675c:	d01b      	beq.n	8006796 <TIM_Base_SetConfig+0x9a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a34      	ldr	r2, [pc, #208]	@ (8006834 <TIM_Base_SetConfig+0x138>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d017      	beq.n	8006796 <TIM_Base_SetConfig+0x9a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a33      	ldr	r2, [pc, #204]	@ (8006838 <TIM_Base_SetConfig+0x13c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <TIM_Base_SetConfig+0x9a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a32      	ldr	r2, [pc, #200]	@ (800683c <TIM_Base_SetConfig+0x140>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00f      	beq.n	8006796 <TIM_Base_SetConfig+0x9a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a32      	ldr	r2, [pc, #200]	@ (8006844 <TIM_Base_SetConfig+0x148>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00b      	beq.n	8006796 <TIM_Base_SetConfig+0x9a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a31      	ldr	r2, [pc, #196]	@ (8006848 <TIM_Base_SetConfig+0x14c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d007      	beq.n	8006796 <TIM_Base_SetConfig+0x9a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a30      	ldr	r2, [pc, #192]	@ (800684c <TIM_Base_SetConfig+0x150>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d003      	beq.n	8006796 <TIM_Base_SetConfig+0x9a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2b      	ldr	r2, [pc, #172]	@ (8006840 <TIM_Base_SetConfig+0x144>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d108      	bne.n	80067a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800679c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a18      	ldr	r2, [pc, #96]	@ (8006830 <TIM_Base_SetConfig+0x134>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d013      	beq.n	80067fc <TIM_Base_SetConfig+0x100>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a19      	ldr	r2, [pc, #100]	@ (800683c <TIM_Base_SetConfig+0x140>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00f      	beq.n	80067fc <TIM_Base_SetConfig+0x100>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a19      	ldr	r2, [pc, #100]	@ (8006844 <TIM_Base_SetConfig+0x148>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00b      	beq.n	80067fc <TIM_Base_SetConfig+0x100>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a18      	ldr	r2, [pc, #96]	@ (8006848 <TIM_Base_SetConfig+0x14c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <TIM_Base_SetConfig+0x100>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a17      	ldr	r2, [pc, #92]	@ (800684c <TIM_Base_SetConfig+0x150>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_Base_SetConfig+0x100>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a12      	ldr	r2, [pc, #72]	@ (8006840 <TIM_Base_SetConfig+0x144>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d103      	bne.n	8006804 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d105      	bne.n	8006822 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f023 0201 	bic.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	611a      	str	r2, [r3, #16]
  }
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40000400 	.word	0x40000400
 8006838:	40000800 	.word	0x40000800
 800683c:	40013400 	.word	0x40013400
 8006840:	40015000 	.word	0x40015000
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800

08006850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f023 0201 	bic.w	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800687a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f023 030a 	bic.w	r3, r3, #10
 800688c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4313      	orrs	r3, r2
 8006894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	621a      	str	r2, [r3, #32]
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b087      	sub	sp, #28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f023 0210 	bic.w	r2, r3, #16
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	031b      	lsls	r3, r3, #12
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	f043 0307 	orr.w	r3, r3, #7
 8006930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	609a      	str	r2, [r3, #8]
}
 8006938:	bf00      	nop
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800695e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	021a      	lsls	r2, r3, #8
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	431a      	orrs	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	4313      	orrs	r3, r2
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	609a      	str	r2, [r3, #8]
}
 8006978:	bf00      	nop
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006998:	2302      	movs	r3, #2
 800699a:	e06d      	b.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a30      	ldr	r2, [pc, #192]	@ (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d009      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d004      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a2d      	ldr	r2, [pc, #180]	@ (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d108      	bne.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80069e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d01d      	beq.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a18:	d018      	beq.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1a      	ldr	r2, [pc, #104]	@ (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00e      	beq.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a15      	ldr	r2, [pc, #84]	@ (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d009      	beq.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a16      	ldr	r2, [pc, #88]	@ (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a11      	ldr	r2, [pc, #68]	@ (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d10c      	bne.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	40012c00 	.word	0x40012c00
 8006a88:	40013400 	.word	0x40013400
 8006a8c:	40015000 	.word	0x40015000
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40014000 	.word	0x40014000

08006a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <memset>:
 8006ad8:	4402      	add	r2, r0
 8006ada:	4603      	mov	r3, r0
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d100      	bne.n	8006ae2 <memset+0xa>
 8006ae0:	4770      	bx	lr
 8006ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae6:	e7f9      	b.n	8006adc <memset+0x4>

08006ae8 <__libc_init_array>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	4d0d      	ldr	r5, [pc, #52]	@ (8006b20 <__libc_init_array+0x38>)
 8006aec:	4c0d      	ldr	r4, [pc, #52]	@ (8006b24 <__libc_init_array+0x3c>)
 8006aee:	1b64      	subs	r4, r4, r5
 8006af0:	10a4      	asrs	r4, r4, #2
 8006af2:	2600      	movs	r6, #0
 8006af4:	42a6      	cmp	r6, r4
 8006af6:	d109      	bne.n	8006b0c <__libc_init_array+0x24>
 8006af8:	4d0b      	ldr	r5, [pc, #44]	@ (8006b28 <__libc_init_array+0x40>)
 8006afa:	4c0c      	ldr	r4, [pc, #48]	@ (8006b2c <__libc_init_array+0x44>)
 8006afc:	f000 f818 	bl	8006b30 <_init>
 8006b00:	1b64      	subs	r4, r4, r5
 8006b02:	10a4      	asrs	r4, r4, #2
 8006b04:	2600      	movs	r6, #0
 8006b06:	42a6      	cmp	r6, r4
 8006b08:	d105      	bne.n	8006b16 <__libc_init_array+0x2e>
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b10:	4798      	blx	r3
 8006b12:	3601      	adds	r6, #1
 8006b14:	e7ee      	b.n	8006af4 <__libc_init_array+0xc>
 8006b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1a:	4798      	blx	r3
 8006b1c:	3601      	adds	r6, #1
 8006b1e:	e7f2      	b.n	8006b06 <__libc_init_array+0x1e>
 8006b20:	08006b78 	.word	0x08006b78
 8006b24:	08006b78 	.word	0x08006b78
 8006b28:	08006b78 	.word	0x08006b78
 8006b2c:	08006b7c 	.word	0x08006b7c

08006b30 <_init>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr

08006b3c <_fini>:
 8006b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3e:	bf00      	nop
 8006b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b42:	bc08      	pop	{r3}
 8006b44:	469e      	mov	lr, r3
 8006b46:	4770      	bx	lr
