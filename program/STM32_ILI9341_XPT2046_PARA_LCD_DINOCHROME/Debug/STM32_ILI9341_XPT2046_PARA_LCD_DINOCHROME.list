
STM32_ILI9341_XPT2046_PARA_LCD_DINOCHROME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e64  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004ff8  08004ff8  00005ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005028  08005028  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005028  08005028  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005028  08005028  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005028  08005028  00006028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800502c  0800502c  0000602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005030  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00000098  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b117  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f06  00000000  00000000  00012157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  00014060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d7  00000000  00000000  00014be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a47  00000000  00000000  000154b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f363  00000000  00000000  00035efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c56b4  00000000  00000000  00045261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a915  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002eec  00000000  00000000  0010a958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0010d844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004fe0 	.word	0x08004fe0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004fe0 	.word	0x08004fe0

080001d4 <LCD_write>:
u16 DeviceCode;	 



void LCD_write(u16 VAL)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	80fb      	strh	r3, [r7, #6]
	LCD_CS_CLR;  
 80001de:	4b0a      	ldr	r3, [pc, #40]	@ (8000208 <LCD_write+0x34>)
 80001e0:	2202      	movs	r2, #2
 80001e2:	629a      	str	r2, [r3, #40]	@ 0x28
	DATAOUT(VAL);
 80001e4:	4a09      	ldr	r2, [pc, #36]	@ (800020c <LCD_write+0x38>)
 80001e6:	88fb      	ldrh	r3, [r7, #6]
 80001e8:	6153      	str	r3, [r2, #20]
	LCD_WR_CLR;
 80001ea:	4b07      	ldr	r3, [pc, #28]	@ (8000208 <LCD_write+0x34>)
 80001ec:	2208      	movs	r2, #8
 80001ee:	629a      	str	r2, [r3, #40]	@ 0x28
	LCD_WR_SET;
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <LCD_write+0x34>)
 80001f2:	2208      	movs	r2, #8
 80001f4:	619a      	str	r2, [r3, #24]
	LCD_CS_SET;
 80001f6:	4b04      	ldr	r3, [pc, #16]	@ (8000208 <LCD_write+0x34>)
 80001f8:	2202      	movs	r2, #2
 80001fa:	619a      	str	r2, [r3, #24]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	48000800 	.word	0x48000800
 800020c:	48000400 	.word	0x48000400

08000210 <LCD_WR_REG>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u16 data)
{ 
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	80fb      	strh	r3, [r7, #6]
   LCD_RS_CLR;     
 800021a:	4b05      	ldr	r3, [pc, #20]	@ (8000230 <LCD_WR_REG+0x20>)
 800021c:	2204      	movs	r2, #4
 800021e:	629a      	str	r2, [r3, #40]	@ 0x28
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8000220:	88fb      	ldrh	r3, [r7, #6]
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ffd6 	bl	80001d4 <LCD_write>
	 #endif
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	48000800 	.word	0x48000800

08000234 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{	
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	460a      	mov	r2, r1
 800023e:	80fb      	strh	r3, [r7, #6]
 8000240:	4613      	mov	r3, r2
 8000242:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ffe2 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 800024c:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <LCD_WriteReg+0x44>)
 800024e:	2204      	movs	r2, #4
 8000250:	619a      	str	r2, [r3, #24]
 8000252:	4b09      	ldr	r3, [pc, #36]	@ (8000278 <LCD_WriteReg+0x44>)
 8000254:	2202      	movs	r2, #2
 8000256:	629a      	str	r2, [r3, #40]	@ 0x28
 8000258:	4a08      	ldr	r2, [pc, #32]	@ (800027c <LCD_WriteReg+0x48>)
 800025a:	88bb      	ldrh	r3, [r7, #4]
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <LCD_WriteReg+0x44>)
 8000260:	2208      	movs	r2, #8
 8000262:	629a      	str	r2, [r3, #40]	@ 0x28
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <LCD_WriteReg+0x44>)
 8000266:	2208      	movs	r2, #8
 8000268:	619a      	str	r2, [r3, #24]
 800026a:	4b03      	ldr	r3, [pc, #12]	@ (8000278 <LCD_WriteReg+0x44>)
 800026c:	2202      	movs	r2, #2
 800026e:	619a      	str	r2, [r3, #24]
}	   
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	48000800 	.word	0x48000800
 800027c:	48000400 	.word	0x48000400

08000280 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000284:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <LCD_WriteRAM_Prepare+0x14>)
 8000286:	891b      	ldrh	r3, [r3, #8]
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ffc1 	bl	8000210 <LCD_WR_REG>
}	 
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000002c 	.word	0x2000002c

08000298 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	80fb      	strh	r3, [r7, #6]
   LCD_RS_SET; 
 80002a2:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <Lcd_WriteData_16Bit+0x20>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	619a      	str	r2, [r3, #24]
		LCD_WR_SET;
		LCD_CS_SET;
 //  LCD_write(Data&0xFF00);
//	 LCD_write(Data<<8);
	 #else
	 LCD_write(Data);
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ff92 	bl	80001d4 <LCD_write>
	 #endif
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	48000800 	.word	0x48000800

080002bc <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	460a      	mov	r2, r1
 80002c6:	80fb      	strh	r3, [r7, #6]
 80002c8:	4613      	mov	r3, r2
 80002ca:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 80002cc:	88ba      	ldrh	r2, [r7, #4]
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	4611      	mov	r1, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fe56 	bl	8000f84 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <LCD_DrawPoint+0x30>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ffdb 	bl	8000298 <Lcd_WriteData_16Bit>
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	2000003c 	.word	0x2000003c

080002f0 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	80fb      	strh	r3, [r7, #6]
  unsigned int i;//,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 80002fa:	4b13      	ldr	r3, [pc, #76]	@ (8000348 <LCD_Clear+0x58>)
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	3b01      	subs	r3, #1
 8000300:	b29a      	uxth	r2, r3
 8000302:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <LCD_Clear+0x58>)
 8000304:	885b      	ldrh	r3, [r3, #2]
 8000306:	3b01      	subs	r3, #1
 8000308:	b29b      	uxth	r3, r3
 800030a:	2100      	movs	r1, #0
 800030c:	2000      	movs	r0, #0
 800030e:	f000 fd77 	bl	8000e00 <LCD_SetWindows>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	e006      	b.n	8000326 <LCD_Clear+0x36>
	{
 //   for(m=0;m<lcddev.width;m++)
  //  {	
			Lcd_WriteData_16Bit(Color);
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffbc 	bl	8000298 <Lcd_WriteData_16Bit>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3301      	adds	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <LCD_Clear+0x58>)
 8000328:	885b      	ldrh	r3, [r3, #2]
 800032a:	461a      	mov	r2, r3
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <LCD_Clear+0x58>)
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	fb02 f303 	mul.w	r3, r2, r3
 8000334:	461a      	mov	r2, r3
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	4293      	cmp	r3, r2
 800033a:	d3ed      	bcc.n	8000318 <LCD_Clear+0x28>
	//	}
	}
} 
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	2000002c 	.word	0x2000002c

0800034c <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <LCD_RESET+0x20>)
 8000352:	2201      	movs	r2, #1
 8000354:	629a      	str	r2, [r3, #40]	@ 0x28
	delay_ms(100);	
 8000356:	2064      	movs	r0, #100	@ 0x64
 8000358:	f000 ffaa 	bl	80012b0 <delay_ms>
	LCD_RST_SET;
 800035c:	4b03      	ldr	r3, [pc, #12]	@ (800036c <LCD_RESET+0x20>)
 800035e:	2201      	movs	r2, #1
 8000360:	619a      	str	r2, [r3, #24]
	delay_ms(50);
 8000362:	2032      	movs	r0, #50	@ 0x32
 8000364:	f000 ffa4 	bl	80012b0 <delay_ms>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	48000800 	.word	0x48000800

08000370 <ILI9341_paradriver_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void ILI9341_paradriver_Init(void)
{  
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	//LCD_GPIOInit();	// already done with CUBE MX
 	LCD_RESET(); //LCD ��λ
 8000374:	f7ff ffea 	bl	800034c <LCD_RESET>
//*************2.4inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 8000378:	20cf      	movs	r0, #207	@ 0xcf
 800037a:	f7ff ff49 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800037e:	4b9b      	ldr	r3, [pc, #620]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000380:	2204      	movs	r2, #4
 8000382:	619a      	str	r2, [r3, #24]
 8000384:	4b99      	ldr	r3, [pc, #612]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000386:	2202      	movs	r2, #2
 8000388:	629a      	str	r2, [r3, #40]	@ 0x28
 800038a:	4b99      	ldr	r3, [pc, #612]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	4b96      	ldr	r3, [pc, #600]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000392:	2208      	movs	r2, #8
 8000394:	629a      	str	r2, [r3, #40]	@ 0x28
 8000396:	4b95      	ldr	r3, [pc, #596]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000398:	2208      	movs	r2, #8
 800039a:	619a      	str	r2, [r3, #24]
 800039c:	4b93      	ldr	r3, [pc, #588]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800039e:	2202      	movs	r2, #2
 80003a0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xD9); //0xC1 
 80003a2:	4b92      	ldr	r3, [pc, #584]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003a4:	2204      	movs	r2, #4
 80003a6:	619a      	str	r2, [r3, #24]
 80003a8:	4b90      	ldr	r3, [pc, #576]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003aa:	2202      	movs	r2, #2
 80003ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80003ae:	4b90      	ldr	r3, [pc, #576]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80003b0:	22d9      	movs	r2, #217	@ 0xd9
 80003b2:	615a      	str	r2, [r3, #20]
 80003b4:	4b8d      	ldr	r3, [pc, #564]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80003ba:	4b8c      	ldr	r3, [pc, #560]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003bc:	2208      	movs	r2, #8
 80003be:	619a      	str	r2, [r3, #24]
 80003c0:	4b8a      	ldr	r3, [pc, #552]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X30); 
 80003c6:	4b89      	ldr	r3, [pc, #548]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003c8:	2204      	movs	r2, #4
 80003ca:	619a      	str	r2, [r3, #24]
 80003cc:	4b87      	ldr	r3, [pc, #540]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003ce:	2202      	movs	r2, #2
 80003d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80003d2:	4b87      	ldr	r3, [pc, #540]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80003d4:	2230      	movs	r2, #48	@ 0x30
 80003d6:	615a      	str	r2, [r3, #20]
 80003d8:	4b84      	ldr	r3, [pc, #528]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003da:	2208      	movs	r2, #8
 80003dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80003de:	4b83      	ldr	r3, [pc, #524]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003e0:	2208      	movs	r2, #8
 80003e2:	619a      	str	r2, [r3, #24]
 80003e4:	4b81      	ldr	r3, [pc, #516]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003e6:	2202      	movs	r2, #2
 80003e8:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xED);  
 80003ea:	20ed      	movs	r0, #237	@ 0xed
 80003ec:	f7ff ff10 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 80003f0:	4b7e      	ldr	r3, [pc, #504]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003f2:	2204      	movs	r2, #4
 80003f4:	619a      	str	r2, [r3, #24]
 80003f6:	4b7d      	ldr	r3, [pc, #500]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80003f8:	2202      	movs	r2, #2
 80003fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80003fc:	4b7c      	ldr	r3, [pc, #496]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80003fe:	2264      	movs	r2, #100	@ 0x64
 8000400:	615a      	str	r2, [r3, #20]
 8000402:	4b7a      	ldr	r3, [pc, #488]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000404:	2208      	movs	r2, #8
 8000406:	629a      	str	r2, [r3, #40]	@ 0x28
 8000408:	4b78      	ldr	r3, [pc, #480]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800040a:	2208      	movs	r2, #8
 800040c:	619a      	str	r2, [r3, #24]
 800040e:	4b77      	ldr	r3, [pc, #476]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000410:	2202      	movs	r2, #2
 8000412:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x03); 
 8000414:	4b75      	ldr	r3, [pc, #468]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000416:	2204      	movs	r2, #4
 8000418:	619a      	str	r2, [r3, #24]
 800041a:	4b74      	ldr	r3, [pc, #464]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800041c:	2202      	movs	r2, #2
 800041e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000420:	4b73      	ldr	r3, [pc, #460]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000422:	2203      	movs	r2, #3
 8000424:	615a      	str	r2, [r3, #20]
 8000426:	4b71      	ldr	r3, [pc, #452]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000428:	2208      	movs	r2, #8
 800042a:	629a      	str	r2, [r3, #40]	@ 0x28
 800042c:	4b6f      	ldr	r3, [pc, #444]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800042e:	2208      	movs	r2, #8
 8000430:	619a      	str	r2, [r3, #24]
 8000432:	4b6e      	ldr	r3, [pc, #440]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000434:	2202      	movs	r2, #2
 8000436:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X12); 
 8000438:	4b6c      	ldr	r3, [pc, #432]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800043a:	2204      	movs	r2, #4
 800043c:	619a      	str	r2, [r3, #24]
 800043e:	4b6b      	ldr	r3, [pc, #428]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000440:	2202      	movs	r2, #2
 8000442:	629a      	str	r2, [r3, #40]	@ 0x28
 8000444:	4b6a      	ldr	r3, [pc, #424]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000446:	2212      	movs	r2, #18
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	4b68      	ldr	r3, [pc, #416]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800044c:	2208      	movs	r2, #8
 800044e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000450:	4b66      	ldr	r3, [pc, #408]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000452:	2208      	movs	r2, #8
 8000454:	619a      	str	r2, [r3, #24]
 8000456:	4b65      	ldr	r3, [pc, #404]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000458:	2202      	movs	r2, #2
 800045a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X81); 
 800045c:	4b63      	ldr	r3, [pc, #396]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800045e:	2204      	movs	r2, #4
 8000460:	619a      	str	r2, [r3, #24]
 8000462:	4b62      	ldr	r3, [pc, #392]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000464:	2202      	movs	r2, #2
 8000466:	629a      	str	r2, [r3, #40]	@ 0x28
 8000468:	4b61      	ldr	r3, [pc, #388]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800046a:	2281      	movs	r2, #129	@ 0x81
 800046c:	615a      	str	r2, [r3, #20]
 800046e:	4b5f      	ldr	r3, [pc, #380]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000470:	2208      	movs	r2, #8
 8000472:	629a      	str	r2, [r3, #40]	@ 0x28
 8000474:	4b5d      	ldr	r3, [pc, #372]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000476:	2208      	movs	r2, #8
 8000478:	619a      	str	r2, [r3, #24]
 800047a:	4b5c      	ldr	r3, [pc, #368]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800047c:	2202      	movs	r2, #2
 800047e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xE8);  
 8000480:	20e8      	movs	r0, #232	@ 0xe8
 8000482:	f7ff fec5 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8000486:	4b59      	ldr	r3, [pc, #356]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000488:	2204      	movs	r2, #4
 800048a:	619a      	str	r2, [r3, #24]
 800048c:	4b57      	ldr	r3, [pc, #348]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800048e:	2202      	movs	r2, #2
 8000490:	629a      	str	r2, [r3, #40]	@ 0x28
 8000492:	4b57      	ldr	r3, [pc, #348]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000494:	2285      	movs	r2, #133	@ 0x85
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	4b54      	ldr	r3, [pc, #336]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800049a:	2208      	movs	r2, #8
 800049c:	629a      	str	r2, [r3, #40]	@ 0x28
 800049e:	4b53      	ldr	r3, [pc, #332]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004a0:	2208      	movs	r2, #8
 80004a2:	619a      	str	r2, [r3, #24]
 80004a4:	4b51      	ldr	r3, [pc, #324]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004a6:	2202      	movs	r2, #2
 80004a8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x10); 
 80004aa:	4b50      	ldr	r3, [pc, #320]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004ac:	2204      	movs	r2, #4
 80004ae:	619a      	str	r2, [r3, #24]
 80004b0:	4b4e      	ldr	r3, [pc, #312]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004b2:	2202      	movs	r2, #2
 80004b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80004b6:	4b4e      	ldr	r3, [pc, #312]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80004b8:	2210      	movs	r2, #16
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	4b4b      	ldr	r3, [pc, #300]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004be:	2208      	movs	r2, #8
 80004c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80004c2:	4b4a      	ldr	r3, [pc, #296]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004c4:	2208      	movs	r2, #8
 80004c6:	619a      	str	r2, [r3, #24]
 80004c8:	4b48      	ldr	r3, [pc, #288]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x7A); 
 80004ce:	4b47      	ldr	r3, [pc, #284]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004d0:	2204      	movs	r2, #4
 80004d2:	619a      	str	r2, [r3, #24]
 80004d4:	4b45      	ldr	r3, [pc, #276]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004d6:	2202      	movs	r2, #2
 80004d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80004da:	4b45      	ldr	r3, [pc, #276]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80004dc:	227a      	movs	r2, #122	@ 0x7a
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	4b42      	ldr	r3, [pc, #264]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80004e6:	4b41      	ldr	r3, [pc, #260]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004e8:	2208      	movs	r2, #8
 80004ea:	619a      	str	r2, [r3, #24]
 80004ec:	4b3f      	ldr	r3, [pc, #252]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004ee:	2202      	movs	r2, #2
 80004f0:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xCB);  
 80004f2:	20cb      	movs	r0, #203	@ 0xcb
 80004f4:	f7ff fe8c 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 80004f8:	4b3c      	ldr	r3, [pc, #240]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	619a      	str	r2, [r3, #24]
 80004fe:	4b3b      	ldr	r3, [pc, #236]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000500:	2202      	movs	r2, #2
 8000502:	629a      	str	r2, [r3, #40]	@ 0x28
 8000504:	4b3a      	ldr	r3, [pc, #232]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000506:	2239      	movs	r2, #57	@ 0x39
 8000508:	615a      	str	r2, [r3, #20]
 800050a:	4b38      	ldr	r3, [pc, #224]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800050c:	2208      	movs	r2, #8
 800050e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000510:	4b36      	ldr	r3, [pc, #216]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000512:	2208      	movs	r2, #8
 8000514:	619a      	str	r2, [r3, #24]
 8000516:	4b35      	ldr	r3, [pc, #212]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000518:	2202      	movs	r2, #2
 800051a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2C); 
 800051c:	4b33      	ldr	r3, [pc, #204]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800051e:	2204      	movs	r2, #4
 8000520:	619a      	str	r2, [r3, #24]
 8000522:	4b32      	ldr	r3, [pc, #200]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000524:	2202      	movs	r2, #2
 8000526:	629a      	str	r2, [r3, #40]	@ 0x28
 8000528:	4b31      	ldr	r3, [pc, #196]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800052a:	222c      	movs	r2, #44	@ 0x2c
 800052c:	615a      	str	r2, [r3, #20]
 800052e:	4b2f      	ldr	r3, [pc, #188]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000530:	2208      	movs	r2, #8
 8000532:	629a      	str	r2, [r3, #40]	@ 0x28
 8000534:	4b2d      	ldr	r3, [pc, #180]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000536:	2208      	movs	r2, #8
 8000538:	619a      	str	r2, [r3, #24]
 800053a:	4b2c      	ldr	r3, [pc, #176]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800053c:	2202      	movs	r2, #2
 800053e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00); 
 8000540:	4b2a      	ldr	r3, [pc, #168]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000542:	2204      	movs	r2, #4
 8000544:	619a      	str	r2, [r3, #24]
 8000546:	4b29      	ldr	r3, [pc, #164]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000548:	2202      	movs	r2, #2
 800054a:	629a      	str	r2, [r3, #40]	@ 0x28
 800054c:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 800054e:	2200      	movs	r2, #0
 8000550:	615a      	str	r2, [r3, #20]
 8000552:	4b26      	ldr	r3, [pc, #152]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000554:	2208      	movs	r2, #8
 8000556:	629a      	str	r2, [r3, #40]	@ 0x28
 8000558:	4b24      	ldr	r3, [pc, #144]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800055a:	2208      	movs	r2, #8
 800055c:	619a      	str	r2, [r3, #24]
 800055e:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000560:	2202      	movs	r2, #2
 8000562:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x34); 
 8000564:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000566:	2204      	movs	r2, #4
 8000568:	619a      	str	r2, [r3, #24]
 800056a:	4b20      	ldr	r3, [pc, #128]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800056c:	2202      	movs	r2, #2
 800056e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000572:	2234      	movs	r2, #52	@ 0x34
 8000574:	615a      	str	r2, [r3, #20]
 8000576:	4b1d      	ldr	r3, [pc, #116]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000578:	2208      	movs	r2, #8
 800057a:	629a      	str	r2, [r3, #40]	@ 0x28
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800057e:	2208      	movs	r2, #8
 8000580:	619a      	str	r2, [r3, #24]
 8000582:	4b1a      	ldr	r3, [pc, #104]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000584:	2202      	movs	r2, #2
 8000586:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x02); 
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800058a:	2204      	movs	r2, #4
 800058c:	619a      	str	r2, [r3, #24]
 800058e:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 8000590:	2202      	movs	r2, #2
 8000592:	629a      	str	r2, [r3, #40]	@ 0x28
 8000594:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 8000596:	2202      	movs	r2, #2
 8000598:	615a      	str	r2, [r3, #20]
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 800059c:	2208      	movs	r2, #8
 800059e:	629a      	str	r2, [r3, #40]	@ 0x28
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005a2:	2208      	movs	r2, #8
 80005a4:	619a      	str	r2, [r3, #24]
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xF7);  
 80005ac:	20f7      	movs	r0, #247	@ 0xf7
 80005ae:	f7ff fe2f 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005b4:	2204      	movs	r2, #4
 80005b6:	619a      	str	r2, [r3, #24]
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <ILI9341_paradriver_Init+0x280>)
 80005c0:	2220      	movs	r2, #32
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005c6:	2208      	movs	r2, #8
 80005c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80005ca:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	619a      	str	r2, [r3, #24]
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xEA);  
 80005d6:	20ea      	movs	r0, #234	@ 0xea
 80005d8:	f7ff fe1a 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80005dc:	4b03      	ldr	r3, [pc, #12]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005de:	2204      	movs	r2, #4
 80005e0:	619a      	str	r2, [r3, #24]
 80005e2:	4b02      	ldr	r3, [pc, #8]	@ (80005ec <ILI9341_paradriver_Init+0x27c>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80005e8:	e004      	b.n	80005f4 <ILI9341_paradriver_Init+0x284>
 80005ea:	bf00      	nop
 80005ec:	48000800 	.word	0x48000800
 80005f0:	48000400 	.word	0x48000400
 80005f4:	4b9f      	ldr	r3, [pc, #636]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
 80005fa:	4b9f      	ldr	r3, [pc, #636]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8000600:	4b9d      	ldr	r3, [pc, #628]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000602:	2208      	movs	r2, #8
 8000604:	619a      	str	r2, [r3, #24]
 8000606:	4b9c      	ldr	r3, [pc, #624]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000608:	2202      	movs	r2, #2
 800060a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00); 
 800060c:	4b9a      	ldr	r3, [pc, #616]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800060e:	2204      	movs	r2, #4
 8000610:	619a      	str	r2, [r3, #24]
 8000612:	4b99      	ldr	r3, [pc, #612]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000614:	2202      	movs	r2, #2
 8000616:	629a      	str	r2, [r3, #40]	@ 0x28
 8000618:	4b96      	ldr	r3, [pc, #600]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
 800061e:	4b96      	ldr	r3, [pc, #600]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000620:	2208      	movs	r2, #8
 8000622:	629a      	str	r2, [r3, #40]	@ 0x28
 8000624:	4b94      	ldr	r3, [pc, #592]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000626:	2208      	movs	r2, #8
 8000628:	619a      	str	r2, [r3, #24]
 800062a:	4b93      	ldr	r3, [pc, #588]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800062c:	2202      	movs	r2, #2
 800062e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC0);    //Power control 
 8000630:	20c0      	movs	r0, #192	@ 0xc0
 8000632:	f7ff fded 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 8000636:	4b90      	ldr	r3, [pc, #576]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000638:	2204      	movs	r2, #4
 800063a:	619a      	str	r2, [r3, #24]
 800063c:	4b8e      	ldr	r3, [pc, #568]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800063e:	2202      	movs	r2, #2
 8000640:	629a      	str	r2, [r3, #40]	@ 0x28
 8000642:	4b8c      	ldr	r3, [pc, #560]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000644:	221b      	movs	r2, #27
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	4b8b      	ldr	r3, [pc, #556]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800064a:	2208      	movs	r2, #8
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
 800064e:	4b8a      	ldr	r3, [pc, #552]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000650:	2208      	movs	r2, #8
 8000652:	619a      	str	r2, [r3, #24]
 8000654:	4b88      	ldr	r3, [pc, #544]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000656:	2202      	movs	r2, #2
 8000658:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC1);    //Power control 
 800065a:	20c1      	movs	r0, #193	@ 0xc1
 800065c:	f7ff fdd8 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] 0x01
 8000660:	4b85      	ldr	r3, [pc, #532]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000662:	2204      	movs	r2, #4
 8000664:	619a      	str	r2, [r3, #24]
 8000666:	4b84      	ldr	r3, [pc, #528]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000668:	2202      	movs	r2, #2
 800066a:	629a      	str	r2, [r3, #40]	@ 0x28
 800066c:	4b81      	ldr	r3, [pc, #516]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800066e:	2212      	movs	r2, #18
 8000670:	615a      	str	r2, [r3, #20]
 8000672:	4b81      	ldr	r3, [pc, #516]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000674:	2208      	movs	r2, #8
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
 8000678:	4b7f      	ldr	r3, [pc, #508]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800067a:	2208      	movs	r2, #8
 800067c:	619a      	str	r2, [r3, #24]
 800067e:	4b7e      	ldr	r3, [pc, #504]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000680:	2202      	movs	r2, #2
 8000682:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC5);    //VCM control 
 8000684:	20c5      	movs	r0, #197	@ 0xc5
 8000686:	f7ff fdc3 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 	 //30
 800068a:	4b7b      	ldr	r3, [pc, #492]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800068c:	2204      	movs	r2, #4
 800068e:	619a      	str	r2, [r3, #24]
 8000690:	4b79      	ldr	r3, [pc, #484]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000692:	2202      	movs	r2, #2
 8000694:	629a      	str	r2, [r3, #40]	@ 0x28
 8000696:	4b77      	ldr	r3, [pc, #476]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000698:	2208      	movs	r2, #8
 800069a:	615a      	str	r2, [r3, #20]
 800069c:	4b76      	ldr	r3, [pc, #472]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800069e:	2208      	movs	r2, #8
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80006a2:	4b75      	ldr	r3, [pc, #468]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006a4:	2208      	movs	r2, #8
 80006a6:	619a      	str	r2, [r3, #24]
 80006a8:	4b73      	ldr	r3, [pc, #460]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x26); 	 //30
 80006ae:	4b72      	ldr	r3, [pc, #456]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	619a      	str	r2, [r3, #24]
 80006b4:	4b70      	ldr	r3, [pc, #448]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80006ba:	4b6e      	ldr	r3, [pc, #440]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80006bc:	2226      	movs	r2, #38	@ 0x26
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	4b6d      	ldr	r3, [pc, #436]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006c2:	2208      	movs	r2, #8
 80006c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80006c6:	4b6c      	ldr	r3, [pc, #432]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006c8:	2208      	movs	r2, #8
 80006ca:	619a      	str	r2, [r3, #24]
 80006cc:	4b6a      	ldr	r3, [pc, #424]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006ce:	2202      	movs	r2, #2
 80006d0:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC7);    //VCM control2 
 80006d2:	20c7      	movs	r0, #199	@ 0xc7
 80006d4:	f7ff fd9c 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 80006d8:	4b67      	ldr	r3, [pc, #412]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006da:	2204      	movs	r2, #4
 80006dc:	619a      	str	r2, [r3, #24]
 80006de:	4b66      	ldr	r3, [pc, #408]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80006e4:	4b63      	ldr	r3, [pc, #396]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80006e6:	22b7      	movs	r2, #183	@ 0xb7
 80006e8:	615a      	str	r2, [r3, #20]
 80006ea:	4b63      	ldr	r3, [pc, #396]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006ec:	2208      	movs	r2, #8
 80006ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80006f0:	4b61      	ldr	r3, [pc, #388]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006f2:	2208      	movs	r2, #8
 80006f4:	619a      	str	r2, [r3, #24]
 80006f6:	4b60      	ldr	r3, [pc, #384]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x36);    // Memory Access Control 
 80006fc:	2036      	movs	r0, #54	@ 0x36
 80006fe:	f7ff fd87 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 8000702:	4b5d      	ldr	r3, [pc, #372]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000704:	2204      	movs	r2, #4
 8000706:	619a      	str	r2, [r3, #24]
 8000708:	4b5b      	ldr	r3, [pc, #364]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800070a:	2202      	movs	r2, #2
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28
 800070e:	4b59      	ldr	r3, [pc, #356]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000710:	2208      	movs	r2, #8
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	4b58      	ldr	r3, [pc, #352]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000716:	2208      	movs	r2, #8
 8000718:	629a      	str	r2, [r3, #40]	@ 0x28
 800071a:	4b57      	ldr	r3, [pc, #348]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800071c:	2208      	movs	r2, #8
 800071e:	619a      	str	r2, [r3, #24]
 8000720:	4b55      	ldr	r3, [pc, #340]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000722:	2202      	movs	r2, #2
 8000724:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x3A);   
 8000726:	203a      	movs	r0, #58	@ 0x3a
 8000728:	f7ff fd72 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 800072c:	4b52      	ldr	r3, [pc, #328]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800072e:	2204      	movs	r2, #4
 8000730:	619a      	str	r2, [r3, #24]
 8000732:	4b51      	ldr	r3, [pc, #324]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000734:	2202      	movs	r2, #2
 8000736:	629a      	str	r2, [r3, #40]	@ 0x28
 8000738:	4b4e      	ldr	r3, [pc, #312]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800073a:	2255      	movs	r2, #85	@ 0x55
 800073c:	615a      	str	r2, [r3, #20]
 800073e:	4b4e      	ldr	r3, [pc, #312]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000740:	2208      	movs	r2, #8
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
 8000744:	4b4c      	ldr	r3, [pc, #304]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000746:	2208      	movs	r2, #8
 8000748:	619a      	str	r2, [r3, #24]
 800074a:	4b4b      	ldr	r3, [pc, #300]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800074c:	2202      	movs	r2, #2
 800074e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xB1);   
 8000750:	20b1      	movs	r0, #177	@ 0xb1
 8000752:	f7ff fd5d 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 8000756:	4b48      	ldr	r3, [pc, #288]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000758:	2204      	movs	r2, #4
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	4b46      	ldr	r3, [pc, #280]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800075e:	2202      	movs	r2, #2
 8000760:	629a      	str	r2, [r3, #40]	@ 0x28
 8000762:	4b44      	ldr	r3, [pc, #272]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	4b43      	ldr	r3, [pc, #268]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800076a:	2208      	movs	r2, #8
 800076c:	629a      	str	r2, [r3, #40]	@ 0x28
 800076e:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000770:	2208      	movs	r2, #8
 8000772:	619a      	str	r2, [r3, #24]
 8000774:	4b40      	ldr	r3, [pc, #256]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000776:	2202      	movs	r2, #2
 8000778:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1A); 
 800077a:	4b3f      	ldr	r3, [pc, #252]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800077c:	2204      	movs	r2, #4
 800077e:	619a      	str	r2, [r3, #24]
 8000780:	4b3d      	ldr	r3, [pc, #244]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000782:	2202      	movs	r2, #2
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
 8000786:	4b3b      	ldr	r3, [pc, #236]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000788:	221a      	movs	r2, #26
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800078e:	2208      	movs	r2, #8
 8000790:	629a      	str	r2, [r3, #40]	@ 0x28
 8000792:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000794:	2208      	movs	r2, #8
 8000796:	619a      	str	r2, [r3, #24]
 8000798:	4b37      	ldr	r3, [pc, #220]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800079a:	2202      	movs	r2, #2
 800079c:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xB6);    // Display Function Control 
 800079e:	20b6      	movs	r0, #182	@ 0xb6
 80007a0:	f7ff fd36 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 80007a4:	4b34      	ldr	r3, [pc, #208]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	619a      	str	r2, [r3, #24]
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80007b0:	4b30      	ldr	r3, [pc, #192]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80007b2:	220a      	movs	r2, #10
 80007b4:	615a      	str	r2, [r3, #20]
 80007b6:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007b8:	2208      	movs	r2, #8
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80007bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007be:	2208      	movs	r2, #8
 80007c0:	619a      	str	r2, [r3, #24]
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xA2); 
 80007c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	619a      	str	r2, [r3, #24]
 80007ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 80007d6:	22a2      	movs	r2, #162	@ 0xa2
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007dc:	2208      	movs	r2, #8
 80007de:	629a      	str	r2, [r3, #40]	@ 0x28
 80007e0:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007e2:	2208      	movs	r2, #8
 80007e4:	619a      	str	r2, [r3, #24]
 80007e6:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80007ec:	20f2      	movs	r0, #242	@ 0xf2
 80007ee:	f7ff fd0f 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007f4:	2204      	movs	r2, #4
 80007f6:	619a      	str	r2, [r3, #24]
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000806:	2208      	movs	r2, #8
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800080c:	2208      	movs	r2, #8
 800080e:	619a      	str	r2, [r3, #24]
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000812:	2202      	movs	r2, #2
 8000814:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x26);    //Gamma curve selected 
 8000816:	2026      	movs	r0, #38	@ 0x26
 8000818:	f7ff fcfa 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800081e:	2204      	movs	r2, #4
 8000820:	619a      	str	r2, [r3, #24]
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000824:	2202      	movs	r2, #2
 8000826:	629a      	str	r2, [r3, #40]	@ 0x28
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 800082a:	2201      	movs	r2, #1
 800082c:	615a      	str	r2, [r3, #20]
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000830:	2208      	movs	r2, #8
 8000832:	629a      	str	r2, [r3, #40]	@ 0x28
 8000834:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000836:	2208      	movs	r2, #8
 8000838:	619a      	str	r2, [r3, #24]
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800083c:	2202      	movs	r2, #2
 800083e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xE0);    //Set Gamma 
 8000840:	20e0      	movs	r0, #224	@ 0xe0
 8000842:	f7ff fce5 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000848:	2204      	movs	r2, #4
 800084a:	619a      	str	r2, [r3, #24]
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800084e:	2202      	movs	r2, #2
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <ILI9341_paradriver_Init+0x504>)
 8000854:	220f      	movs	r2, #15
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800085a:	2208      	movs	r2, #8
 800085c:	629a      	str	r2, [r3, #40]	@ 0x28
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000860:	2208      	movs	r2, #8
 8000862:	619a      	str	r2, [r3, #24]
 8000864:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 8000866:	2202      	movs	r2, #2
 8000868:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1D); 
 800086a:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <ILI9341_paradriver_Init+0x508>)
 800086c:	2204      	movs	r2, #4
 800086e:	619a      	str	r2, [r3, #24]
 8000870:	e004      	b.n	800087c <ILI9341_paradriver_Init+0x50c>
 8000872:	bf00      	nop
 8000874:	48000400 	.word	0x48000400
 8000878:	48000800 	.word	0x48000800
 800087c:	4b99      	ldr	r3, [pc, #612]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800087e:	2202      	movs	r2, #2
 8000880:	629a      	str	r2, [r3, #40]	@ 0x28
 8000882:	4b99      	ldr	r3, [pc, #612]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000884:	221d      	movs	r2, #29
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	4b96      	ldr	r3, [pc, #600]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800088a:	2208      	movs	r2, #8
 800088c:	629a      	str	r2, [r3, #40]	@ 0x28
 800088e:	4b95      	ldr	r3, [pc, #596]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000890:	2208      	movs	r2, #8
 8000892:	619a      	str	r2, [r3, #24]
 8000894:	4b93      	ldr	r3, [pc, #588]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000896:	2202      	movs	r2, #2
 8000898:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1A); 
 800089a:	4b92      	ldr	r3, [pc, #584]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800089c:	2204      	movs	r2, #4
 800089e:	619a      	str	r2, [r3, #24]
 80008a0:	4b90      	ldr	r3, [pc, #576]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80008a6:	4b90      	ldr	r3, [pc, #576]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80008a8:	221a      	movs	r2, #26
 80008aa:	615a      	str	r2, [r3, #20]
 80008ac:	4b8d      	ldr	r3, [pc, #564]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008ae:	2208      	movs	r2, #8
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80008b2:	4b8c      	ldr	r3, [pc, #560]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	619a      	str	r2, [r3, #24]
 80008b8:	4b8a      	ldr	r3, [pc, #552]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0A); 
 80008be:	4b89      	ldr	r3, [pc, #548]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008c0:	2204      	movs	r2, #4
 80008c2:	619a      	str	r2, [r3, #24]
 80008c4:	4b87      	ldr	r3, [pc, #540]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80008ca:	4b87      	ldr	r3, [pc, #540]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80008cc:	220a      	movs	r2, #10
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	4b84      	ldr	r3, [pc, #528]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008d2:	2208      	movs	r2, #8
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80008d6:	4b83      	ldr	r3, [pc, #524]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008d8:	2208      	movs	r2, #8
 80008da:	619a      	str	r2, [r3, #24]
 80008dc:	4b81      	ldr	r3, [pc, #516]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008de:	2202      	movs	r2, #2
 80008e0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0D); 
 80008e2:	4b80      	ldr	r3, [pc, #512]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	619a      	str	r2, [r3, #24]
 80008e8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80008ee:	4b7e      	ldr	r3, [pc, #504]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80008f0:	220d      	movs	r2, #13
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b7b      	ldr	r3, [pc, #492]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008f6:	2208      	movs	r2, #8
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80008fa:	4b7a      	ldr	r3, [pc, #488]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80008fc:	2208      	movs	r2, #8
 80008fe:	619a      	str	r2, [r3, #24]
 8000900:	4b78      	ldr	r3, [pc, #480]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000902:	2202      	movs	r2, #2
 8000904:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8000906:	4b77      	ldr	r3, [pc, #476]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000908:	2204      	movs	r2, #4
 800090a:	619a      	str	r2, [r3, #24]
 800090c:	4b75      	ldr	r3, [pc, #468]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800090e:	2202      	movs	r2, #2
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28
 8000912:	4b75      	ldr	r3, [pc, #468]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000914:	2207      	movs	r2, #7
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	4b72      	ldr	r3, [pc, #456]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800091a:	2208      	movs	r2, #8
 800091c:	629a      	str	r2, [r3, #40]	@ 0x28
 800091e:	4b71      	ldr	r3, [pc, #452]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000920:	2208      	movs	r2, #8
 8000922:	619a      	str	r2, [r3, #24]
 8000924:	4b6f      	ldr	r3, [pc, #444]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000926:	2202      	movs	r2, #2
 8000928:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x49); 
 800092a:	4b6e      	ldr	r3, [pc, #440]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800092c:	2204      	movs	r2, #4
 800092e:	619a      	str	r2, [r3, #24]
 8000930:	4b6c      	ldr	r3, [pc, #432]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000932:	2202      	movs	r2, #2
 8000934:	629a      	str	r2, [r3, #40]	@ 0x28
 8000936:	4b6c      	ldr	r3, [pc, #432]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000938:	2249      	movs	r2, #73	@ 0x49
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	4b69      	ldr	r3, [pc, #420]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800093e:	2208      	movs	r2, #8
 8000940:	629a      	str	r2, [r3, #40]	@ 0x28
 8000942:	4b68      	ldr	r3, [pc, #416]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000944:	2208      	movs	r2, #8
 8000946:	619a      	str	r2, [r3, #24]
 8000948:	4b66      	ldr	r3, [pc, #408]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800094a:	2202      	movs	r2, #2
 800094c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X66); 
 800094e:	4b65      	ldr	r3, [pc, #404]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000950:	2204      	movs	r2, #4
 8000952:	619a      	str	r2, [r3, #24]
 8000954:	4b63      	ldr	r3, [pc, #396]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000956:	2202      	movs	r2, #2
 8000958:	629a      	str	r2, [r3, #40]	@ 0x28
 800095a:	4b63      	ldr	r3, [pc, #396]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 800095c:	2266      	movs	r2, #102	@ 0x66
 800095e:	615a      	str	r2, [r3, #20]
 8000960:	4b60      	ldr	r3, [pc, #384]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000962:	2208      	movs	r2, #8
 8000964:	629a      	str	r2, [r3, #40]	@ 0x28
 8000966:	4b5f      	ldr	r3, [pc, #380]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000968:	2208      	movs	r2, #8
 800096a:	619a      	str	r2, [r3, #24]
 800096c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800096e:	2202      	movs	r2, #2
 8000970:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x3B); 
 8000972:	4b5c      	ldr	r3, [pc, #368]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000974:	2204      	movs	r2, #4
 8000976:	619a      	str	r2, [r3, #24]
 8000978:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800097a:	2202      	movs	r2, #2
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
 800097e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000980:	223b      	movs	r2, #59	@ 0x3b
 8000982:	615a      	str	r2, [r3, #20]
 8000984:	4b57      	ldr	r3, [pc, #348]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000986:	2208      	movs	r2, #8
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
 800098a:	4b56      	ldr	r3, [pc, #344]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800098c:	2208      	movs	r2, #8
 800098e:	619a      	str	r2, [r3, #24]
 8000990:	4b54      	ldr	r3, [pc, #336]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000992:	2202      	movs	r2, #2
 8000994:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8000996:	4b53      	ldr	r3, [pc, #332]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000998:	2204      	movs	r2, #4
 800099a:	619a      	str	r2, [r3, #24]
 800099c:	4b51      	ldr	r3, [pc, #324]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 800099e:	2202      	movs	r2, #2
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80009a2:	4b51      	ldr	r3, [pc, #324]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	4b4e      	ldr	r3, [pc, #312]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80009ae:	4b4d      	ldr	r3, [pc, #308]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009b0:	2208      	movs	r2, #8
 80009b2:	619a      	str	r2, [r3, #24]
 80009b4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009b6:	2202      	movs	r2, #2
 80009b8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x11); 
 80009ba:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009bc:	2204      	movs	r2, #4
 80009be:	619a      	str	r2, [r3, #24]
 80009c0:	4b48      	ldr	r3, [pc, #288]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80009c6:	4b48      	ldr	r3, [pc, #288]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80009c8:	2211      	movs	r2, #17
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	4b45      	ldr	r3, [pc, #276]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80009d2:	4b44      	ldr	r3, [pc, #272]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009d4:	2208      	movs	r2, #8
 80009d6:	619a      	str	r2, [r3, #24]
 80009d8:	4b42      	ldr	r3, [pc, #264]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009da:	2202      	movs	r2, #2
 80009dc:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x01); 
 80009de:	4b41      	ldr	r3, [pc, #260]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009e0:	2204      	movs	r2, #4
 80009e2:	619a      	str	r2, [r3, #24]
 80009e4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80009ea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009f2:	2208      	movs	r2, #8
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80009f6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009f8:	2208      	movs	r2, #8
 80009fa:	619a      	str	r2, [r3, #24]
 80009fc:	4b39      	ldr	r3, [pc, #228]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 80009fe:	2202      	movs	r2, #2
 8000a00:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x09); 
 8000a02:	4b38      	ldr	r3, [pc, #224]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a04:	2204      	movs	r2, #4
 8000a06:	619a      	str	r2, [r3, #24]
 8000a08:	4b36      	ldr	r3, [pc, #216]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a0e:	4b36      	ldr	r3, [pc, #216]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a10:	2209      	movs	r2, #9
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	4b33      	ldr	r3, [pc, #204]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	619a      	str	r2, [r3, #24]
 8000a20:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x05); 
 8000a26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a28:	2204      	movs	r2, #4
 8000a2a:	619a      	str	r2, [r3, #24]
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a34:	2205      	movs	r2, #5
 8000a36:	615a      	str	r2, [r3, #20]
 8000a38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a40:	2208      	movs	r2, #8
 8000a42:	619a      	str	r2, [r3, #24]
 8000a44:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x04); 		 
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	619a      	str	r2, [r3, #24]
 8000a50:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a56:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a58:	2204      	movs	r2, #4
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a62:	4b20      	ldr	r3, [pc, #128]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a64:	2208      	movs	r2, #8
 8000a66:	619a      	str	r2, [r3, #24]
 8000a68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0XE1);    //Set Gamma 
 8000a6e:	20e1      	movs	r0, #225	@ 0xe1
 8000a70:	f7ff fbce 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000a74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	619a      	str	r2, [r3, #24]
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a80:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a88:	2208      	movs	r2, #8
 8000a8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	619a      	str	r2, [r3, #24]
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x18); 
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	619a      	str	r2, [r3, #24]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000aa4:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000aa6:	2218      	movs	r2, #24
 8000aa8:	615a      	str	r2, [r3, #20]
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000aac:	2208      	movs	r2, #8
 8000aae:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	619a      	str	r2, [r3, #24]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1D); 
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000abe:	2204      	movs	r2, #4
 8000ac0:	619a      	str	r2, [r3, #24]
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ac8:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <ILI9341_paradriver_Init+0x778>)
 8000aca:	221d      	movs	r2, #29
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ad0:	2208      	movs	r2, #8
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	619a      	str	r2, [r3, #24]
 8000ada:	4b02      	ldr	r3, [pc, #8]	@ (8000ae4 <ILI9341_paradriver_Init+0x774>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	619a      	str	r2, [r3, #24]
 8000ae0:	e004      	b.n	8000aec <ILI9341_paradriver_Init+0x77c>
 8000ae2:	bf00      	nop
 8000ae4:	48000800 	.word	0x48000800
 8000ae8:	48000400 	.word	0x48000400
	LCD_WR_DATA(0x02); 
 8000aec:	4b99      	ldr	r3, [pc, #612]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	619a      	str	r2, [r3, #24]
 8000af2:	4b98      	ldr	r3, [pc, #608]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000af8:	4b97      	ldr	r3, [pc, #604]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000afa:	2202      	movs	r2, #2
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	4b95      	ldr	r3, [pc, #596]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b00:	2208      	movs	r2, #8
 8000b02:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b04:	4b93      	ldr	r3, [pc, #588]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b06:	2208      	movs	r2, #8
 8000b08:	619a      	str	r2, [r3, #24]
 8000b0a:	4b92      	ldr	r3, [pc, #584]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0F); 
 8000b10:	4b90      	ldr	r3, [pc, #576]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	619a      	str	r2, [r3, #24]
 8000b16:	4b8f      	ldr	r3, [pc, #572]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b1c:	4b8e      	ldr	r3, [pc, #568]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b1e:	220f      	movs	r2, #15
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	4b8c      	ldr	r3, [pc, #560]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b24:	2208      	movs	r2, #8
 8000b26:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b28:	4b8a      	ldr	r3, [pc, #552]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	619a      	str	r2, [r3, #24]
 8000b2e:	4b89      	ldr	r3, [pc, #548]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x04); 
 8000b34:	4b87      	ldr	r3, [pc, #540]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b36:	2204      	movs	r2, #4
 8000b38:	619a      	str	r2, [r3, #24]
 8000b3a:	4b86      	ldr	r3, [pc, #536]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b40:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	4b83      	ldr	r3, [pc, #524]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b48:	2208      	movs	r2, #8
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b4c:	4b81      	ldr	r3, [pc, #516]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b4e:	2208      	movs	r2, #8
 8000b50:	619a      	str	r2, [r3, #24]
 8000b52:	4b80      	ldr	r3, [pc, #512]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x36); 
 8000b58:	4b7e      	ldr	r3, [pc, #504]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	619a      	str	r2, [r3, #24]
 8000b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b64:	4b7c      	ldr	r3, [pc, #496]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b66:	2236      	movs	r2, #54	@ 0x36
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b70:	4b78      	ldr	r3, [pc, #480]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	619a      	str	r2, [r3, #24]
 8000b76:	4b77      	ldr	r3, [pc, #476]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x13); 
 8000b7c:	4b75      	ldr	r3, [pc, #468]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	619a      	str	r2, [r3, #24]
 8000b82:	4b74      	ldr	r3, [pc, #464]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b88:	4b73      	ldr	r3, [pc, #460]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000b8a:	2213      	movs	r2, #19
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	4b71      	ldr	r3, [pc, #452]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b90:	2208      	movs	r2, #8
 8000b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b94:	4b6f      	ldr	r3, [pc, #444]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b96:	2208      	movs	r2, #8
 8000b98:	619a      	str	r2, [r3, #24]
 8000b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x4C); 
 8000ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	619a      	str	r2, [r3, #24]
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bac:	4b6a      	ldr	r3, [pc, #424]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000bae:	224c      	movs	r2, #76	@ 0x4c
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	4b68      	ldr	r3, [pc, #416]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bb8:	4b66      	ldr	r3, [pc, #408]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bba:	2208      	movs	r2, #8
 8000bbc:	619a      	str	r2, [r3, #24]
 8000bbe:	4b65      	ldr	r3, [pc, #404]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8000bc4:	4b63      	ldr	r3, [pc, #396]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	619a      	str	r2, [r3, #24]
 8000bca:	4b62      	ldr	r3, [pc, #392]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bd0:	4b61      	ldr	r3, [pc, #388]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bd8:	2208      	movs	r2, #8
 8000bda:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bdc:	4b5d      	ldr	r3, [pc, #372]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bde:	2208      	movs	r2, #8
 8000be0:	619a      	str	r2, [r3, #24]
 8000be2:	4b5c      	ldr	r3, [pc, #368]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x13); 
 8000be8:	4b5a      	ldr	r3, [pc, #360]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	619a      	str	r2, [r3, #24]
 8000bee:	4b59      	ldr	r3, [pc, #356]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bf4:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000bf6:	2213      	movs	r2, #19
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	4b56      	ldr	r3, [pc, #344]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c00:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c02:	2208      	movs	r2, #8
 8000c04:	619a      	str	r2, [r3, #24]
 8000c06:	4b53      	ldr	r3, [pc, #332]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c08:	2202      	movs	r2, #2
 8000c0a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0F); 
 8000c0c:	4b51      	ldr	r3, [pc, #324]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c0e:	2204      	movs	r2, #4
 8000c10:	619a      	str	r2, [r3, #24]
 8000c12:	4b50      	ldr	r3, [pc, #320]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c14:	2202      	movs	r2, #2
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c18:	4b4f      	ldr	r3, [pc, #316]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c20:	2208      	movs	r2, #8
 8000c22:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c24:	4b4b      	ldr	r3, [pc, #300]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c26:	2208      	movs	r2, #8
 8000c28:	619a      	str	r2, [r3, #24]
 8000c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2E); 
 8000c30:	4b48      	ldr	r3, [pc, #288]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c32:	2204      	movs	r2, #4
 8000c34:	619a      	str	r2, [r3, #24]
 8000c36:	4b47      	ldr	r3, [pc, #284]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c3c:	4b46      	ldr	r3, [pc, #280]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c3e:	222e      	movs	r2, #46	@ 0x2e
 8000c40:	615a      	str	r2, [r3, #20]
 8000c42:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c44:	2208      	movs	r2, #8
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c48:	4b42      	ldr	r3, [pc, #264]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	619a      	str	r2, [r3, #24]
 8000c4e:	4b41      	ldr	r3, [pc, #260]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2F); 
 8000c54:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c56:	2204      	movs	r2, #4
 8000c58:	619a      	str	r2, [r3, #24]
 8000c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c60:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c62:	222f      	movs	r2, #47	@ 0x2f
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c68:	2208      	movs	r2, #8
 8000c6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c6c:	4b39      	ldr	r3, [pc, #228]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c6e:	2208      	movs	r2, #8
 8000c70:	619a      	str	r2, [r3, #24]
 8000c72:	4b38      	ldr	r3, [pc, #224]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x05); 
 8000c78:	4b36      	ldr	r3, [pc, #216]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	619a      	str	r2, [r3, #24]
 8000c7e:	4b35      	ldr	r3, [pc, #212]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c84:	4b34      	ldr	r3, [pc, #208]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000c86:	2205      	movs	r2, #5
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	4b32      	ldr	r3, [pc, #200]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c90:	4b30      	ldr	r3, [pc, #192]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c92:	2208      	movs	r2, #8
 8000c94:	619a      	str	r2, [r3, #24]
 8000c96:	4b2f      	ldr	r3, [pc, #188]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000c98:	2202      	movs	r2, #2
 8000c9a:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x2B); 
 8000c9c:	202b      	movs	r0, #43	@ 0x2b
 8000c9e:	f7ff fab7 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000caa:	2202      	movs	r2, #2
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cae:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cba:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	619a      	str	r2, [r3, #24]
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000cc6:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cc8:	2204      	movs	r2, #4
 8000cca:	619a      	str	r2, [r3, #24]
 8000ccc:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cda:	2208      	movs	r2, #8
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cde:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ce0:	2208      	movs	r2, #8
 8000ce2:	619a      	str	r2, [r3, #24]
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x01);
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	619a      	str	r2, [r3, #24]
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000cfe:	2208      	movs	r2, #8
 8000d00:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d02:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d04:	2208      	movs	r2, #8
 8000d06:	619a      	str	r2, [r3, #24]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x3f);
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	619a      	str	r2, [r3, #24]
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000d1c:	223f      	movs	r2, #63	@ 0x3f
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d22:	2208      	movs	r2, #8
 8000d24:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d28:	2208      	movs	r2, #8
 8000d2a:	619a      	str	r2, [r3, #24]
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x2A); 
 8000d32:	202a      	movs	r0, #42	@ 0x2a
 8000d34:	f7ff fa6c 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	619a      	str	r2, [r3, #24]
 8000d3e:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <ILI9341_paradriver_Init+0x9e8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	4b02      	ldr	r3, [pc, #8]	@ (8000d54 <ILI9341_paradriver_Init+0x9e4>)
 8000d4c:	2208      	movs	r2, #8
 8000d4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d50:	e004      	b.n	8000d5c <ILI9341_paradriver_Init+0x9ec>
 8000d52:	bf00      	nop
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d5e:	2208      	movs	r2, #8
 8000d60:	619a      	str	r2, [r3, #24]
 8000d62:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000d68:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	619a      	str	r2, [r3, #24]
 8000d6e:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <ILI9341_paradriver_Init+0xa8c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	619a      	str	r2, [r3, #24]
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	619a      	str	r2, [r3, #24]
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000d94:	2202      	movs	r2, #2
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <ILI9341_paradriver_Init+0xa8c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000da0:	2208      	movs	r2, #8
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000da4:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000da6:	2208      	movs	r2, #8
 8000da8:	619a      	str	r2, [r3, #24]
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xef);	 
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000db2:	2204      	movs	r2, #4
 8000db4:	619a      	str	r2, [r3, #24]
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <ILI9341_paradriver_Init+0xa8c>)
 8000dbe:	22ef      	movs	r2, #239	@ 0xef
 8000dc0:	615a      	str	r2, [r3, #20]
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dc4:	2208      	movs	r2, #8
 8000dc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	619a      	str	r2, [r3, #24]
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <ILI9341_paradriver_Init+0xa88>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x11); //Exit Sleep
 8000dd4:	2011      	movs	r0, #17
 8000dd6:	f7ff fa1b 	bl	8000210 <LCD_WR_REG>
	delay_ms(120);
 8000dda:	2078      	movs	r0, #120	@ 0x78
 8000ddc:	f000 fa68 	bl	80012b0 <delay_ms>
	LCD_WR_REG(0x29); //display on		
 8000de0:	2029      	movs	r0, #41	@ 0x29
 8000de2:	f7ff fa15 	bl	8000210 <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 f8de 	bl	8000fa8 <LCD_direction>
//	LCD_LED=1;//��������	 
	LCD_Clear(WHITE);//��ȫ����ɫ
 8000dec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000df0:	f7ff fa7e 	bl	80002f0 <LCD_Clear>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	48000800 	.word	0x48000800
 8000dfc:	48000400 	.word	0x48000400

08000e00 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4623      	mov	r3, r4
 8000e10:	80fb      	strh	r3, [r7, #6]
 8000e12:	4603      	mov	r3, r0
 8000e14:	80bb      	strh	r3, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	807b      	strh	r3, [r7, #2]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8000e1e:	4b56      	ldr	r3, [pc, #344]	@ (8000f78 <LCD_SetWindows+0x178>)
 8000e20:	899b      	ldrh	r3, [r3, #12]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f9f4 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8000e28:	4b54      	ldr	r3, [pc, #336]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	4b53      	ldr	r3, [pc, #332]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b51      	ldr	r3, [pc, #324]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000e3c:	615a      	str	r2, [r3, #20]
 8000e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e40:	2208      	movs	r2, #8
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e44:	4b4d      	ldr	r3, [pc, #308]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e46:	2208      	movs	r2, #8
 8000e48:	619a      	str	r2, [r3, #24]
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&xStar);		
 8000e50:	4b4a      	ldr	r3, [pc, #296]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	619a      	str	r2, [r3, #24]
 8000e56:	4b49      	ldr	r3, [pc, #292]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	4a48      	ldr	r2, [pc, #288]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	6153      	str	r3, [r2, #20]
 8000e64:	4b45      	ldr	r3, [pc, #276]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e66:	2208      	movs	r2, #8
 8000e68:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e6a:	4b44      	ldr	r3, [pc, #272]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	619a      	str	r2, [r3, #24]
 8000e70:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(xEnd>>8);
 8000e76:	4b41      	ldr	r3, [pc, #260]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	619a      	str	r2, [r3, #24]
 8000e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e8e:	2208      	movs	r2, #8
 8000e90:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e92:	4b3a      	ldr	r3, [pc, #232]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e94:	2208      	movs	r2, #8
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	4b38      	ldr	r3, [pc, #224]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&xEnd);
 8000e9e:	4b37      	ldr	r3, [pc, #220]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	619a      	str	r2, [r3, #24]
 8000ea4:	4b35      	ldr	r3, [pc, #212]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eaa:	887b      	ldrh	r3, [r7, #2]
 8000eac:	4a34      	ldr	r2, [pc, #208]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eb8:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000eba:	2208      	movs	r2, #8
 8000ebc:	619a      	str	r2, [r3, #24]
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	619a      	str	r2, [r3, #24]

	LCD_WR_REG(lcddev.setycmd);	
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <LCD_SetWindows+0x178>)
 8000ec6:	89db      	ldrh	r3, [r3, #14]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f9a1 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8000ece:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	619a      	str	r2, [r3, #24]
 8000ed4:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eda:	88bb      	ldrh	r3, [r7, #4]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	4b25      	ldr	r3, [pc, #148]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000eec:	2208      	movs	r2, #8
 8000eee:	619a      	str	r2, [r3, #24]
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&yStar);		
 8000ef6:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	619a      	str	r2, [r3, #24]
 8000efc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f02:	88bb      	ldrh	r3, [r7, #4]
 8000f04:	4a1e      	ldr	r2, [pc, #120]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f12:	2208      	movs	r2, #8
 8000f14:	619a      	str	r2, [r3, #24]
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(yEnd>>8);
 8000f1c:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	619a      	str	r2, [r3, #24]
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f28:	883b      	ldrh	r3, [r7, #0]
 8000f2a:	0a1b      	lsrs	r3, r3, #8
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f34:	2208      	movs	r2, #8
 8000f36:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	619a      	str	r2, [r3, #24]
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&yEnd);
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f46:	2204      	movs	r2, #4
 8000f48:	619a      	str	r2, [r3, #24]
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f50:	883b      	ldrh	r3, [r7, #0]
 8000f52:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <LCD_SetWindows+0x180>)
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	6153      	str	r3, [r2, #20]
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f60:	2208      	movs	r2, #8
 8000f62:	619a      	str	r2, [r3, #24]
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <LCD_SetWindows+0x17c>)
 8000f66:	2202      	movs	r2, #2
 8000f68:	619a      	str	r2, [r3, #24]

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 8000f6a:	f7ff f989 	bl	8000280 <LCD_WriteRAM_Prepare>
}   
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000002c 	.word	0x2000002c
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	48000400 	.word	0x48000400

08000f84 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	80fb      	strh	r3, [r7, #6]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 8000f94:	88bb      	ldrh	r3, [r7, #4]
 8000f96:	88fa      	ldrh	r2, [r7, #6]
 8000f98:	88b9      	ldrh	r1, [r7, #4]
 8000f9a:	88f8      	ldrh	r0, [r7, #6]
 8000f9c:	f7ff ff30 	bl	8000e00 <LCD_SetWindows>
} 
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <LCD_direction+0xac>)
 8000fb4:	222a      	movs	r2, #42	@ 0x2a
 8000fb6:	819a      	strh	r2, [r3, #12]
			lcddev.setycmd=0x2B;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <LCD_direction+0xac>)
 8000fba:	222b      	movs	r2, #43	@ 0x2b
 8000fbc:	81da      	strh	r2, [r3, #14]
			lcddev.wramcmd=0x2C;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <LCD_direction+0xac>)
 8000fc0:	222c      	movs	r2, #44	@ 0x2c
 8000fc2:	811a      	strh	r2, [r3, #8]
			lcddev.rramcmd=0x2E;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <LCD_direction+0xac>)
 8000fc6:	222e      	movs	r2, #46	@ 0x2e
 8000fc8:	815a      	strh	r2, [r3, #10]
	switch(direction){		  
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d83b      	bhi.n	8001048 <LCD_direction+0xa0>
 8000fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd8 <LCD_direction+0x30>)
 8000fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd6:	bf00      	nop
 8000fd8:	08000fe9 	.word	0x08000fe9
 8000fdc:	08001001 	.word	0x08001001
 8000fe0:	08001019 	.word	0x08001019
 8000fe4:	08001031 	.word	0x08001031
		case 0:						 	 		
			lcddev.width=LCD_W;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <LCD_direction+0xac>)
 8000fea:	22f0      	movs	r2, #240	@ 0xf0
 8000fec:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <LCD_direction+0xac>)
 8000ff0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ff4:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3));
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	2036      	movs	r0, #54	@ 0x36
 8000ffa:	f7ff f91b 	bl	8000234 <LCD_WriteReg>
		break;
 8000ffe:	e024      	b.n	800104a <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <LCD_direction+0xac>)
 8001002:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001006:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <LCD_direction+0xac>)
 800100a:	22f0      	movs	r2, #240	@ 0xf0
 800100c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6));
 800100e:	2168      	movs	r1, #104	@ 0x68
 8001010:	2036      	movs	r0, #54	@ 0x36
 8001012:	f7ff f90f 	bl	8000234 <LCD_WriteReg>
		break;
 8001016:	e018      	b.n	800104a <LCD_direction+0xa2>
		case 2:						 	 		
			lcddev.width=LCD_W;
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <LCD_direction+0xac>)
 800101a:	22f0      	movs	r2, #240	@ 0xf0
 800101c:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <LCD_direction+0xac>)
 8001020:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001024:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<4)|(1<<6));
 8001026:	21d8      	movs	r1, #216	@ 0xd8
 8001028:	2036      	movs	r0, #54	@ 0x36
 800102a:	f7ff f903 	bl	8000234 <LCD_WriteReg>
		break;
 800102e:	e00c      	b.n	800104a <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <LCD_direction+0xac>)
 8001032:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001036:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <LCD_direction+0xac>)
 800103a:	22f0      	movs	r2, #240	@ 0xf0
 800103c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5)|(1<<4));
 800103e:	21b8      	movs	r1, #184	@ 0xb8
 8001040:	2036      	movs	r0, #54	@ 0x36
 8001042:	f7ff f8f7 	bl	8000234 <LCD_WriteReg>
		break;	
 8001046:	e000      	b.n	800104a <LCD_direction+0xa2>
		default:break;
 8001048:	bf00      	nop
	}		
}	 
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000002c 	.word	0x2000002c

08001058 <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(int16_t sx,u16 sy,int16_t ex,u16 ey,u16 color)	// x must be not less than 0 for obstacle shifting
{																// changing u16 to int16_t
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4604      	mov	r4, r0
 8001060:	4608      	mov	r0, r1
 8001062:	4611      	mov	r1, r2
 8001064:	461a      	mov	r2, r3
 8001066:	4623      	mov	r3, r4
 8001068:	80fb      	strh	r3, [r7, #6]
 800106a:	4603      	mov	r3, r0
 800106c:	80bb      	strh	r3, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	807b      	strh	r3, [r7, #2]
 8001072:	4613      	mov	r3, r2
 8001074:	803b      	strh	r3, [r7, #0]

	if(sx<0)
 8001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da01      	bge.n	8001082 <LCD_Fill+0x2a>
	{
		sx=0;
 800107e:	2300      	movs	r3, #0
 8001080:	80fb      	strh	r3, [r7, #6]
	}

	if(ex<0)
 8001082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001086:	2b00      	cmp	r3, #0
 8001088:	da01      	bge.n	800108e <LCD_Fill+0x36>
	{
		ex=0;
 800108a:	2300      	movs	r3, #0
 800108c:	807b      	strh	r3, [r7, #2]
	}

	u16 i,j;
	u16 width=ex-sx+1; 		//�õ����Ŀ��
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	b29b      	uxth	r3, r3
 8001096:	3301      	adds	r3, #1
 8001098:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;		//�߶�
 800109a:	883a      	ldrh	r2, [r7, #0]
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);//������ʾ����
 80010a6:	88f8      	ldrh	r0, [r7, #6]
 80010a8:	887a      	ldrh	r2, [r7, #2]
 80010aa:	883b      	ldrh	r3, [r7, #0]
 80010ac:	88b9      	ldrh	r1, [r7, #4]
 80010ae:	f7ff fea7 	bl	8000e00 <LCD_SetWindows>
	for(i=0;i<height;i++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	81fb      	strh	r3, [r7, #14]
 80010b6:	e010      	b.n	80010da <LCD_Fill+0x82>
	{
		for(j=0;j<width;j++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	81bb      	strh	r3, [r7, #12]
 80010bc:	e006      	b.n	80010cc <LCD_Fill+0x74>
		Lcd_WriteData_16Bit(color);	//д������
 80010be:	8c3b      	ldrh	r3, [r7, #32]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f8e9 	bl	8000298 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	81bb      	strh	r3, [r7, #12]
 80010cc:	89ba      	ldrh	r2, [r7, #12]
 80010ce:	897b      	ldrh	r3, [r7, #10]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d3f4      	bcc.n	80010be <LCD_Fill+0x66>
	for(i=0;i<height;i++)
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	3301      	adds	r3, #1
 80010d8:	81fb      	strh	r3, [r7, #14]
 80010da:	89fa      	ldrh	r2, [r7, #14]
 80010dc:	893b      	ldrh	r3, [r7, #8]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3ea      	bcc.n	80010b8 <LCD_Fill+0x60>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ���������Ϊȫ��
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <LCD_Fill+0xac>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <LCD_Fill+0xac>)
 80010ec:	885b      	ldrh	r3, [r3, #2]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fe83 	bl	8000e00 <LCD_SetWindows>
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	2000002c 	.word	0x2000002c

08001108 <LCD_DrawLine>:
								x2:the ending x coordinate of the line
								y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b08d      	sub	sp, #52	@ 0x34
 800110c:	af00      	add	r7, sp, #0
 800110e:	4604      	mov	r4, r0
 8001110:	4608      	mov	r0, r1
 8001112:	4611      	mov	r1, r2
 8001114:	461a      	mov	r2, r3
 8001116:	4623      	mov	r3, r4
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	4603      	mov	r3, r0
 800111c:	80bb      	strh	r3, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	807b      	strh	r3, [r7, #2]
 8001122:	4613      	mov	r3, r2
 8001124:	803b      	strh	r3, [r7, #0]
	u16 t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;

	delta_x=x2-x1; //������������
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //���õ�������
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dd02      	ble.n	8001152 <LCD_DrawLine+0x4a>
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	e00b      	b.n	800116a <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//��ֱ��
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <LCD_DrawLine+0x56>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e005      	b.n	800116a <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	425b      	negs	r3, r3
 8001168:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	2b00      	cmp	r3, #0
 800116e:	dd02      	ble.n	8001176 <LCD_DrawLine+0x6e>
 8001170:	2301      	movs	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	e00b      	b.n	800118e <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//ˮƽ��
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <LCD_DrawLine+0x7a>
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	e005      	b.n	800118e <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	425b      	negs	r3, r3
 800118c:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //ѡȡ��������������
 800118e:	6a3a      	ldr	r2, [r7, #32]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	429a      	cmp	r2, r3
 8001194:	dd02      	ble.n	800119c <LCD_DrawLine+0x94>
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	e001      	b.n	80011a0 <LCD_DrawLine+0x98>
	else distance=delta_y;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//�������
 80011a0:	2300      	movs	r3, #0
 80011a2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80011a4:	e02a      	b.n	80011fc <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//����
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	b292      	uxth	r2, r2
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f883 	bl	80002bc <LCD_DrawPoint>
		xerr+=delta_x ;
 80011b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	4413      	add	r3, r2
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y ;
 80011be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	4413      	add	r3, r2
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 80011c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dd07      	ble.n	80011de <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 80011ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80011de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dd07      	ble.n	80011f6 <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 80011e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4413      	add	r3, r2
 80011f4:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//�������
 80011f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80011f8:	3301      	adds	r3, #1
 80011fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80011fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	3301      	adds	r3, #1
 8001202:	429a      	cmp	r2, r3
 8001204:	ddcf      	ble.n	80011a6 <LCD_DrawLine+0x9e>
		}
	}
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3734      	adds	r7, #52	@ 0x34
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}

08001210 <delay_init>:
// Initialize delay function
// When using uC/OS, this function initializes the uC/OS clock tick.
// The SYSTICK clock is fixed to the AHB clock.
// SYSCLK: System clock frequency
void delay_init(u8 SYSCLK)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS                         // If OS support is needed
    u32 reload;
#endif
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); // SysTick frequency is HCLK
 800121a:	2004      	movs	r0, #4
 800121c:	f001 fbe8 	bl	80029f0 <HAL_SYSTICK_CLKSourceConfig>
    fac_us=SYSCLK;                        // fac_us is used regardless of OS usage
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4a03      	ldr	r2, [pc, #12]	@ (8001230 <delay_init+0x20>)
 8001224:	6013      	str	r3, [r2, #0]
    SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk; // Enable SysTick interrupt
    SysTick->LOAD=reload;                   // Interrupt every 1/OS_TICKS_PER_SEC second
    SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; // Enable SysTick
#else
#endif
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000040 	.word	0x20000040

08001234 <delay_us>:

// Delay for nus microseconds
// nus: Number of microseconds to delay
// nus: 0~190887435 (maximum value is 2^32/fac_us when fac_us=22.5)
void delay_us(u32 nus)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told,tnow,tcnt=0;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
    u32 reload=SysTick->LOAD;                // Value of LOAD
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <delay_us+0x74>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	617b      	str	r3, [r7, #20]
    ticks=nus*fac_us;                        // Number of ticks needed
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <delay_us+0x78>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	613b      	str	r3, [r7, #16]
    told=SysTick->VAL;                        // Counter value upon entry
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <delay_us+0x74>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61fb      	str	r3, [r7, #28]
    while(1)
    {
        tnow=SysTick->VAL;
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <delay_us+0x74>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	60fb      	str	r3, [r7, #12]
        if(tnow!=told)
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	429a      	cmp	r2, r3
 8001264:	d0f8      	beq.n	8001258 <delay_us+0x24>
        {
            if(tnow<told)tcnt+=told-tnow;    // Note that SYSTICK is a decrementing counter.
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	429a      	cmp	r2, r3
 800126c:	d206      	bcs.n	800127c <delay_us+0x48>
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4413      	add	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	e007      	b.n	800128c <delay_us+0x58>
            else tcnt+=reload-tnow+told;
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad2      	subs	r2, r2, r3
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	4413      	add	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4413      	add	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
            told=tnow;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	61fb      	str	r3, [r7, #28]
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d200      	bcs.n	800129a <delay_us+0x66>
        tnow=SysTick->VAL;
 8001298:	e7de      	b.n	8001258 <delay_us+0x24>
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 800129a:	bf00      	nop
        }
    };
}
 800129c:	bf00      	nop
 800129e:	3724      	adds	r7, #36	@ 0x24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000e010 	.word	0xe000e010
 80012ac:	20000040 	.word	0x20000040

080012b0 <delay_ms>:

// Delay for nms milliseconds
// nms: Number of milliseconds to delay
void delay_ms(u16 nms)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
    u32 i;
    for(i=0;i<nms;i++) delay_us(1000);
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e006      	b.n	80012ce <delay_ms+0x1e>
 80012c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012c4:	f7ff ffb6 	bl	8001234 <delay_us>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3f4      	bcc.n	80012c0 <delay_ms+0x10>
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <DinoAnimation>:

// ------------------------------------------------------------------------------------
// ----------------------------------- ANIMATIONS -------------------------------------
// ------------------------------------------------------------------------------------
void DinoAnimation(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	if((TOUCH==0) || (jump_step != 0))	// jumping
 80012e4:	2110      	movs	r1, #16
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ea:	f001 fd27 	bl	8002d3c <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d004      	beq.n	80012fe <DinoAnimation+0x1e>
 80012f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001468 <DinoAnimation+0x188>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 808d 	beq.w	8001418 <DinoAnimation+0x138>
	{
		if(refresh == 1)
 80012fe:	4b5b      	ldr	r3, [pc, #364]	@ (800146c <DinoAnimation+0x18c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	f040 80ad 	bne.w	8001462 <DinoAnimation+0x182>
		{
			switch(jump_step)
 8001308:	4b57      	ldr	r3, [pc, #348]	@ (8001468 <DinoAnimation+0x188>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d047      	beq.n	80013a0 <DinoAnimation+0xc0>
 8001310:	2b00      	cmp	r3, #0
 8001312:	db61      	blt.n	80013d8 <DinoAnimation+0xf8>
 8001314:	2b3b      	cmp	r3, #59	@ 0x3b
 8001316:	dc5f      	bgt.n	80013d8 <DinoAnimation+0xf8>
 8001318:	2b1e      	cmp	r3, #30
 800131a:	db5d      	blt.n	80013d8 <DinoAnimation+0xf8>
 800131c:	3b1e      	subs	r3, #30
 800131e:	2b1d      	cmp	r3, #29
 8001320:	d85a      	bhi.n	80013d8 <DinoAnimation+0xf8>
 8001322:	a201      	add	r2, pc, #4	@ (adr r2, 8001328 <DinoAnimation+0x48>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	080013a9 	.word	0x080013a9
 800132c:	080013d9 	.word	0x080013d9
 8001330:	080013d9 	.word	0x080013d9
 8001334:	080013d9 	.word	0x080013d9
 8001338:	080013d9 	.word	0x080013d9
 800133c:	080013d9 	.word	0x080013d9
 8001340:	080013d9 	.word	0x080013d9
 8001344:	080013d9 	.word	0x080013d9
 8001348:	080013d9 	.word	0x080013d9
 800134c:	080013d9 	.word	0x080013d9
 8001350:	080013b1 	.word	0x080013b1
 8001354:	080013d9 	.word	0x080013d9
 8001358:	080013d9 	.word	0x080013d9
 800135c:	080013b9 	.word	0x080013b9
 8001360:	080013d9 	.word	0x080013d9
 8001364:	080013d9 	.word	0x080013d9
 8001368:	080013c1 	.word	0x080013c1
 800136c:	080013d9 	.word	0x080013d9
 8001370:	080013d9 	.word	0x080013d9
 8001374:	080013c9 	.word	0x080013c9
 8001378:	080013d9 	.word	0x080013d9
 800137c:	080013d9 	.word	0x080013d9
 8001380:	080013d9 	.word	0x080013d9
 8001384:	080013d9 	.word	0x080013d9
 8001388:	080013d9 	.word	0x080013d9
 800138c:	080013d9 	.word	0x080013d9
 8001390:	080013d9 	.word	0x080013d9
 8001394:	080013d9 	.word	0x080013d9
 8001398:	080013d9 	.word	0x080013d9
 800139c:	080013d1 	.word	0x080013d1
			{
				case 0:
					velocity = 4;	//30
 80013a0:	4b33      	ldr	r3, [pc, #204]	@ (8001470 <DinoAnimation+0x190>)
 80013a2:	2204      	movs	r2, #4
 80013a4:	701a      	strb	r2, [r3, #0]
					break;
 80013a6:	e018      	b.n	80013da <DinoAnimation+0xfa>
				case 30:
					velocity = 2;	//10
 80013a8:	4b31      	ldr	r3, [pc, #196]	@ (8001470 <DinoAnimation+0x190>)
 80013aa:	2202      	movs	r2, #2
 80013ac:	701a      	strb	r2, [r3, #0]
					break;
 80013ae:	e014      	b.n	80013da <DinoAnimation+0xfa>
				case 40:
					velocity = 1;	//3
 80013b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <DinoAnimation+0x190>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
					break;
 80013b6:	e010      	b.n	80013da <DinoAnimation+0xfa>
				case 43:
					velocity = 0;	//3
 80013b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001470 <DinoAnimation+0x190>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
					break;
 80013be:	e00c      	b.n	80013da <DinoAnimation+0xfa>
				case 46:
					velocity = -1;	//3
 80013c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001470 <DinoAnimation+0x190>)
 80013c2:	22ff      	movs	r2, #255	@ 0xff
 80013c4:	701a      	strb	r2, [r3, #0]
					break;
 80013c6:	e008      	b.n	80013da <DinoAnimation+0xfa>
				case 49:
					velocity = -2;	//10
 80013c8:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <DinoAnimation+0x190>)
 80013ca:	22fe      	movs	r2, #254	@ 0xfe
 80013cc:	701a      	strb	r2, [r3, #0]
					break;
 80013ce:	e004      	b.n	80013da <DinoAnimation+0xfa>
				case 59:
					velocity = -4;	//30
 80013d0:	4b27      	ldr	r3, [pc, #156]	@ (8001470 <DinoAnimation+0x190>)
 80013d2:	22fc      	movs	r2, #252	@ 0xfc
 80013d4:	701a      	strb	r2, [r3, #0]
					break;
 80013d6:	e000      	b.n	80013da <DinoAnimation+0xfa>
				default:
					break;
 80013d8:	bf00      	nop
			}

			jump_step++;
 80013da:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <DinoAnimation+0x188>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <DinoAnimation+0x188>)
 80013e4:	801a      	strh	r2, [r3, #0]

			if(jump_step>88)	// in fact "jumping resolution"
 80013e6:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <DinoAnimation+0x188>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	2b58      	cmp	r3, #88	@ 0x58
 80013ec:	d902      	bls.n	80013f4 <DinoAnimation+0x114>
			{
				jump_step = 0;	// get back on base position
 80013ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <DinoAnimation+0x188>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	801a      	strh	r2, [r3, #0]
			}

			jump_pos = jump_pos + velocity;		// calculate position while jumping
 80013f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <DinoAnimation+0x190>)
 80013f6:	f993 3000 	ldrsb.w	r3, [r3]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <DinoAnimation+0x194>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	4413      	add	r3, r2
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <DinoAnimation+0x194>)
 8001406:	801a      	strh	r2, [r3, #0]

			DrawDino(jump_pos,0,0);
 8001408:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <DinoAnimation+0x194>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f000 f923 	bl	800165c <DrawDino>
		if(refresh == 1)
 8001416:	e024      	b.n	8001462 <DinoAnimation+0x182>
		}
	}

	else	// walking with leg animation
	{
		if(refresh == 1)
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <DinoAnimation+0x18c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d120      	bne.n	8001462 <DinoAnimation+0x182>
		{
			walk_step++;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <DinoAnimation+0x198>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <DinoAnimation+0x198>)
 800142a:	701a      	strb	r2, [r3, #0]

			if(walk_step>60)		//delay between steps
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <DinoAnimation+0x198>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b3c      	cmp	r3, #60	@ 0x3c
 8001432:	d902      	bls.n	800143a <DinoAnimation+0x15a>
			{
				walk_step = 0;
 8001434:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <DinoAnimation+0x198>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
			}

			if(walk_step < 30)
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <DinoAnimation+0x198>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b1d      	cmp	r3, #29
 8001440:	d805      	bhi.n	800144e <DinoAnimation+0x16e>
			{
				DrawDino(0,0,3);
 8001442:	2203      	movs	r2, #3
 8001444:	2100      	movs	r1, #0
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f908 	bl	800165c <DrawDino>
				DrawDino(0,3,0);
			}

		}
	}
}
 800144c:	e009      	b.n	8001462 <DinoAnimation+0x182>
			else if(walk_step >= 30)
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <DinoAnimation+0x198>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b1d      	cmp	r3, #29
 8001454:	d905      	bls.n	8001462 <DinoAnimation+0x182>
				DrawDino(0,3,0);
 8001456:	2200      	movs	r2, #0
 8001458:	2103      	movs	r1, #3
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f8fe 	bl	800165c <DrawDino>
}
 8001460:	e7ff      	b.n	8001462 <DinoAnimation+0x182>
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000044 	.word	0x20000044
 800146c:	200000a0 	.word	0x200000a0
 8001470:	20000048 	.word	0x20000048
 8001474:	20000046 	.word	0x20000046
 8001478:	20000049 	.word	0x20000049

0800147c <ObstacleAnimation>:


void ObstacleAnimation(uint8_t obs_acc)		// obs_acc - obstacle velocity (max 7)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	if(obs_refresh==0)
 8001486:	4b3e      	ldr	r3, [pc, #248]	@ (8001580 <ObstacleAnimation+0x104>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d173      	bne.n	8001576 <ObstacleAnimation+0xfa>
	{
		obs_step++;
 800148e:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <ObstacleAnimation+0x108>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b3b      	ldr	r3, [pc, #236]	@ (8001584 <ObstacleAnimation+0x108>)
 8001498:	801a      	strh	r2, [r3, #0]

		switch(obs_acc)		// calculate obstacle speed
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	3b01      	subs	r3, #1
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d84d      	bhi.n	800153e <ObstacleAnimation+0xc2>
 80014a2:	a201      	add	r2, pc, #4	@ (adr r2, 80014a8 <ObstacleAnimation+0x2c>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	080014c5 	.word	0x080014c5
 80014ac:	080014cd 	.word	0x080014cd
 80014b0:	080014eb 	.word	0x080014eb
 80014b4:	080014f3 	.word	0x080014f3
 80014b8:	08001511 	.word	0x08001511
 80014bc:	08001519 	.word	0x08001519
 80014c0:	08001537 	.word	0x08001537
		{
			case 1:
				obs_acc_temp = 1;
 80014c4:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <ObstacleAnimation+0x10c>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
				break;
 80014ca:	e03c      	b.n	8001546 <ObstacleAnimation+0xca>
			case 2:
				if(obs_step%2 == 0) obs_acc_temp = 1; else obs_acc_temp = 2;
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <ObstacleAnimation+0x108>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <ObstacleAnimation+0x66>
 80014da:	4b2b      	ldr	r3, [pc, #172]	@ (8001588 <ObstacleAnimation+0x10c>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
				break;
 80014e0:	e031      	b.n	8001546 <ObstacleAnimation+0xca>
				if(obs_step%2 == 0) obs_acc_temp = 1; else obs_acc_temp = 2;
 80014e2:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <ObstacleAnimation+0x10c>)
 80014e4:	2202      	movs	r2, #2
 80014e6:	701a      	strb	r2, [r3, #0]
				break;
 80014e8:	e02d      	b.n	8001546 <ObstacleAnimation+0xca>
			case 3:
				obs_acc_temp = 2;
 80014ea:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <ObstacleAnimation+0x10c>)
 80014ec:	2202      	movs	r2, #2
 80014ee:	701a      	strb	r2, [r3, #0]
				break;
 80014f0:	e029      	b.n	8001546 <ObstacleAnimation+0xca>
			case 4:
				if(obs_step%2 == 0) obs_acc_temp = 2; else obs_acc_temp = 3;
 80014f2:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <ObstacleAnimation+0x108>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d103      	bne.n	8001508 <ObstacleAnimation+0x8c>
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <ObstacleAnimation+0x10c>)
 8001502:	2202      	movs	r2, #2
 8001504:	701a      	strb	r2, [r3, #0]
				break;
 8001506:	e01e      	b.n	8001546 <ObstacleAnimation+0xca>
				if(obs_step%2 == 0) obs_acc_temp = 2; else obs_acc_temp = 3;
 8001508:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <ObstacleAnimation+0x10c>)
 800150a:	2203      	movs	r2, #3
 800150c:	701a      	strb	r2, [r3, #0]
				break;
 800150e:	e01a      	b.n	8001546 <ObstacleAnimation+0xca>
			case 5:
				obs_acc_temp = 3;
 8001510:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <ObstacleAnimation+0x10c>)
 8001512:	2203      	movs	r2, #3
 8001514:	701a      	strb	r2, [r3, #0]
				break;
 8001516:	e016      	b.n	8001546 <ObstacleAnimation+0xca>
			case 6:
				if(obs_step%2 == 0) obs_acc_temp = 3; else obs_acc_temp = 4;
 8001518:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <ObstacleAnimation+0x108>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d103      	bne.n	800152e <ObstacleAnimation+0xb2>
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <ObstacleAnimation+0x10c>)
 8001528:	2203      	movs	r2, #3
 800152a:	701a      	strb	r2, [r3, #0]
				break;
 800152c:	e00b      	b.n	8001546 <ObstacleAnimation+0xca>
				if(obs_step%2 == 0) obs_acc_temp = 3; else obs_acc_temp = 4;
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <ObstacleAnimation+0x10c>)
 8001530:	2204      	movs	r2, #4
 8001532:	701a      	strb	r2, [r3, #0]
				break;
 8001534:	e007      	b.n	8001546 <ObstacleAnimation+0xca>
			case 7:
				obs_acc_temp = 4;
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <ObstacleAnimation+0x10c>)
 8001538:	2204      	movs	r2, #4
 800153a:	701a      	strb	r2, [r3, #0]
				break;
 800153c:	e003      	b.n	8001546 <ObstacleAnimation+0xca>
			default:
				obs_acc_temp = 0;
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <ObstacleAnimation+0x10c>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
				break;
 8001544:	bf00      	nop
		}

		obs_pos = obs_pos + obs_acc;	// calculate obstacle position
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	b29a      	uxth	r2, r3
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <ObstacleAnimation+0x110>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <ObstacleAnimation+0x110>)
 8001554:	801a      	strh	r2, [r3, #0]

		if(obs_pos>410)		// do not go too far..
 8001556:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <ObstacleAnimation+0x110>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	f5b3 7fcd 	cmp.w	r3, #410	@ 0x19a
 800155e:	d905      	bls.n	800156c <ObstacleAnimation+0xf0>
		{
			obs_step = 0;	// reset step
 8001560:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <ObstacleAnimation+0x108>)
 8001562:	2200      	movs	r2, #0
 8001564:	801a      	strh	r2, [r3, #0]
			obs_pos = 0;	// place obstacle on base position - out of screen (TYPE OF OBSTACLE CAN BE CHANGED NOW)
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <ObstacleAnimation+0x110>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
		}

		DrawObstacle3(obs_pos);
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <ObstacleAnimation+0x110>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fc45 	bl	8001e00 <DrawObstacle3>
	}
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000a1 	.word	0x200000a1
 8001584:	2000004a 	.word	0x2000004a
 8001588:	2000004e 	.word	0x2000004e
 800158c:	2000004c 	.word	0x2000004c

08001590 <GAME>:

// ------------------------------------------------------------------------------------
// ---------------------------------- GAME PENDING ------------------------------------
// ------------------------------------------------------------------------------------
void GAME(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	if(refresh==0)
 8001594:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <GAME+0xbc>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d14d      	bne.n	8001638 <GAME+0xa8>
	{
		POINT_COLOR=GRAY;
 800159c:	4b2c      	ldr	r3, [pc, #176]	@ (8001650 <GAME+0xc0>)
 800159e:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80015a2:	801a      	strh	r2, [r3, #0]
		LCD_DrawLine(0,190,320,190);	// draw ground
 80015a4:	23be      	movs	r3, #190	@ 0xbe
 80015a6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015aa:	21be      	movs	r1, #190	@ 0xbe
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fdab 	bl	8001108 <LCD_DrawLine>


		time++;
 80015b2:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <GAME+0xc4>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <GAME+0xc4>)
 80015bc:	801a      	strh	r2, [r3, #0]

		if(time == 400)
 80015be:	4b25      	ldr	r3, [pc, #148]	@ (8001654 <GAME+0xc4>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80015c6:	d103      	bne.n	80015d0 <GAME+0x40>
		{
			spd = 2;
 80015c8:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <GAME+0xc8>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	e02b      	b.n	8001628 <GAME+0x98>
		}
		else if(time == 800)
 80015d0:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <GAME+0xc4>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80015d8:	d103      	bne.n	80015e2 <GAME+0x52>
		{
			spd = 3;
 80015da:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <GAME+0xc8>)
 80015dc:	2203      	movs	r2, #3
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e022      	b.n	8001628 <GAME+0x98>
		}
		else if(time == 1200)
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <GAME+0xc4>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80015ea:	d103      	bne.n	80015f4 <GAME+0x64>
		{
			spd = 4;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <GAME+0xc8>)
 80015ee:	2204      	movs	r2, #4
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	e019      	b.n	8001628 <GAME+0x98>
		}
		else if(time == 1600)
 80015f4:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <GAME+0xc4>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80015fc:	d103      	bne.n	8001606 <GAME+0x76>
		{
			spd = 5;
 80015fe:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <GAME+0xc8>)
 8001600:	2205      	movs	r2, #5
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	e010      	b.n	8001628 <GAME+0x98>
		}
		else if(time == 2000)
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <GAME+0xc4>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800160e:	d103      	bne.n	8001618 <GAME+0x88>
		{
			spd = 6;
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <GAME+0xc8>)
 8001612:	2206      	movs	r2, #6
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	e007      	b.n	8001628 <GAME+0x98>
		}
		else if(time == 2400)
 8001618:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <GAME+0xc4>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 8001620:	d102      	bne.n	8001628 <GAME+0x98>
		{
			spd = 7;
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <GAME+0xc8>)
 8001624:	2207      	movs	r2, #7
 8001626:	701a      	strb	r2, [r3, #0]
		}

		if(time>2800)
 8001628:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <GAME+0xc4>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8001630:	d902      	bls.n	8001638 <GAME+0xa8>
		{
			time = 0;
 8001632:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <GAME+0xc4>)
 8001634:	2200      	movs	r2, #0
 8001636:	801a      	strh	r2, [r3, #0]
		}
	}

	DinoAnimation();
 8001638:	f7ff fe52 	bl	80012e0 <DinoAnimation>
	ObstacleAnimation(spd);
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <GAME+0xc8>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff1b 	bl	800147c <ObstacleAnimation>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200000a0 	.word	0x200000a0
 8001650:	2000003c 	.word	0x2000003c
 8001654:	20000050 	.word	0x20000050
 8001658:	20000000 	.word	0x20000000

0800165c <DrawDino>:
// ------------------------------------- FIGURES ---------------------------------------
// -------------------------------------------------------------------------------------

// dino
void DrawDino(uint16_t altitude,uint8_t left_leg, uint8_t right_leg)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af02      	add	r7, sp, #8
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
 8001666:	460b      	mov	r3, r1
 8001668:	717b      	strb	r3, [r7, #5]
 800166a:	4613      	mov	r3, r2
 800166c:	713b      	strb	r3, [r7, #4]
	// ----------- HEAD -----------
	LCD_Fill(27,160 - altitude,42,170 - altitude,GRAY);      // head
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001674:	b299      	uxth	r1, r3
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	f1c3 03aa 	rsb	r3, r3, #170	@ 0xaa
 800167c:	b29b      	uxth	r3, r3
 800167e:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001682:	9200      	str	r2, [sp, #0]
 8001684:	222a      	movs	r2, #42	@ 0x2a
 8001686:	201b      	movs	r0, #27
 8001688:	f7ff fce6 	bl	8001058 <LCD_Fill>
	LCD_Fill(25,162 - altitude,45,172 - altitude,GRAY);
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	f1c3 03a2 	rsb	r3, r3, #162	@ 0xa2
 8001692:	b299      	uxth	r1, r3
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 800169a:	b29b      	uxth	r3, r3
 800169c:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	222d      	movs	r2, #45	@ 0x2d
 80016a4:	2019      	movs	r0, #25
 80016a6:	f7ff fcd7 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 80016aa:	4ba7      	ldr	r3, [pc, #668]	@ (8001948 <DrawDino+0x2ec>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80016b0:	d803      	bhi.n	80016ba <DrawDino+0x5e>
 80016b2:	4ba5      	ldr	r3, [pc, #660]	@ (8001948 <DrawDino+0x2ec>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d12c      	bne.n	8001714 <DrawDino+0xb8>
	{
		LCD_Fill(25,158 - altitude,26,161 - altitude,WHITE);		// clear head top 1
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 80016c0:	b299      	uxth	r1, r3
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ce:	9200      	str	r2, [sp, #0]
 80016d0:	221a      	movs	r2, #26
 80016d2:	2019      	movs	r0, #25
 80016d4:	f7ff fcc0 	bl	8001058 <LCD_Fill>
		LCD_Fill(27,156 - altitude,42,159 - altitude,WHITE);		// clear head top 2
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	f1c3 039c 	rsb	r3, r3, #156	@ 0x9c
 80016de:	b299      	uxth	r1, r3
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	f1c3 039f 	rsb	r3, r3, #159	@ 0x9f
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ec:	9200      	str	r2, [sp, #0]
 80016ee:	222a      	movs	r2, #42	@ 0x2a
 80016f0:	201b      	movs	r0, #27
 80016f2:	f7ff fcb1 	bl	8001058 <LCD_Fill>
		LCD_Fill(43,158 - altitude,45,161 - altitude,WHITE);		// clear head top 3
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 80016fc:	b299      	uxth	r1, r3
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 8001704:	b29b      	uxth	r3, r3
 8001706:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800170a:	9200      	str	r2, [sp, #0]
 800170c:	222d      	movs	r2, #45	@ 0x2d
 800170e:	202b      	movs	r0, #43	@ 0x2b
 8001710:	f7ff fca2 	bl	8001058 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 8001714:	4b8c      	ldr	r3, [pc, #560]	@ (8001948 <DrawDino+0x2ec>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	2b2c      	cmp	r3, #44	@ 0x2c
 800171a:	d81d      	bhi.n	8001758 <DrawDino+0xfc>
	{
		LCD_Fill(37,173 - altitude,45,174 - altitude,WHITE);		// clear head bottom
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 8001722:	b299      	uxth	r1, r3
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 800172a:	b29b      	uxth	r3, r3
 800172c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001730:	9200      	str	r2, [sp, #0]
 8001732:	222d      	movs	r2, #45	@ 0x2d
 8001734:	2025      	movs	r0, #37	@ 0x25
 8001736:	f7ff fc8f 	bl	8001058 <LCD_Fill>
		LCD_Fill(42,173 - altitude,45,177 - altitude,WHITE);		// clear head bottom
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 8001740:	b299      	uxth	r1, r3
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8001748:	b29b      	uxth	r3, r3
 800174a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800174e:	9200      	str	r2, [sp, #0]
 8001750:	222d      	movs	r2, #45	@ 0x2d
 8001752:	202a      	movs	r0, #42	@ 0x2a
 8001754:	f7ff fc80 	bl	8001058 <LCD_Fill>
	}



	// ----------- EYE -----------
	LCD_Fill(30,163 - altitude,32,166 - altitude,WHITE);     // eye
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	f1c3 03a3 	rsb	r3, r3, #163	@ 0xa3
 800175e:	b299      	uxth	r1, r3
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	f1c3 03a6 	rsb	r3, r3, #166	@ 0xa6
 8001766:	b29b      	uxth	r3, r3
 8001768:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	2220      	movs	r2, #32
 8001770:	201e      	movs	r0, #30
 8001772:	f7ff fc71 	bl	8001058 <LCD_Fill>



	// ----------- MOUTH -----------
	LCD_Fill(25,172 - altitude,36,175 - altitude,GRAY);      // mouth
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 800177c:	b299      	uxth	r1, r3
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 8001784:	b29b      	uxth	r3, r3
 8001786:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800178a:	9200      	str	r2, [sp, #0]
 800178c:	2224      	movs	r2, #36	@ 0x24
 800178e:	2019      	movs	r0, #25
 8001790:	f7ff fc62 	bl	8001058 <LCD_Fill>
	LCD_Fill(25,175 - altitude,41,176 - altitude,GRAY);      // mouth (tongue)
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 800179a:	b299      	uxth	r1, r3
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80017a8:	9200      	str	r2, [sp, #0]
 80017aa:	2229      	movs	r2, #41	@ 0x29
 80017ac:	2019      	movs	r0, #25
 80017ae:	f7ff fc53 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 80017b2:	4b65      	ldr	r3, [pc, #404]	@ (8001948 <DrawDino+0x2ec>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80017b8:	d803      	bhi.n	80017c2 <DrawDino+0x166>
 80017ba:	4b63      	ldr	r3, [pc, #396]	@ (8001948 <DrawDino+0x2ec>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10e      	bne.n	80017e0 <DrawDino+0x184>
	{
		LCD_Fill(37,173 - altitude,45,174 - altitude,WHITE);		// clear mouth (tongue) top
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 80017c8:	b299      	uxth	r1, r3
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	222d      	movs	r2, #45	@ 0x2d
 80017da:	2025      	movs	r0, #37	@ 0x25
 80017dc:	f7ff fc3c 	bl	8001058 <LCD_Fill>
	}

	if(jump_step <=44)	// going up
 80017e0:	4b59      	ldr	r3, [pc, #356]	@ (8001948 <DrawDino+0x2ec>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	2b2c      	cmp	r3, #44	@ 0x2c
 80017e6:	d80e      	bhi.n	8001806 <DrawDino+0x1aa>
	{
		LCD_Fill(36,177 - altitude,41,180 - altitude,WHITE);      // clear mouth (tongue) bottom
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 80017ee:	b299      	uxth	r1, r3
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017fc:	9200      	str	r2, [sp, #0]
 80017fe:	2229      	movs	r2, #41	@ 0x29
 8001800:	2024      	movs	r0, #36	@ 0x24
 8001802:	f7ff fc29 	bl	8001058 <LCD_Fill>
	}



	// ----------- NECK & CHEST -----------
	LCD_Fill(25,176 - altitude,35,177 - altitude,GRAY);     // neck
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 800180c:	b299      	uxth	r1, r3
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8001814:	b29b      	uxth	r3, r3
 8001816:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800181a:	9200      	str	r2, [sp, #0]
 800181c:	2223      	movs	r2, #35	@ 0x23
 800181e:	2019      	movs	r0, #25
 8001820:	f7ff fc1a 	bl	8001058 <LCD_Fill>
	LCD_Fill(23,177 - altitude,35,192 - altitude,GRAY);     // neck & chest
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 800182a:	b299      	uxth	r1, r3
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 8001832:	b29b      	uxth	r3, r3
 8001834:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001838:	9200      	str	r2, [sp, #0]
 800183a:	2223      	movs	r2, #35	@ 0x23
 800183c:	2017      	movs	r0, #23
 800183e:	f7ff fc0b 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8001842:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <DrawDino+0x2ec>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	2b2b      	cmp	r3, #43	@ 0x2b
 8001848:	d803      	bhi.n	8001852 <DrawDino+0x1f6>
 800184a:	4b3f      	ldr	r3, [pc, #252]	@ (8001948 <DrawDino+0x2ec>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10e      	bne.n	8001870 <DrawDino+0x214>
	{
		LCD_Fill(23,173 - altitude,24,176 - altitude,WHITE);     // clear neck & chest top
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 8001858:	b299      	uxth	r1, r3
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8001860:	b29b      	uxth	r3, r3
 8001862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001866:	9200      	str	r2, [sp, #0]
 8001868:	2218      	movs	r2, #24
 800186a:	2017      	movs	r0, #23
 800186c:	f7ff fbf4 	bl	8001058 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 8001870:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <DrawDino+0x2ec>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	2b2c      	cmp	r3, #44	@ 0x2c
 8001876:	d80e      	bhi.n	8001896 <DrawDino+0x23a>
	{
		LCD_Fill(33,193 - altitude,35,196 - altitude,WHITE);    // clear neck & chest bottom
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	f1c3 03c1 	rsb	r3, r3, #193	@ 0xc1
 800187e:	b299      	uxth	r1, r3
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 8001886:	b29b      	uxth	r3, r3
 8001888:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800188c:	9200      	str	r2, [sp, #0]
 800188e:	2223      	movs	r2, #35	@ 0x23
 8001890:	2021      	movs	r0, #33	@ 0x21
 8001892:	f7ff fbe1 	bl	8001058 <LCD_Fill>
	}



	// ----------- ARM -----------
	LCD_Fill(35,181 - altitude,39,183 - altitude,GRAY);      // arm1
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 800189c:	b299      	uxth	r1, r3
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	f1c3 03b7 	rsb	r3, r3, #183	@ 0xb7
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80018aa:	9200      	str	r2, [sp, #0]
 80018ac:	2227      	movs	r2, #39	@ 0x27
 80018ae:	2023      	movs	r0, #35	@ 0x23
 80018b0:	f7ff fbd2 	bl	8001058 <LCD_Fill>
	LCD_Fill(37,181 - altitude,39,185 - altitude,GRAY);		 // arm2
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 80018ba:	b299      	uxth	r1, r3
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	f1c3 03b9 	rsb	r3, r3, #185	@ 0xb9
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80018c8:	9200      	str	r2, [sp, #0]
 80018ca:	2227      	movs	r2, #39	@ 0x27
 80018cc:	2025      	movs	r0, #37	@ 0x25
 80018ce:	f7ff fbc3 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <DrawDino+0x2ec>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80018d8:	d803      	bhi.n	80018e2 <DrawDino+0x286>
 80018da:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <DrawDino+0x2ec>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10e      	bne.n	8001900 <DrawDino+0x2a4>
	{
		LCD_Fill(36,177 - altitude,41,178 - altitude,WHITE);      // clear arm1 & arm2 top
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 80018e8:	b299      	uxth	r1, r3
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	f1c3 03b2 	rsb	r3, r3, #178	@ 0xb2
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f6:	9200      	str	r2, [sp, #0]
 80018f8:	2229      	movs	r2, #41	@ 0x29
 80018fa:	2024      	movs	r0, #36	@ 0x24
 80018fc:	f7ff fbac 	bl	8001058 <LCD_Fill>
	}

	if(jump_step <=44)	// going up
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <DrawDino+0x2ec>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	2b2c      	cmp	r3, #44	@ 0x2c
 8001906:	d821      	bhi.n	800194c <DrawDino+0x2f0>
	{
		LCD_Fill(35,184 - altitude,36,187 - altitude,WHITE);      // clear arm1 bottom
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	f1c3 03b8 	rsb	r3, r3, #184	@ 0xb8
 800190e:	b299      	uxth	r1, r3
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	f1c3 03bb 	rsb	r3, r3, #187	@ 0xbb
 8001916:	b29b      	uxth	r3, r3
 8001918:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800191c:	9200      	str	r2, [sp, #0]
 800191e:	2224      	movs	r2, #36	@ 0x24
 8001920:	2023      	movs	r0, #35	@ 0x23
 8001922:	f7ff fb99 	bl	8001058 <LCD_Fill>
		LCD_Fill(37,186 - altitude,39,189 - altitude,WHITE);      // clear arm2 bottom
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	f1c3 03ba 	rsb	r3, r3, #186	@ 0xba
 800192c:	b299      	uxth	r1, r3
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	f1c3 03bd 	rsb	r3, r3, #189	@ 0xbd
 8001934:	b29b      	uxth	r3, r3
 8001936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800193a:	9200      	str	r2, [sp, #0]
 800193c:	2227      	movs	r2, #39	@ 0x27
 800193e:	2025      	movs	r0, #37	@ 0x25
 8001940:	f7ff fb8a 	bl	8001058 <LCD_Fill>
 8001944:	e002      	b.n	800194c <DrawDino+0x2f0>
 8001946:	bf00      	nop
 8001948:	20000044 	.word	0x20000044
	}



	// ----------- BODY -----------
	LCD_Fill(20,180 - altitude,32,195 - altitude,GRAY);     // body1
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8001952:	b299      	uxth	r1, r3
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 800195a:	b29b      	uxth	r3, r3
 800195c:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001960:	9200      	str	r2, [sp, #0]
 8001962:	2220      	movs	r2, #32
 8001964:	2014      	movs	r0, #20
 8001966:	f7ff fb77 	bl	8001058 <LCD_Fill>
	LCD_Fill(17,182 - altitude,30,197 - altitude,GRAY);     // body2
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 8001970:	b299      	uxth	r1, r3
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001978:	b29b      	uxth	r3, r3
 800197a:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800197e:	9200      	str	r2, [sp, #0]
 8001980:	221e      	movs	r2, #30
 8001982:	2011      	movs	r0, #17
 8001984:	f7ff fb68 	bl	8001058 <LCD_Fill>
	LCD_Fill(12,185 - altitude,27,197 - altitude,GRAY);     // body3
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	f1c3 03b9 	rsb	r3, r3, #185	@ 0xb9
 800198e:	b299      	uxth	r1, r3
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001996:	b29b      	uxth	r3, r3
 8001998:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800199c:	9200      	str	r2, [sp, #0]
 800199e:	221b      	movs	r2, #27
 80019a0:	200c      	movs	r0, #12
 80019a2:	f7ff fb59 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 80019a6:	4bb2      	ldr	r3, [pc, #712]	@ (8001c70 <DrawDino+0x614>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	2b2b      	cmp	r3, #43	@ 0x2b
 80019ac:	d803      	bhi.n	80019b6 <DrawDino+0x35a>
 80019ae:	4bb0      	ldr	r3, [pc, #704]	@ (8001c70 <DrawDino+0x614>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d12c      	bne.n	8001a10 <DrawDino+0x3b4>
	{
		LCD_Fill(20,176 - altitude,22,179 - altitude,WHITE);    // clear body1 top
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 80019bc:	b299      	uxth	r1, r3
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ca:	9200      	str	r2, [sp, #0]
 80019cc:	2216      	movs	r2, #22
 80019ce:	2014      	movs	r0, #20
 80019d0:	f7ff fb42 	bl	8001058 <LCD_Fill>
		LCD_Fill(17,178 - altitude,19,181 - altitude,WHITE);    // clear body2 top
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	f1c3 03b2 	rsb	r3, r3, #178	@ 0xb2
 80019da:	b299      	uxth	r1, r3
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019e8:	9200      	str	r2, [sp, #0]
 80019ea:	2213      	movs	r2, #19
 80019ec:	2011      	movs	r0, #17
 80019ee:	f7ff fb33 	bl	8001058 <LCD_Fill>
		LCD_Fill(13,181 - altitude,16,184 - altitude,WHITE);    // clear body3 top (tail part)
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 80019f8:	b299      	uxth	r1, r3
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	f1c3 03b8 	rsb	r3, r3, #184	@ 0xb8
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a06:	9200      	str	r2, [sp, #0]
 8001a08:	2210      	movs	r2, #16
 8001a0a:	200d      	movs	r0, #13
 8001a0c:	f7ff fb24 	bl	8001058 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 8001a10:	4b97      	ldr	r3, [pc, #604]	@ (8001c70 <DrawDino+0x614>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a16:	d83b      	bhi.n	8001a90 <DrawDino+0x434>
	{
		LCD_Fill(31,196 - altitude,32,199 - altitude,WHITE);    // clear body1 bottom
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	f1c3 03c7 	rsb	r3, r3, #199	@ 0xc7
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	201f      	movs	r0, #31
 8001a32:	f7ff fb11 	bl	8001058 <LCD_Fill>
		LCD_Fill(28,198 - altitude,30,201 - altitude,WHITE);    // clear body2 bottom
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	f1c3 03c6 	rsb	r3, r3, #198	@ 0xc6
 8001a3c:	b299      	uxth	r1, r3
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	f1c3 03c9 	rsb	r3, r3, #201	@ 0xc9
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a4a:	9200      	str	r2, [sp, #0]
 8001a4c:	221e      	movs	r2, #30
 8001a4e:	201c      	movs	r0, #28
 8001a50:	f7ff fb02 	bl	8001058 <LCD_Fill>
		LCD_Fill(12,197 - altitude,14,200 - altitude,WHITE);    // clear body3 leg break 1 bottom
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001a5a:	b299      	uxth	r1, r3
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a68:	9200      	str	r2, [sp, #0]
 8001a6a:	220e      	movs	r2, #14
 8001a6c:	200c      	movs	r0, #12
 8001a6e:	f7ff faf3 	bl	8001058 <LCD_Fill>
		LCD_Fill(20,197 - altitude,22,202 - altitude,WHITE);    // clear body3 leg break 2 bottom
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001a78:	b299      	uxth	r1, r3
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a86:	9200      	str	r2, [sp, #0]
 8001a88:	2216      	movs	r2, #22
 8001a8a:	2014      	movs	r0, #20
 8001a8c:	f7ff fae4 	bl	8001058 <LCD_Fill>
	}



	// ----------- TAIL -----------
	LCD_Fill(10,182 - altitude,12,195 - altitude,GRAY);     // tail1
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 8001a96:	b299      	uxth	r1, r3
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001aa4:	9200      	str	r2, [sp, #0]
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	200a      	movs	r0, #10
 8001aaa:	f7ff fad5 	bl	8001058 <LCD_Fill>
	LCD_Fill(8,180 - altitude,10,192 - altitude,GRAY);		// tail2
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8001ab4:	b299      	uxth	r1, r3
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001ac2:	9200      	str	r2, [sp, #0]
 8001ac4:	220a      	movs	r2, #10
 8001ac6:	2008      	movs	r0, #8
 8001ac8:	f7ff fac6 	bl	8001058 <LCD_Fill>
	LCD_Fill(7,175 - altitude,8,188 - altitude,GRAY);		// tail3
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 8001ad2:	b299      	uxth	r1, r3
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	f1c3 03bc 	rsb	r3, r3, #188	@ 0xbc
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001ae0:	9200      	str	r2, [sp, #0]
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	2007      	movs	r0, #7
 8001ae6:	f7ff fab7 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8001aea:	4b61      	ldr	r3, [pc, #388]	@ (8001c70 <DrawDino+0x614>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	2b2b      	cmp	r3, #43	@ 0x2b
 8001af0:	d803      	bhi.n	8001afa <DrawDino+0x49e>
 8001af2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c70 <DrawDino+0x614>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d12c      	bne.n	8001b54 <DrawDino+0x4f8>
	{
		LCD_Fill(10,178 - altitude,12,181 - altitude,WHITE);	// clear tail1 top
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	f1c3 03b2 	rsb	r3, r3, #178	@ 0xb2
 8001b00:	b299      	uxth	r1, r3
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b0e:	9200      	str	r2, [sp, #0]
 8001b10:	220c      	movs	r2, #12
 8001b12:	200a      	movs	r0, #10
 8001b14:	f7ff faa0 	bl	8001058 <LCD_Fill>
		LCD_Fill(9,176 - altitude,10,179 - altitude,WHITE);		// clear tail2 top
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8001b1e:	b299      	uxth	r1, r3
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b2c:	9200      	str	r2, [sp, #0]
 8001b2e:	220a      	movs	r2, #10
 8001b30:	2009      	movs	r0, #9
 8001b32:	f7ff fa91 	bl	8001058 <LCD_Fill>
		LCD_Fill(7,171 - altitude,8,174 - altitude,WHITE);		// clear tail3 top
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	f1c3 03ab 	rsb	r3, r3, #171	@ 0xab
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b4a:	9200      	str	r2, [sp, #0]
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	2007      	movs	r0, #7
 8001b50:	f7ff fa82 	bl	8001058 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 8001b54:	4b46      	ldr	r3, [pc, #280]	@ (8001c70 <DrawDino+0x614>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b5a:	d82c      	bhi.n	8001bb6 <DrawDino+0x55a>
	{
		LCD_Fill(10,196 - altitude,12,199 - altitude,WHITE);	// clear tail1 bottom
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 8001b62:	b299      	uxth	r1, r3
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	f1c3 03c7 	rsb	r3, r3, #199	@ 0xc7
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b70:	9200      	str	r2, [sp, #0]
 8001b72:	220c      	movs	r2, #12
 8001b74:	200a      	movs	r0, #10
 8001b76:	f7ff fa6f 	bl	8001058 <LCD_Fill>
		LCD_Fill(8,193 - altitude,9,196 - altitude,WHITE);		// clear tail2 bottom
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	f1c3 03c1 	rsb	r3, r3, #193	@ 0xc1
 8001b80:	b299      	uxth	r1, r3
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b8e:	9200      	str	r2, [sp, #0]
 8001b90:	2209      	movs	r2, #9
 8001b92:	2008      	movs	r0, #8
 8001b94:	f7ff fa60 	bl	8001058 <LCD_Fill>
		LCD_Fill(6,189 - altitude,7,192 - altitude,WHITE);		// clear tail3 bottom
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	f1c3 03bd 	rsb	r3, r3, #189	@ 0xbd
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bac:	9200      	str	r2, [sp, #0]
 8001bae:	2207      	movs	r2, #7
 8001bb0:	2006      	movs	r0, #6
 8001bb2:	f7ff fa51 	bl	8001058 <LCD_Fill>
	}



	// ----------- RIGHT LEG -----------
	LCD_Fill(23,197 - altitude,27,200 - altitude,GRAY);      						// right leg
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001bbc:	b299      	uxth	r1, r3
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001bca:	9200      	str	r2, [sp, #0]
 8001bcc:	221b      	movs	r2, #27
 8001bce:	2017      	movs	r0, #23
 8001bd0:	f7ff fa42 	bl	8001058 <LCD_Fill>
	LCD_Fill(25,200 - altitude - right_leg,27,207 - altitude - right_leg,GRAY);		// leg animation
 8001bd4:	793b      	ldrb	r3, [r7, #4]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	4413      	add	r3, r2
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001be2:	b299      	uxth	r1, r3
 8001be4:	793b      	ldrb	r3, [r7, #4]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	4413      	add	r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001bf8:	9200      	str	r2, [sp, #0]
 8001bfa:	221b      	movs	r2, #27
 8001bfc:	2019      	movs	r0, #25
 8001bfe:	f7ff fa2b 	bl	8001058 <LCD_Fill>
	LCD_Fill(27,205 - altitude - right_leg,30,207 - altitude - right_leg,GRAY);
 8001c02:	793b      	ldrb	r3, [r7, #4]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	f1c3 03cd 	rsb	r3, r3, #205	@ 0xcd
 8001c10:	b299      	uxth	r1, r3
 8001c12:	793b      	ldrb	r3, [r7, #4]
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	4413      	add	r3, r2
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001c26:	9200      	str	r2, [sp, #0]
 8001c28:	221e      	movs	r2, #30
 8001c2a:	201b      	movs	r0, #27
 8001c2c:	f7ff fa14 	bl	8001058 <LCD_Fill>

	LCD_Fill(23,202 - altitude - right_leg,24,204 - altitude - right_leg,WHITE);	// clear thigh
 8001c30:	793b      	ldrb	r3, [r7, #4]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	4413      	add	r3, r2
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 8001c3e:	b299      	uxth	r1, r3
 8001c40:	793b      	ldrb	r3, [r7, #4]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c54:	9200      	str	r2, [sp, #0]
 8001c56:	2218      	movs	r2, #24
 8001c58:	2017      	movs	r0, #23
 8001c5a:	f7ff f9fd 	bl	8001058 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <DrawDino+0x614>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	2b2b      	cmp	r3, #43	@ 0x2b
 8001c64:	d806      	bhi.n	8001c74 <DrawDino+0x618>
 8001c66:	4b02      	ldr	r3, [pc, #8]	@ (8001c70 <DrawDino+0x614>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d119      	bne.n	8001ca2 <DrawDino+0x646>
 8001c6e:	e001      	b.n	8001c74 <DrawDino+0x618>
 8001c70:	20000044 	.word	0x20000044
	{
		LCD_Fill(28,202 - altitude - right_leg,30,204 - altitude - right_leg,WHITE);	// clear foot top
 8001c74:	793b      	ldrb	r3, [r7, #4]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 8001c82:	b299      	uxth	r1, r3
 8001c84:	793b      	ldrb	r3, [r7, #4]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c98:	9200      	str	r2, [sp, #0]
 8001c9a:	221e      	movs	r2, #30
 8001c9c:	201c      	movs	r0, #28
 8001c9e:	f7ff f9db 	bl	8001058 <LCD_Fill>

	}
	if(jump_step <=44)	// going up
 8001ca2:	4b56      	ldr	r3, [pc, #344]	@ (8001dfc <DrawDino+0x7a0>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ca8:	d816      	bhi.n	8001cd8 <DrawDino+0x67c>
	{
		LCD_Fill(23,209 - altitude - right_leg,30,212 - altitude - right_leg,WHITE);	// clear foot bottom
 8001caa:	793b      	ldrb	r3, [r7, #4]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	f1c3 03d1 	rsb	r3, r3, #209	@ 0xd1
 8001cb8:	b299      	uxth	r1, r3
 8001cba:	793b      	ldrb	r3, [r7, #4]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	f1c3 03d4 	rsb	r3, r3, #212	@ 0xd4
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cce:	9200      	str	r2, [sp, #0]
 8001cd0:	221e      	movs	r2, #30
 8001cd2:	2017      	movs	r0, #23
 8001cd4:	f7ff f9c0 	bl	8001058 <LCD_Fill>
	}



	// ----------- LEFT LEG -----------
	LCD_Fill(15,197 - altitude,19,200 - altitude,GRAY);      						// left leg
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8001cde:	b299      	uxth	r1, r3
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001cec:	9200      	str	r2, [sp, #0]
 8001cee:	2213      	movs	r2, #19
 8001cf0:	200f      	movs	r0, #15
 8001cf2:	f7ff f9b1 	bl	8001058 <LCD_Fill>
	LCD_Fill(15,200 - altitude - left_leg,17,207 - altitude - left_leg,GRAY);		// leg animation
 8001cf6:	797b      	ldrb	r3, [r7, #5]
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001d04:	b299      	uxth	r1, r3
 8001d06:	797b      	ldrb	r3, [r7, #5]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001d1a:	9200      	str	r2, [sp, #0]
 8001d1c:	2211      	movs	r2, #17
 8001d1e:	200f      	movs	r0, #15
 8001d20:	f7ff f99a 	bl	8001058 <LCD_Fill>
	LCD_Fill(17,205 - altitude - left_leg,20,207 - altitude - left_leg,GRAY);
 8001d24:	797b      	ldrb	r3, [r7, #5]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f1c3 03cd 	rsb	r3, r3, #205	@ 0xcd
 8001d32:	b299      	uxth	r1, r3
 8001d34:	797b      	ldrb	r3, [r7, #5]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001d48:	9200      	str	r2, [sp, #0]
 8001d4a:	2214      	movs	r2, #20
 8001d4c:	2011      	movs	r0, #17
 8001d4e:	f7ff f983 	bl	8001058 <LCD_Fill>

	if((jump_step>=44) || (jump_step == 0))	// going down
 8001d52:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <DrawDino+0x7a0>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	2b2b      	cmp	r3, #43	@ 0x2b
 8001d58:	d803      	bhi.n	8001d62 <DrawDino+0x706>
 8001d5a:	4b28      	ldr	r3, [pc, #160]	@ (8001dfc <DrawDino+0x7a0>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d116      	bne.n	8001d90 <DrawDino+0x734>
	{
		LCD_Fill(18,202 - altitude - left_leg,20,204 - altitude - left_leg,WHITE);		// clear foot top with thigh
 8001d62:	797b      	ldrb	r3, [r7, #5]
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	4413      	add	r3, r2
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 8001d70:	b299      	uxth	r1, r3
 8001d72:	797b      	ldrb	r3, [r7, #5]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d86:	9200      	str	r2, [sp, #0]
 8001d88:	2214      	movs	r2, #20
 8001d8a:	2012      	movs	r0, #18
 8001d8c:	f7ff f964 	bl	8001058 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 8001d90:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <DrawDino+0x7a0>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d96:	d82d      	bhi.n	8001df4 <DrawDino+0x798>
	{
		LCD_Fill(18,202 - altitude - left_leg,20,204 - altitude - left_leg,WHITE);		// clear foot top with thigh
 8001d98:	797b      	ldrb	r3, [r7, #5]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	4413      	add	r3, r2
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 8001da6:	b299      	uxth	r1, r3
 8001da8:	797b      	ldrb	r3, [r7, #5]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	4413      	add	r3, r2
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dbc:	9200      	str	r2, [sp, #0]
 8001dbe:	2214      	movs	r2, #20
 8001dc0:	2012      	movs	r0, #18
 8001dc2:	f7ff f949 	bl	8001058 <LCD_Fill>
		LCD_Fill(15,209 - altitude - left_leg,20,212 - altitude - left_leg,WHITE);		// clear foot bottom
 8001dc6:	797b      	ldrb	r3, [r7, #5]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f1c3 03d1 	rsb	r3, r3, #209	@ 0xd1
 8001dd4:	b299      	uxth	r1, r3
 8001dd6:	797b      	ldrb	r3, [r7, #5]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	4413      	add	r3, r2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f1c3 03d4 	rsb	r3, r3, #212	@ 0xd4
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dea:	9200      	str	r2, [sp, #0]
 8001dec:	2214      	movs	r2, #20
 8001dee:	200f      	movs	r0, #15
 8001df0:	f7ff f932 	bl	8001058 <LCD_Fill>
	}
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000044 	.word	0x20000044

08001e00 <DrawObstacle3>:
}


// obstacle 3
void DrawObstacle3(uint16_t shift)		// BIG & small
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
	// big one
	// ----------- VERTICAL PART -----------
	LCD_Fill(357 - shift,150,361 - shift,153,GRAY);     // vertical1
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 8001e10:	3301      	adds	r3, #1
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b218      	sxth	r0, r3
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2399      	movs	r3, #153	@ 0x99
 8001e2a:	2196      	movs	r1, #150	@ 0x96
 8001e2c:	f7ff f914 	bl	8001058 <LCD_Fill>
	LCD_Fill(356 - shift,153,362 - shift,210,GRAY);
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b218      	sxth	r0, r3
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b21a      	sxth	r2, r3
 8001e44:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	23d2      	movs	r3, #210	@ 0xd2
 8001e4c:	2199      	movs	r1, #153	@ 0x99
 8001e4e:	f7ff f903 	bl	8001058 <LCD_Fill>

	LCD_Fill(362 - shift,150,365 - shift,152,WHITE);		// clear vertical1
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	b218      	sxth	r0, r3
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8001e62:	3301      	adds	r3, #1
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2398      	movs	r3, #152	@ 0x98
 8001e70:	2196      	movs	r1, #150	@ 0x96
 8001e72:	f7ff f8f1 	bl	8001058 <LCD_Fill>
	LCD_Fill(363 - shift,153,366 - shift,174,WHITE);		// clear vertical1 upper
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	b218      	sxth	r0, r3
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	23ae      	movs	r3, #174	@ 0xae
 8001e94:	2199      	movs	r1, #153	@ 0x99
 8001e96:	f7ff f8df 	bl	8001058 <LCD_Fill>
	LCD_Fill(363 - shift,181,366 - shift,210,WHITE);		// clear vertical1 lower
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	b218      	sxth	r0, r3
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	23d2      	movs	r3, #210	@ 0xd2
 8001eb8:	21b5      	movs	r1, #181	@ 0xb5
 8001eba:	f7ff f8cd 	bl	8001058 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(346 - shift,175,374 - shift,180,GRAY);     // horizontal1
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	b218      	sxth	r0, r3
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	23b4      	movs	r3, #180	@ 0xb4
 8001eda:	21af      	movs	r1, #175	@ 0xaf
 8001edc:	f7ff f8bc 	bl	8001058 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(345 - shift,160,349 - shift,162,GRAY);     // left1
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	b218      	sxth	r0, r3
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	f5c3 73ae 	rsb	r3, r3, #348	@ 0x15c
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	23a2      	movs	r3, #162	@ 0xa2
 8001f00:	21a0      	movs	r1, #160	@ 0xa0
 8001f02:	f7ff f8a9 	bl	8001058 <LCD_Fill>
	LCD_Fill(344 - shift,162,350 - shift,178,GRAY);
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b218      	sxth	r0, r3
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	23b2      	movs	r3, #178	@ 0xb2
 8001f22:	21a2      	movs	r1, #162	@ 0xa2
 8001f24:	f7ff f898 	bl	8001058 <LCD_Fill>

	LCD_Fill(350 - shift,160,353 - shift,162,WHITE);     // clear left1
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b218      	sxth	r0, r3
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	f5c3 73b0 	rsb	r3, r3, #352	@ 0x160
 8001f38:	3301      	adds	r3, #1
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	23a2      	movs	r3, #162	@ 0xa2
 8001f46:	21a0      	movs	r1, #160	@ 0xa0
 8001f48:	f7ff f886 	bl	8001058 <LCD_Fill>
	LCD_Fill(351 - shift,162,354 - shift,174,WHITE);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8001f52:	3301      	adds	r3, #1
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b218      	sxth	r0, r3
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	f5c3 73b1 	rsb	r3, r3, #354	@ 0x162
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	23ae      	movs	r3, #174	@ 0xae
 8001f6a:	21a2      	movs	r1, #162	@ 0xa2
 8001f6c:	f7ff f874 	bl	8001058 <LCD_Fill>

	// ----------- RIGHT PART -----------
	LCD_Fill(371 - shift,165,375 - shift,167,GRAY);     // right1
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 8001f76:	3301      	adds	r3, #1
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	b218      	sxth	r0, r3
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8001f82:	3301      	adds	r3, #1
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	23a7      	movs	r3, #167	@ 0xa7
 8001f90:	21a5      	movs	r1, #165	@ 0xa5
 8001f92:	f7ff f861 	bl	8001058 <LCD_Fill>
	LCD_Fill(370 - shift,167,376 - shift,178,GRAY);
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	b218      	sxth	r0, r3
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b21a      	sxth	r2, r3
 8001faa:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	23b2      	movs	r3, #178	@ 0xb2
 8001fb2:	21a7      	movs	r1, #167	@ 0xa7
 8001fb4:	f7ff f850 	bl	8001058 <LCD_Fill>

	LCD_Fill(376 - shift,165,379 - shift,167,WHITE);     // clear right1
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	b218      	sxth	r0, r3
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8001fc8:	3301      	adds	r3, #1
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	b21a      	sxth	r2, r3
 8001fce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	23a7      	movs	r3, #167	@ 0xa7
 8001fd6:	21a5      	movs	r1, #165	@ 0xa5
 8001fd8:	f7ff f83e 	bl	8001058 <LCD_Fill>
	LCD_Fill(377 - shift,167,380 - shift,178,WHITE);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	b218      	sxth	r0, r3
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	23b2      	movs	r3, #178	@ 0xb2
 8001ffa:	21a7      	movs	r1, #167	@ 0xa7
 8001ffc:	f7ff f82c 	bl	8001058 <LCD_Fill>
	LCD_Fill(375 - shift,179,378 - shift,180,WHITE);
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8002006:	3301      	adds	r3, #1
 8002008:	b29b      	uxth	r3, r3
 800200a:	b218      	sxth	r0, r3
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8002012:	b29b      	uxth	r3, r3
 8002014:	b21a      	sxth	r2, r3
 8002016:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	23b4      	movs	r3, #180	@ 0xb4
 800201e:	21b3      	movs	r1, #179	@ 0xb3
 8002020:	f7ff f81a 	bl	8001058 <LCD_Fill>



	// small one
	// ----------- VERTICAL PART -----------
	LCD_Fill(388 - shift,170,392 - shift,172,GRAY);     // vertical2
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	f5c3 73c2 	rsb	r3, r3, #388	@ 0x184
 800202a:	b29b      	uxth	r3, r3
 800202c:	b218      	sxth	r0, r3
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8002034:	b29b      	uxth	r3, r3
 8002036:	b21a      	sxth	r2, r3
 8002038:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	23ac      	movs	r3, #172	@ 0xac
 8002040:	21aa      	movs	r1, #170	@ 0xaa
 8002042:	f7ff f809 	bl	8001058 <LCD_Fill>
	LCD_Fill(387 - shift,172,393 - shift,210,GRAY);
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 800204c:	3301      	adds	r3, #1
 800204e:	b29b      	uxth	r3, r3
 8002050:	b218      	sxth	r0, r3
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8002058:	3301      	adds	r3, #1
 800205a:	b29b      	uxth	r3, r3
 800205c:	b21a      	sxth	r2, r3
 800205e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	23d2      	movs	r3, #210	@ 0xd2
 8002066:	21ac      	movs	r1, #172	@ 0xac
 8002068:	f7fe fff6 	bl	8001058 <LCD_Fill>

	LCD_Fill(393 - shift,170,396 - shift,172,WHITE);		// clear vertical2
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8002072:	3301      	adds	r3, #1
 8002074:	b29b      	uxth	r3, r3
 8002076:	b218      	sxth	r0, r3
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 800207e:	b29b      	uxth	r3, r3
 8002080:	b21a      	sxth	r2, r3
 8002082:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	23ac      	movs	r3, #172	@ 0xac
 800208a:	21aa      	movs	r1, #170	@ 0xaa
 800208c:	f7fe ffe4 	bl	8001058 <LCD_Fill>
	LCD_Fill(394 - shift,172,397 - shift,176,WHITE);		// clear vertical2 upper1
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8002096:	b29b      	uxth	r3, r3
 8002098:	b218      	sxth	r0, r3
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 80020a0:	3301      	adds	r3, #1
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	b21a      	sxth	r2, r3
 80020a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	23b0      	movs	r3, #176	@ 0xb0
 80020ae:	21ac      	movs	r1, #172	@ 0xac
 80020b0:	f7fe ffd2 	bl	8001058 <LCD_Fill>
	LCD_Fill(394 - shift,177,396 - shift,185,WHITE);		// clear vertical2 upper2
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	b218      	sxth	r0, r3
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	23b9      	movs	r3, #185	@ 0xb9
 80020d0:	21b1      	movs	r1, #177	@ 0xb1
 80020d2:	f7fe ffc1 	bl	8001058 <LCD_Fill>
	LCD_Fill(394 - shift,191,397 - shift,210,WHITE);		// clear vertical2 lower
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	b218      	sxth	r0, r3
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 80020e6:	3301      	adds	r3, #1
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	23d2      	movs	r3, #210	@ 0xd2
 80020f4:	21bf      	movs	r1, #191	@ 0xbf
 80020f6:	f7fe ffaf 	bl	8001058 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(381 - shift,186,399 - shift,190,GRAY);     // horizontal2
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8002100:	3301      	adds	r3, #1
 8002102:	b29b      	uxth	r3, r3
 8002104:	b218      	sxth	r0, r3
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 800210c:	3301      	adds	r3, #1
 800210e:	b29b      	uxth	r3, r3
 8002110:	b21a      	sxth	r2, r3
 8002112:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	23be      	movs	r3, #190	@ 0xbe
 800211a:	21ba      	movs	r1, #186	@ 0xba
 800211c:	f7fe ff9c 	bl	8001058 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(380 - shift,180,382 - shift,181,GRAY);     // left2
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8002126:	b29b      	uxth	r3, r3
 8002128:	b218      	sxth	r0, r3
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8002130:	b29b      	uxth	r3, r3
 8002132:	b21a      	sxth	r2, r3
 8002134:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	23b5      	movs	r3, #181	@ 0xb5
 800213c:	21b4      	movs	r1, #180	@ 0xb4
 800213e:	f7fe ff8b 	bl	8001058 <LCD_Fill>
	LCD_Fill(379 - shift,181,383 - shift,188,GRAY);
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8002148:	3301      	adds	r3, #1
 800214a:	b29b      	uxth	r3, r3
 800214c:	b218      	sxth	r0, r3
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8002154:	3301      	adds	r3, #1
 8002156:	b29b      	uxth	r3, r3
 8002158:	b21a      	sxth	r2, r3
 800215a:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	23bc      	movs	r3, #188	@ 0xbc
 8002162:	21b5      	movs	r1, #181	@ 0xb5
 8002164:	f7fe ff78 	bl	8001058 <LCD_Fill>

	LCD_Fill(383 - shift,180,386 - shift,181,WHITE);     // clear left2
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 800216e:	3301      	adds	r3, #1
 8002170:	b29b      	uxth	r3, r3
 8002172:	b218      	sxth	r0, r3
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 800217a:	b29b      	uxth	r3, r3
 800217c:	b21a      	sxth	r2, r3
 800217e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	23b5      	movs	r3, #181	@ 0xb5
 8002186:	21b4      	movs	r1, #180	@ 0xb4
 8002188:	f7fe ff66 	bl	8001058 <LCD_Fill>
	LCD_Fill(384 - shift,181,386 - shift,185,WHITE);
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	f5c3 73c0 	rsb	r3, r3, #384	@ 0x180
 8002192:	b29b      	uxth	r3, r3
 8002194:	b218      	sxth	r0, r3
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 800219c:	b29b      	uxth	r3, r3
 800219e:	b21a      	sxth	r2, r3
 80021a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	23b9      	movs	r3, #185	@ 0xb9
 80021a8:	21b5      	movs	r1, #181	@ 0xb5
 80021aa:	f7fe ff55 	bl	8001058 <LCD_Fill>


	// ----------- RIGHT PART -----------
	LCD_Fill(397 - shift,177,400 - shift,178,GRAY);     // right2
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 80021b4:	3301      	adds	r3, #1
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b218      	sxth	r0, r3
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	23b2      	movs	r3, #178	@ 0xb2
 80021cc:	21b1      	movs	r1, #177	@ 0xb1
 80021ce:	f7fe ff43 	bl	8001058 <LCD_Fill>
	LCD_Fill(396 - shift,178,401 - shift,188,GRAY);
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b218      	sxth	r0, r3
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 80021e2:	3301      	adds	r3, #1
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	23bc      	movs	r3, #188	@ 0xbc
 80021f0:	21b2      	movs	r1, #178	@ 0xb2
 80021f2:	f7fe ff31 	bl	8001058 <LCD_Fill>

	LCD_Fill(401 - shift,177,404 - shift,178,WHITE);     // clear right2
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 80021fc:	3301      	adds	r3, #1
 80021fe:	b29b      	uxth	r3, r3
 8002200:	b218      	sxth	r0, r3
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	f5c3 73ca 	rsb	r3, r3, #404	@ 0x194
 8002208:	b29b      	uxth	r3, r3
 800220a:	b21a      	sxth	r2, r3
 800220c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	23b2      	movs	r3, #178	@ 0xb2
 8002214:	21b1      	movs	r1, #177	@ 0xb1
 8002216:	f7fe ff1f 	bl	8001058 <LCD_Fill>
	LCD_Fill(402 - shift,178,405 - shift,188,WHITE);
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	f5c3 73c9 	rsb	r3, r3, #402	@ 0x192
 8002220:	b29b      	uxth	r3, r3
 8002222:	b218      	sxth	r0, r3
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	f5c3 73ca 	rsb	r3, r3, #404	@ 0x194
 800222a:	3301      	adds	r3, #1
 800222c:	b29b      	uxth	r3, r3
 800222e:	b21a      	sxth	r2, r3
 8002230:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	23bc      	movs	r3, #188	@ 0xbc
 8002238:	21b2      	movs	r1, #178	@ 0xb2
 800223a:	f7fe ff0d 	bl	8001058 <LCD_Fill>
	LCD_Fill(400 - shift,189,403 - shift,190,WHITE);
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8002244:	b29b      	uxth	r3, r3
 8002246:	b218      	sxth	r0, r3
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	f5c3 73c9 	rsb	r3, r3, #402	@ 0x192
 800224e:	3301      	adds	r3, #1
 8002250:	b29b      	uxth	r3, r3
 8002252:	b21a      	sxth	r2, r3
 8002254:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	23be      	movs	r3, #190	@ 0xbe
 800225c:	21bd      	movs	r1, #189	@ 0xbd
 800225e:	f7fe fefb 	bl	8001058 <LCD_Fill>
	LCD_Fill(399 - shift,190,402 - shift,191,WHITE);
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8002268:	3301      	adds	r3, #1
 800226a:	b29b      	uxth	r3, r3
 800226c:	b218      	sxth	r0, r3
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	f5c3 73c9 	rsb	r3, r3, #402	@ 0x192
 8002274:	b29b      	uxth	r3, r3
 8002276:	b21a      	sxth	r2, r3
 8002278:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	23bf      	movs	r3, #191	@ 0xbf
 8002280:	21be      	movs	r1, #190	@ 0xbe
 8002282:	f7fe fee9 	bl	8001058 <LCD_Fill>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002294:	f000 fa34 	bl	8002700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002298:	f000 f812 	bl	80022c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800229c:	f000 f8be 	bl	800241c <MX_GPIO_Init>
  MX_TIM2_Init();
 80022a0:	f000 f86e 	bl	8002380 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  delay_init(72);			// delay initialization (System Clock [MHz])
 80022a4:	2048      	movs	r0, #72	@ 0x48
 80022a6:	f7fe ffb3 	bl	8001210 <delay_init>
  ILI9341_paradriver_Init();			// initialization of LCD driver
 80022aa:	f7fe f861 	bl	8000370 <ILI9341_paradriver_Init>

  HAL_TIM_Base_Start_IT(&htim2);	// timer start (60Hz refresh rate)
 80022ae:	4803      	ldr	r0, [pc, #12]	@ (80022bc <main+0x2c>)
 80022b0:	f002 fa0e 	bl	80046d0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	GAME();
 80022b4:	f7ff f96c 	bl	8001590 <GAME>
 80022b8:	e7fc      	b.n	80022b4 <main+0x24>
 80022ba:	bf00      	nop
 80022bc:	20000054 	.word	0x20000054

080022c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0a6      	sub	sp, #152	@ 0x98
 80022c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80022ca:	2228      	movs	r2, #40	@ 0x28
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fe5a 	bl	8004f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	2258      	movs	r2, #88	@ 0x58
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 fe4c 	bl	8004f88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022f0:	2302      	movs	r3, #2
 80022f2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f4:	2301      	movs	r3, #1
 80022f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022f8:	2310      	movs	r3, #16
 80022fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022fe:	2302      	movs	r3, #2
 8002300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002304:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002308:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800230c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002310:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800231a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fd3c 	bl	8002d9c <HAL_RCC_OscConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800232a:	f000 f907 	bl	800253c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800232e:	230f      	movs	r3, #15
 8002330:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002332:	2302      	movs	r3, #2
 8002334:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002336:	2300      	movs	r3, #0
 8002338:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800233a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800233e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002344:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002348:	2102      	movs	r1, #2
 800234a:	4618      	mov	r0, r3
 800234c:	f001 fd7a 	bl	8003e44 <HAL_RCC_ClockConfig>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002356:	f000 f8f1 	bl	800253c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2;
 800235a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800235e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002360:	2300      	movs	r3, #0
 8002362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	4618      	mov	r0, r3
 8002368:	f001 ff3c 	bl	80041e4 <HAL_RCCEx_PeriphCLKConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002372:	f000 f8e3 	bl	800253c <Error_Handler>
  }
}
 8002376:	bf00      	nop
 8002378:	3798      	adds	r7, #152	@ 0x98
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800239e:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <MX_TIM2_Init+0x98>)
 80023a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 199;
 80023a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <MX_TIM2_Init+0x98>)
 80023a8:	22c7      	movs	r2, #199	@ 0xc7
 80023aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <MX_TIM2_Init+0x98>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 80023b2:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <MX_TIM2_Init+0x98>)
 80023b4:	f240 52db 	movw	r2, #1499	@ 0x5db
 80023b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ba:	4b17      	ldr	r3, [pc, #92]	@ (8002418 <MX_TIM2_Init+0x98>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c0:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <MX_TIM2_Init+0x98>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023c6:	4814      	ldr	r0, [pc, #80]	@ (8002418 <MX_TIM2_Init+0x98>)
 80023c8:	f002 f92a 	bl	8004620 <HAL_TIM_Base_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023d2:	f000 f8b3 	bl	800253c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	4619      	mov	r1, r3
 80023e2:	480d      	ldr	r0, [pc, #52]	@ (8002418 <MX_TIM2_Init+0x98>)
 80023e4:	f002 fae6 	bl	80049b4 <HAL_TIM_ConfigClockSource>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80023ee:	f000 f8a5 	bl	800253c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	4619      	mov	r1, r3
 80023fe:	4806      	ldr	r0, [pc, #24]	@ (8002418 <MX_TIM2_Init+0x98>)
 8002400:	f002 fd18 	bl	8004e34 <HAL_TIMEx_MasterConfigSynchronization>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800240a:	f000 f897 	bl	800253c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	3720      	adds	r7, #32
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000054 	.word	0x20000054

0800241c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002432:	4b3f      	ldr	r3, [pc, #252]	@ (8002530 <MX_GPIO_Init+0x114>)
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	4a3e      	ldr	r2, [pc, #248]	@ (8002530 <MX_GPIO_Init+0x114>)
 8002438:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800243c:	6153      	str	r3, [r2, #20]
 800243e:	4b3c      	ldr	r3, [pc, #240]	@ (8002530 <MX_GPIO_Init+0x114>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	4b39      	ldr	r3, [pc, #228]	@ (8002530 <MX_GPIO_Init+0x114>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4a38      	ldr	r2, [pc, #224]	@ (8002530 <MX_GPIO_Init+0x114>)
 8002450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002454:	6153      	str	r3, [r2, #20]
 8002456:	4b36      	ldr	r3, [pc, #216]	@ (8002530 <MX_GPIO_Init+0x114>)
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	4b33      	ldr	r3, [pc, #204]	@ (8002530 <MX_GPIO_Init+0x114>)
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	4a32      	ldr	r2, [pc, #200]	@ (8002530 <MX_GPIO_Init+0x114>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800246c:	6153      	str	r3, [r2, #20]
 800246e:	4b30      	ldr	r3, [pc, #192]	@ (8002530 <MX_GPIO_Init+0x114>)
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800247a:	2201      	movs	r2, #1
 800247c:	211f      	movs	r1, #31
 800247e:	482d      	ldr	r0, [pc, #180]	@ (8002534 <MX_GPIO_Init+0x118>)
 8002480:	f000 fc74 	bl	8002d6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	21aa      	movs	r1, #170	@ 0xaa
 8002488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800248c:	f000 fc6e 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002490:	2201      	movs	r2, #1
 8002492:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002496:	4828      	ldr	r0, [pc, #160]	@ (8002538 <MX_GPIO_Init+0x11c>)
 8002498:	f000 fc68 	bl	8002d6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800249c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	4619      	mov	r1, r3
 80024b0:	4820      	ldr	r0, [pc, #128]	@ (8002534 <MX_GPIO_Init+0x118>)
 80024b2:	f000 fab9 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80024b6:	231f      	movs	r3, #31
 80024b8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ba:	2301      	movs	r3, #1
 80024bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	4619      	mov	r1, r3
 80024cc:	4819      	ldr	r0, [pc, #100]	@ (8002534 <MX_GPIO_Init+0x118>)
 80024ce:	f000 faab 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 80024d2:	23aa      	movs	r3, #170	@ 0xaa
 80024d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d6:	2301      	movs	r3, #1
 80024d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024de:	2303      	movs	r3, #3
 80024e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	4619      	mov	r1, r3
 80024e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ec:	f000 fa9c 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80024f0:	2314      	movs	r3, #20
 80024f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f8:	2301      	movs	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	4619      	mov	r1, r3
 8002502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002506:	f000 fa8f 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800250a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800250e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002510:	2301      	movs	r3, #1
 8002512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	4619      	mov	r1, r3
 8002522:	4805      	ldr	r0, [pc, #20]	@ (8002538 <MX_GPIO_Init+0x11c>)
 8002524:	f000 fa80 	bl	8002a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002528:	bf00      	nop
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	48000800 	.word	0x48000800
 8002538:	48000400 	.word	0x48000400

0800253c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002540:	b672      	cpsid	i
}
 8002542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <Error_Handler+0x8>

08002548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <HAL_MspInit+0x44>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	4a0e      	ldr	r2, [pc, #56]	@ (800258c <HAL_MspInit+0x44>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6193      	str	r3, [r2, #24]
 800255a:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <HAL_MspInit+0x44>)
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b09      	ldr	r3, [pc, #36]	@ (800258c <HAL_MspInit+0x44>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a08      	ldr	r2, [pc, #32]	@ (800258c <HAL_MspInit+0x44>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002570:	61d3      	str	r3, [r2, #28]
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_MspInit+0x44>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a0:	d113      	bne.n	80025ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a2:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <HAL_TIM_Base_MspInit+0x44>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4a0b      	ldr	r2, [pc, #44]	@ (80025d4 <HAL_TIM_Base_MspInit+0x44>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	61d3      	str	r3, [r2, #28]
 80025ae:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_TIM_Base_MspInit+0x44>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	201c      	movs	r0, #28
 80025c0:	f000 f9df 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025c4:	201c      	movs	r0, #28
 80025c6:	f000 f9f8 	bl	80029ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000

080025d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <NMI_Handler+0x4>

080025e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <HardFault_Handler+0x4>

080025e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <MemManage_Handler+0x4>

080025f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <BusFault_Handler+0x4>

080025f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <UsageFault_Handler+0x4>

08002600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800262e:	f000 f8ad 	bl	800278c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800263c:	480f      	ldr	r0, [pc, #60]	@ (800267c <TIM2_IRQHandler+0x44>)
 800263e:	f002 f8b7 	bl	80047b0 <HAL_TIM_IRQHandler>
  }
  else
  {
	  refresh = 0;
  }*/
refresh++;
 8002642:	4b0f      	ldr	r3, [pc, #60]	@ (8002680 <TIM2_IRQHandler+0x48>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <TIM2_IRQHandler+0x48>)
 800264c:	701a      	strb	r2, [r3, #0]
if(refresh>1)
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <TIM2_IRQHandler+0x48>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d902      	bls.n	800265c <TIM2_IRQHandler+0x24>
{
	refresh=0;
 8002656:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <TIM2_IRQHandler+0x48>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
}

obs_refresh++;
 800265c:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <TIM2_IRQHandler+0x4c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	3301      	adds	r3, #1
 8002662:	b2da      	uxtb	r2, r3
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <TIM2_IRQHandler+0x4c>)
 8002666:	701a      	strb	r2, [r3, #0]
if(obs_refresh>3)
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <TIM2_IRQHandler+0x4c>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d902      	bls.n	8002676 <TIM2_IRQHandler+0x3e>
{
	obs_refresh=0;
 8002670:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <TIM2_IRQHandler+0x4c>)
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
}


  /* USER CODE END TIM2_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000054 	.word	0x20000054
 8002680:	200000a0 	.word	0x200000a0
 8002684:	200000a1 	.word	0x200000a1

08002688 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <SystemInit+0x20>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002692:	4a05      	ldr	r2, [pc, #20]	@ (80026a8 <SystemInit+0x20>)
 8002694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80026b0:	f7ff ffea 	bl	8002688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b4:	480c      	ldr	r0, [pc, #48]	@ (80026e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026b6:	490d      	ldr	r1, [pc, #52]	@ (80026ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <LoopForever+0xe>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026bc:	e002      	b.n	80026c4 <LoopCopyDataInit>

080026be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c2:	3304      	adds	r3, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c8:	d3f9      	bcc.n	80026be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026cc:	4c0a      	ldr	r4, [pc, #40]	@ (80026f8 <LoopForever+0x16>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d0:	e001      	b.n	80026d6 <LoopFillZerobss>

080026d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d4:	3204      	adds	r2, #4

080026d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d8:	d3fb      	bcc.n	80026d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026da:	f002 fc5d 	bl	8004f98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026de:	f7ff fdd7 	bl	8002290 <main>

080026e2 <LoopForever>:

LoopForever:
    b LoopForever
 80026e2:	e7fe      	b.n	80026e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80026f0:	08005030 	.word	0x08005030
  ldr r2, =_sbss
 80026f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80026f8:	200000a8 	.word	0x200000a8

080026fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC1_2_IRQHandler>
	...

08002700 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002704:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <HAL_Init+0x28>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a07      	ldr	r2, [pc, #28]	@ (8002728 <HAL_Init+0x28>)
 800270a:	f043 0310 	orr.w	r3, r3, #16
 800270e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002710:	2003      	movs	r0, #3
 8002712:	f000 f92b 	bl	800296c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002716:	200f      	movs	r0, #15
 8002718:	f000 f808 	bl	800272c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800271c:	f7ff ff14 	bl	8002548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000

0800272c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002734:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <HAL_InitTick+0x54>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <HAL_InitTick+0x58>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002742:	fbb3 f3f1 	udiv	r3, r3, r1
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f943 	bl	80029d6 <HAL_SYSTICK_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e00e      	b.n	8002778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d80a      	bhi.n	8002776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002760:	2200      	movs	r2, #0
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f000 f90b 	bl	8002982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800276c:	4a06      	ldr	r2, [pc, #24]	@ (8002788 <HAL_InitTick+0x5c>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e000      	b.n	8002778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000004 	.word	0x20000004
 8002784:	2000000c 	.word	0x2000000c
 8002788:	20000008 	.word	0x20000008

0800278c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <HAL_IncTick+0x20>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_IncTick+0x24>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4413      	add	r3, r2
 800279c:	4a04      	ldr	r2, [pc, #16]	@ (80027b0 <HAL_IncTick+0x24>)
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	2000000c 	.word	0x2000000c
 80027b0:	200000a4 	.word	0x200000a4

080027b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80027b8:	4b03      	ldr	r3, [pc, #12]	@ (80027c8 <HAL_GetTick+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	200000a4 	.word	0x200000a4

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fe:	4a04      	ldr	r2, [pc, #16]	@ (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	60d3      	str	r3, [r2, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	@ (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	db0b      	blt.n	800285a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4907      	ldr	r1, [pc, #28]	@ (8002868 <__NVIC_EnableIRQ+0x38>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2001      	movs	r0, #1
 8002852:	fa00 f202 	lsl.w	r2, r0, r2
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100

0800286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0a      	blt.n	8002896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	490c      	ldr	r1, [pc, #48]	@ (80028b8 <__NVIC_SetPriority+0x4c>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	0112      	lsls	r2, r2, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	440b      	add	r3, r1
 8002890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002894:	e00a      	b.n	80028ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4908      	ldr	r1, [pc, #32]	@ (80028bc <__NVIC_SetPriority+0x50>)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3b04      	subs	r3, #4
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	761a      	strb	r2, [r3, #24]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	@ 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f1c3 0307 	rsb	r3, r3, #7
 80028da:	2b04      	cmp	r3, #4
 80028dc:	bf28      	it	cs
 80028de:	2304      	movcs	r3, #4
 80028e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d902      	bls.n	80028f0 <NVIC_EncodePriority+0x30>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3b03      	subs	r3, #3
 80028ee:	e000      	b.n	80028f2 <NVIC_EncodePriority+0x32>
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	401a      	ands	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43d9      	mvns	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	4313      	orrs	r3, r2
         );
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	@ 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002938:	d301      	bcc.n	800293e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293a:	2301      	movs	r3, #1
 800293c:	e00f      	b.n	800295e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <SysTick_Config+0x40>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002946:	210f      	movs	r1, #15
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f7ff ff8e 	bl	800286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <SysTick_Config+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002956:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <SysTick_Config+0x40>)
 8002958:	2207      	movs	r2, #7
 800295a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff29 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002994:	f7ff ff3e 	bl	8002814 <__NVIC_GetPriorityGrouping>
 8002998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	f7ff ff8e 	bl	80028c0 <NVIC_EncodePriority>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff5d 	bl	800286c <__NVIC_SetPriority>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff31 	bl	8002830 <__NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ffa2 	bl	8002928 <SysTick_Config>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d106      	bne.n	8002a0c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80029fe:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a08      	ldr	r2, [pc, #32]	@ (8002a24 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002a0a:	e005      	b.n	8002a18 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002a0c:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a12:	f023 0304 	bic.w	r3, r3, #4
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000e010 	.word	0xe000e010

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a36:	e160      	b.n	8002cfa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8152 	beq.w	8002cf4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d005      	beq.n	8002a68 <HAL_GPIO_Init+0x40>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d130      	bne.n	8002aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f003 0201 	and.w	r2, r3, #1
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d017      	beq.n	8002b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d123      	bne.n	8002b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	08da      	lsrs	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3208      	adds	r2, #8
 8002b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	6939      	ldr	r1, [r7, #16]
 8002b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	2203      	movs	r2, #3
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0203 	and.w	r2, r3, #3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80ac 	beq.w	8002cf4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002d18 <HAL_GPIO_Init+0x2f0>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8002d18 <HAL_GPIO_Init+0x2f0>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6193      	str	r3, [r2, #24]
 8002ba8:	4b5b      	ldr	r3, [pc, #364]	@ (8002d18 <HAL_GPIO_Init+0x2f0>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bb4:	4a59      	ldr	r2, [pc, #356]	@ (8002d1c <HAL_GPIO_Init+0x2f4>)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3302      	adds	r3, #2
 8002bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bde:	d025      	beq.n	8002c2c <HAL_GPIO_Init+0x204>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a4f      	ldr	r2, [pc, #316]	@ (8002d20 <HAL_GPIO_Init+0x2f8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d01f      	beq.n	8002c28 <HAL_GPIO_Init+0x200>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a4e      	ldr	r2, [pc, #312]	@ (8002d24 <HAL_GPIO_Init+0x2fc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d019      	beq.n	8002c24 <HAL_GPIO_Init+0x1fc>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8002d28 <HAL_GPIO_Init+0x300>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_GPIO_Init+0x1f8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a4c      	ldr	r2, [pc, #304]	@ (8002d2c <HAL_GPIO_Init+0x304>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00d      	beq.n	8002c1c <HAL_GPIO_Init+0x1f4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a4b      	ldr	r2, [pc, #300]	@ (8002d30 <HAL_GPIO_Init+0x308>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <HAL_GPIO_Init+0x1f0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d34 <HAL_GPIO_Init+0x30c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d101      	bne.n	8002c14 <HAL_GPIO_Init+0x1ec>
 8002c10:	2306      	movs	r3, #6
 8002c12:	e00c      	b.n	8002c2e <HAL_GPIO_Init+0x206>
 8002c14:	2307      	movs	r3, #7
 8002c16:	e00a      	b.n	8002c2e <HAL_GPIO_Init+0x206>
 8002c18:	2305      	movs	r3, #5
 8002c1a:	e008      	b.n	8002c2e <HAL_GPIO_Init+0x206>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	e006      	b.n	8002c2e <HAL_GPIO_Init+0x206>
 8002c20:	2303      	movs	r3, #3
 8002c22:	e004      	b.n	8002c2e <HAL_GPIO_Init+0x206>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e002      	b.n	8002c2e <HAL_GPIO_Init+0x206>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_GPIO_Init+0x206>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	f002 0203 	and.w	r2, r2, #3
 8002c34:	0092      	lsls	r2, r2, #2
 8002c36:	4093      	lsls	r3, r2
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c3e:	4937      	ldr	r1, [pc, #220]	@ (8002d1c <HAL_GPIO_Init+0x2f4>)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	089b      	lsrs	r3, r3, #2
 8002c44:	3302      	adds	r3, #2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d38 <HAL_GPIO_Init+0x310>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c70:	4a31      	ldr	r2, [pc, #196]	@ (8002d38 <HAL_GPIO_Init+0x310>)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c76:	4b30      	ldr	r3, [pc, #192]	@ (8002d38 <HAL_GPIO_Init+0x310>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c9a:	4a27      	ldr	r2, [pc, #156]	@ (8002d38 <HAL_GPIO_Init+0x310>)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ca0:	4b25      	ldr	r3, [pc, #148]	@ (8002d38 <HAL_GPIO_Init+0x310>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d38 <HAL_GPIO_Init+0x310>)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cca:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <HAL_GPIO_Init+0x310>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cee:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <HAL_GPIO_Init+0x310>)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f47f ae97 	bne.w	8002a38 <HAL_GPIO_Init+0x10>
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	48000400 	.word	0x48000400
 8002d24:	48000800 	.word	0x48000800
 8002d28:	48000c00 	.word	0x48000c00
 8002d2c:	48001000 	.word	0x48001000
 8002d30:	48001400 	.word	0x48001400
 8002d34:	48001800 	.word	0x48001800
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e001      	b.n	8002d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d7c:	787b      	ldrb	r3, [r7, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f001 b83a 	b.w	8003e36 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 816f 	beq.w	80030b6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002dd8:	4bb5      	ldr	r3, [pc, #724]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d00c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002de4:	4bb2      	ldr	r3, [pc, #712]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d15c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x10e>
 8002df0:	4baf      	ldr	r3, [pc, #700]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dfc:	d155      	bne.n	8002eaa <HAL_RCC_OscConfig+0x10e>
 8002dfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e02:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e12:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d102      	bne.n	8002e30 <HAL_RCC_OscConfig+0x94>
 8002e2a:	4ba1      	ldr	r3, [pc, #644]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	e015      	b.n	8002e5c <HAL_RCC_OscConfig+0xc0>
 8002e30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e34:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002e44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e48:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002e4c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002e58:	4b95      	ldr	r3, [pc, #596]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e60:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002e64:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002e68:	fa92 f2a2 	rbit	r2, r2
 8002e6c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002e70:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f002 021f 	and.w	r2, r2, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8111 	beq.w	80030b4 <HAL_RCC_OscConfig+0x318>
 8002e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 8108 	bne.w	80030b4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f000 bfc6 	b.w	8003e36 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x12e>
 8002ebc:	4b7c      	ldr	r3, [pc, #496]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a7b      	ldr	r2, [pc, #492]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	e036      	b.n	8002f38 <HAL_RCC_OscConfig+0x19c>
 8002eca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ece:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x158>
 8002eda:	4b75      	ldr	r3, [pc, #468]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a74      	ldr	r2, [pc, #464]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b72      	ldr	r3, [pc, #456]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a71      	ldr	r2, [pc, #452]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002eec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e021      	b.n	8002f38 <HAL_RCC_OscConfig+0x19c>
 8002ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x184>
 8002f06:	4b6a      	ldr	r3, [pc, #424]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a69      	ldr	r2, [pc, #420]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b67      	ldr	r3, [pc, #412]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a66      	ldr	r2, [pc, #408]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0x19c>
 8002f20:	4b63      	ldr	r3, [pc, #396]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a62      	ldr	r2, [pc, #392]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b60      	ldr	r3, [pc, #384]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a5f      	ldr	r2, [pc, #380]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f36:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d059      	beq.n	8002ffc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7ff fc34 	bl	80027b4 <HAL_GetTick>
 8002f4c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f52:	f7ff fc2f 	bl	80027b4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	@ 0x64
 8002f60:	d902      	bls.n	8002f68 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	f000 bf67 	b.w	8003e36 <HAL_RCC_OscConfig+0x109a>
 8002f68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f6c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002f7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <HAL_RCC_OscConfig+0x1fe>
 8002f94:	4b46      	ldr	r3, [pc, #280]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	e015      	b.n	8002fc6 <HAL_RCC_OscConfig+0x22a>
 8002f9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f9e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002fae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fb2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002fb6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fca:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002fce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002fd2:	fa92 f2a2 	rbit	r2, r2
 8002fd6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002fda:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f042 0220 	orr.w	r2, r2, #32
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f002 021f 	and.w	r2, r2, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0ab      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1b6>
 8002ffa:	e05c      	b.n	80030b6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7ff fbda 	bl	80027b4 <HAL_GetTick>
 8003000:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003006:	f7ff fbd5 	bl	80027b4 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	@ 0x64
 8003014:	d902      	bls.n	800301c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	f000 bf0d 	b.w	8003e36 <HAL_RCC_OscConfig+0x109a>
 800301c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003020:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003030:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d102      	bne.n	800304e <HAL_RCC_OscConfig+0x2b2>
 8003048:	4b19      	ldr	r3, [pc, #100]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	e015      	b.n	800307a <HAL_RCC_OscConfig+0x2de>
 800304e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003052:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003066:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800306a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003076:	4b0e      	ldr	r3, [pc, #56]	@ (80030b0 <HAL_RCC_OscConfig+0x314>)
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800307e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003082:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003086:	fa92 f2a2 	rbit	r2, r2
 800308a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800308e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003092:	fab2 f282 	clz	r2, r2
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f042 0220 	orr.w	r2, r2, #32
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f002 021f 	and.w	r2, r2, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f202 	lsl.w	r2, r1, r2
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ab      	bne.n	8003006 <HAL_RCC_OscConfig+0x26a>
 80030ae:	e002      	b.n	80030b6 <HAL_RCC_OscConfig+0x31a>
 80030b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 817f 	beq.w	80033ca <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030cc:	4ba7      	ldr	r3, [pc, #668]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030d8:	4ba4      	ldr	r3, [pc, #656]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d173      	bne.n	80031cc <HAL_RCC_OscConfig+0x430>
 80030e4:	4ba1      	ldr	r3, [pc, #644]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80030ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f0:	d16c      	bne.n	80031cc <HAL_RCC_OscConfig+0x430>
 80030f2:	2302      	movs	r3, #2
 80030f4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003104:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_RCC_OscConfig+0x386>
 800311c:	4b93      	ldr	r3, [pc, #588]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e013      	b.n	800314a <HAL_RCC_OscConfig+0x3ae>
 8003122:	2302      	movs	r3, #2
 8003124:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800312c:	fa93 f3a3 	rbit	r3, r3
 8003130:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003134:	2302      	movs	r3, #2
 8003136:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800313a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003146:	4b89      	ldr	r3, [pc, #548]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	2202      	movs	r2, #2
 800314c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003150:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003154:	fa92 f2a2 	rbit	r2, r2
 8003158:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800315c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003160:	fab2 f282 	clz	r2, r2
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	f042 0220 	orr.w	r2, r2, #32
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f002 021f 	and.w	r2, r2, #31
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCC_OscConfig+0x3f6>
 800317c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003180:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d002      	beq.n	8003192 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f000 be52 	b.w	8003e36 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b76      	ldr	r3, [pc, #472]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800319a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800319e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	21f8      	movs	r1, #248	@ 0xf8
 80031a8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80031b0:	fa91 f1a1 	rbit	r1, r1
 80031b4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80031b8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80031bc:	fab1 f181 	clz	r1, r1
 80031c0:	b2c9      	uxtb	r1, r1
 80031c2:	408b      	lsls	r3, r1
 80031c4:	4969      	ldr	r1, [pc, #420]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	e0fe      	b.n	80033ca <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8088 	beq.w	80032ee <HAL_RCC_OscConfig+0x552>
 80031de:	2301      	movs	r3, #1
 80031e0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80031f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031fe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	461a      	mov	r2, r3
 8003206:	2301      	movs	r3, #1
 8003208:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7ff fad3 	bl	80027b4 <HAL_GetTick>
 800320e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003214:	f7ff face 	bl	80027b4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d902      	bls.n	800322a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	f000 be06 	b.w	8003e36 <HAL_RCC_OscConfig+0x109a>
 800322a:	2302      	movs	r3, #2
 800322c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800323c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d102      	bne.n	800325a <HAL_RCC_OscConfig+0x4be>
 8003254:	4b45      	ldr	r3, [pc, #276]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	e013      	b.n	8003282 <HAL_RCC_OscConfig+0x4e6>
 800325a:	2302      	movs	r3, #2
 800325c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800326c:	2302      	movs	r3, #2
 800326e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003272:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800327e:	4b3b      	ldr	r3, [pc, #236]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	2202      	movs	r2, #2
 8003284:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003288:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800328c:	fa92 f2a2 	rbit	r2, r2
 8003290:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003294:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f042 0220 	orr.w	r2, r2, #32
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0af      	beq.n	8003214 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	4b2d      	ldr	r3, [pc, #180]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	21f8      	movs	r1, #248	@ 0xf8
 80032ca:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80032d2:	fa91 f1a1 	rbit	r1, r1
 80032d6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80032da:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80032de:	fab1 f181 	clz	r1, r1
 80032e2:	b2c9      	uxtb	r1, r1
 80032e4:	408b      	lsls	r3, r1
 80032e6:	4921      	ldr	r1, [pc, #132]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
 80032ec:	e06d      	b.n	80033ca <HAL_RCC_OscConfig+0x62e>
 80032ee:	2301      	movs	r3, #1
 80032f0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003300:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800330e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	461a      	mov	r2, r3
 8003316:	2300      	movs	r3, #0
 8003318:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331a:	f7ff fa4b 	bl	80027b4 <HAL_GetTick>
 800331e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	e00a      	b.n	800333a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003324:	f7ff fa46 	bl	80027b4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d902      	bls.n	800333a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	f000 bd7e 	b.w	8003e36 <HAL_RCC_OscConfig+0x109a>
 800333a:	2302      	movs	r3, #2
 800333c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800334c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <HAL_RCC_OscConfig+0x5d4>
 8003364:	4b01      	ldr	r3, [pc, #4]	@ (800336c <HAL_RCC_OscConfig+0x5d0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	e016      	b.n	8003398 <HAL_RCC_OscConfig+0x5fc>
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	2302      	movs	r3, #2
 8003372:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003382:	2302      	movs	r3, #2
 8003384:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003388:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003394:	4bbf      	ldr	r3, [pc, #764]	@ (8003694 <HAL_RCC_OscConfig+0x8f8>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	2202      	movs	r2, #2
 800339a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800339e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80033a2:	fa92 f2a2 	rbit	r2, r2
 80033a6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80033aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80033ae:	fab2 f282 	clz	r2, r2
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	f042 0220 	orr.w	r2, r2, #32
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f002 021f 	and.w	r2, r2, #31
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f202 	lsl.w	r2, r1, r2
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ac      	bne.n	8003324 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8113 	beq.w	8003606 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d07c      	beq.n	80034ea <HAL_RCC_OscConfig+0x74e>
 80033f0:	2301      	movs	r3, #1
 80033f2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	fa93 f3a3 	rbit	r3, r3
 80033fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003402:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	4ba2      	ldr	r3, [pc, #648]	@ (8003698 <HAL_RCC_OscConfig+0x8fc>)
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	461a      	mov	r2, r3
 8003416:	2301      	movs	r3, #1
 8003418:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341a:	f7ff f9cb 	bl	80027b4 <HAL_GetTick>
 800341e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003422:	e00a      	b.n	800343a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003424:	f7ff f9c6 	bl	80027b4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d902      	bls.n	800343a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	f000 bcfe 	b.w	8003e36 <HAL_RCC_OscConfig+0x109a>
 800343a:	2302      	movs	r3, #2
 800343c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003444:	fa93 f2a3 	rbit	r2, r3
 8003448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800344c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800345a:	2202      	movs	r2, #2
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	fa93 f2a3 	rbit	r2, r3
 800346c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800347a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800347e:	2202      	movs	r2, #2
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003486:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	fa93 f2a3 	rbit	r2, r3
 8003490:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003494:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003498:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	4b7e      	ldr	r3, [pc, #504]	@ (8003694 <HAL_RCC_OscConfig+0x8f8>)
 800349c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800349e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80034a6:	2102      	movs	r1, #2
 80034a8:	6019      	str	r1, [r3, #0]
 80034aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f1a3 	rbit	r1, r3
 80034b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80034c0:	6019      	str	r1, [r3, #0]
  return result;
 80034c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034c6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2101      	movs	r1, #1
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d09d      	beq.n	8003424 <HAL_RCC_OscConfig+0x688>
 80034e8:	e08d      	b.n	8003606 <HAL_RCC_OscConfig+0x86a>
 80034ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	fa93 f2a3 	rbit	r2, r3
 8003504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003508:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800350c:	601a      	str	r2, [r3, #0]
  return result;
 800350e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003512:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003516:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	4b5d      	ldr	r3, [pc, #372]	@ (8003698 <HAL_RCC_OscConfig+0x8fc>)
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	461a      	mov	r2, r3
 8003528:	2300      	movs	r3, #0
 800352a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352c:	f7ff f942 	bl	80027b4 <HAL_GetTick>
 8003530:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7ff f93d 	bl	80027b4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d902      	bls.n	800354c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	f000 bc75 	b.w	8003e36 <HAL_RCC_OscConfig+0x109a>
 800354c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003550:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003554:	2202      	movs	r2, #2
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800355c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800356a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003574:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003578:	2202      	movs	r2, #2
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003580:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800358e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003598:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800359c:	2202      	movs	r2, #2
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	fa93 f2a3 	rbit	r2, r3
 80035ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80035b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	4b36      	ldr	r3, [pc, #216]	@ (8003694 <HAL_RCC_OscConfig+0x8f8>)
 80035ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80035c4:	2102      	movs	r1, #2
 80035c6:	6019      	str	r1, [r3, #0]
 80035c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	fa93 f1a3 	rbit	r1, r3
 80035d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035da:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80035de:	6019      	str	r1, [r3, #0]
  return result;
 80035e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2101      	movs	r1, #1
 80035fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d197      	bne.n	8003536 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003606:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800360a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 81a5 	beq.w	8003966 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361c:	2300      	movs	r3, #0
 800361e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003622:	4b1c      	ldr	r3, [pc, #112]	@ (8003694 <HAL_RCC_OscConfig+0x8f8>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <HAL_RCC_OscConfig+0x8f8>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4a18      	ldr	r2, [pc, #96]	@ (8003694 <HAL_RCC_OscConfig+0x8f8>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003638:	61d3      	str	r3, [r2, #28]
 800363a:	4b16      	ldr	r3, [pc, #88]	@ (8003694 <HAL_RCC_OscConfig+0x8f8>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003642:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003646:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003650:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003654:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	4b0f      	ldr	r3, [pc, #60]	@ (800369c <HAL_RCC_OscConfig+0x900>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d121      	bne.n	80036ac <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003668:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <HAL_RCC_OscConfig+0x900>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0b      	ldr	r2, [pc, #44]	@ (800369c <HAL_RCC_OscConfig+0x900>)
 800366e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003672:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003674:	f7ff f89e 	bl	80027b4 <HAL_GetTick>
 8003678:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	e010      	b.n	80036a0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367e:	f7ff f899 	bl	80027b4 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	@ 0x64
 800368c:	d908      	bls.n	80036a0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e3d1      	b.n	8003e36 <HAL_RCC_OscConfig+0x109a>
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
 8003698:	10908120 	.word	0x10908120
 800369c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	4b8d      	ldr	r3, [pc, #564]	@ (80038d8 <HAL_RCC_OscConfig+0xb3c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0e8      	beq.n	800367e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x92e>
 80036bc:	4b87      	ldr	r3, [pc, #540]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4a86      	ldr	r2, [pc, #536]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6213      	str	r3, [r2, #32]
 80036c8:	e035      	b.n	8003736 <HAL_RCC_OscConfig+0x99a>
 80036ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x958>
 80036da:	4b80      	ldr	r3, [pc, #512]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4a7f      	ldr	r2, [pc, #508]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6213      	str	r3, [r2, #32]
 80036e6:	4b7d      	ldr	r3, [pc, #500]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	4a7c      	ldr	r2, [pc, #496]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	6213      	str	r3, [r2, #32]
 80036f2:	e020      	b.n	8003736 <HAL_RCC_OscConfig+0x99a>
 80036f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b05      	cmp	r3, #5
 8003702:	d10c      	bne.n	800371e <HAL_RCC_OscConfig+0x982>
 8003704:	4b75      	ldr	r3, [pc, #468]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4a74      	ldr	r2, [pc, #464]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 800370a:	f043 0304 	orr.w	r3, r3, #4
 800370e:	6213      	str	r3, [r2, #32]
 8003710:	4b72      	ldr	r3, [pc, #456]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4a71      	ldr	r2, [pc, #452]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6213      	str	r3, [r2, #32]
 800371c:	e00b      	b.n	8003736 <HAL_RCC_OscConfig+0x99a>
 800371e:	4b6f      	ldr	r3, [pc, #444]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	4a6e      	ldr	r2, [pc, #440]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	6213      	str	r3, [r2, #32]
 800372a:	4b6c      	ldr	r3, [pc, #432]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4a6b      	ldr	r2, [pc, #428]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 8003730:	f023 0304 	bic.w	r3, r3, #4
 8003734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800373a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8081 	beq.w	800384a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003748:	f7ff f834 	bl	80027b4 <HAL_GetTick>
 800374c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e00b      	b.n	800376a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7ff f82f 	bl	80027b4 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e365      	b.n	8003e36 <HAL_RCC_OscConfig+0x109a>
 800376a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800376e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003772:	2202      	movs	r2, #2
 8003774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800377a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	fa93 f2a3 	rbit	r2, r3
 8003784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003788:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003792:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003796:	2202      	movs	r2, #2
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800379e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	fa93 f2a3 	rbit	r2, r3
 80037a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80037b0:	601a      	str	r2, [r3, #0]
  return result;
 80037b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037b6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80037ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f043 0302 	orr.w	r3, r3, #2
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d102      	bne.n	80037d6 <HAL_RCC_OscConfig+0xa3a>
 80037d0:	4b42      	ldr	r3, [pc, #264]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	e013      	b.n	80037fe <HAL_RCC_OscConfig+0xa62>
 80037d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037da:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80037de:	2202      	movs	r2, #2
 80037e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	fa93 f2a3 	rbit	r2, r3
 80037f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037f4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003802:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003806:	2102      	movs	r1, #2
 8003808:	6011      	str	r1, [r2, #0]
 800380a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800380e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	fa92 f1a2 	rbit	r1, r2
 8003818:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800381c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003820:	6011      	str	r1, [r2, #0]
  return result;
 8003822:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003826:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	fab2 f282 	clz	r2, r2
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	f002 021f 	and.w	r2, r2, #31
 800383c:	2101      	movs	r1, #1
 800383e:	fa01 f202 	lsl.w	r2, r1, r2
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d084      	beq.n	8003752 <HAL_RCC_OscConfig+0x9b6>
 8003848:	e083      	b.n	8003952 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384a:	f7fe ffb3 	bl	80027b4 <HAL_GetTick>
 800384e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fe ffae 	bl	80027b4 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003864:	4293      	cmp	r3, r2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e2e4      	b.n	8003e36 <HAL_RCC_OscConfig+0x109a>
 800386c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003870:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003874:	2202      	movs	r2, #2
 8003876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800387c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	fa93 f2a3 	rbit	r2, r3
 8003886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800388a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003894:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003898:	2202      	movs	r2, #2
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	fa93 f2a3 	rbit	r2, r3
 80038aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ae:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80038b2:	601a      	str	r2, [r3, #0]
  return result;
 80038b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80038bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d106      	bne.n	80038e0 <HAL_RCC_OscConfig+0xb44>
 80038d2:	4b02      	ldr	r3, [pc, #8]	@ (80038dc <HAL_RCC_OscConfig+0xb40>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	e017      	b.n	8003908 <HAL_RCC_OscConfig+0xb6c>
 80038d8:	40007000 	.word	0x40007000
 80038dc:	40021000 	.word	0x40021000
 80038e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80038e8:	2202      	movs	r2, #2
 80038ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	fa93 f2a3 	rbit	r2, r3
 80038fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038fe:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	4bb3      	ldr	r3, [pc, #716]	@ (8003bd4 <HAL_RCC_OscConfig+0xe38>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800390c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003910:	2102      	movs	r1, #2
 8003912:	6011      	str	r1, [r2, #0]
 8003914:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003918:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	fa92 f1a2 	rbit	r1, r2
 8003922:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003926:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800392a:	6011      	str	r1, [r2, #0]
  return result;
 800392c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003930:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	fab2 f282 	clz	r2, r2
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	f002 021f 	and.w	r2, r2, #31
 8003946:	2101      	movs	r1, #1
 8003948:	fa01 f202 	lsl.w	r2, r1, r2
 800394c:	4013      	ands	r3, r2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d180      	bne.n	8003854 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003952:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395a:	4b9e      	ldr	r3, [pc, #632]	@ (8003bd4 <HAL_RCC_OscConfig+0xe38>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4a9d      	ldr	r2, [pc, #628]	@ (8003bd4 <HAL_RCC_OscConfig+0xe38>)
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003964:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800396a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 825e 	beq.w	8003e34 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003978:	4b96      	ldr	r3, [pc, #600]	@ (8003bd4 <HAL_RCC_OscConfig+0xe38>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	f000 821f 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800398a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b02      	cmp	r3, #2
 8003994:	f040 8170 	bne.w	8003c78 <HAL_RCC_OscConfig+0xedc>
 8003998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800399c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80039a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	fa93 f2a3 	rbit	r2, r3
 80039b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80039bc:	601a      	str	r2, [r3, #0]
  return result;
 80039be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039c2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80039c6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c8:	fab3 f383 	clz	r3, r3
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	461a      	mov	r2, r3
 80039da:	2300      	movs	r3, #0
 80039dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039de:	f7fe fee9 	bl	80027b4 <HAL_GetTick>
 80039e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e6:	e009      	b.n	80039fc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e8:	f7fe fee4 	bl	80027b4 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e21c      	b.n	8003e36 <HAL_RCC_OscConfig+0x109a>
 80039fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a00:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003a04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a0e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	fa93 f2a3 	rbit	r2, r3
 8003a18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a1c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003a20:	601a      	str	r2, [r3, #0]
  return result;
 8003a22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a26:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003a2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2c:	fab3 f383 	clz	r3, r3
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d102      	bne.n	8003a46 <HAL_RCC_OscConfig+0xcaa>
 8003a40:	4b64      	ldr	r3, [pc, #400]	@ (8003bd4 <HAL_RCC_OscConfig+0xe38>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	e027      	b.n	8003a96 <HAL_RCC_OscConfig+0xcfa>
 8003a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a4a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003a4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a58:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	fa93 f2a3 	rbit	r2, r3
 8003a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a66:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a70:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003a74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a7e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	fa93 f2a3 	rbit	r2, r3
 8003a88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a8c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	4b50      	ldr	r3, [pc, #320]	@ (8003bd4 <HAL_RCC_OscConfig+0xe38>)
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a9a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003a9e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003aa2:	6011      	str	r1, [r2, #0]
 8003aa4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003aa8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	fa92 f1a2 	rbit	r1, r2
 8003ab2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ab6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003aba:	6011      	str	r1, [r2, #0]
  return result;
 8003abc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ac0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	fab2 f282 	clz	r2, r2
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	f042 0220 	orr.w	r2, r2, #32
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	f002 021f 	and.w	r2, r2, #31
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d182      	bne.n	80039e8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8003bd4 <HAL_RCC_OscConfig+0xe38>)
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	f023 020f 	bic.w	r2, r3, #15
 8003aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	4937      	ldr	r1, [pc, #220]	@ (8003bd4 <HAL_RCC_OscConfig+0xe38>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003afc:	4b35      	ldr	r3, [pc, #212]	@ (8003bd4 <HAL_RCC_OscConfig+0xe38>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003b04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a19      	ldr	r1, [r3, #32]
 8003b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	492d      	ldr	r1, [pc, #180]	@ (8003bd4 <HAL_RCC_OscConfig+0xe38>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
 8003b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b28:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003b2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b36:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	fa93 f2a3 	rbit	r2, r3
 8003b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b44:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003b48:	601a      	str	r2, [r3, #0]
  return result;
 8003b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b4e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003b52:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b54:	fab3 f383 	clz	r3, r3
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b5e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	461a      	mov	r2, r3
 8003b66:	2301      	movs	r3, #1
 8003b68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fe23 	bl	80027b4 <HAL_GetTick>
 8003b6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b72:	e009      	b.n	8003b88 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b74:	f7fe fe1e 	bl	80027b4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e156      	b.n	8003e36 <HAL_RCC_OscConfig+0x109a>
 8003b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b8c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003b90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b9a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ba8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003bac:	601a      	str	r2, [r3, #0]
  return result;
 8003bae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003bb6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xe3c>
 8003bcc:	4b01      	ldr	r3, [pc, #4]	@ (8003bd4 <HAL_RCC_OscConfig+0xe38>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	e02a      	b.n	8003c28 <HAL_RCC_OscConfig+0xe8c>
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bdc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003be0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	fa93 f2a3 	rbit	r2, r3
 8003bf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bf8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c02:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003c06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c10:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	fa93 f2a3 	rbit	r2, r3
 8003c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c1e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	4b86      	ldr	r3, [pc, #536]	@ (8003e40 <HAL_RCC_OscConfig+0x10a4>)
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c2c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003c30:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c34:	6011      	str	r1, [r2, #0]
 8003c36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c3a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	fa92 f1a2 	rbit	r1, r2
 8003c44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c48:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003c4c:	6011      	str	r1, [r2, #0]
  return result;
 8003c4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c52:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	fab2 f282 	clz	r2, r2
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	f042 0220 	orr.w	r2, r2, #32
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	f002 021f 	and.w	r2, r2, #31
 8003c68:	2101      	movs	r1, #1
 8003c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f43f af7f 	beq.w	8003b74 <HAL_RCC_OscConfig+0xdd8>
 8003c76:	e0dd      	b.n	8003e34 <HAL_RCC_OscConfig+0x1098>
 8003c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c7c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003c80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c8a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	fa93 f2a3 	rbit	r2, r3
 8003c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c98:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003c9c:	601a      	str	r2, [r3, #0]
  return result;
 8003c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ca2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003ca6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca8:	fab3 f383 	clz	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cb2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2300      	movs	r3, #0
 8003cbc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fd79 	bl	80027b4 <HAL_GetTick>
 8003cc2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc6:	e009      	b.n	8003cdc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fe fd74 	bl	80027b4 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e0ac      	b.n	8003e36 <HAL_RCC_OscConfig+0x109a>
 8003cdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ce0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003ce4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	fa93 f2a3 	rbit	r2, r3
 8003cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cfc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d00:	601a      	str	r2, [r3, #0]
  return result;
 8003d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d06:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0c:	fab3 f383 	clz	r3, r3
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <HAL_RCC_OscConfig+0xf8a>
 8003d20:	4b47      	ldr	r3, [pc, #284]	@ (8003e40 <HAL_RCC_OscConfig+0x10a4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	e027      	b.n	8003d76 <HAL_RCC_OscConfig+0xfda>
 8003d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d2a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003d2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d38:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	fa93 f2a3 	rbit	r2, r3
 8003d42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d46:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d50:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003d54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d5e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	fa93 f2a3 	rbit	r2, r3
 8003d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d6c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	4b33      	ldr	r3, [pc, #204]	@ (8003e40 <HAL_RCC_OscConfig+0x10a4>)
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d7a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003d7e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003d82:	6011      	str	r1, [r2, #0]
 8003d84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d88:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	fa92 f1a2 	rbit	r1, r2
 8003d92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d96:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003d9a:	6011      	str	r1, [r2, #0]
  return result;
 8003d9c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003da0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	fab2 f282 	clz	r2, r2
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	f042 0220 	orr.w	r2, r2, #32
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	f002 021f 	and.w	r2, r2, #31
 8003db6:	2101      	movs	r1, #1
 8003db8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d182      	bne.n	8003cc8 <HAL_RCC_OscConfig+0xf2c>
 8003dc2:	e037      	b.n	8003e34 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e02e      	b.n	8003e36 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dd8:	4b19      	ldr	r3, [pc, #100]	@ (8003e40 <HAL_RCC_OscConfig+0x10a4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003de0:	4b17      	ldr	r3, [pc, #92]	@ (8003e40 <HAL_RCC_OscConfig+0x10a4>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003de8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003dec:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003df4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d117      	bne.n	8003e30 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003e00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003e04:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003e18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e1c:	f003 020f 	and.w	r2, r3, #15
 8003e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000

08003e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b09e      	sub	sp, #120	@ 0x78
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e162      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b90      	ldr	r3, [pc, #576]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d910      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 0207 	bic.w	r2, r3, #7
 8003e72:	498b      	ldr	r1, [pc, #556]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b89      	ldr	r3, [pc, #548]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e14a      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e98:	4b82      	ldr	r3, [pc, #520]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	497f      	ldr	r1, [pc, #508]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80dc 	beq.w	8004070 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d13c      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xf6>
 8003ec0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ec4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ec8:	fa93 f3a3 	rbit	r3, r3
 8003ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d102      	bne.n	8003eea <HAL_RCC_ClockConfig+0xa6>
 8003ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	e00f      	b.n	8003f0a <HAL_RCC_ClockConfig+0xc6>
 8003eea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003eee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ef8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003efc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f06:	4b67      	ldr	r3, [pc, #412]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f12:	fa92 f2a2 	rbit	r2, r2
 8003f16:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003f18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f1a:	fab2 f282 	clz	r2, r2
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f042 0220 	orr.w	r2, r2, #32
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	f002 021f 	and.w	r2, r2, #31
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d17b      	bne.n	800402e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0f3      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d13c      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x178>
 8003f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f46:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x128>
 8003f66:	4b4f      	ldr	r3, [pc, #316]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	e00f      	b.n	8003f8c <HAL_RCC_ClockConfig+0x148>
 8003f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f82:	fa93 f3a3 	rbit	r3, r3
 8003f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f88:	4b46      	ldr	r3, [pc, #280]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f90:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f94:	fa92 f2a2 	rbit	r2, r2
 8003f98:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003f9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f9c:	fab2 f282 	clz	r2, r2
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	f042 0220 	orr.w	r2, r2, #32
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	f002 021f 	and.w	r2, r2, #31
 8003fac:	2101      	movs	r1, #1
 8003fae:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d13a      	bne.n	800402e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0b2      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d102      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x1a0>
 8003fde:	4b31      	ldr	r3, [pc, #196]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	e00d      	b.n	8004000 <HAL_RCC_ClockConfig+0x1bc>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fea:	fa93 f3a3 	rbit	r3, r3
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	623b      	str	r3, [r7, #32]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	fa93 f3a3 	rbit	r3, r3
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	4b29      	ldr	r3, [pc, #164]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	2202      	movs	r2, #2
 8004002:	61ba      	str	r2, [r7, #24]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	fa92 f2a2 	rbit	r2, r2
 800400a:	617a      	str	r2, [r7, #20]
  return result;
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	fab2 f282 	clz	r2, r2
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	f042 0220 	orr.w	r2, r2, #32
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	f002 021f 	and.w	r2, r2, #31
 800401e:	2101      	movs	r1, #1
 8004020:	fa01 f202 	lsl.w	r2, r1, r2
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e079      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800402e:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	491a      	ldr	r1, [pc, #104]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 800403c:	4313      	orrs	r3, r2
 800403e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004040:	f7fe fbb8 	bl	80027b4 <HAL_GetTick>
 8004044:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	e00a      	b.n	800405e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004048:	f7fe fbb4 	bl	80027b4 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e061      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 020c 	and.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d1eb      	bne.n	8004048 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004070:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d214      	bcs.n	80040a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b08      	ldr	r3, [pc, #32]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 0207 	bic.w	r2, r3, #7
 8004086:	4906      	ldr	r1, [pc, #24]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b04      	ldr	r3, [pc, #16]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e040      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
 80040a0:	40022000 	.word	0x40022000
 80040a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b4:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <HAL_RCC_ClockConfig+0x2e8>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	491a      	ldr	r1, [pc, #104]	@ (800412c <HAL_RCC_ClockConfig+0x2e8>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040d2:	4b16      	ldr	r3, [pc, #88]	@ (800412c <HAL_RCC_ClockConfig+0x2e8>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4912      	ldr	r1, [pc, #72]	@ (800412c <HAL_RCC_ClockConfig+0x2e8>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040e6:	f000 f829 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80040ea:	4601      	mov	r1, r0
 80040ec:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <HAL_RCC_ClockConfig+0x2e8>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f4:	22f0      	movs	r2, #240	@ 0xf0
 80040f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	fa92 f2a2 	rbit	r2, r2
 80040fe:	60fa      	str	r2, [r7, #12]
  return result;
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	fab2 f282 	clz	r2, r2
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	40d3      	lsrs	r3, r2
 800410a:	4a09      	ldr	r2, [pc, #36]	@ (8004130 <HAL_RCC_ClockConfig+0x2ec>)
 800410c:	5cd3      	ldrb	r3, [r2, r3]
 800410e:	fa21 f303 	lsr.w	r3, r1, r3
 8004112:	4a08      	ldr	r2, [pc, #32]	@ (8004134 <HAL_RCC_ClockConfig+0x2f0>)
 8004114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004116:	4b08      	ldr	r3, [pc, #32]	@ (8004138 <HAL_RCC_ClockConfig+0x2f4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe fb06 	bl	800272c <HAL_InitTick>
  
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3778      	adds	r7, #120	@ 0x78
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	08004ff8 	.word	0x08004ff8
 8004134:	20000004 	.word	0x20000004
 8004138:	20000008 	.word	0x20000008

0800413c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004156:	4b1f      	ldr	r3, [pc, #124]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b04      	cmp	r3, #4
 8004164:	d002      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x30>
 8004166:	2b08      	cmp	r3, #8
 8004168:	d003      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x36>
 800416a:	e029      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800416c:	4b1a      	ldr	r3, [pc, #104]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800416e:	613b      	str	r3, [r7, #16]
      break;
 8004170:	e029      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	0c9b      	lsrs	r3, r3, #18
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	4a18      	ldr	r2, [pc, #96]	@ (80041dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800417c:	5cd3      	ldrb	r3, [r2, r3]
 800417e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004180:	4b14      	ldr	r3, [pc, #80]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	4a15      	ldr	r2, [pc, #84]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800418a:	5cd3      	ldrb	r3, [r2, r3]
 800418c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004198:	4a0f      	ldr	r2, [pc, #60]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e007      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041aa:	4a0b      	ldr	r2, [pc, #44]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	fb02 f303 	mul.w	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	613b      	str	r3, [r7, #16]
      break;
 80041be:	e002      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041c2:	613b      	str	r3, [r7, #16]
      break;
 80041c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041c6:	693b      	ldr	r3, [r7, #16]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	40021000 	.word	0x40021000
 80041d8:	007a1200 	.word	0x007a1200
 80041dc:	08005008 	.word	0x08005008
 80041e0:	08005018 	.word	0x08005018

080041e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b092      	sub	sp, #72	@ 0x48
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80041f4:	2300      	movs	r3, #0
 80041f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80d4 	beq.w	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004208:	4b4e      	ldr	r3, [pc, #312]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10e      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004214:	4b4b      	ldr	r3, [pc, #300]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	4a4a      	ldr	r2, [pc, #296]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800421e:	61d3      	str	r3, [r2, #28]
 8004220:	4b48      	ldr	r3, [pc, #288]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004232:	4b45      	ldr	r3, [pc, #276]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d118      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800423e:	4b42      	ldr	r3, [pc, #264]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a41      	ldr	r2, [pc, #260]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004248:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424a:	f7fe fab3 	bl	80027b4 <HAL_GetTick>
 800424e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004250:	e008      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004252:	f7fe faaf 	bl	80027b4 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b64      	cmp	r3, #100	@ 0x64
 800425e:	d901      	bls.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e1d6      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004264:	4b38      	ldr	r3, [pc, #224]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004270:	4b34      	ldr	r3, [pc, #208]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004278:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800427a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8084 	beq.w	800438a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800428c:	429a      	cmp	r2, r3
 800428e:	d07c      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004290:	4b2c      	ldr	r3, [pc, #176]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800429a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800429e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80042a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	4b26      	ldr	r3, [pc, #152]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	461a      	mov	r2, r3
 80042ba:	2301      	movs	r3, #1
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80042cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	4b1d      	ldr	r3, [pc, #116]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	461a      	mov	r2, r3
 80042de:	2300      	movs	r3, #0
 80042e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042e2:	4a18      	ldr	r2, [pc, #96]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d04b      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f2:	f7fe fa5f 	bl	80027b4 <HAL_GetTick>
 80042f6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	e00a      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fe fa5b 	bl	80027b4 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e180      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004310:	2302      	movs	r3, #2
 8004312:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	627b      	str	r3, [r7, #36]	@ 0x24
 800431c:	2302      	movs	r3, #2
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	61fb      	str	r3, [r7, #28]
  return result;
 8004328:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f043 0302 	orr.w	r3, r3, #2
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d108      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800433e:	4b01      	ldr	r3, [pc, #4]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	e00d      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004344:	40021000 	.word	0x40021000
 8004348:	40007000 	.word	0x40007000
 800434c:	10908100 	.word	0x10908100
 8004350:	2302      	movs	r3, #2
 8004352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	4b9a      	ldr	r3, [pc, #616]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	2202      	movs	r2, #2
 8004362:	613a      	str	r2, [r7, #16]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	fa92 f2a2 	rbit	r2, r2
 800436a:	60fa      	str	r2, [r7, #12]
  return result;
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	fab2 f282 	clz	r2, r2
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	f002 021f 	and.w	r2, r2, #31
 800437e:	2101      	movs	r1, #1
 8004380:	fa01 f202 	lsl.w	r2, r1, r2
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0b7      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800438a:	4b8f      	ldr	r3, [pc, #572]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	498c      	ldr	r1, [pc, #560]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004398:	4313      	orrs	r3, r2
 800439a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800439c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d105      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a4:	4b88      	ldr	r3, [pc, #544]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	4a87      	ldr	r2, [pc, #540]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043bc:	4b82      	ldr	r3, [pc, #520]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	f023 0203 	bic.w	r2, r3, #3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	497f      	ldr	r1, [pc, #508]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043da:	4b7b      	ldr	r3, [pc, #492]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	4978      	ldr	r1, [pc, #480]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f8:	4b73      	ldr	r3, [pc, #460]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	4970      	ldr	r1, [pc, #448]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004406:	4313      	orrs	r3, r2
 8004408:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004416:	4b6c      	ldr	r3, [pc, #432]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	f023 0210 	bic.w	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	4969      	ldr	r1, [pc, #420]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004434:	4b64      	ldr	r3, [pc, #400]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004440:	4961      	ldr	r1, [pc, #388]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004442:	4313      	orrs	r3, r2
 8004444:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004452:	4b5d      	ldr	r3, [pc, #372]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	f023 0220 	bic.w	r2, r3, #32
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	495a      	ldr	r1, [pc, #360]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004460:	4313      	orrs	r3, r2
 8004462:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004470:	4b55      	ldr	r3, [pc, #340]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004474:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	4952      	ldr	r1, [pc, #328]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800447e:	4313      	orrs	r3, r2
 8004480:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800448e:	4b4e      	ldr	r3, [pc, #312]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	494b      	ldr	r1, [pc, #300]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044ac:	4b46      	ldr	r3, [pc, #280]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	4943      	ldr	r1, [pc, #268]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044ca:	4b3f      	ldr	r3, [pc, #252]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d6:	493c      	ldr	r1, [pc, #240]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044e8:	4b37      	ldr	r3, [pc, #220]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ec:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	4934      	ldr	r1, [pc, #208]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004506:	4b30      	ldr	r3, [pc, #192]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	492d      	ldr	r1, [pc, #180]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004524:	4b28      	ldr	r3, [pc, #160]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004530:	4925      	ldr	r1, [pc, #148]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004532:	4313      	orrs	r3, r2
 8004534:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004542:	4b21      	ldr	r3, [pc, #132]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	491e      	ldr	r1, [pc, #120]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004550:	4313      	orrs	r3, r2
 8004552:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004560:	4b19      	ldr	r3, [pc, #100]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	4916      	ldr	r1, [pc, #88]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800457e:	4b12      	ldr	r3, [pc, #72]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458a:	490f      	ldr	r1, [pc, #60]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800458c:	4313      	orrs	r3, r2
 800458e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800459c:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a8:	4907      	ldr	r1, [pc, #28]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80045ba:	4b03      	ldr	r3, [pc, #12]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045be:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	e002      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000
 80045cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ce:	4913      	ldr	r1, [pc, #76]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80045e0:	4b0e      	ldr	r3, [pc, #56]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ec:	490b      	ldr	r1, [pc, #44]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80045fe:	4b07      	ldr	r3, [pc, #28]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460a:	4904      	ldr	r1, [pc, #16]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800460c:	4313      	orrs	r3, r2
 800460e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3748      	adds	r7, #72	@ 0x48
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000

08004620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e049      	b.n	80046c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd ffa2 	bl	8002590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f000 faa4 	bl	8004bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d001      	beq.n	80046e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e04f      	b.n	8004788 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a23      	ldr	r2, [pc, #140]	@ (8004794 <HAL_TIM_Base_Start_IT+0xc4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01d      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004712:	d018      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1f      	ldr	r2, [pc, #124]	@ (8004798 <HAL_TIM_Base_Start_IT+0xc8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1e      	ldr	r2, [pc, #120]	@ (800479c <HAL_TIM_Base_Start_IT+0xcc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1c      	ldr	r2, [pc, #112]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1b      	ldr	r2, [pc, #108]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a19      	ldr	r2, [pc, #100]	@ (80047a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d115      	bne.n	8004772 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <HAL_TIM_Base_Start_IT+0xdc>)
 800474e:	4013      	ands	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b06      	cmp	r3, #6
 8004756:	d015      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0xb4>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800475e:	d011      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004770:	e008      	b.n	8004784 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e000      	b.n	8004786 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004784:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40013400 	.word	0x40013400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40015000 	.word	0x40015000
 80047ac:	00010007 	.word	0x00010007

080047b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d020      	beq.n	8004814 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01b      	beq.n	8004814 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0202 	mvn.w	r2, #2
 80047e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9b7 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 8004800:	e005      	b.n	800480e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f9a9 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f9ba 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d020      	beq.n	8004860 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01b      	beq.n	8004860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0204 	mvn.w	r2, #4
 8004830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f991 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 800484c:	e005      	b.n	800485a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f983 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f994 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d020      	beq.n	80048ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01b      	beq.n	80048ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0208 	mvn.w	r2, #8
 800487c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2204      	movs	r2, #4
 8004882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f96b 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 8004898:	e005      	b.n	80048a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f95d 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f96e 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d020      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01b      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0210 	mvn.w	r2, #16
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2208      	movs	r2, #8
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f945 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f937 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f948 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0201 	mvn.w	r2, #1
 8004914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f915 	bl	8004b46 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fb10 	bl	8004f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fb08 	bl	8004f74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00c      	beq.n	8004988 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f907 	bl	8004b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00c      	beq.n	80049ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0220 	mvn.w	r2, #32
 80049a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fad0 	bl	8004f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_ConfigClockSource+0x1c>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e0b6      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x18a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0c:	d03e      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0xd8>
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a12:	f200 8087 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1a:	f000 8086 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x176>
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a22:	d87f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a24:	2b70      	cmp	r3, #112	@ 0x70
 8004a26:	d01a      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0xaa>
 8004a28:	2b70      	cmp	r3, #112	@ 0x70
 8004a2a:	d87b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a2c:	2b60      	cmp	r3, #96	@ 0x60
 8004a2e:	d050      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x11e>
 8004a30:	2b60      	cmp	r3, #96	@ 0x60
 8004a32:	d877      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a34:	2b50      	cmp	r3, #80	@ 0x50
 8004a36:	d03c      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xfe>
 8004a38:	2b50      	cmp	r3, #80	@ 0x50
 8004a3a:	d873      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a3c:	2b40      	cmp	r3, #64	@ 0x40
 8004a3e:	d058      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x13e>
 8004a40:	2b40      	cmp	r3, #64	@ 0x40
 8004a42:	d86f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a44:	2b30      	cmp	r3, #48	@ 0x30
 8004a46:	d064      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a48:	2b30      	cmp	r3, #48	@ 0x30
 8004a4a:	d86b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d060      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d867      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05c      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d05a      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a5c:	e062      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a6e:	f000 f9c1 	bl	8004df4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	609a      	str	r2, [r3, #8]
      break;
 8004a8a:	e04f      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a9c:	f000 f9aa 	bl	8004df4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aae:	609a      	str	r2, [r3, #8]
      break;
 8004ab0:	e03c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 f91e 	bl	8004d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2150      	movs	r1, #80	@ 0x50
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f977 	bl	8004dbe <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e02c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f000 f93d 	bl	8004d5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2160      	movs	r1, #96	@ 0x60
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f967 	bl	8004dbe <TIM_ITRx_SetConfig>
      break;
 8004af0:	e01c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afe:	461a      	mov	r2, r3
 8004b00:	f000 f8fe 	bl	8004d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2140      	movs	r1, #64	@ 0x40
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f957 	bl	8004dbe <TIM_ITRx_SetConfig>
      break;
 8004b10:	e00c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f000 f94e 	bl	8004dbe <TIM_ITRx_SetConfig>
      break;
 8004b22:	e003      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	e000      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a48      	ldr	r2, [pc, #288]	@ (8004ce0 <TIM_Base_SetConfig+0x134>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d013      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bca:	d00f      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a45      	ldr	r2, [pc, #276]	@ (8004ce4 <TIM_Base_SetConfig+0x138>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00b      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a44      	ldr	r2, [pc, #272]	@ (8004ce8 <TIM_Base_SetConfig+0x13c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a43      	ldr	r2, [pc, #268]	@ (8004cec <TIM_Base_SetConfig+0x140>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a42      	ldr	r2, [pc, #264]	@ (8004cf0 <TIM_Base_SetConfig+0x144>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d108      	bne.n	8004bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a37      	ldr	r2, [pc, #220]	@ (8004ce0 <TIM_Base_SetConfig+0x134>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01f      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0c:	d01b      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a34      	ldr	r2, [pc, #208]	@ (8004ce4 <TIM_Base_SetConfig+0x138>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d017      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a33      	ldr	r2, [pc, #204]	@ (8004ce8 <TIM_Base_SetConfig+0x13c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a32      	ldr	r2, [pc, #200]	@ (8004cec <TIM_Base_SetConfig+0x140>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00f      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a32      	ldr	r2, [pc, #200]	@ (8004cf4 <TIM_Base_SetConfig+0x148>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a31      	ldr	r2, [pc, #196]	@ (8004cf8 <TIM_Base_SetConfig+0x14c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a30      	ldr	r2, [pc, #192]	@ (8004cfc <TIM_Base_SetConfig+0x150>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2b      	ldr	r2, [pc, #172]	@ (8004cf0 <TIM_Base_SetConfig+0x144>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d108      	bne.n	8004c58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a18      	ldr	r2, [pc, #96]	@ (8004ce0 <TIM_Base_SetConfig+0x134>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <TIM_Base_SetConfig+0x100>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a19      	ldr	r2, [pc, #100]	@ (8004cec <TIM_Base_SetConfig+0x140>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00f      	beq.n	8004cac <TIM_Base_SetConfig+0x100>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a19      	ldr	r2, [pc, #100]	@ (8004cf4 <TIM_Base_SetConfig+0x148>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00b      	beq.n	8004cac <TIM_Base_SetConfig+0x100>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a18      	ldr	r2, [pc, #96]	@ (8004cf8 <TIM_Base_SetConfig+0x14c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <TIM_Base_SetConfig+0x100>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a17      	ldr	r2, [pc, #92]	@ (8004cfc <TIM_Base_SetConfig+0x150>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_Base_SetConfig+0x100>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a12      	ldr	r2, [pc, #72]	@ (8004cf0 <TIM_Base_SetConfig+0x144>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d103      	bne.n	8004cb4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d105      	bne.n	8004cd2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f023 0201 	bic.w	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	611a      	str	r2, [r3, #16]
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40012c00 	.word	0x40012c00
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40013400 	.word	0x40013400
 8004cf0:	40015000 	.word	0x40015000
 8004cf4:	40014000 	.word	0x40014000
 8004cf8:	40014400 	.word	0x40014400
 8004cfc:	40014800 	.word	0x40014800

08004d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f023 0201 	bic.w	r2, r3, #1
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 030a 	bic.w	r3, r3, #10
 8004d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b087      	sub	sp, #28
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f023 0210 	bic.w	r2, r3, #16
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	031b      	lsls	r3, r3, #12
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	621a      	str	r2, [r3, #32]
}
 8004db2:	bf00      	nop
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f043 0307 	orr.w	r3, r3, #7
 8004de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	609a      	str	r2, [r3, #8]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	021a      	lsls	r2, r3, #8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	609a      	str	r2, [r3, #8]
}
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e06d      	b.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a30      	ldr	r2, [pc, #192]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2d      	ldr	r2, [pc, #180]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d108      	bne.n	8004e9c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1e      	ldr	r2, [pc, #120]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01d      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec8:	d018      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1c      	ldr	r2, [pc, #112]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a15      	ldr	r2, [pc, #84]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a16      	ldr	r2, [pc, #88]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a11      	ldr	r2, [pc, #68]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10c      	bne.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40013400 	.word	0x40013400
 8004f3c:	40015000 	.word	0x40015000
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40014000 	.word	0x40014000

08004f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <memset>:
 8004f88:	4402      	add	r2, r0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d100      	bne.n	8004f92 <memset+0xa>
 8004f90:	4770      	bx	lr
 8004f92:	f803 1b01 	strb.w	r1, [r3], #1
 8004f96:	e7f9      	b.n	8004f8c <memset+0x4>

08004f98 <__libc_init_array>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8004fd0 <__libc_init_array+0x38>)
 8004f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8004fd4 <__libc_init_array+0x3c>)
 8004f9e:	1b64      	subs	r4, r4, r5
 8004fa0:	10a4      	asrs	r4, r4, #2
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	42a6      	cmp	r6, r4
 8004fa6:	d109      	bne.n	8004fbc <__libc_init_array+0x24>
 8004fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8004fd8 <__libc_init_array+0x40>)
 8004faa:	4c0c      	ldr	r4, [pc, #48]	@ (8004fdc <__libc_init_array+0x44>)
 8004fac:	f000 f818 	bl	8004fe0 <_init>
 8004fb0:	1b64      	subs	r4, r4, r5
 8004fb2:	10a4      	asrs	r4, r4, #2
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	42a6      	cmp	r6, r4
 8004fb8:	d105      	bne.n	8004fc6 <__libc_init_array+0x2e>
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc0:	4798      	blx	r3
 8004fc2:	3601      	adds	r6, #1
 8004fc4:	e7ee      	b.n	8004fa4 <__libc_init_array+0xc>
 8004fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fca:	4798      	blx	r3
 8004fcc:	3601      	adds	r6, #1
 8004fce:	e7f2      	b.n	8004fb6 <__libc_init_array+0x1e>
 8004fd0:	08005028 	.word	0x08005028
 8004fd4:	08005028 	.word	0x08005028
 8004fd8:	08005028 	.word	0x08005028
 8004fdc:	0800502c 	.word	0x0800502c

08004fe0 <_init>:
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	bf00      	nop
 8004fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe6:	bc08      	pop	{r3}
 8004fe8:	469e      	mov	lr, r3
 8004fea:	4770      	bx	lr

08004fec <_fini>:
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fee:	bf00      	nop
 8004ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff2:	bc08      	pop	{r3}
 8004ff4:	469e      	mov	lr, r3
 8004ff6:	4770      	bx	lr
