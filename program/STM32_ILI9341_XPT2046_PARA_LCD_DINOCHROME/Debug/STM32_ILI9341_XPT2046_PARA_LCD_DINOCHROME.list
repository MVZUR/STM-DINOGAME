
STM32_ILI9341_XPT2046_PARA_LCD_DINOCHROME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad4  08007d20  08007d20  00008d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087f4  080087f4  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  080087f4  080087f4  000097f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087fc  080087fc  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087fc  080087fc  000097fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008800  08008800  00009800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008804  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a068  2**0
                  CONTENTS
 10 .bss          00000254  20000068  20000068  0000a068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  0000a068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d611  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002414  00000000  00000000  000176a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00019ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5e  00000000  00000000  0001a830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022045  00000000  00000000  0001b28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013092  00000000  00000000  0003d2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf5ad  00000000  00000000  00050365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f912  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c04  00000000  00000000  0011f958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0012355c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d08 	.word	0x08007d08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007d08 	.word	0x08007d08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LCD_write>:
u16 DeviceCode;	 



void LCD_write(u16 VAL)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	80fb      	strh	r3, [r7, #6]
	LCD_CS_CLR;  
 800028a:	4b0a      	ldr	r3, [pc, #40]	@ (80002b4 <LCD_write+0x34>)
 800028c:	2202      	movs	r2, #2
 800028e:	629a      	str	r2, [r3, #40]	@ 0x28
	DATAOUT(VAL);
 8000290:	4a09      	ldr	r2, [pc, #36]	@ (80002b8 <LCD_write+0x38>)
 8000292:	88fb      	ldrh	r3, [r7, #6]
 8000294:	6153      	str	r3, [r2, #20]
	LCD_WR_CLR;
 8000296:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <LCD_write+0x34>)
 8000298:	2208      	movs	r2, #8
 800029a:	629a      	str	r2, [r3, #40]	@ 0x28
	LCD_WR_SET;
 800029c:	4b05      	ldr	r3, [pc, #20]	@ (80002b4 <LCD_write+0x34>)
 800029e:	2208      	movs	r2, #8
 80002a0:	619a      	str	r2, [r3, #24]
	LCD_CS_SET;
 80002a2:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <LCD_write+0x34>)
 80002a4:	2202      	movs	r2, #2
 80002a6:	619a      	str	r2, [r3, #24]
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	48000800 	.word	0x48000800
 80002b8:	48000400 	.word	0x48000400

080002bc <LCD_WR_REG>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u16 data)
{ 
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	80fb      	strh	r3, [r7, #6]
   LCD_RS_CLR;     
 80002c6:	4b05      	ldr	r3, [pc, #20]	@ (80002dc <LCD_WR_REG+0x20>)
 80002c8:	2204      	movs	r2, #4
 80002ca:	629a      	str	r2, [r3, #40]	@ 0x28
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 80002cc:	88fb      	ldrh	r3, [r7, #6]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f7ff ffd6 	bl	8000280 <LCD_write>
	 #endif
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	48000800 	.word	0x48000800

080002e0 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{	
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	460a      	mov	r2, r1
 80002ea:	80fb      	strh	r3, [r7, #6]
 80002ec:	4613      	mov	r3, r2
 80002ee:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 80002f0:	88fb      	ldrh	r3, [r7, #6]
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ffe2 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 80002f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <LCD_WriteReg+0x44>)
 80002fa:	2204      	movs	r2, #4
 80002fc:	619a      	str	r2, [r3, #24]
 80002fe:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <LCD_WriteReg+0x44>)
 8000300:	2202      	movs	r2, #2
 8000302:	629a      	str	r2, [r3, #40]	@ 0x28
 8000304:	4a08      	ldr	r2, [pc, #32]	@ (8000328 <LCD_WriteReg+0x48>)
 8000306:	88bb      	ldrh	r3, [r7, #4]
 8000308:	6153      	str	r3, [r2, #20]
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <LCD_WriteReg+0x44>)
 800030c:	2208      	movs	r2, #8
 800030e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000310:	4b04      	ldr	r3, [pc, #16]	@ (8000324 <LCD_WriteReg+0x44>)
 8000312:	2208      	movs	r2, #8
 8000314:	619a      	str	r2, [r3, #24]
 8000316:	4b03      	ldr	r3, [pc, #12]	@ (8000324 <LCD_WriteReg+0x44>)
 8000318:	2202      	movs	r2, #2
 800031a:	619a      	str	r2, [r3, #24]
}	   
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	48000800 	.word	0x48000800
 8000328:	48000400 	.word	0x48000400

0800032c <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000330:	4b03      	ldr	r3, [pc, #12]	@ (8000340 <LCD_WriteRAM_Prepare+0x14>)
 8000332:	891b      	ldrh	r3, [r3, #8]
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ffc1 	bl	80002bc <LCD_WR_REG>
}	 
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000084 	.word	0x20000084

08000344 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	80fb      	strh	r3, [r7, #6]
   LCD_RS_SET; 
 800034e:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <Lcd_WriteData_16Bit+0x20>)
 8000350:	2204      	movs	r2, #4
 8000352:	619a      	str	r2, [r3, #24]
		LCD_WR_SET;
		LCD_CS_SET;
 //  LCD_write(Data&0xFF00);
//	 LCD_write(Data<<8);
	 #else
	 LCD_write(Data);
 8000354:	88fb      	ldrh	r3, [r7, #6]
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff92 	bl	8000280 <LCD_write>
	 #endif
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	48000800 	.word	0x48000800

08000368 <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	460a      	mov	r2, r1
 8000372:	80fb      	strh	r3, [r7, #6]
 8000374:	4613      	mov	r3, r2
 8000376:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 8000378:	88ba      	ldrh	r2, [r7, #4]
 800037a:	88fb      	ldrh	r3, [r7, #6]
 800037c:	4611      	mov	r1, r2
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fe56 	bl	8001030 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 8000384:	4b04      	ldr	r3, [pc, #16]	@ (8000398 <LCD_DrawPoint+0x30>)
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ffdb 	bl	8000344 <Lcd_WriteData_16Bit>
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000094 	.word	0x20000094

0800039c <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
  unsigned int i;//,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 80003a6:	4b13      	ldr	r3, [pc, #76]	@ (80003f4 <LCD_Clear+0x58>)
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	b29a      	uxth	r2, r3
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <LCD_Clear+0x58>)
 80003b0:	885b      	ldrh	r3, [r3, #2]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 fd77 	bl	8000eac <LCD_SetWindows>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	e006      	b.n	80003d2 <LCD_Clear+0x36>
	{
 //   for(m=0;m<lcddev.width;m++)
  //  {	
			Lcd_WriteData_16Bit(Color);
 80003c4:	88fb      	ldrh	r3, [r7, #6]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ffbc 	bl	8000344 <Lcd_WriteData_16Bit>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	3301      	adds	r3, #1
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <LCD_Clear+0x58>)
 80003d4:	885b      	ldrh	r3, [r3, #2]
 80003d6:	461a      	mov	r2, r3
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <LCD_Clear+0x58>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	fb02 f303 	mul.w	r3, r2, r3
 80003e0:	461a      	mov	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d3ed      	bcc.n	80003c4 <LCD_Clear+0x28>
	//	}
	}
} 
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000084 	.word	0x20000084

080003f8 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <LCD_RESET+0x20>)
 80003fe:	2201      	movs	r2, #1
 8000400:	629a      	str	r2, [r3, #40]	@ 0x28
	delay_ms(100);	
 8000402:	2064      	movs	r0, #100	@ 0x64
 8000404:	f001 f908 	bl	8001618 <delay_ms>
	LCD_RST_SET;
 8000408:	4b03      	ldr	r3, [pc, #12]	@ (8000418 <LCD_RESET+0x20>)
 800040a:	2201      	movs	r2, #1
 800040c:	619a      	str	r2, [r3, #24]
	delay_ms(50);
 800040e:	2032      	movs	r0, #50	@ 0x32
 8000410:	f001 f902 	bl	8001618 <delay_ms>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	48000800 	.word	0x48000800

0800041c <ILI9341_paradriver_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void ILI9341_paradriver_Init(void)
{  
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	//LCD_GPIOInit();	// already done with CUBE MX
 	LCD_RESET(); //LCD ��λ
 8000420:	f7ff ffea 	bl	80003f8 <LCD_RESET>
//*************2.4inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 8000424:	20cf      	movs	r0, #207	@ 0xcf
 8000426:	f7ff ff49 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800042a:	4b9b      	ldr	r3, [pc, #620]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800042c:	2204      	movs	r2, #4
 800042e:	619a      	str	r2, [r3, #24]
 8000430:	4b99      	ldr	r3, [pc, #612]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000432:	2202      	movs	r2, #2
 8000434:	629a      	str	r2, [r3, #40]	@ 0x28
 8000436:	4b99      	ldr	r3, [pc, #612]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 8000438:	2200      	movs	r2, #0
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	4b96      	ldr	r3, [pc, #600]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800043e:	2208      	movs	r2, #8
 8000440:	629a      	str	r2, [r3, #40]	@ 0x28
 8000442:	4b95      	ldr	r3, [pc, #596]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000444:	2208      	movs	r2, #8
 8000446:	619a      	str	r2, [r3, #24]
 8000448:	4b93      	ldr	r3, [pc, #588]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800044a:	2202      	movs	r2, #2
 800044c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xD9); //0xC1 
 800044e:	4b92      	ldr	r3, [pc, #584]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000450:	2204      	movs	r2, #4
 8000452:	619a      	str	r2, [r3, #24]
 8000454:	4b90      	ldr	r3, [pc, #576]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000456:	2202      	movs	r2, #2
 8000458:	629a      	str	r2, [r3, #40]	@ 0x28
 800045a:	4b90      	ldr	r3, [pc, #576]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 800045c:	22d9      	movs	r2, #217	@ 0xd9
 800045e:	615a      	str	r2, [r3, #20]
 8000460:	4b8d      	ldr	r3, [pc, #564]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000462:	2208      	movs	r2, #8
 8000464:	629a      	str	r2, [r3, #40]	@ 0x28
 8000466:	4b8c      	ldr	r3, [pc, #560]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000468:	2208      	movs	r2, #8
 800046a:	619a      	str	r2, [r3, #24]
 800046c:	4b8a      	ldr	r3, [pc, #552]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800046e:	2202      	movs	r2, #2
 8000470:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X30); 
 8000472:	4b89      	ldr	r3, [pc, #548]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000474:	2204      	movs	r2, #4
 8000476:	619a      	str	r2, [r3, #24]
 8000478:	4b87      	ldr	r3, [pc, #540]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800047a:	2202      	movs	r2, #2
 800047c:	629a      	str	r2, [r3, #40]	@ 0x28
 800047e:	4b87      	ldr	r3, [pc, #540]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 8000480:	2230      	movs	r2, #48	@ 0x30
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	4b84      	ldr	r3, [pc, #528]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000486:	2208      	movs	r2, #8
 8000488:	629a      	str	r2, [r3, #40]	@ 0x28
 800048a:	4b83      	ldr	r3, [pc, #524]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800048c:	2208      	movs	r2, #8
 800048e:	619a      	str	r2, [r3, #24]
 8000490:	4b81      	ldr	r3, [pc, #516]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000492:	2202      	movs	r2, #2
 8000494:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xED);  
 8000496:	20ed      	movs	r0, #237	@ 0xed
 8000498:	f7ff ff10 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 800049c:	4b7e      	ldr	r3, [pc, #504]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800049e:	2204      	movs	r2, #4
 80004a0:	619a      	str	r2, [r3, #24]
 80004a2:	4b7d      	ldr	r3, [pc, #500]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004a4:	2202      	movs	r2, #2
 80004a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80004a8:	4b7c      	ldr	r3, [pc, #496]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 80004aa:	2264      	movs	r2, #100	@ 0x64
 80004ac:	615a      	str	r2, [r3, #20]
 80004ae:	4b7a      	ldr	r3, [pc, #488]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004b0:	2208      	movs	r2, #8
 80004b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80004b4:	4b78      	ldr	r3, [pc, #480]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004b6:	2208      	movs	r2, #8
 80004b8:	619a      	str	r2, [r3, #24]
 80004ba:	4b77      	ldr	r3, [pc, #476]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004bc:	2202      	movs	r2, #2
 80004be:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x03); 
 80004c0:	4b75      	ldr	r3, [pc, #468]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004c2:	2204      	movs	r2, #4
 80004c4:	619a      	str	r2, [r3, #24]
 80004c6:	4b74      	ldr	r3, [pc, #464]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004c8:	2202      	movs	r2, #2
 80004ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80004cc:	4b73      	ldr	r3, [pc, #460]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 80004ce:	2203      	movs	r2, #3
 80004d0:	615a      	str	r2, [r3, #20]
 80004d2:	4b71      	ldr	r3, [pc, #452]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004d4:	2208      	movs	r2, #8
 80004d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80004d8:	4b6f      	ldr	r3, [pc, #444]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004da:	2208      	movs	r2, #8
 80004dc:	619a      	str	r2, [r3, #24]
 80004de:	4b6e      	ldr	r3, [pc, #440]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004e0:	2202      	movs	r2, #2
 80004e2:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X12); 
 80004e4:	4b6c      	ldr	r3, [pc, #432]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	619a      	str	r2, [r3, #24]
 80004ea:	4b6b      	ldr	r3, [pc, #428]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004ec:	2202      	movs	r2, #2
 80004ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80004f0:	4b6a      	ldr	r3, [pc, #424]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 80004f2:	2212      	movs	r2, #18
 80004f4:	615a      	str	r2, [r3, #20]
 80004f6:	4b68      	ldr	r3, [pc, #416]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004f8:	2208      	movs	r2, #8
 80004fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80004fc:	4b66      	ldr	r3, [pc, #408]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80004fe:	2208      	movs	r2, #8
 8000500:	619a      	str	r2, [r3, #24]
 8000502:	4b65      	ldr	r3, [pc, #404]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000504:	2202      	movs	r2, #2
 8000506:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X81); 
 8000508:	4b63      	ldr	r3, [pc, #396]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800050a:	2204      	movs	r2, #4
 800050c:	619a      	str	r2, [r3, #24]
 800050e:	4b62      	ldr	r3, [pc, #392]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000510:	2202      	movs	r2, #2
 8000512:	629a      	str	r2, [r3, #40]	@ 0x28
 8000514:	4b61      	ldr	r3, [pc, #388]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 8000516:	2281      	movs	r2, #129	@ 0x81
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	4b5f      	ldr	r3, [pc, #380]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800051c:	2208      	movs	r2, #8
 800051e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000520:	4b5d      	ldr	r3, [pc, #372]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000522:	2208      	movs	r2, #8
 8000524:	619a      	str	r2, [r3, #24]
 8000526:	4b5c      	ldr	r3, [pc, #368]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000528:	2202      	movs	r2, #2
 800052a:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xE8);  
 800052c:	20e8      	movs	r0, #232	@ 0xe8
 800052e:	f7ff fec5 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8000532:	4b59      	ldr	r3, [pc, #356]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000534:	2204      	movs	r2, #4
 8000536:	619a      	str	r2, [r3, #24]
 8000538:	4b57      	ldr	r3, [pc, #348]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800053a:	2202      	movs	r2, #2
 800053c:	629a      	str	r2, [r3, #40]	@ 0x28
 800053e:	4b57      	ldr	r3, [pc, #348]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 8000540:	2285      	movs	r2, #133	@ 0x85
 8000542:	615a      	str	r2, [r3, #20]
 8000544:	4b54      	ldr	r3, [pc, #336]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000546:	2208      	movs	r2, #8
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
 800054a:	4b53      	ldr	r3, [pc, #332]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800054c:	2208      	movs	r2, #8
 800054e:	619a      	str	r2, [r3, #24]
 8000550:	4b51      	ldr	r3, [pc, #324]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000552:	2202      	movs	r2, #2
 8000554:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x10); 
 8000556:	4b50      	ldr	r3, [pc, #320]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000558:	2204      	movs	r2, #4
 800055a:	619a      	str	r2, [r3, #24]
 800055c:	4b4e      	ldr	r3, [pc, #312]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800055e:	2202      	movs	r2, #2
 8000560:	629a      	str	r2, [r3, #40]	@ 0x28
 8000562:	4b4e      	ldr	r3, [pc, #312]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 8000564:	2210      	movs	r2, #16
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	4b4b      	ldr	r3, [pc, #300]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800056a:	2208      	movs	r2, #8
 800056c:	629a      	str	r2, [r3, #40]	@ 0x28
 800056e:	4b4a      	ldr	r3, [pc, #296]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000570:	2208      	movs	r2, #8
 8000572:	619a      	str	r2, [r3, #24]
 8000574:	4b48      	ldr	r3, [pc, #288]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000576:	2202      	movs	r2, #2
 8000578:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x7A); 
 800057a:	4b47      	ldr	r3, [pc, #284]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800057c:	2204      	movs	r2, #4
 800057e:	619a      	str	r2, [r3, #24]
 8000580:	4b45      	ldr	r3, [pc, #276]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000582:	2202      	movs	r2, #2
 8000584:	629a      	str	r2, [r3, #40]	@ 0x28
 8000586:	4b45      	ldr	r3, [pc, #276]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 8000588:	227a      	movs	r2, #122	@ 0x7a
 800058a:	615a      	str	r2, [r3, #20]
 800058c:	4b42      	ldr	r3, [pc, #264]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800058e:	2208      	movs	r2, #8
 8000590:	629a      	str	r2, [r3, #40]	@ 0x28
 8000592:	4b41      	ldr	r3, [pc, #260]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000594:	2208      	movs	r2, #8
 8000596:	619a      	str	r2, [r3, #24]
 8000598:	4b3f      	ldr	r3, [pc, #252]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800059a:	2202      	movs	r2, #2
 800059c:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xCB);  
 800059e:	20cb      	movs	r0, #203	@ 0xcb
 80005a0:	f7ff fe8c 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 80005a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	619a      	str	r2, [r3, #24]
 80005aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005ac:	2202      	movs	r2, #2
 80005ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80005b0:	4b3a      	ldr	r3, [pc, #232]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 80005b2:	2239      	movs	r2, #57	@ 0x39
 80005b4:	615a      	str	r2, [r3, #20]
 80005b6:	4b38      	ldr	r3, [pc, #224]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005b8:	2208      	movs	r2, #8
 80005ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80005bc:	4b36      	ldr	r3, [pc, #216]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005be:	2208      	movs	r2, #8
 80005c0:	619a      	str	r2, [r3, #24]
 80005c2:	4b35      	ldr	r3, [pc, #212]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005c4:	2202      	movs	r2, #2
 80005c6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2C); 
 80005c8:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005ca:	2204      	movs	r2, #4
 80005cc:	619a      	str	r2, [r3, #24]
 80005ce:	4b32      	ldr	r3, [pc, #200]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005d0:	2202      	movs	r2, #2
 80005d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80005d4:	4b31      	ldr	r3, [pc, #196]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 80005d6:	222c      	movs	r2, #44	@ 0x2c
 80005d8:	615a      	str	r2, [r3, #20]
 80005da:	4b2f      	ldr	r3, [pc, #188]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005dc:	2208      	movs	r2, #8
 80005de:	629a      	str	r2, [r3, #40]	@ 0x28
 80005e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005e2:	2208      	movs	r2, #8
 80005e4:	619a      	str	r2, [r3, #24]
 80005e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00); 
 80005ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005ee:	2204      	movs	r2, #4
 80005f0:	619a      	str	r2, [r3, #24]
 80005f2:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80005f8:	4b28      	ldr	r3, [pc, #160]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
 80005fe:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000600:	2208      	movs	r2, #8
 8000602:	629a      	str	r2, [r3, #40]	@ 0x28
 8000604:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000606:	2208      	movs	r2, #8
 8000608:	619a      	str	r2, [r3, #24]
 800060a:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800060c:	2202      	movs	r2, #2
 800060e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x34); 
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000612:	2204      	movs	r2, #4
 8000614:	619a      	str	r2, [r3, #24]
 8000616:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000618:	2202      	movs	r2, #2
 800061a:	629a      	str	r2, [r3, #40]	@ 0x28
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 800061e:	2234      	movs	r2, #52	@ 0x34
 8000620:	615a      	str	r2, [r3, #20]
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000624:	2208      	movs	r2, #8
 8000626:	629a      	str	r2, [r3, #40]	@ 0x28
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800062a:	2208      	movs	r2, #8
 800062c:	619a      	str	r2, [r3, #24]
 800062e:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000630:	2202      	movs	r2, #2
 8000632:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x02); 
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000636:	2204      	movs	r2, #4
 8000638:	619a      	str	r2, [r3, #24]
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800063c:	2202      	movs	r2, #2
 800063e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000640:	4b16      	ldr	r3, [pc, #88]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 8000642:	2202      	movs	r2, #2
 8000644:	615a      	str	r2, [r3, #20]
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000648:	2208      	movs	r2, #8
 800064a:	629a      	str	r2, [r3, #40]	@ 0x28
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800064e:	2208      	movs	r2, #8
 8000650:	619a      	str	r2, [r3, #24]
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000654:	2202      	movs	r2, #2
 8000656:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xF7);  
 8000658:	20f7      	movs	r0, #247	@ 0xf7
 800065a:	f7ff fe2f 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000660:	2204      	movs	r2, #4
 8000662:	619a      	str	r2, [r3, #24]
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000666:	2202      	movs	r2, #2
 8000668:	629a      	str	r2, [r3, #40]	@ 0x28
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <ILI9341_paradriver_Init+0x280>)
 800066c:	2220      	movs	r2, #32
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000672:	2208      	movs	r2, #8
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000678:	2208      	movs	r2, #8
 800067a:	619a      	str	r2, [r3, #24]
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800067e:	2202      	movs	r2, #2
 8000680:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xEA);  
 8000682:	20ea      	movs	r0, #234	@ 0xea
 8000684:	f7ff fe1a 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000688:	4b03      	ldr	r3, [pc, #12]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 800068a:	2204      	movs	r2, #4
 800068c:	619a      	str	r2, [r3, #24]
 800068e:	4b02      	ldr	r3, [pc, #8]	@ (8000698 <ILI9341_paradriver_Init+0x27c>)
 8000690:	2202      	movs	r2, #2
 8000692:	629a      	str	r2, [r3, #40]	@ 0x28
 8000694:	e004      	b.n	80006a0 <ILI9341_paradriver_Init+0x284>
 8000696:	bf00      	nop
 8000698:	48000800 	.word	0x48000800
 800069c:	48000400 	.word	0x48000400
 80006a0:	4b9f      	ldr	r3, [pc, #636]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
 80006a6:	4b9f      	ldr	r3, [pc, #636]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006a8:	2208      	movs	r2, #8
 80006aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80006ac:	4b9d      	ldr	r3, [pc, #628]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006ae:	2208      	movs	r2, #8
 80006b0:	619a      	str	r2, [r3, #24]
 80006b2:	4b9c      	ldr	r3, [pc, #624]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006b4:	2202      	movs	r2, #2
 80006b6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00); 
 80006b8:	4b9a      	ldr	r3, [pc, #616]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006ba:	2204      	movs	r2, #4
 80006bc:	619a      	str	r2, [r3, #24]
 80006be:	4b99      	ldr	r3, [pc, #612]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80006c4:	4b96      	ldr	r3, [pc, #600]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
 80006ca:	4b96      	ldr	r3, [pc, #600]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006cc:	2208      	movs	r2, #8
 80006ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80006d0:	4b94      	ldr	r3, [pc, #592]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006d2:	2208      	movs	r2, #8
 80006d4:	619a      	str	r2, [r3, #24]
 80006d6:	4b93      	ldr	r3, [pc, #588]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006d8:	2202      	movs	r2, #2
 80006da:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC0);    //Power control 
 80006dc:	20c0      	movs	r0, #192	@ 0xc0
 80006de:	f7ff fded 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 80006e2:	4b90      	ldr	r3, [pc, #576]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	619a      	str	r2, [r3, #24]
 80006e8:	4b8e      	ldr	r3, [pc, #568]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006ea:	2202      	movs	r2, #2
 80006ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80006ee:	4b8c      	ldr	r3, [pc, #560]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 80006f0:	221b      	movs	r2, #27
 80006f2:	615a      	str	r2, [r3, #20]
 80006f4:	4b8b      	ldr	r3, [pc, #556]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006f6:	2208      	movs	r2, #8
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80006fa:	4b8a      	ldr	r3, [pc, #552]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80006fc:	2208      	movs	r2, #8
 80006fe:	619a      	str	r2, [r3, #24]
 8000700:	4b88      	ldr	r3, [pc, #544]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000702:	2202      	movs	r2, #2
 8000704:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC1);    //Power control 
 8000706:	20c1      	movs	r0, #193	@ 0xc1
 8000708:	f7ff fdd8 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] 0x01
 800070c:	4b85      	ldr	r3, [pc, #532]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800070e:	2204      	movs	r2, #4
 8000710:	619a      	str	r2, [r3, #24]
 8000712:	4b84      	ldr	r3, [pc, #528]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000714:	2202      	movs	r2, #2
 8000716:	629a      	str	r2, [r3, #40]	@ 0x28
 8000718:	4b81      	ldr	r3, [pc, #516]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 800071a:	2212      	movs	r2, #18
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	4b81      	ldr	r3, [pc, #516]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000720:	2208      	movs	r2, #8
 8000722:	629a      	str	r2, [r3, #40]	@ 0x28
 8000724:	4b7f      	ldr	r3, [pc, #508]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000726:	2208      	movs	r2, #8
 8000728:	619a      	str	r2, [r3, #24]
 800072a:	4b7e      	ldr	r3, [pc, #504]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800072c:	2202      	movs	r2, #2
 800072e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC5);    //VCM control 
 8000730:	20c5      	movs	r0, #197	@ 0xc5
 8000732:	f7ff fdc3 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x08); 	 //30
 8000736:	4b7b      	ldr	r3, [pc, #492]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000738:	2204      	movs	r2, #4
 800073a:	619a      	str	r2, [r3, #24]
 800073c:	4b79      	ldr	r3, [pc, #484]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800073e:	2202      	movs	r2, #2
 8000740:	629a      	str	r2, [r3, #40]	@ 0x28
 8000742:	4b77      	ldr	r3, [pc, #476]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 8000744:	2208      	movs	r2, #8
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	4b76      	ldr	r3, [pc, #472]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800074a:	2208      	movs	r2, #8
 800074c:	629a      	str	r2, [r3, #40]	@ 0x28
 800074e:	4b75      	ldr	r3, [pc, #468]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000750:	2208      	movs	r2, #8
 8000752:	619a      	str	r2, [r3, #24]
 8000754:	4b73      	ldr	r3, [pc, #460]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000756:	2202      	movs	r2, #2
 8000758:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x26); 	 //30
 800075a:	4b72      	ldr	r3, [pc, #456]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800075c:	2204      	movs	r2, #4
 800075e:	619a      	str	r2, [r3, #24]
 8000760:	4b70      	ldr	r3, [pc, #448]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000762:	2202      	movs	r2, #2
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
 8000766:	4b6e      	ldr	r3, [pc, #440]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 8000768:	2226      	movs	r2, #38	@ 0x26
 800076a:	615a      	str	r2, [r3, #20]
 800076c:	4b6d      	ldr	r3, [pc, #436]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800076e:	2208      	movs	r2, #8
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
 8000772:	4b6c      	ldr	r3, [pc, #432]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000774:	2208      	movs	r2, #8
 8000776:	619a      	str	r2, [r3, #24]
 8000778:	4b6a      	ldr	r3, [pc, #424]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800077a:	2202      	movs	r2, #2
 800077c:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xC7);    //VCM control2 
 800077e:	20c7      	movs	r0, #199	@ 0xc7
 8000780:	f7ff fd9c 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 8000784:	4b67      	ldr	r3, [pc, #412]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000786:	2204      	movs	r2, #4
 8000788:	619a      	str	r2, [r3, #24]
 800078a:	4b66      	ldr	r3, [pc, #408]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800078c:	2202      	movs	r2, #2
 800078e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000790:	4b63      	ldr	r3, [pc, #396]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 8000792:	22b7      	movs	r2, #183	@ 0xb7
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	4b63      	ldr	r3, [pc, #396]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000798:	2208      	movs	r2, #8
 800079a:	629a      	str	r2, [r3, #40]	@ 0x28
 800079c:	4b61      	ldr	r3, [pc, #388]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800079e:	2208      	movs	r2, #8
 80007a0:	619a      	str	r2, [r3, #24]
 80007a2:	4b60      	ldr	r3, [pc, #384]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x36);    // Memory Access Control 
 80007a8:	2036      	movs	r0, #54	@ 0x36
 80007aa:	f7ff fd87 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 80007ae:	4b5d      	ldr	r3, [pc, #372]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80007b0:	2204      	movs	r2, #4
 80007b2:	619a      	str	r2, [r3, #24]
 80007b4:	4b5b      	ldr	r3, [pc, #364]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80007b6:	2202      	movs	r2, #2
 80007b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80007ba:	4b59      	ldr	r3, [pc, #356]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 80007bc:	2208      	movs	r2, #8
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b58      	ldr	r3, [pc, #352]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80007c2:	2208      	movs	r2, #8
 80007c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80007c6:	4b57      	ldr	r3, [pc, #348]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80007c8:	2208      	movs	r2, #8
 80007ca:	619a      	str	r2, [r3, #24]
 80007cc:	4b55      	ldr	r3, [pc, #340]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x3A);   
 80007d2:	203a      	movs	r0, #58	@ 0x3a
 80007d4:	f7ff fd72 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 80007d8:	4b52      	ldr	r3, [pc, #328]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80007da:	2204      	movs	r2, #4
 80007dc:	619a      	str	r2, [r3, #24]
 80007de:	4b51      	ldr	r3, [pc, #324]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80007e4:	4b4e      	ldr	r3, [pc, #312]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 80007e6:	2255      	movs	r2, #85	@ 0x55
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	4b4e      	ldr	r3, [pc, #312]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80007ec:	2208      	movs	r2, #8
 80007ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80007f0:	4b4c      	ldr	r3, [pc, #304]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80007f2:	2208      	movs	r2, #8
 80007f4:	619a      	str	r2, [r3, #24]
 80007f6:	4b4b      	ldr	r3, [pc, #300]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xB1);   
 80007fc:	20b1      	movs	r0, #177	@ 0xb1
 80007fe:	f7ff fd5d 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 8000802:	4b48      	ldr	r3, [pc, #288]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000804:	2204      	movs	r2, #4
 8000806:	619a      	str	r2, [r3, #24]
 8000808:	4b46      	ldr	r3, [pc, #280]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800080a:	2202      	movs	r2, #2
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
 800080e:	4b44      	ldr	r3, [pc, #272]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	4b43      	ldr	r3, [pc, #268]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000816:	2208      	movs	r2, #8
 8000818:	629a      	str	r2, [r3, #40]	@ 0x28
 800081a:	4b42      	ldr	r3, [pc, #264]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800081c:	2208      	movs	r2, #8
 800081e:	619a      	str	r2, [r3, #24]
 8000820:	4b40      	ldr	r3, [pc, #256]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000822:	2202      	movs	r2, #2
 8000824:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1A); 
 8000826:	4b3f      	ldr	r3, [pc, #252]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000828:	2204      	movs	r2, #4
 800082a:	619a      	str	r2, [r3, #24]
 800082c:	4b3d      	ldr	r3, [pc, #244]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800082e:	2202      	movs	r2, #2
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
 8000832:	4b3b      	ldr	r3, [pc, #236]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 8000834:	221a      	movs	r2, #26
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	4b3a      	ldr	r3, [pc, #232]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800083a:	2208      	movs	r2, #8
 800083c:	629a      	str	r2, [r3, #40]	@ 0x28
 800083e:	4b39      	ldr	r3, [pc, #228]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000840:	2208      	movs	r2, #8
 8000842:	619a      	str	r2, [r3, #24]
 8000844:	4b37      	ldr	r3, [pc, #220]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000846:	2202      	movs	r2, #2
 8000848:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xB6);    // Display Function Control 
 800084a:	20b6      	movs	r0, #182	@ 0xb6
 800084c:	f7ff fd36 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 8000850:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000852:	2204      	movs	r2, #4
 8000854:	619a      	str	r2, [r3, #24]
 8000856:	4b33      	ldr	r3, [pc, #204]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000858:	2202      	movs	r2, #2
 800085a:	629a      	str	r2, [r3, #40]	@ 0x28
 800085c:	4b30      	ldr	r3, [pc, #192]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 800085e:	220a      	movs	r2, #10
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000864:	2208      	movs	r2, #8
 8000866:	629a      	str	r2, [r3, #40]	@ 0x28
 8000868:	4b2e      	ldr	r3, [pc, #184]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800086a:	2208      	movs	r2, #8
 800086c:	619a      	str	r2, [r3, #24]
 800086e:	4b2d      	ldr	r3, [pc, #180]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000870:	2202      	movs	r2, #2
 8000872:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xA2); 
 8000874:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000876:	2204      	movs	r2, #4
 8000878:	619a      	str	r2, [r3, #24]
 800087a:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800087c:	2202      	movs	r2, #2
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000880:	4b27      	ldr	r3, [pc, #156]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 8000882:	22a2      	movs	r2, #162	@ 0xa2
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000888:	2208      	movs	r2, #8
 800088a:	629a      	str	r2, [r3, #40]	@ 0x28
 800088c:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800088e:	2208      	movs	r2, #8
 8000890:	619a      	str	r2, [r3, #24]
 8000892:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000894:	2202      	movs	r2, #2
 8000896:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8000898:	20f2      	movs	r0, #242	@ 0xf2
 800089a:	f7ff fd0f 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 800089e:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	619a      	str	r2, [r3, #24]
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008a6:	2202      	movs	r2, #2
 80008a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008b2:	2208      	movs	r2, #8
 80008b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80008b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008b8:	2208      	movs	r2, #8
 80008ba:	619a      	str	r2, [r3, #24]
 80008bc:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008be:	2202      	movs	r2, #2
 80008c0:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x26);    //Gamma curve selected 
 80008c2:	2026      	movs	r0, #38	@ 0x26
 80008c4:	f7ff fcfa 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 80008c8:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	619a      	str	r2, [r3, #24]
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	615a      	str	r2, [r3, #20]
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008dc:	2208      	movs	r2, #8
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	619a      	str	r2, [r3, #24]
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0xE0);    //Set Gamma 
 80008ec:	20e0      	movs	r0, #224	@ 0xe0
 80008ee:	f7ff fce5 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008f4:	2204      	movs	r2, #4
 80008f6:	619a      	str	r2, [r3, #24]
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <ILI9341_paradriver_Init+0x504>)
 8000900:	220f      	movs	r2, #15
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000906:	2208      	movs	r2, #8
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 800090c:	2208      	movs	r2, #8
 800090e:	619a      	str	r2, [r3, #24]
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000912:	2202      	movs	r2, #2
 8000914:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1D); 
 8000916:	4b03      	ldr	r3, [pc, #12]	@ (8000924 <ILI9341_paradriver_Init+0x508>)
 8000918:	2204      	movs	r2, #4
 800091a:	619a      	str	r2, [r3, #24]
 800091c:	e004      	b.n	8000928 <ILI9341_paradriver_Init+0x50c>
 800091e:	bf00      	nop
 8000920:	48000400 	.word	0x48000400
 8000924:	48000800 	.word	0x48000800
 8000928:	4b99      	ldr	r3, [pc, #612]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 800092a:	2202      	movs	r2, #2
 800092c:	629a      	str	r2, [r3, #40]	@ 0x28
 800092e:	4b99      	ldr	r3, [pc, #612]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000930:	221d      	movs	r2, #29
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	4b96      	ldr	r3, [pc, #600]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000936:	2208      	movs	r2, #8
 8000938:	629a      	str	r2, [r3, #40]	@ 0x28
 800093a:	4b95      	ldr	r3, [pc, #596]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 800093c:	2208      	movs	r2, #8
 800093e:	619a      	str	r2, [r3, #24]
 8000940:	4b93      	ldr	r3, [pc, #588]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000942:	2202      	movs	r2, #2
 8000944:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1A); 
 8000946:	4b92      	ldr	r3, [pc, #584]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000948:	2204      	movs	r2, #4
 800094a:	619a      	str	r2, [r3, #24]
 800094c:	4b90      	ldr	r3, [pc, #576]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 800094e:	2202      	movs	r2, #2
 8000950:	629a      	str	r2, [r3, #40]	@ 0x28
 8000952:	4b90      	ldr	r3, [pc, #576]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000954:	221a      	movs	r2, #26
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	4b8d      	ldr	r3, [pc, #564]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 800095a:	2208      	movs	r2, #8
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
 800095e:	4b8c      	ldr	r3, [pc, #560]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000960:	2208      	movs	r2, #8
 8000962:	619a      	str	r2, [r3, #24]
 8000964:	4b8a      	ldr	r3, [pc, #552]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000966:	2202      	movs	r2, #2
 8000968:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0A); 
 800096a:	4b89      	ldr	r3, [pc, #548]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 800096c:	2204      	movs	r2, #4
 800096e:	619a      	str	r2, [r3, #24]
 8000970:	4b87      	ldr	r3, [pc, #540]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000972:	2202      	movs	r2, #2
 8000974:	629a      	str	r2, [r3, #40]	@ 0x28
 8000976:	4b87      	ldr	r3, [pc, #540]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000978:	220a      	movs	r2, #10
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	4b84      	ldr	r3, [pc, #528]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 800097e:	2208      	movs	r2, #8
 8000980:	629a      	str	r2, [r3, #40]	@ 0x28
 8000982:	4b83      	ldr	r3, [pc, #524]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000984:	2208      	movs	r2, #8
 8000986:	619a      	str	r2, [r3, #24]
 8000988:	4b81      	ldr	r3, [pc, #516]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 800098a:	2202      	movs	r2, #2
 800098c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0D); 
 800098e:	4b80      	ldr	r3, [pc, #512]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000990:	2204      	movs	r2, #4
 8000992:	619a      	str	r2, [r3, #24]
 8000994:	4b7e      	ldr	r3, [pc, #504]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000996:	2202      	movs	r2, #2
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
 800099a:	4b7e      	ldr	r3, [pc, #504]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 800099c:	220d      	movs	r2, #13
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	4b7b      	ldr	r3, [pc, #492]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009a2:	2208      	movs	r2, #8
 80009a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80009a6:	4b7a      	ldr	r3, [pc, #488]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009a8:	2208      	movs	r2, #8
 80009aa:	619a      	str	r2, [r3, #24]
 80009ac:	4b78      	ldr	r3, [pc, #480]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009ae:	2202      	movs	r2, #2
 80009b0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 80009b2:	4b77      	ldr	r3, [pc, #476]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009b4:	2204      	movs	r2, #4
 80009b6:	619a      	str	r2, [r3, #24]
 80009b8:	4b75      	ldr	r3, [pc, #468]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80009be:	4b75      	ldr	r3, [pc, #468]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	615a      	str	r2, [r3, #20]
 80009c4:	4b72      	ldr	r3, [pc, #456]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009c6:	2208      	movs	r2, #8
 80009c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80009ca:	4b71      	ldr	r3, [pc, #452]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009cc:	2208      	movs	r2, #8
 80009ce:	619a      	str	r2, [r3, #24]
 80009d0:	4b6f      	ldr	r3, [pc, #444]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x49); 
 80009d6:	4b6e      	ldr	r3, [pc, #440]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009d8:	2204      	movs	r2, #4
 80009da:	619a      	str	r2, [r3, #24]
 80009dc:	4b6c      	ldr	r3, [pc, #432]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009de:	2202      	movs	r2, #2
 80009e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80009e2:	4b6c      	ldr	r3, [pc, #432]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 80009e4:	2249      	movs	r2, #73	@ 0x49
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	4b69      	ldr	r3, [pc, #420]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009ea:	2208      	movs	r2, #8
 80009ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80009ee:	4b68      	ldr	r3, [pc, #416]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009f0:	2208      	movs	r2, #8
 80009f2:	619a      	str	r2, [r3, #24]
 80009f4:	4b66      	ldr	r3, [pc, #408]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0X66); 
 80009fa:	4b65      	ldr	r3, [pc, #404]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 80009fc:	2204      	movs	r2, #4
 80009fe:	619a      	str	r2, [r3, #24]
 8000a00:	4b63      	ldr	r3, [pc, #396]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a06:	4b63      	ldr	r3, [pc, #396]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000a08:	2266      	movs	r2, #102	@ 0x66
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	4b60      	ldr	r3, [pc, #384]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a0e:	2208      	movs	r2, #8
 8000a10:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a12:	4b5f      	ldr	r3, [pc, #380]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a14:	2208      	movs	r2, #8
 8000a16:	619a      	str	r2, [r3, #24]
 8000a18:	4b5d      	ldr	r3, [pc, #372]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x3B); 
 8000a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a20:	2204      	movs	r2, #4
 8000a22:	619a      	str	r2, [r3, #24]
 8000a24:	4b5a      	ldr	r3, [pc, #360]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a2a:	4b5a      	ldr	r3, [pc, #360]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000a2c:	223b      	movs	r2, #59	@ 0x3b
 8000a2e:	615a      	str	r2, [r3, #20]
 8000a30:	4b57      	ldr	r3, [pc, #348]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a32:	2208      	movs	r2, #8
 8000a34:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a36:	4b56      	ldr	r3, [pc, #344]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a38:	2208      	movs	r2, #8
 8000a3a:	619a      	str	r2, [r3, #24]
 8000a3c:	4b54      	ldr	r3, [pc, #336]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a3e:	2202      	movs	r2, #2
 8000a40:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8000a42:	4b53      	ldr	r3, [pc, #332]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a44:	2204      	movs	r2, #4
 8000a46:	619a      	str	r2, [r3, #24]
 8000a48:	4b51      	ldr	r3, [pc, #324]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a4e:	4b51      	ldr	r3, [pc, #324]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	615a      	str	r2, [r3, #20]
 8000a54:	4b4e      	ldr	r3, [pc, #312]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a56:	2208      	movs	r2, #8
 8000a58:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	619a      	str	r2, [r3, #24]
 8000a60:	4b4b      	ldr	r3, [pc, #300]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x11); 
 8000a66:	4b4a      	ldr	r3, [pc, #296]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	619a      	str	r2, [r3, #24]
 8000a6c:	4b48      	ldr	r3, [pc, #288]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a72:	4b48      	ldr	r3, [pc, #288]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000a74:	2211      	movs	r2, #17
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	4b45      	ldr	r3, [pc, #276]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a7e:	4b44      	ldr	r3, [pc, #272]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a80:	2208      	movs	r2, #8
 8000a82:	619a      	str	r2, [r3, #24]
 8000a84:	4b42      	ldr	r3, [pc, #264]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a86:	2202      	movs	r2, #2
 8000a88:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x01); 
 8000a8a:	4b41      	ldr	r3, [pc, #260]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	619a      	str	r2, [r3, #24]
 8000a90:	4b3f      	ldr	r3, [pc, #252]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a96:	4b3f      	ldr	r3, [pc, #252]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	619a      	str	r2, [r3, #24]
 8000aa8:	4b39      	ldr	r3, [pc, #228]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x09); 
 8000aae:	4b38      	ldr	r3, [pc, #224]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	619a      	str	r2, [r3, #24]
 8000ab4:	4b36      	ldr	r3, [pc, #216]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000aba:	4b36      	ldr	r3, [pc, #216]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000abc:	2209      	movs	r2, #9
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	4b33      	ldr	r3, [pc, #204]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ac6:	4b32      	ldr	r3, [pc, #200]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000ac8:	2208      	movs	r2, #8
 8000aca:	619a      	str	r2, [r3, #24]
 8000acc:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x05); 
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	619a      	str	r2, [r3, #24]
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ade:	4b2d      	ldr	r3, [pc, #180]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000ae0:	2205      	movs	r2, #5
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000aea:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000aec:	2208      	movs	r2, #8
 8000aee:	619a      	str	r2, [r3, #24]
 8000af0:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000af2:	2202      	movs	r2, #2
 8000af4:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x04); 		 
 8000af6:	4b26      	ldr	r3, [pc, #152]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000af8:	2204      	movs	r2, #4
 8000afa:	619a      	str	r2, [r3, #24]
 8000afc:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b02:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b10:	2208      	movs	r2, #8
 8000b12:	619a      	str	r2, [r3, #24]
 8000b14:	4b1e      	ldr	r3, [pc, #120]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0XE1);    //Set Gamma 
 8000b1a:	20e1      	movs	r0, #225	@ 0xe1
 8000b1c:	f7ff fbce 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000b20:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b22:	2204      	movs	r2, #4
 8000b24:	619a      	str	r2, [r3, #24]
 8000b26:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b28:	2202      	movs	r2, #2
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b2c:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b34:	2208      	movs	r2, #8
 8000b36:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	619a      	str	r2, [r3, #24]
 8000b3e:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x18); 
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b46:	2204      	movs	r2, #4
 8000b48:	619a      	str	r2, [r3, #24]
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b50:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000b52:	2218      	movs	r2, #24
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b58:	2208      	movs	r2, #8
 8000b5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b5e:	2208      	movs	r2, #8
 8000b60:	619a      	str	r2, [r3, #24]
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x1D); 
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	619a      	str	r2, [r3, #24]
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <ILI9341_paradriver_Init+0x778>)
 8000b76:	221d      	movs	r2, #29
 8000b78:	615a      	str	r2, [r3, #20]
 8000b7a:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b80:	4b03      	ldr	r3, [pc, #12]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b82:	2208      	movs	r2, #8
 8000b84:	619a      	str	r2, [r3, #24]
 8000b86:	4b02      	ldr	r3, [pc, #8]	@ (8000b90 <ILI9341_paradriver_Init+0x774>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	619a      	str	r2, [r3, #24]
 8000b8c:	e004      	b.n	8000b98 <ILI9341_paradriver_Init+0x77c>
 8000b8e:	bf00      	nop
 8000b90:	48000800 	.word	0x48000800
 8000b94:	48000400 	.word	0x48000400
	LCD_WR_DATA(0x02); 
 8000b98:	4b99      	ldr	r3, [pc, #612]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	619a      	str	r2, [r3, #24]
 8000b9e:	4b98      	ldr	r3, [pc, #608]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ba4:	4b97      	ldr	r3, [pc, #604]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	615a      	str	r2, [r3, #20]
 8000baa:	4b95      	ldr	r3, [pc, #596]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000bac:	2208      	movs	r2, #8
 8000bae:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bb0:	4b93      	ldr	r3, [pc, #588]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	619a      	str	r2, [r3, #24]
 8000bb6:	4b92      	ldr	r3, [pc, #584]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000bb8:	2202      	movs	r2, #2
 8000bba:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0F); 
 8000bbc:	4b90      	ldr	r3, [pc, #576]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	619a      	str	r2, [r3, #24]
 8000bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bc8:	4b8e      	ldr	r3, [pc, #568]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000bca:	220f      	movs	r2, #15
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	4b8c      	ldr	r3, [pc, #560]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bd4:	4b8a      	ldr	r3, [pc, #552]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	619a      	str	r2, [r3, #24]
 8000bda:	4b89      	ldr	r3, [pc, #548]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x04); 
 8000be0:	4b87      	ldr	r3, [pc, #540]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000be2:	2204      	movs	r2, #4
 8000be4:	619a      	str	r2, [r3, #24]
 8000be6:	4b86      	ldr	r3, [pc, #536]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000be8:	2202      	movs	r2, #2
 8000bea:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bec:	4b85      	ldr	r3, [pc, #532]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	615a      	str	r2, [r3, #20]
 8000bf2:	4b83      	ldr	r3, [pc, #524]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bf8:	4b81      	ldr	r3, [pc, #516]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	619a      	str	r2, [r3, #24]
 8000bfe:	4b80      	ldr	r3, [pc, #512]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c00:	2202      	movs	r2, #2
 8000c02:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x36); 
 8000c04:	4b7e      	ldr	r3, [pc, #504]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	619a      	str	r2, [r3, #24]
 8000c0a:	4b7d      	ldr	r3, [pc, #500]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c10:	4b7c      	ldr	r3, [pc, #496]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000c12:	2236      	movs	r2, #54	@ 0x36
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	4b7a      	ldr	r3, [pc, #488]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c18:	2208      	movs	r2, #8
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c1c:	4b78      	ldr	r3, [pc, #480]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c1e:	2208      	movs	r2, #8
 8000c20:	619a      	str	r2, [r3, #24]
 8000c22:	4b77      	ldr	r3, [pc, #476]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x13); 
 8000c28:	4b75      	ldr	r3, [pc, #468]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	619a      	str	r2, [r3, #24]
 8000c2e:	4b74      	ldr	r3, [pc, #464]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c34:	4b73      	ldr	r3, [pc, #460]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000c36:	2213      	movs	r2, #19
 8000c38:	615a      	str	r2, [r3, #20]
 8000c3a:	4b71      	ldr	r3, [pc, #452]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c3c:	2208      	movs	r2, #8
 8000c3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c40:	4b6f      	ldr	r3, [pc, #444]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c42:	2208      	movs	r2, #8
 8000c44:	619a      	str	r2, [r3, #24]
 8000c46:	4b6e      	ldr	r3, [pc, #440]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x4C); 
 8000c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c4e:	2204      	movs	r2, #4
 8000c50:	619a      	str	r2, [r3, #24]
 8000c52:	4b6b      	ldr	r3, [pc, #428]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c58:	4b6a      	ldr	r3, [pc, #424]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000c5a:	224c      	movs	r2, #76	@ 0x4c
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	4b68      	ldr	r3, [pc, #416]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c60:	2208      	movs	r2, #8
 8000c62:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c64:	4b66      	ldr	r3, [pc, #408]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c66:	2208      	movs	r2, #8
 8000c68:	619a      	str	r2, [r3, #24]
 8000c6a:	4b65      	ldr	r3, [pc, #404]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x07); 
 8000c70:	4b63      	ldr	r3, [pc, #396]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	619a      	str	r2, [r3, #24]
 8000c76:	4b62      	ldr	r3, [pc, #392]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c7c:	4b61      	ldr	r3, [pc, #388]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000c7e:	2207      	movs	r2, #7
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	4b5f      	ldr	r3, [pc, #380]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c84:	2208      	movs	r2, #8
 8000c86:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c88:	4b5d      	ldr	r3, [pc, #372]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c8a:	2208      	movs	r2, #8
 8000c8c:	619a      	str	r2, [r3, #24]
 8000c8e:	4b5c      	ldr	r3, [pc, #368]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x13); 
 8000c94:	4b5a      	ldr	r3, [pc, #360]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	619a      	str	r2, [r3, #24]
 8000c9a:	4b59      	ldr	r3, [pc, #356]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ca0:	4b58      	ldr	r3, [pc, #352]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000ca2:	2213      	movs	r2, #19
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	4b56      	ldr	r3, [pc, #344]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000ca8:	2208      	movs	r2, #8
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cac:	4b54      	ldr	r3, [pc, #336]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000cae:	2208      	movs	r2, #8
 8000cb0:	619a      	str	r2, [r3, #24]
 8000cb2:	4b53      	ldr	r3, [pc, #332]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x0F); 
 8000cb8:	4b51      	ldr	r3, [pc, #324]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	619a      	str	r2, [r3, #24]
 8000cbe:	4b50      	ldr	r3, [pc, #320]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	615a      	str	r2, [r3, #20]
 8000cca:	4b4d      	ldr	r3, [pc, #308]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000ccc:	2208      	movs	r2, #8
 8000cce:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	619a      	str	r2, [r3, #24]
 8000cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2E); 
 8000cdc:	4b48      	ldr	r3, [pc, #288]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	619a      	str	r2, [r3, #24]
 8000ce2:	4b47      	ldr	r3, [pc, #284]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ce8:	4b46      	ldr	r3, [pc, #280]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000cea:	222e      	movs	r2, #46	@ 0x2e
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	4b44      	ldr	r3, [pc, #272]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000cf0:	2208      	movs	r2, #8
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cf4:	4b42      	ldr	r3, [pc, #264]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	619a      	str	r2, [r3, #24]
 8000cfa:	4b41      	ldr	r3, [pc, #260]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x2F); 
 8000d00:	4b3f      	ldr	r3, [pc, #252]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d02:	2204      	movs	r2, #4
 8000d04:	619a      	str	r2, [r3, #24]
 8000d06:	4b3e      	ldr	r3, [pc, #248]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d08:	2202      	movs	r2, #2
 8000d0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000d0e:	222f      	movs	r2, #47	@ 0x2f
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	4b3b      	ldr	r3, [pc, #236]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d14:	2208      	movs	r2, #8
 8000d16:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d18:	4b39      	ldr	r3, [pc, #228]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	619a      	str	r2, [r3, #24]
 8000d1e:	4b38      	ldr	r3, [pc, #224]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d20:	2202      	movs	r2, #2
 8000d22:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x05); 
 8000d24:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d26:	2204      	movs	r2, #4
 8000d28:	619a      	str	r2, [r3, #24]
 8000d2a:	4b35      	ldr	r3, [pc, #212]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d30:	4b34      	ldr	r3, [pc, #208]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000d32:	2205      	movs	r2, #5
 8000d34:	615a      	str	r2, [r3, #20]
 8000d36:	4b32      	ldr	r3, [pc, #200]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d38:	2208      	movs	r2, #8
 8000d3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d3c:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d3e:	2208      	movs	r2, #8
 8000d40:	619a      	str	r2, [r3, #24]
 8000d42:	4b2f      	ldr	r3, [pc, #188]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d44:	2202      	movs	r2, #2
 8000d46:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x2B); 
 8000d48:	202b      	movs	r0, #43	@ 0x2b
 8000d4a:	f7ff fab7 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d50:	2204      	movs	r2, #4
 8000d52:	619a      	str	r2, [r3, #24]
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
 8000d60:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d62:	2208      	movs	r2, #8
 8000d64:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d66:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d68:	2208      	movs	r2, #8
 8000d6a:	619a      	str	r2, [r3, #24]
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d6e:	2202      	movs	r2, #2
 8000d70:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000d72:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d74:	2204      	movs	r2, #4
 8000d76:	619a      	str	r2, [r3, #24]
 8000d78:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d86:	2208      	movs	r2, #8
 8000d88:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	619a      	str	r2, [r3, #24]
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x01);
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d98:	2204      	movs	r2, #4
 8000d9a:	619a      	str	r2, [r3, #24]
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000da2:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	615a      	str	r2, [r3, #20]
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000daa:	2208      	movs	r2, #8
 8000dac:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000db0:	2208      	movs	r2, #8
 8000db2:	619a      	str	r2, [r3, #24]
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x3f);
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	619a      	str	r2, [r3, #24]
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000dc8:	223f      	movs	r2, #63	@ 0x3f
 8000dca:	615a      	str	r2, [r3, #20]
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000dce:	2208      	movs	r2, #8
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	619a      	str	r2, [r3, #24]
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x2A); 
 8000dde:	202a      	movs	r0, #42	@ 0x2a
 8000de0:	f7ff fa6c 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	619a      	str	r2, [r3, #24]
 8000dea:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000dec:	2202      	movs	r2, #2
 8000dee:	629a      	str	r2, [r3, #40]	@ 0x28
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <ILI9341_paradriver_Init+0x9e8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
 8000df6:	4b02      	ldr	r3, [pc, #8]	@ (8000e00 <ILI9341_paradriver_Init+0x9e4>)
 8000df8:	2208      	movs	r2, #8
 8000dfa:	629a      	str	r2, [r3, #40]	@ 0x28
 8000dfc:	e004      	b.n	8000e08 <ILI9341_paradriver_Init+0x9ec>
 8000dfe:	bf00      	nop
 8000e00:	48000800 	.word	0x48000800
 8000e04:	48000400 	.word	0x48000400
 8000e08:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	619a      	str	r2, [r3, #24]
 8000e0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e10:	2202      	movs	r2, #2
 8000e12:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000e14:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	619a      	str	r2, [r3, #24]
 8000e1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e20:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <ILI9341_paradriver_Init+0xa8c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e28:	2208      	movs	r2, #8
 8000e2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	619a      	str	r2, [r3, #24]
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00);
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	619a      	str	r2, [r3, #24]
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e44:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <ILI9341_paradriver_Init+0xa8c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
 8000e4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e52:	2208      	movs	r2, #8
 8000e54:	619a      	str	r2, [r3, #24]
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0xef);	 
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	619a      	str	r2, [r3, #24]
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <ILI9341_paradriver_Init+0xa8c>)
 8000e6a:	22ef      	movs	r2, #239	@ 0xef
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e70:	2208      	movs	r2, #8
 8000e72:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e76:	2208      	movs	r2, #8
 8000e78:	619a      	str	r2, [r3, #24]
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <ILI9341_paradriver_Init+0xa88>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	619a      	str	r2, [r3, #24]
	LCD_WR_REG(0x11); //Exit Sleep
 8000e80:	2011      	movs	r0, #17
 8000e82:	f7ff fa1b 	bl	80002bc <LCD_WR_REG>
	delay_ms(120);
 8000e86:	2078      	movs	r0, #120	@ 0x78
 8000e88:	f000 fbc6 	bl	8001618 <delay_ms>
	LCD_WR_REG(0x29); //display on		
 8000e8c:	2029      	movs	r0, #41	@ 0x29
 8000e8e:	f7ff fa15 	bl	80002bc <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 8000e92:	2001      	movs	r0, #1
 8000e94:	f000 f8de 	bl	8001054 <LCD_direction>
//	LCD_LED=1;//��������	 
	LCD_Clear(WHITE);//��ȫ����ɫ
 8000e98:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000e9c:	f7ff fa7e 	bl	800039c <LCD_Clear>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48000400 	.word	0x48000400

08000eac <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4623      	mov	r3, r4
 8000ebc:	80fb      	strh	r3, [r7, #6]
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80bb      	strh	r3, [r7, #4]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	807b      	strh	r3, [r7, #2]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8000eca:	4b56      	ldr	r3, [pc, #344]	@ (8001024 <LCD_SetWindows+0x178>)
 8000ecc:	899b      	ldrh	r3, [r3, #12]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff f9f4 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8000ed4:	4b54      	ldr	r3, [pc, #336]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	619a      	str	r2, [r3, #24]
 8000eda:	4b53      	ldr	r3, [pc, #332]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b51      	ldr	r3, [pc, #324]	@ (800102c <LCD_SetWindows+0x180>)
 8000ee8:	615a      	str	r2, [r3, #20]
 8000eea:	4b4f      	ldr	r3, [pc, #316]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000eec:	2208      	movs	r2, #8
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	619a      	str	r2, [r3, #24]
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&xStar);		
 8000efc:	4b4a      	ldr	r3, [pc, #296]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000efe:	2204      	movs	r2, #4
 8000f00:	619a      	str	r2, [r3, #24]
 8000f02:	4b49      	ldr	r3, [pc, #292]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f04:	2202      	movs	r2, #2
 8000f06:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a48      	ldr	r2, [pc, #288]	@ (800102c <LCD_SetWindows+0x180>)
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	6153      	str	r3, [r2, #20]
 8000f10:	4b45      	ldr	r3, [pc, #276]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f12:	2208      	movs	r2, #8
 8000f14:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f16:	4b44      	ldr	r3, [pc, #272]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f18:	2208      	movs	r2, #8
 8000f1a:	619a      	str	r2, [r3, #24]
 8000f1c:	4b42      	ldr	r3, [pc, #264]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f1e:	2202      	movs	r2, #2
 8000f20:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(xEnd>>8);
 8000f22:	4b41      	ldr	r3, [pc, #260]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f24:	2204      	movs	r2, #4
 8000f26:	619a      	str	r2, [r3, #24]
 8000f28:	4b3f      	ldr	r3, [pc, #252]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b3d      	ldr	r3, [pc, #244]	@ (800102c <LCD_SetWindows+0x180>)
 8000f36:	615a      	str	r2, [r3, #20]
 8000f38:	4b3b      	ldr	r3, [pc, #236]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f40:	2208      	movs	r2, #8
 8000f42:	619a      	str	r2, [r3, #24]
 8000f44:	4b38      	ldr	r3, [pc, #224]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f46:	2202      	movs	r2, #2
 8000f48:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&xEnd);
 8000f4a:	4b37      	ldr	r3, [pc, #220]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	619a      	str	r2, [r3, #24]
 8000f50:	4b35      	ldr	r3, [pc, #212]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	4a34      	ldr	r2, [pc, #208]	@ (800102c <LCD_SetWindows+0x180>)
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b32      	ldr	r3, [pc, #200]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f60:	2208      	movs	r2, #8
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f64:	4b30      	ldr	r3, [pc, #192]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f66:	2208      	movs	r2, #8
 8000f68:	619a      	str	r2, [r3, #24]
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	619a      	str	r2, [r3, #24]

	LCD_WR_REG(lcddev.setycmd);	
 8000f70:	4b2c      	ldr	r3, [pc, #176]	@ (8001024 <LCD_SetWindows+0x178>)
 8000f72:	89db      	ldrh	r3, [r3, #14]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f9a1 	bl	80002bc <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	619a      	str	r2, [r3, #24]
 8000f80:	4b29      	ldr	r3, [pc, #164]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b27      	ldr	r3, [pc, #156]	@ (800102c <LCD_SetWindows+0x180>)
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f92:	2208      	movs	r2, #8
 8000f94:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f96:	4b24      	ldr	r3, [pc, #144]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f98:	2208      	movs	r2, #8
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	4b22      	ldr	r3, [pc, #136]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&yStar);		
 8000fa2:	4b21      	ldr	r3, [pc, #132]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	619a      	str	r2, [r3, #24]
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fae:	88bb      	ldrh	r3, [r7, #4]
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800102c <LCD_SetWindows+0x180>)
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000fb8:	2208      	movs	r2, #8
 8000fba:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000fbe:	2208      	movs	r2, #8
 8000fc0:	619a      	str	r2, [r3, #24]
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(yEnd>>8);
 8000fc8:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000fca:	2204      	movs	r2, #4
 8000fcc:	619a      	str	r2, [r3, #24]
 8000fce:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fd4:	883b      	ldrh	r3, [r7, #0]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b14      	ldr	r3, [pc, #80]	@ (800102c <LCD_SetWindows+0x180>)
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fe4:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	619a      	str	r2, [r3, #24]
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	619a      	str	r2, [r3, #24]
	LCD_WR_DATA(0x00FF&yEnd);
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	619a      	str	r2, [r3, #24]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <LCD_SetWindows+0x17c>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ffc:	883b      	ldrh	r3, [r7, #0]
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <LCD_SetWindows+0x180>)
 8001000:	b2db      	uxtb	r3, r3
 8001002:	6153      	str	r3, [r2, #20]
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <LCD_SetWindows+0x17c>)
 8001006:	2208      	movs	r2, #8
 8001008:	629a      	str	r2, [r3, #40]	@ 0x28
 800100a:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <LCD_SetWindows+0x17c>)
 800100c:	2208      	movs	r2, #8
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <LCD_SetWindows+0x17c>)
 8001012:	2202      	movs	r2, #2
 8001014:	619a      	str	r2, [r3, #24]

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 8001016:	f7ff f989 	bl	800032c <LCD_WriteRAM_Prepare>
}   
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	20000084 	.word	0x20000084
 8001028:	48000800 	.word	0x48000800
 800102c:	48000400 	.word	0x48000400

08001030 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	80fb      	strh	r3, [r7, #6]
 800103c:	4613      	mov	r3, r2
 800103e:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	88fa      	ldrh	r2, [r7, #6]
 8001044:	88b9      	ldrh	r1, [r7, #4]
 8001046:	88f8      	ldrh	r0, [r7, #6]
 8001048:	f7ff ff30 	bl	8000eac <LCD_SetWindows>
} 
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 800105e:	4b28      	ldr	r3, [pc, #160]	@ (8001100 <LCD_direction+0xac>)
 8001060:	222a      	movs	r2, #42	@ 0x2a
 8001062:	819a      	strh	r2, [r3, #12]
			lcddev.setycmd=0x2B;
 8001064:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <LCD_direction+0xac>)
 8001066:	222b      	movs	r2, #43	@ 0x2b
 8001068:	81da      	strh	r2, [r3, #14]
			lcddev.wramcmd=0x2C;
 800106a:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <LCD_direction+0xac>)
 800106c:	222c      	movs	r2, #44	@ 0x2c
 800106e:	811a      	strh	r2, [r3, #8]
			lcddev.rramcmd=0x2E;
 8001070:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <LCD_direction+0xac>)
 8001072:	222e      	movs	r2, #46	@ 0x2e
 8001074:	815a      	strh	r2, [r3, #10]
	switch(direction){		  
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d83b      	bhi.n	80010f4 <LCD_direction+0xa0>
 800107c:	a201      	add	r2, pc, #4	@ (adr r2, 8001084 <LCD_direction+0x30>)
 800107e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001082:	bf00      	nop
 8001084:	08001095 	.word	0x08001095
 8001088:	080010ad 	.word	0x080010ad
 800108c:	080010c5 	.word	0x080010c5
 8001090:	080010dd 	.word	0x080010dd
		case 0:						 	 		
			lcddev.width=LCD_W;
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <LCD_direction+0xac>)
 8001096:	22f0      	movs	r2, #240	@ 0xf0
 8001098:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <LCD_direction+0xac>)
 800109c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010a0:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3));
 80010a2:	2108      	movs	r1, #8
 80010a4:	2036      	movs	r0, #54	@ 0x36
 80010a6:	f7ff f91b 	bl	80002e0 <LCD_WriteReg>
		break;
 80010aa:	e024      	b.n	80010f6 <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <LCD_direction+0xac>)
 80010ae:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010b2:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <LCD_direction+0xac>)
 80010b6:	22f0      	movs	r2, #240	@ 0xf0
 80010b8:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6));
 80010ba:	2168      	movs	r1, #104	@ 0x68
 80010bc:	2036      	movs	r0, #54	@ 0x36
 80010be:	f7ff f90f 	bl	80002e0 <LCD_WriteReg>
		break;
 80010c2:	e018      	b.n	80010f6 <LCD_direction+0xa2>
		case 2:						 	 		
			lcddev.width=LCD_W;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <LCD_direction+0xac>)
 80010c6:	22f0      	movs	r2, #240	@ 0xf0
 80010c8:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 80010ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <LCD_direction+0xac>)
 80010cc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010d0:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<4)|(1<<6));
 80010d2:	21d8      	movs	r1, #216	@ 0xd8
 80010d4:	2036      	movs	r0, #54	@ 0x36
 80010d6:	f7ff f903 	bl	80002e0 <LCD_WriteReg>
		break;
 80010da:	e00c      	b.n	80010f6 <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <LCD_direction+0xac>)
 80010de:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010e2:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <LCD_direction+0xac>)
 80010e6:	22f0      	movs	r2, #240	@ 0xf0
 80010e8:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5)|(1<<4));
 80010ea:	21b8      	movs	r1, #184	@ 0xb8
 80010ec:	2036      	movs	r0, #54	@ 0x36
 80010ee:	f7ff f8f7 	bl	80002e0 <LCD_WriteReg>
		break;	
 80010f2:	e000      	b.n	80010f6 <LCD_direction+0xa2>
		default:break;
 80010f4:	bf00      	nop
	}		
}	 
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000084 	.word	0x20000084

08001104 <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(int16_t sx,u16 sy,int16_t ex,u16 ey,u16 color)	// x must be not less than 0 for obstacle shifting
{																// changing u16 to int16_t
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	4604      	mov	r4, r0
 800110c:	4608      	mov	r0, r1
 800110e:	4611      	mov	r1, r2
 8001110:	461a      	mov	r2, r3
 8001112:	4623      	mov	r3, r4
 8001114:	80fb      	strh	r3, [r7, #6]
 8001116:	4603      	mov	r3, r0
 8001118:	80bb      	strh	r3, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]
 800111e:	4613      	mov	r3, r2
 8001120:	803b      	strh	r3, [r7, #0]

	if(sx<0)
 8001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001126:	2b00      	cmp	r3, #0
 8001128:	da01      	bge.n	800112e <LCD_Fill+0x2a>
	{
		sx=0;
 800112a:	2300      	movs	r3, #0
 800112c:	80fb      	strh	r3, [r7, #6]
	}

	if(ex<0)
 800112e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da01      	bge.n	800113a <LCD_Fill+0x36>
	{
		ex=0;
 8001136:	2300      	movs	r3, #0
 8001138:	807b      	strh	r3, [r7, #2]
	}

	u16 i,j;
	u16 width=ex-sx+1; 		//�õ����Ŀ��
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	b29b      	uxth	r3, r3
 8001142:	3301      	adds	r3, #1
 8001144:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;		//�߶�
 8001146:	883a      	ldrh	r2, [r7, #0]
 8001148:	88bb      	ldrh	r3, [r7, #4]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29b      	uxth	r3, r3
 800114e:	3301      	adds	r3, #1
 8001150:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);//������ʾ����
 8001152:	88f8      	ldrh	r0, [r7, #6]
 8001154:	887a      	ldrh	r2, [r7, #2]
 8001156:	883b      	ldrh	r3, [r7, #0]
 8001158:	88b9      	ldrh	r1, [r7, #4]
 800115a:	f7ff fea7 	bl	8000eac <LCD_SetWindows>
	for(i=0;i<height;i++)
 800115e:	2300      	movs	r3, #0
 8001160:	81fb      	strh	r3, [r7, #14]
 8001162:	e010      	b.n	8001186 <LCD_Fill+0x82>
	{
		for(j=0;j<width;j++)
 8001164:	2300      	movs	r3, #0
 8001166:	81bb      	strh	r3, [r7, #12]
 8001168:	e006      	b.n	8001178 <LCD_Fill+0x74>
		Lcd_WriteData_16Bit(color);	//д������
 800116a:	8c3b      	ldrh	r3, [r7, #32]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f8e9 	bl	8000344 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 8001172:	89bb      	ldrh	r3, [r7, #12]
 8001174:	3301      	adds	r3, #1
 8001176:	81bb      	strh	r3, [r7, #12]
 8001178:	89ba      	ldrh	r2, [r7, #12]
 800117a:	897b      	ldrh	r3, [r7, #10]
 800117c:	429a      	cmp	r2, r3
 800117e:	d3f4      	bcc.n	800116a <LCD_Fill+0x66>
	for(i=0;i<height;i++)
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	3301      	adds	r3, #1
 8001184:	81fb      	strh	r3, [r7, #14]
 8001186:	89fa      	ldrh	r2, [r7, #14]
 8001188:	893b      	ldrh	r3, [r7, #8]
 800118a:	429a      	cmp	r2, r3
 800118c:	d3ea      	bcc.n	8001164 <LCD_Fill+0x60>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ���������Ϊȫ��
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <LCD_Fill+0xac>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <LCD_Fill+0xac>)
 8001198:	885b      	ldrh	r3, [r3, #2]
 800119a:	3b01      	subs	r3, #1
 800119c:	b29b      	uxth	r3, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff fe83 	bl	8000eac <LCD_SetWindows>
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000084 	.word	0x20000084

080011b4 <LCD_DrawLine>:
								x2:the ending x coordinate of the line
								y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b08d      	sub	sp, #52	@ 0x34
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4604      	mov	r4, r0
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4623      	mov	r3, r4
 80011c4:	80fb      	strh	r3, [r7, #6]
 80011c6:	4603      	mov	r3, r0
 80011c8:	80bb      	strh	r3, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	807b      	strh	r3, [r7, #2]
 80011ce:	4613      	mov	r3, r2
 80011d0:	803b      	strh	r3, [r7, #0]
	u16 t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;

	delta_x=x2-x1; //������������
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80011e2:	883a      	ldrh	r2, [r7, #0]
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80011ee:	88bb      	ldrh	r3, [r7, #4]
 80011f0:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //���õ�������
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	dd02      	ble.n	80011fe <LCD_DrawLine+0x4a>
 80011f8:	2301      	movs	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e00b      	b.n	8001216 <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//��ֱ��
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <LCD_DrawLine+0x56>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e005      	b.n	8001216 <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	425b      	negs	r3, r3
 8001214:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	2b00      	cmp	r3, #0
 800121a:	dd02      	ble.n	8001222 <LCD_DrawLine+0x6e>
 800121c:	2301      	movs	r3, #1
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	e00b      	b.n	800123a <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//ˮƽ��
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <LCD_DrawLine+0x7a>
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	e005      	b.n	800123a <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	425b      	negs	r3, r3
 8001238:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //ѡȡ��������������
 800123a:	6a3a      	ldr	r2, [r7, #32]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	429a      	cmp	r2, r3
 8001240:	dd02      	ble.n	8001248 <LCD_DrawLine+0x94>
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	e001      	b.n	800124c <LCD_DrawLine+0x98>
	else distance=delta_y;
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//�������
 800124c:	2300      	movs	r3, #0
 800124e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001250:	e02a      	b.n	80012a8 <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//����
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	b29b      	uxth	r3, r3
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	b292      	uxth	r2, r2
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f883 	bl	8000368 <LCD_DrawPoint>
		xerr+=delta_x ;
 8001262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	4413      	add	r3, r2
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y ;
 800126a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	4413      	add	r3, r2
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 8001272:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	429a      	cmp	r2, r3
 8001278:	dd07      	ble.n	800128a <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 800127a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 800128a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	429a      	cmp	r2, r3
 8001290:	dd07      	ble.n	80012a2 <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 8001292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4413      	add	r3, r2
 80012a0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//�������
 80012a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80012a4:	3301      	adds	r3, #1
 80012a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80012a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	3301      	adds	r3, #1
 80012ae:	429a      	cmp	r2, r3
 80012b0:	ddcf      	ble.n	8001252 <LCD_DrawLine+0x9e>
		}
	}
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3734      	adds	r7, #52	@ 0x34
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}

080012bc <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4604      	mov	r4, r0
 80012c4:	4608      	mov	r0, r1
 80012c6:	4611      	mov	r1, r2
 80012c8:	461a      	mov	r2, r3
 80012ca:	4623      	mov	r3, r4
 80012cc:	80fb      	strh	r3, [r7, #6]
 80012ce:	4603      	mov	r3, r0
 80012d0:	80bb      	strh	r3, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	807b      	strh	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;
 80012da:	4b62      	ldr	r3, [pc, #392]	@ (8001464 <LCD_ShowChar+0x1a8>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	817b      	strh	r3, [r7, #10]

	num=num-' ';//�õ�ƫ�ƺ��ֵ
 80012e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012e4:	3b20      	subs	r3, #32
 80012e6:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 80012ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012ee:	085b      	lsrs	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b29c      	uxth	r4, r3
 80012fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001302:	b29a      	uxth	r2, r3
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	b29b      	uxth	r3, r3
 800130a:	3b01      	subs	r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	88b9      	ldrh	r1, [r7, #4]
 8001310:	88f8      	ldrh	r0, [r7, #6]
 8001312:	4622      	mov	r2, r4
 8001314:	f7ff fdca 	bl	8000eac <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 8001318:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800131c:	2b00      	cmp	r3, #0
 800131e:	d143      	bne.n	80013a8 <LCD_ShowChar+0xec>
	{
		for(pos=0;pos<size;pos++)
 8001320:	2300      	movs	r3, #0
 8001322:	73bb      	strb	r3, [r7, #14]
 8001324:	e03a      	b.n	800139c <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8001326:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800132a:	2b0c      	cmp	r3, #12
 800132c:	d10c      	bne.n	8001348 <LCD_ShowChar+0x8c>
 800132e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001332:	7bb9      	ldrb	r1, [r7, #14]
 8001334:	484c      	ldr	r0, [pc, #304]	@ (8001468 <LCD_ShowChar+0x1ac>)
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4403      	add	r3, r0
 8001340:	440b      	add	r3, r1
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	e008      	b.n	800135a <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 8001348:	f897 2020 	ldrb.w	r2, [r7, #32]
 800134c:	7bbb      	ldrb	r3, [r7, #14]
 800134e:	4947      	ldr	r1, [pc, #284]	@ (800146c <LCD_ShowChar+0x1b0>)
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	440a      	add	r2, r1
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 800135a:	2300      	movs	r3, #0
 800135c:	737b      	strb	r3, [r7, #13]
 800135e:	e013      	b.n	8001388 <LCD_ShowChar+0xcc>
		    {
		        if(temp&0x01)Lcd_WriteData_16Bit(fc);
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <LCD_ShowChar+0xb8>
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	4618      	mov	r0, r3
 800136e:	f7fe ffe9 	bl	8000344 <Lcd_WriteData_16Bit>
 8001372:	e003      	b.n	800137c <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc);
 8001374:	883b      	ldrh	r3, [r7, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe ffe4 	bl	8000344 <Lcd_WriteData_16Bit>
				temp>>=1;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001382:	7b7b      	ldrb	r3, [r7, #13]
 8001384:	3301      	adds	r3, #1
 8001386:	737b      	strb	r3, [r7, #13]
 8001388:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	7b7a      	ldrb	r2, [r7, #13]
 8001392:	429a      	cmp	r2, r3
 8001394:	d3e4      	bcc.n	8001360 <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	3301      	adds	r3, #1
 800139a:	73bb      	strb	r3, [r7, #14]
 800139c:	7bba      	ldrb	r2, [r7, #14]
 800139e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d3bf      	bcc.n	8001326 <LCD_ShowChar+0x6a>
 80013a6:	e049      	b.n	800143c <LCD_ShowChar+0x180>
		    }

		}
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	73bb      	strb	r3, [r7, #14]
 80013ac:	e041      	b.n	8001432 <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 80013ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d10c      	bne.n	80013d0 <LCD_ShowChar+0x114>
 80013b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013ba:	7bb9      	ldrb	r1, [r7, #14]
 80013bc:	482a      	ldr	r0, [pc, #168]	@ (8001468 <LCD_ShowChar+0x1ac>)
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4403      	add	r3, r0
 80013c8:	440b      	add	r3, r1
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	73fb      	strb	r3, [r7, #15]
 80013ce:	e008      	b.n	80013e2 <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 80013d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	4925      	ldr	r1, [pc, #148]	@ (800146c <LCD_ShowChar+0x1b0>)
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	440a      	add	r2, r1
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	737b      	strb	r3, [r7, #13]
 80013e6:	e01a      	b.n	800141e <LCD_ShowChar+0x162>
		    {
				POINT_COLOR=fc;
 80013e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001464 <LCD_ShowChar+0x1a8>)
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00c      	beq.n	8001412 <LCD_ShowChar+0x156>
 80013f8:	7b7b      	ldrb	r3, [r7, #13]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	4413      	add	r3, r2
 8001400:	b298      	uxth	r0, r3
 8001402:	7bbb      	ldrb	r3, [r7, #14]
 8001404:	b29a      	uxth	r2, r3
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	4619      	mov	r1, r3
 800140e:	f7fe ffab 	bl	8000368 <LCD_DrawPoint>
		        temp>>=1;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001418:	7b7b      	ldrb	r3, [r7, #13]
 800141a:	3301      	adds	r3, #1
 800141c:	737b      	strb	r3, [r7, #13]
 800141e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001422:	085b      	lsrs	r3, r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	7b7a      	ldrb	r2, [r7, #13]
 8001428:	429a      	cmp	r2, r3
 800142a:	d3dd      	bcc.n	80013e8 <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 800142c:	7bbb      	ldrb	r3, [r7, #14]
 800142e:	3301      	adds	r3, #1
 8001430:	73bb      	strb	r3, [r7, #14]
 8001432:	7bba      	ldrb	r2, [r7, #14]
 8001434:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001438:	429a      	cmp	r2, r3
 800143a:	d3b8      	bcc.n	80013ae <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;
 800143c:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <LCD_ShowChar+0x1a8>)
 800143e:	897b      	ldrh	r3, [r7, #10]
 8001440:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 8001442:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <LCD_ShowChar+0x1b4>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	3b01      	subs	r3, #1
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <LCD_ShowChar+0x1b4>)
 800144c:	885b      	ldrh	r3, [r3, #2]
 800144e:	3b01      	subs	r3, #1
 8001450:	b29b      	uxth	r3, r3
 8001452:	2100      	movs	r1, #0
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fd29 	bl	8000eac <LCD_SetWindows>
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	bf00      	nop
 8001464:	20000094 	.word	0x20000094
 8001468:	08007d2c 	.word	0x08007d2c
 800146c:	080081a0 	.word	0x080081a0
 8001470:	20000084 	.word	0x20000084

08001474 <Show_Str>:
								size:the size of English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af04      	add	r7, sp, #16
 800147a:	4604      	mov	r4, r0
 800147c:	4608      	mov	r0, r1
 800147e:	4611      	mov	r1, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4623      	mov	r3, r4
 8001484:	80fb      	strh	r3, [r7, #6]
 8001486:	4603      	mov	r3, r0
 8001488:	80bb      	strh	r3, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]
 800148e:	4613      	mov	r3, r2
 8001490:	803b      	strh	r3, [r7, #0]
	u16 x0=x;
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ���������
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 800149a:	e061      	b.n	8001560 <Show_Str+0xec>
    {
        if(!bHz)
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d15e      	bne.n	8001560 <Show_Str+0xec>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size))
 80014a2:	88fa      	ldrh	r2, [r7, #6]
 80014a4:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <Show_Str+0x100>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	1acb      	subs	r3, r1, r3
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dc58      	bgt.n	800156a <Show_Str+0xf6>
 80014b8:	88ba      	ldrh	r2, [r7, #4]
 80014ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <Show_Str+0x100>)
 80014bc:	885b      	ldrh	r3, [r3, #2]
 80014be:	4619      	mov	r1, r3
 80014c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014c4:	1acb      	subs	r3, r1, r3
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dc4f      	bgt.n	800156a <Show_Str+0xf6>
			return;
	        if(*str>0x80)bHz=1;//����
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b80      	cmp	r3, #128	@ 0x80
 80014d0:	d902      	bls.n	80014d8 <Show_Str+0x64>
 80014d2:	2301      	movs	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	e043      	b.n	8001560 <Show_Str+0xec>
	        else              //�ַ�
	        {
		        if(*str==0x0D)//���з���
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b0d      	cmp	r3, #13
 80014de:	d10b      	bne.n	80014f8 <Show_Str+0x84>
		        {
		            y+=size;
 80014e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	88bb      	ldrh	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	80bb      	strh	r3, [r7, #4]
					x=x0;
 80014ec:	89bb      	ldrh	r3, [r7, #12]
 80014ee:	80fb      	strh	r3, [r7, #6]
		            str++;
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	3301      	adds	r3, #1
 80014f4:	623b      	str	r3, [r7, #32]
 80014f6:	e030      	b.n	800155a <Show_Str+0xe6>
		        }
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 80014f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d913      	bls.n	8001528 <Show_Str+0xb4>
					{
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	883d      	ldrh	r5, [r7, #0]
 8001506:	887c      	ldrh	r4, [r7, #2]
 8001508:	88b9      	ldrh	r1, [r7, #4]
 800150a:	88f8      	ldrh	r0, [r7, #6]
 800150c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001510:	9202      	str	r2, [sp, #8]
 8001512:	2210      	movs	r2, #16
 8001514:	9201      	str	r2, [sp, #4]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	462b      	mov	r3, r5
 800151a:	4622      	mov	r2, r4
 800151c:	f7ff fece 	bl	80012bc <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ��
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	3308      	adds	r3, #8
 8001524:	80fb      	strh	r3, [r7, #6]
 8001526:	e018      	b.n	800155a <Show_Str+0xe6>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	883d      	ldrh	r5, [r7, #0]
 800152e:	887c      	ldrh	r4, [r7, #2]
 8001530:	88b9      	ldrh	r1, [r7, #4]
 8001532:	88f8      	ldrh	r0, [r7, #6]
 8001534:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001538:	9202      	str	r2, [sp, #8]
 800153a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800153e:	9201      	str	r2, [sp, #4]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	462b      	mov	r3, r5
 8001544:	4622      	mov	r2, r4
 8001546:	f7ff feb9 	bl	80012bc <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ��
 800154a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	4413      	add	r3, r2
 8001558:	80fb      	strh	r3, [r7, #6]
					}
				}
				str++;
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	3301      	adds	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
    while(*str!=0)//����δ����
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d199      	bne.n	800149c <Show_Str+0x28>
 8001568:	e000      	b.n	800156c <Show_Str+0xf8>
			return;
 800156a:	bf00      	nop

	        }
        }
    }
}
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bdb0      	pop	{r4, r5, r7, pc}
 8001572:	bf00      	nop
 8001574:	20000084 	.word	0x20000084

08001578 <delay_init>:
// Initialize delay function
// When using uC/OS, this function initializes the uC/OS clock tick.
// The SYSTICK clock is fixed to the AHB clock.
// SYSCLK: System clock frequency
void delay_init(u8 SYSCLK)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS                         // If OS support is needed
    u32 reload;
#endif
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); // SysTick frequency is HCLK
 8001582:	2004      	movs	r0, #4
 8001584:	f003 fc54 	bl	8004e30 <HAL_SYSTICK_CLKSourceConfig>
    fac_us=SYSCLK;                        // fac_us is used regardless of OS usage
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a03      	ldr	r2, [pc, #12]	@ (8001598 <delay_init+0x20>)
 800158c:	6013      	str	r3, [r2, #0]
    SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk; // Enable SysTick interrupt
    SysTick->LOAD=reload;                   // Interrupt every 1/OS_TICKS_PER_SEC second
    SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; // Enable SysTick
#else
#endif
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000098 	.word	0x20000098

0800159c <delay_us>:

// Delay for nus microseconds
// nus: Number of microseconds to delay
// nus: 0~190887435 (maximum value is 2^32/fac_us when fac_us=22.5)
void delay_us(u32 nus)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	@ 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told,tnow,tcnt=0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
    u32 reload=SysTick->LOAD;                // Value of LOAD
 80015a8:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <delay_us+0x74>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	617b      	str	r3, [r7, #20]
    ticks=nus*fac_us;                        // Number of ticks needed
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <delay_us+0x78>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	613b      	str	r3, [r7, #16]
    told=SysTick->VAL;                        // Counter value upon entry
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <delay_us+0x74>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	61fb      	str	r3, [r7, #28]
    while(1)
    {
        tnow=SysTick->VAL;
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <delay_us+0x74>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	60fb      	str	r3, [r7, #12]
        if(tnow!=told)
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d0f8      	beq.n	80015c0 <delay_us+0x24>
        {
            if(tnow<told)tcnt+=told-tnow;    // Note that SYSTICK is a decrementing counter.
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d206      	bcs.n	80015e4 <delay_us+0x48>
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4413      	add	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	e007      	b.n	80015f4 <delay_us+0x58>
            else tcnt+=reload-tnow+told;
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad2      	subs	r2, r2, r3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4413      	add	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
            told=tnow;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	61fb      	str	r3, [r7, #28]
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d200      	bcs.n	8001602 <delay_us+0x66>
        tnow=SysTick->VAL;
 8001600:	e7de      	b.n	80015c0 <delay_us+0x24>
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 8001602:	bf00      	nop
        }
    };
}
 8001604:	bf00      	nop
 8001606:	3724      	adds	r7, #36	@ 0x24
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e010 	.word	0xe000e010
 8001614:	20000098 	.word	0x20000098

08001618 <delay_ms>:

// Delay for nms milliseconds
// nms: Number of milliseconds to delay
void delay_ms(u16 nms)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
    u32 i;
    for(i=0;i<nms;i++) delay_us(1000);
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	e006      	b.n	8001636 <delay_ms+0x1e>
 8001628:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800162c:	f7ff ffb6 	bl	800159c <delay_us>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	429a      	cmp	r2, r3
 800163c:	d3f4      	bcc.n	8001628 <delay_ms+0x10>
}
 800163e:	bf00      	nop
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <DinoDetector>:
static uint16_t obs_y2s=0;	// ..



void DinoDetector(uint16_t altitude)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	// include jumping
	dino_y1 = 160 - altitude;
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <DinoDetector+0x30>)
 800165c:	801a      	strh	r2, [r3, #0]
	dino_y2 = 207 - altitude;
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <DinoDetector+0x34>)
 8001668:	801a      	strh	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000002 	.word	0x20000002
 800167c:	20000006 	.word	0x20000006

08001680 <ObsDetector>:



void ObsDetector(uint16_t shift)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
	if(obstacle_type == 1)
 800168a:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <ObsDetector+0xc8>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d112      	bne.n	80016b8 <ObsDetector+0x38>
	{
		// include moving
		obs_x1 = 340 - shift;
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	f5c3 73aa 	rsb	r3, r3, #340	@ 0x154
 8001698:	b29a      	uxth	r2, r3
 800169a:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <ObsDetector+0xcc>)
 800169c:	801a      	strh	r2, [r3, #0]
		obs_y1 = 150;
 800169e:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <ObsDetector+0xd0>)
 80016a0:	2296      	movs	r2, #150	@ 0x96
 80016a2:	801a      	strh	r2, [r3, #0]
		obs_x2 = 372 - shift;
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <ObsDetector+0xd4>)
 80016ae:	801a      	strh	r2, [r3, #0]
		obs_y2 = 210;
 80016b0:	4b29      	ldr	r3, [pc, #164]	@ (8001758 <ObsDetector+0xd8>)
 80016b2:	22d2      	movs	r2, #210	@ 0xd2
 80016b4:	801a      	strh	r2, [r3, #0]
		obs_x1s = 379 - shift;
		obs_y1s = 170;
		obs_x2s = 401 - shift;
		obs_y2s = 210;
	}
}
 80016b6:	e040      	b.n	800173a <ObsDetector+0xba>
	else if(obstacle_type == 2)
 80016b8:	4b23      	ldr	r3, [pc, #140]	@ (8001748 <ObsDetector+0xc8>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d112      	bne.n	80016e6 <ObsDetector+0x66>
		obs_x1 = 344 - shift;
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b20      	ldr	r3, [pc, #128]	@ (800174c <ObsDetector+0xcc>)
 80016ca:	801a      	strh	r2, [r3, #0]
		obs_y1 = 170;
 80016cc:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <ObsDetector+0xd0>)
 80016ce:	22aa      	movs	r2, #170	@ 0xaa
 80016d0:	801a      	strh	r2, [r3, #0]
		obs_x2 = 366 - shift;
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <ObsDetector+0xd4>)
 80016dc:	801a      	strh	r2, [r3, #0]
		obs_y2 = 210;
 80016de:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <ObsDetector+0xd8>)
 80016e0:	22d2      	movs	r2, #210	@ 0xd2
 80016e2:	801a      	strh	r2, [r3, #0]
}
 80016e4:	e029      	b.n	800173a <ObsDetector+0xba>
	else if(obstacle_type == 3)
 80016e6:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <ObsDetector+0xc8>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d125      	bne.n	800173a <ObsDetector+0xba>
		obs_x1 = 344 - shift;
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <ObsDetector+0xcc>)
 80016f8:	801a      	strh	r2, [r3, #0]
		obs_y1 = 150;
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <ObsDetector+0xd0>)
 80016fc:	2296      	movs	r2, #150	@ 0x96
 80016fe:	801a      	strh	r2, [r3, #0]
		obs_x2 = 376 - shift;
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <ObsDetector+0xd4>)
 800170a:	801a      	strh	r2, [r3, #0]
		obs_y2 = 210;
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <ObsDetector+0xd8>)
 800170e:	22d2      	movs	r2, #210	@ 0xd2
 8001710:	801a      	strh	r2, [r3, #0]
		obs_x1s = 379 - shift;
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8001718:	3301      	adds	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <ObsDetector+0xdc>)
 800171e:	801a      	strh	r2, [r3, #0]
		obs_y1s = 170;
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <ObsDetector+0xe0>)
 8001722:	22aa      	movs	r2, #170	@ 0xaa
 8001724:	801a      	strh	r2, [r3, #0]
		obs_x2s = 401 - shift;
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 800172c:	3301      	adds	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <ObsDetector+0xe4>)
 8001732:	801a      	strh	r2, [r3, #0]
		obs_y2s = 210;
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <ObsDetector+0xe8>)
 8001736:	22d2      	movs	r2, #210	@ 0xd2
 8001738:	801a      	strh	r2, [r3, #0]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008
 800174c:	2000009c 	.word	0x2000009c
 8001750:	2000009e 	.word	0x2000009e
 8001754:	200000a0 	.word	0x200000a0
 8001758:	200000a2 	.word	0x200000a2
 800175c:	200000a4 	.word	0x200000a4
 8001760:	200000a6 	.word	0x200000a6
 8001764:	200000a8 	.word	0x200000a8
 8001768:	200000aa 	.word	0x200000aa

0800176c <CollisionDetector>:



uint8_t CollisionDetector(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
	// check if coordinates do not overlap
	if(((obs_x1 <= dino_x2) && (obs_x2 >= dino_x1) && (dino_y2 >= obs_y1)) ||			// first obstacle
 8001770:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <CollisionDetector+0xe8>)
 8001772:	881a      	ldrh	r2, [r3, #0]
 8001774:	4b38      	ldr	r3, [pc, #224]	@ (8001858 <CollisionDetector+0xec>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d80b      	bhi.n	8001794 <CollisionDetector+0x28>
 800177c:	4b37      	ldr	r3, [pc, #220]	@ (800185c <CollisionDetector+0xf0>)
 800177e:	881a      	ldrh	r2, [r3, #0]
 8001780:	4b37      	ldr	r3, [pc, #220]	@ (8001860 <CollisionDetector+0xf4>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d305      	bcc.n	8001794 <CollisionDetector+0x28>
 8001788:	4b36      	ldr	r3, [pc, #216]	@ (8001864 <CollisionDetector+0xf8>)
 800178a:	881a      	ldrh	r2, [r3, #0]
 800178c:	4b36      	ldr	r3, [pc, #216]	@ (8001868 <CollisionDetector+0xfc>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d211      	bcs.n	80017b8 <CollisionDetector+0x4c>
			((obs_x1s <= dino_x2) && (obs_x2s >= dino_x1) && (dino_y2 >= obs_y1s)) )	// second obstacle (if is)
 8001794:	4b35      	ldr	r3, [pc, #212]	@ (800186c <CollisionDetector+0x100>)
 8001796:	881a      	ldrh	r2, [r3, #0]
 8001798:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <CollisionDetector+0xec>)
 800179a:	881b      	ldrh	r3, [r3, #0]
	if(((obs_x1 <= dino_x2) && (obs_x2 >= dino_x1) && (dino_y2 >= obs_y1)) ||			// first obstacle
 800179c:	429a      	cmp	r2, r3
 800179e:	d853      	bhi.n	8001848 <CollisionDetector+0xdc>
			((obs_x1s <= dino_x2) && (obs_x2s >= dino_x1) && (dino_y2 >= obs_y1s)) )	// second obstacle (if is)
 80017a0:	4b33      	ldr	r3, [pc, #204]	@ (8001870 <CollisionDetector+0x104>)
 80017a2:	881a      	ldrh	r2, [r3, #0]
 80017a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001860 <CollisionDetector+0xf4>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d34d      	bcc.n	8001848 <CollisionDetector+0xdc>
 80017ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001864 <CollisionDetector+0xf8>)
 80017ae:	881a      	ldrh	r2, [r3, #0]
 80017b0:	4b30      	ldr	r3, [pc, #192]	@ (8001874 <CollisionDetector+0x108>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d347      	bcc.n	8001848 <CollisionDetector+0xdc>
	{
		// obstacle get into half of dino while jumping XD
		if( ((obs_x1 < dino_x2) && (obs_x1 > ((dino_x1+dino_x2)/2)) && (dino_y2 < ((obs_y1+obs_y2)/2))) ||			// first obstacle
 80017b8:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <CollisionDetector+0xe8>)
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <CollisionDetector+0xec>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d21b      	bcs.n	80017fc <CollisionDetector+0x90>
 80017c4:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <CollisionDetector+0xe8>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <CollisionDetector+0xf4>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <CollisionDetector+0xec>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	0fda      	lsrs	r2, r3, #31
 80017d8:	4413      	add	r3, r2
 80017da:	105b      	asrs	r3, r3, #1
 80017dc:	4299      	cmp	r1, r3
 80017de:	dd0d      	ble.n	80017fc <CollisionDetector+0x90>
 80017e0:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <CollisionDetector+0xf8>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <CollisionDetector+0xfc>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <CollisionDetector+0x10c>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	0fda      	lsrs	r2, r3, #31
 80017f4:	4413      	add	r3, r2
 80017f6:	105b      	asrs	r3, r3, #1
 80017f8:	4299      	cmp	r1, r3
 80017fa:	db21      	blt.n	8001840 <CollisionDetector+0xd4>
				((obs_x1s < dino_x2) && (obs_x1s > ((dino_x1+dino_x2)/2)) && (dino_y2 < ((obs_y1s+obs_y2s)/2))) )	// second obstacle (if is)
 80017fc:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <CollisionDetector+0x100>)
 80017fe:	881a      	ldrh	r2, [r3, #0]
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <CollisionDetector+0xec>)
 8001802:	881b      	ldrh	r3, [r3, #0]
		if( ((obs_x1 < dino_x2) && (obs_x1 > ((dino_x1+dino_x2)/2)) && (dino_y2 < ((obs_y1+obs_y2)/2))) ||			// first obstacle
 8001804:	429a      	cmp	r2, r3
 8001806:	d21d      	bcs.n	8001844 <CollisionDetector+0xd8>
				((obs_x1s < dino_x2) && (obs_x1s > ((dino_x1+dino_x2)/2)) && (dino_y2 < ((obs_y1s+obs_y2s)/2))) )	// second obstacle (if is)
 8001808:	4b18      	ldr	r3, [pc, #96]	@ (800186c <CollisionDetector+0x100>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <CollisionDetector+0xf4>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <CollisionDetector+0xec>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	4413      	add	r3, r2
 800181a:	0fda      	lsrs	r2, r3, #31
 800181c:	4413      	add	r3, r2
 800181e:	105b      	asrs	r3, r3, #1
 8001820:	4299      	cmp	r1, r3
 8001822:	dd0f      	ble.n	8001844 <CollisionDetector+0xd8>
 8001824:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <CollisionDetector+0xf8>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <CollisionDetector+0x108>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	4b12      	ldr	r3, [pc, #72]	@ (800187c <CollisionDetector+0x110>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	4413      	add	r3, r2
 8001836:	0fda      	lsrs	r2, r3, #31
 8001838:	4413      	add	r3, r2
 800183a:	105b      	asrs	r3, r3, #1
 800183c:	4299      	cmp	r1, r3
 800183e:	da01      	bge.n	8001844 <CollisionDetector+0xd8>
		{
			return 2;	// wait a moment
 8001840:	2302      	movs	r3, #2
 8001842:	e002      	b.n	800184a <CollisionDetector+0xde>
		}

		else return 1;	// collision detected GAME OVER
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <CollisionDetector+0xde>
	}

	else return 0;	// no colision WP
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	2000009c 	.word	0x2000009c
 8001858:	20000004 	.word	0x20000004
 800185c:	200000a0 	.word	0x200000a0
 8001860:	20000000 	.word	0x20000000
 8001864:	20000006 	.word	0x20000006
 8001868:	2000009e 	.word	0x2000009e
 800186c:	200000a4 	.word	0x200000a4
 8001870:	200000a8 	.word	0x200000a8
 8001874:	200000a6 	.word	0x200000a6
 8001878:	200000a2 	.word	0x200000a2
 800187c:	200000aa 	.word	0x200000aa

08001880 <DinoAnimation>:

// ------------------------------------------------------------------------------------
// ----------------------------------- ANIMATIONS -------------------------------------
// ------------------------------------------------------------------------------------
void DinoAnimation(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	if((TOUCH==0) || (jump_step != 0))	// jumping
 8001884:	2110      	movs	r1, #16
 8001886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188a:	f003 fc77 	bl	800517c <HAL_GPIO_ReadPin>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <DinoAnimation+0x1e>
 8001894:	4b5e      	ldr	r3, [pc, #376]	@ (8001a10 <DinoAnimation+0x190>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 8092 	beq.w	80019c2 <DinoAnimation+0x142>
	{
		if(refresh == 1)
 800189e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a14 <DinoAnimation+0x194>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	f040 80b2 	bne.w	8001a0c <DinoAnimation+0x18c>
		{
			switch(jump_step)
 80018a8:	4b59      	ldr	r3, [pc, #356]	@ (8001a10 <DinoAnimation+0x190>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d047      	beq.n	8001940 <DinoAnimation+0xc0>
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db61      	blt.n	8001978 <DinoAnimation+0xf8>
 80018b4:	2b3b      	cmp	r3, #59	@ 0x3b
 80018b6:	dc5f      	bgt.n	8001978 <DinoAnimation+0xf8>
 80018b8:	2b1e      	cmp	r3, #30
 80018ba:	db5d      	blt.n	8001978 <DinoAnimation+0xf8>
 80018bc:	3b1e      	subs	r3, #30
 80018be:	2b1d      	cmp	r3, #29
 80018c0:	d85a      	bhi.n	8001978 <DinoAnimation+0xf8>
 80018c2:	a201      	add	r2, pc, #4	@ (adr r2, 80018c8 <DinoAnimation+0x48>)
 80018c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c8:	08001949 	.word	0x08001949
 80018cc:	08001979 	.word	0x08001979
 80018d0:	08001979 	.word	0x08001979
 80018d4:	08001979 	.word	0x08001979
 80018d8:	08001979 	.word	0x08001979
 80018dc:	08001979 	.word	0x08001979
 80018e0:	08001979 	.word	0x08001979
 80018e4:	08001979 	.word	0x08001979
 80018e8:	08001979 	.word	0x08001979
 80018ec:	08001979 	.word	0x08001979
 80018f0:	08001951 	.word	0x08001951
 80018f4:	08001979 	.word	0x08001979
 80018f8:	08001979 	.word	0x08001979
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001979 	.word	0x08001979
 8001904:	08001979 	.word	0x08001979
 8001908:	08001961 	.word	0x08001961
 800190c:	08001979 	.word	0x08001979
 8001910:	08001979 	.word	0x08001979
 8001914:	08001969 	.word	0x08001969
 8001918:	08001979 	.word	0x08001979
 800191c:	08001979 	.word	0x08001979
 8001920:	08001979 	.word	0x08001979
 8001924:	08001979 	.word	0x08001979
 8001928:	08001979 	.word	0x08001979
 800192c:	08001979 	.word	0x08001979
 8001930:	08001979 	.word	0x08001979
 8001934:	08001979 	.word	0x08001979
 8001938:	08001979 	.word	0x08001979
 800193c:	08001971 	.word	0x08001971
			{
				case 0:
					velocity = 4;	//30
 8001940:	4b35      	ldr	r3, [pc, #212]	@ (8001a18 <DinoAnimation+0x198>)
 8001942:	2204      	movs	r2, #4
 8001944:	701a      	strb	r2, [r3, #0]
					break;
 8001946:	e018      	b.n	800197a <DinoAnimation+0xfa>
				case 30:
					velocity = 2;	//10
 8001948:	4b33      	ldr	r3, [pc, #204]	@ (8001a18 <DinoAnimation+0x198>)
 800194a:	2202      	movs	r2, #2
 800194c:	701a      	strb	r2, [r3, #0]
					break;
 800194e:	e014      	b.n	800197a <DinoAnimation+0xfa>
				case 40:
					velocity = 1;	//3
 8001950:	4b31      	ldr	r3, [pc, #196]	@ (8001a18 <DinoAnimation+0x198>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
					break;
 8001956:	e010      	b.n	800197a <DinoAnimation+0xfa>
				case 43:
					velocity = 0;	//3
 8001958:	4b2f      	ldr	r3, [pc, #188]	@ (8001a18 <DinoAnimation+0x198>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
					break;
 800195e:	e00c      	b.n	800197a <DinoAnimation+0xfa>
				case 46:
					velocity = -1;	//3
 8001960:	4b2d      	ldr	r3, [pc, #180]	@ (8001a18 <DinoAnimation+0x198>)
 8001962:	22ff      	movs	r2, #255	@ 0xff
 8001964:	701a      	strb	r2, [r3, #0]
					break;
 8001966:	e008      	b.n	800197a <DinoAnimation+0xfa>
				case 49:
					velocity = -2;	//10
 8001968:	4b2b      	ldr	r3, [pc, #172]	@ (8001a18 <DinoAnimation+0x198>)
 800196a:	22fe      	movs	r2, #254	@ 0xfe
 800196c:	701a      	strb	r2, [r3, #0]
					break;
 800196e:	e004      	b.n	800197a <DinoAnimation+0xfa>
				case 59:
					velocity = -4;	//30
 8001970:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <DinoAnimation+0x198>)
 8001972:	22fc      	movs	r2, #252	@ 0xfc
 8001974:	701a      	strb	r2, [r3, #0]
					break;
 8001976:	e000      	b.n	800197a <DinoAnimation+0xfa>
				default:
					break;
 8001978:	bf00      	nop
			}

			jump_step++;
 800197a:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <DinoAnimation+0x190>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <DinoAnimation+0x190>)
 8001984:	801a      	strh	r2, [r3, #0]

			if(jump_step>88)	// in fact "jumping resolution"
 8001986:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <DinoAnimation+0x190>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	2b58      	cmp	r3, #88	@ 0x58
 800198c:	d902      	bls.n	8001994 <DinoAnimation+0x114>
			{
				jump_step = 0;	// get back on base position
 800198e:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <DinoAnimation+0x190>)
 8001990:	2200      	movs	r2, #0
 8001992:	801a      	strh	r2, [r3, #0]
			}

			jump_pos = jump_pos + velocity;		// calculate position while jumping
 8001994:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <DinoAnimation+0x198>)
 8001996:	f993 3000 	ldrsb.w	r3, [r3]
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <DinoAnimation+0x19c>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <DinoAnimation+0x19c>)
 80019a6:	801a      	strh	r2, [r3, #0]

			DrawDino(jump_pos,0,0);
 80019a8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <DinoAnimation+0x19c>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fb41 	bl	8002038 <DrawDino>
			DinoDetector(jump_pos);
 80019b6:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <DinoAnimation+0x19c>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fe44 	bl	8001648 <DinoDetector>
		if(refresh == 1)
 80019c0:	e024      	b.n	8001a0c <DinoAnimation+0x18c>
		}
	}

	else	// walking with leg animation
	{
		if(refresh == 1)
 80019c2:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <DinoAnimation+0x194>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d120      	bne.n	8001a0c <DinoAnimation+0x18c>
		{
			walk_step++;
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <DinoAnimation+0x1a0>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <DinoAnimation+0x1a0>)
 80019d4:	701a      	strb	r2, [r3, #0]

			if(walk_step>40)		//delay between steps
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <DinoAnimation+0x1a0>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b28      	cmp	r3, #40	@ 0x28
 80019dc:	d902      	bls.n	80019e4 <DinoAnimation+0x164>
			{
				walk_step = 0;
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <DinoAnimation+0x1a0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
			}

			if(walk_step < 20)
 80019e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <DinoAnimation+0x1a0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b13      	cmp	r3, #19
 80019ea:	d805      	bhi.n	80019f8 <DinoAnimation+0x178>
			{
				DrawDino(0,0,3);
 80019ec:	2203      	movs	r2, #3
 80019ee:	2100      	movs	r1, #0
 80019f0:	2000      	movs	r0, #0
 80019f2:	f000 fb21 	bl	8002038 <DrawDino>
				DrawDino(0,3,0);
			}

		}
	}
}
 80019f6:	e009      	b.n	8001a0c <DinoAnimation+0x18c>
			else if(walk_step >= 20)
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <DinoAnimation+0x1a0>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b13      	cmp	r3, #19
 80019fe:	d905      	bls.n	8001a0c <DinoAnimation+0x18c>
				DrawDino(0,3,0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2103      	movs	r1, #3
 8001a04:	2000      	movs	r0, #0
 8001a06:	f000 fb17 	bl	8002038 <DrawDino>
}
 8001a0a:	e7ff      	b.n	8001a0c <DinoAnimation+0x18c>
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200000ac 	.word	0x200000ac
 8001a14:	20000168 	.word	0x20000168
 8001a18:	200000b0 	.word	0x200000b0
 8001a1c:	200000ae 	.word	0x200000ae
 8001a20:	200000b1 	.word	0x200000b1

08001a24 <ObstacleRandomizer>:

void ObstacleRandomizer(void)	// place random type of obstacle
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	RandomNumbers();
 8001a28:	f001 fc9e 	bl	8003368 <RandomNumbers>
	if(adc_value < 1600)
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <ObstacleRandomizer+0x48>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001a34:	d203      	bcs.n	8001a3e <ObstacleRandomizer+0x1a>
	{
		obstacle_type = 1;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <ObstacleRandomizer+0x4c>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
		{
			obstacle_type = 1;
		}

	}
}
 8001a3c:	e013      	b.n	8001a66 <ObstacleRandomizer+0x42>
	else if(adc_value < 1800)
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <ObstacleRandomizer+0x48>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001a46:	d203      	bcs.n	8001a50 <ObstacleRandomizer+0x2c>
		obstacle_type = 2;
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <ObstacleRandomizer+0x4c>)
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	701a      	strb	r2, [r3, #0]
}
 8001a4e:	e00a      	b.n	8001a66 <ObstacleRandomizer+0x42>
		if(spd > 2)
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <ObstacleRandomizer+0x50>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d903      	bls.n	8001a60 <ObstacleRandomizer+0x3c>
			obstacle_type = 3;
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <ObstacleRandomizer+0x4c>)
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	701a      	strb	r2, [r3, #0]
}
 8001a5e:	e002      	b.n	8001a66 <ObstacleRandomizer+0x42>
			obstacle_type = 1;
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <ObstacleRandomizer+0x4c>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000164 	.word	0x20000164
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000009 	.word	0x20000009

08001a78 <ObstacleAnimation>:

uint8_t slicer=1;

void ObstacleAnimation(uint8_t obs_acc)		// obs_acc - obstacle accelerate (max 7 if obs_acc = 13)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af04      	add	r7, sp, #16
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	if(obs_refresh==0)
 8001a82:	4b91      	ldr	r3, [pc, #580]	@ (8001cc8 <ObstacleAnimation+0x250>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 811a 	bne.w	8001cc0 <ObstacleAnimation+0x248>
	{
		obs_step++;
 8001a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8001ccc <ObstacleAnimation+0x254>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	4b8d      	ldr	r3, [pc, #564]	@ (8001ccc <ObstacleAnimation+0x254>)
 8001a96:	801a      	strh	r2, [r3, #0]

		switch(obs_acc)		// calculate obstacle speed
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	f200 8093 	bhi.w	8001bc8 <ObstacleAnimation+0x150>
 8001aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa8 <ObstacleAnimation+0x30>)
 8001aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa8:	08001add 	.word	0x08001add
 8001aac:	08001ae5 	.word	0x08001ae5
 8001ab0:	08001b03 	.word	0x08001b03
 8001ab4:	08001b0b 	.word	0x08001b0b
 8001ab8:	08001b29 	.word	0x08001b29
 8001abc:	08001b31 	.word	0x08001b31
 8001ac0:	08001b4f 	.word	0x08001b4f
 8001ac4:	08001b57 	.word	0x08001b57
 8001ac8:	08001b75 	.word	0x08001b75
 8001acc:	08001b7d 	.word	0x08001b7d
 8001ad0:	08001b9b 	.word	0x08001b9b
 8001ad4:	08001ba3 	.word	0x08001ba3
 8001ad8:	08001bc1 	.word	0x08001bc1
		{
			case 1:
				obs_acc_temp = 1;
 8001adc:	4b7c      	ldr	r3, [pc, #496]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
				break;
 8001ae2:	e075      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 2:
				if(obs_step%2 == 0) obs_acc_temp = 1; else obs_acc_temp = 2;
 8001ae4:	4b79      	ldr	r3, [pc, #484]	@ (8001ccc <ObstacleAnimation+0x254>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d103      	bne.n	8001afa <ObstacleAnimation+0x82>
 8001af2:	4b77      	ldr	r3, [pc, #476]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
				break;
 8001af8:	e06a      	b.n	8001bd0 <ObstacleAnimation+0x158>
				if(obs_step%2 == 0) obs_acc_temp = 1; else obs_acc_temp = 2;
 8001afa:	4b75      	ldr	r3, [pc, #468]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001afc:	2202      	movs	r2, #2
 8001afe:	701a      	strb	r2, [r3, #0]
				break;
 8001b00:	e066      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 3:
				obs_acc_temp = 2;
 8001b02:	4b73      	ldr	r3, [pc, #460]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b04:	2202      	movs	r2, #2
 8001b06:	701a      	strb	r2, [r3, #0]
				break;
 8001b08:	e062      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 4:
				if(obs_step%2 == 0) obs_acc_temp = 2; else obs_acc_temp = 3;
 8001b0a:	4b70      	ldr	r3, [pc, #448]	@ (8001ccc <ObstacleAnimation+0x254>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d103      	bne.n	8001b20 <ObstacleAnimation+0xa8>
 8001b18:	4b6d      	ldr	r3, [pc, #436]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	701a      	strb	r2, [r3, #0]
				break;
 8001b1e:	e057      	b.n	8001bd0 <ObstacleAnimation+0x158>
				if(obs_step%2 == 0) obs_acc_temp = 2; else obs_acc_temp = 3;
 8001b20:	4b6b      	ldr	r3, [pc, #428]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b22:	2203      	movs	r2, #3
 8001b24:	701a      	strb	r2, [r3, #0]
				break;
 8001b26:	e053      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 5:
				obs_acc_temp = 3;
 8001b28:	4b69      	ldr	r3, [pc, #420]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	701a      	strb	r2, [r3, #0]
				break;
 8001b2e:	e04f      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 6:
				if(obs_step%2 == 0) obs_acc_temp = 3; else obs_acc_temp = 4;
 8001b30:	4b66      	ldr	r3, [pc, #408]	@ (8001ccc <ObstacleAnimation+0x254>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <ObstacleAnimation+0xce>
 8001b3e:	4b64      	ldr	r3, [pc, #400]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b40:	2203      	movs	r2, #3
 8001b42:	701a      	strb	r2, [r3, #0]
				break;
 8001b44:	e044      	b.n	8001bd0 <ObstacleAnimation+0x158>
				if(obs_step%2 == 0) obs_acc_temp = 3; else obs_acc_temp = 4;
 8001b46:	4b62      	ldr	r3, [pc, #392]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b48:	2204      	movs	r2, #4
 8001b4a:	701a      	strb	r2, [r3, #0]
				break;
 8001b4c:	e040      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 7:
				obs_acc_temp = 4;
 8001b4e:	4b60      	ldr	r3, [pc, #384]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b50:	2204      	movs	r2, #4
 8001b52:	701a      	strb	r2, [r3, #0]
				break;
 8001b54:	e03c      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 8:
				if(obs_step%2 == 0) obs_acc_temp = 4; else obs_acc_temp = 5;
 8001b56:	4b5d      	ldr	r3, [pc, #372]	@ (8001ccc <ObstacleAnimation+0x254>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d103      	bne.n	8001b6c <ObstacleAnimation+0xf4>
 8001b64:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b66:	2204      	movs	r2, #4
 8001b68:	701a      	strb	r2, [r3, #0]
				break;
 8001b6a:	e031      	b.n	8001bd0 <ObstacleAnimation+0x158>
				if(obs_step%2 == 0) obs_acc_temp = 4; else obs_acc_temp = 5;
 8001b6c:	4b58      	ldr	r3, [pc, #352]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b6e:	2205      	movs	r2, #5
 8001b70:	701a      	strb	r2, [r3, #0]
				break;
 8001b72:	e02d      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 9:
				obs_acc_temp = 5;
 8001b74:	4b56      	ldr	r3, [pc, #344]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b76:	2205      	movs	r2, #5
 8001b78:	701a      	strb	r2, [r3, #0]
				break;
 8001b7a:	e029      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 10:
				if(obs_step%2 == 0) obs_acc_temp = 5; else obs_acc_temp = 6;
 8001b7c:	4b53      	ldr	r3, [pc, #332]	@ (8001ccc <ObstacleAnimation+0x254>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <ObstacleAnimation+0x11a>
 8001b8a:	4b51      	ldr	r3, [pc, #324]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	701a      	strb	r2, [r3, #0]
				break;
 8001b90:	e01e      	b.n	8001bd0 <ObstacleAnimation+0x158>
				if(obs_step%2 == 0) obs_acc_temp = 5; else obs_acc_temp = 6;
 8001b92:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b94:	2206      	movs	r2, #6
 8001b96:	701a      	strb	r2, [r3, #0]
				break;
 8001b98:	e01a      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 11:
				obs_acc_temp = 6;
 8001b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001b9c:	2206      	movs	r2, #6
 8001b9e:	701a      	strb	r2, [r3, #0]
				break;
 8001ba0:	e016      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 12:
				if(obs_step%2 == 0) obs_acc_temp = 6; else obs_acc_temp = 7;
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ccc <ObstacleAnimation+0x254>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d103      	bne.n	8001bb8 <ObstacleAnimation+0x140>
 8001bb0:	4b47      	ldr	r3, [pc, #284]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001bb2:	2206      	movs	r2, #6
 8001bb4:	701a      	strb	r2, [r3, #0]
				break;
 8001bb6:	e00b      	b.n	8001bd0 <ObstacleAnimation+0x158>
				if(obs_step%2 == 0) obs_acc_temp = 6; else obs_acc_temp = 7;
 8001bb8:	4b45      	ldr	r3, [pc, #276]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001bba:	2207      	movs	r2, #7
 8001bbc:	701a      	strb	r2, [r3, #0]
				break;
 8001bbe:	e007      	b.n	8001bd0 <ObstacleAnimation+0x158>
			case 13:
				obs_acc_temp = 7;
 8001bc0:	4b43      	ldr	r3, [pc, #268]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	701a      	strb	r2, [r3, #0]
				break;
 8001bc6:	e003      	b.n	8001bd0 <ObstacleAnimation+0x158>
			default:
				obs_acc_temp = 0;
 8001bc8:	4b41      	ldr	r3, [pc, #260]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
				break;
 8001bce:	bf00      	nop
		}

		obs_pos = obs_pos + obs_acc_temp;	// calculate obstacle position
 8001bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd0 <ObstacleAnimation+0x258>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd4 <ObstacleAnimation+0x25c>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd4 <ObstacleAnimation+0x25c>)
 8001be0:	801a      	strh	r2, [r3, #0]


		// CALCULATE SCORE
		if((obs_pos/slicer) > 50)	// give point 4 times per obstacle
 8001be2:	4b3c      	ldr	r3, [pc, #240]	@ (8001cd4 <ObstacleAnimation+0x25c>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <ObstacleAnimation+0x260>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bf0:	2b32      	cmp	r3, #50	@ 0x32
 8001bf2:	dd2c      	ble.n	8001c4e <ObstacleAnimation+0x1d6>
		{
			score++;
 8001bf4:	4b39      	ldr	r3, [pc, #228]	@ (8001cdc <ObstacleAnimation+0x264>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	4b37      	ldr	r3, [pc, #220]	@ (8001cdc <ObstacleAnimation+0x264>)
 8001bfe:	801a      	strh	r2, [r3, #0]
			slicer++;
 8001c00:	4b35      	ldr	r3, [pc, #212]	@ (8001cd8 <ObstacleAnimation+0x260>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <ObstacleAnimation+0x260>)
 8001c0a:	701a      	strb	r2, [r3, #0]

			Show_Str(220,20,BLACK,WHITE,"     ",16,0);			// reset previous score
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	2310      	movs	r3, #16
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	4b32      	ldr	r3, [pc, #200]	@ (8001ce0 <ObstacleAnimation+0x268>)
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2114      	movs	r1, #20
 8001c20:	20dc      	movs	r0, #220	@ 0xdc
 8001c22:	f7ff fc27 	bl	8001474 <Show_Str>
			sprintf(score_char,"%d",score);
 8001c26:	4b2d      	ldr	r3, [pc, #180]	@ (8001cdc <ObstacleAnimation+0x264>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	492d      	ldr	r1, [pc, #180]	@ (8001ce4 <ObstacleAnimation+0x26c>)
 8001c2e:	482e      	ldr	r0, [pc, #184]	@ (8001ce8 <ObstacleAnimation+0x270>)
 8001c30:	f005 fbca 	bl	80073c8 <siprintf>
			Show_Str(220,20,BLACK,WHITE,score_char,16,1);		// show score
 8001c34:	2301      	movs	r3, #1
 8001c36:	9302      	str	r3, [sp, #8]
 8001c38:	2310      	movs	r3, #16
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <ObstacleAnimation+0x270>)
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c44:	2200      	movs	r2, #0
 8001c46:	2114      	movs	r1, #20
 8001c48:	20dc      	movs	r0, #220	@ 0xdc
 8001c4a:	f7ff fc13 	bl	8001474 <Show_Str>
		}


		if(obs_pos>410)		// do not go too far..
 8001c4e:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <ObstacleAnimation+0x25c>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	f5b3 7fcd 	cmp.w	r3, #410	@ 0x19a
 8001c56:	d910      	bls.n	8001c7a <ObstacleAnimation+0x202>
		{
			obs_step = 0;			// reset step
 8001c58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <ObstacleAnimation+0x254>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
			obs_pos = 0;			// place obstacle on base position - out of screen (TYPE OF OBSTACLE CAN BE CHANGED NOW)
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <ObstacleAnimation+0x25c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	801a      	strh	r2, [r3, #0]
			ObstacleRandomizer();	// place random type of obstacle
 8001c64:	f7ff fede 	bl	8001a24 <ObstacleRandomizer>
			obs_passed++;			// ...obstacle were passed
 8001c68:	4b20      	ldr	r3, [pc, #128]	@ (8001cec <ObstacleAnimation+0x274>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <ObstacleAnimation+0x274>)
 8001c72:	801a      	strh	r2, [r3, #0]
			slicer=1;				// reset slicer
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <ObstacleAnimation+0x260>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]

		}

		switch(obstacle_type)	// which obstacle to draw
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf0 <ObstacleAnimation+0x278>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d012      	beq.n	8001ca8 <ObstacleAnimation+0x230>
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	dc16      	bgt.n	8001cb4 <ObstacleAnimation+0x23c>
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d002      	beq.n	8001c90 <ObstacleAnimation+0x218>
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d006      	beq.n	8001c9c <ObstacleAnimation+0x224>
				break;
			case 3:
				DrawObstacle3(obs_pos);
				break;
			default:
				break;
 8001c8e:	e011      	b.n	8001cb4 <ObstacleAnimation+0x23c>
				DrawObstacle1(obs_pos);
 8001c90:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <ObstacleAnimation+0x25c>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fda1 	bl	80027dc <DrawObstacle1>
				break;
 8001c9a:	e00c      	b.n	8001cb6 <ObstacleAnimation+0x23e>
				DrawObstacle2(obs_pos);
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <ObstacleAnimation+0x25c>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fec6 	bl	8002a32 <DrawObstacle2>
				break;
 8001ca6:	e006      	b.n	8001cb6 <ObstacleAnimation+0x23e>
				DrawObstacle3(obs_pos);
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <ObstacleAnimation+0x25c>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 ffeb 	bl	8002c88 <DrawObstacle3>
				break;
 8001cb2:	e000      	b.n	8001cb6 <ObstacleAnimation+0x23e>
				break;
 8001cb4:	bf00      	nop
		}

		ObsDetector(obs_pos);	// detect proper obstacle type
 8001cb6:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <ObstacleAnimation+0x25c>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fce0 	bl	8001680 <ObsDetector>
	}
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000169 	.word	0x20000169
 8001ccc:	200000b2 	.word	0x200000b2
 8001cd0:	200000b6 	.word	0x200000b6
 8001cd4:	200000b4 	.word	0x200000b4
 8001cd8:	2000000a 	.word	0x2000000a
 8001cdc:	200000ba 	.word	0x200000ba
 8001ce0:	08007d20 	.word	0x08007d20
 8001ce4:	08007d28 	.word	0x08007d28
 8001ce8:	200000c0 	.word	0x200000c0
 8001cec:	200000b8 	.word	0x200000b8
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <EndGame>:


void EndGame(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	// save best & reset score
	if(score > best_score)
 8001cf8:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <EndGame+0x90>)
 8001cfa:	881a      	ldrh	r2, [r3, #0]
 8001cfc:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <EndGame+0x94>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d903      	bls.n	8001d0c <EndGame+0x18>
	{
		best_score = score;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <EndGame+0x90>)
 8001d06:	881a      	ldrh	r2, [r3, #0]
 8001d08:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <EndGame+0x94>)
 8001d0a:	801a      	strh	r2, [r3, #0]
	}
	score=0;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <EndGame+0x90>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	801a      	strh	r2, [r3, #0]

	// reset dino
	jump_step=0;
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <EndGame+0x98>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	801a      	strh	r2, [r3, #0]
	jump_pos=0;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <EndGame+0x9c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	801a      	strh	r2, [r3, #0]
	velocity=0;
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <EndGame+0xa0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
	walk_step=0;
 8001d24:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <EndGame+0xa4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]

	// reset obstacles
	obs_step=0;
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <EndGame+0xa8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	801a      	strh	r2, [r3, #0]
	obs_pos=0;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <EndGame+0xac>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	801a      	strh	r2, [r3, #0]
	obs_acc_temp=0;
 8001d36:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <EndGame+0xb0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
	obs_passed=0;
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <EndGame+0xb4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	801a      	strh	r2, [r3, #0]
	obstacle_type=3;	// reset both BIG & Small
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <EndGame+0xb8>)
 8001d44:	2203      	movs	r2, #3
 8001d46:	701a      	strb	r2, [r3, #0]
	spd=2;
 8001d48:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <EndGame+0xbc>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	701a      	strb	r2, [r3, #0]

	DinoDetector(0);	// tell detector that position were reset
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff fc7a 	bl	8001648 <DinoDetector>
	ObsDetector(0);		// ..
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff fc93 	bl	8001680 <ObsDetector>

	obstacle_type=2;	// get back to first obstacle
 8001d5a:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <EndGame+0xb8>)
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	701a      	strb	r2, [r3, #0]

	//sprintf(best_score_char,"%d",best_score);
	//Show_Str(100,60,BLACK,WHITE,"GAME OVER",16,1);		// show score


	GameOverText();
 8001d60:	f001 f9db 	bl	800311a <GameOverText>

	while(TOUCH);	// wait for touch
 8001d64:	bf00      	nop
 8001d66:	2110      	movs	r1, #16
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d6c:	f003 fa06 	bl	800517c <HAL_GPIO_ReadPin>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f7      	bne.n	8001d66 <EndGame+0x72>
	LCD_Clear(WHITE);
 8001d76:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d7a:	f7fe fb0f 	bl	800039c <LCD_Clear>
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200000ba 	.word	0x200000ba
 8001d88:	200000bc 	.word	0x200000bc
 8001d8c:	200000ac 	.word	0x200000ac
 8001d90:	200000ae 	.word	0x200000ae
 8001d94:	200000b0 	.word	0x200000b0
 8001d98:	200000b1 	.word	0x200000b1
 8001d9c:	200000b2 	.word	0x200000b2
 8001da0:	200000b4 	.word	0x200000b4
 8001da4:	200000b6 	.word	0x200000b6
 8001da8:	200000b8 	.word	0x200000b8
 8001dac:	20000008 	.word	0x20000008
 8001db0:	20000009 	.word	0x20000009

08001db4 <GAME>:

// ------------------------------------------------------------------------------------
// ---------------------------------- GAME PENDING ------------------------------------
// ------------------------------------------------------------------------------------
void GAME(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	if(CollisionDetector() == 0)
 8001db8:	f7ff fcd8 	bl	800176c <CollisionDetector>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 810b 	bne.w	8001fda <GAME+0x226>
	{
		if(refresh==0)
 8001dc4:	4b98      	ldr	r3, [pc, #608]	@ (8002028 <GAME+0x274>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 80fe 	bne.w	8001fca <GAME+0x216>
		{
			POINT_COLOR=GRAY;
 8001dce:	4b97      	ldr	r3, [pc, #604]	@ (800202c <GAME+0x278>)
 8001dd0:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8001dd4:	801a      	strh	r2, [r3, #0]
			LCD_DrawLine(0,190,320,190);	// draw ground
 8001dd6:	23be      	movs	r3, #190	@ 0xbe
 8001dd8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ddc:	21be      	movs	r1, #190	@ 0xbe
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff f9e8 	bl	80011b4 <LCD_DrawLine>

			//sprintf(best_score_char,"%d",best_score);
			//Show_Str(260,20,BLACK,WHITE,best_score_char,16,1);		// show score


			switch(obs_passed)		// increase obstacle velocity
 8001de4:	4b92      	ldr	r3, [pc, #584]	@ (8002030 <GAME+0x27c>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	2b5c      	cmp	r3, #92	@ 0x5c
 8001dea:	f200 80ed 	bhi.w	8001fc8 <GAME+0x214>
 8001dee:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <GAME+0x40>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001f69 	.word	0x08001f69
 8001df8:	08001f71 	.word	0x08001f71
 8001dfc:	08001f79 	.word	0x08001f79
 8001e00:	08001fc9 	.word	0x08001fc9
 8001e04:	08001f81 	.word	0x08001f81
 8001e08:	08001fc9 	.word	0x08001fc9
 8001e0c:	08001fc9 	.word	0x08001fc9
 8001e10:	08001fc9 	.word	0x08001fc9
 8001e14:	08001f89 	.word	0x08001f89
 8001e18:	08001fc9 	.word	0x08001fc9
 8001e1c:	08001fc9 	.word	0x08001fc9
 8001e20:	08001fc9 	.word	0x08001fc9
 8001e24:	08001fc9 	.word	0x08001fc9
 8001e28:	08001fc9 	.word	0x08001fc9
 8001e2c:	08001f91 	.word	0x08001f91
 8001e30:	08001fc9 	.word	0x08001fc9
 8001e34:	08001fc9 	.word	0x08001fc9
 8001e38:	08001fc9 	.word	0x08001fc9
 8001e3c:	08001fc9 	.word	0x08001fc9
 8001e40:	08001fc9 	.word	0x08001fc9
 8001e44:	08001fc9 	.word	0x08001fc9
 8001e48:	08001fc9 	.word	0x08001fc9
 8001e4c:	08001f99 	.word	0x08001f99
 8001e50:	08001fc9 	.word	0x08001fc9
 8001e54:	08001fc9 	.word	0x08001fc9
 8001e58:	08001fc9 	.word	0x08001fc9
 8001e5c:	08001fc9 	.word	0x08001fc9
 8001e60:	08001fc9 	.word	0x08001fc9
 8001e64:	08001fc9 	.word	0x08001fc9
 8001e68:	08001fc9 	.word	0x08001fc9
 8001e6c:	08001fc9 	.word	0x08001fc9
 8001e70:	08001fc9 	.word	0x08001fc9
 8001e74:	08001fa1 	.word	0x08001fa1
 8001e78:	08001fc9 	.word	0x08001fc9
 8001e7c:	08001fc9 	.word	0x08001fc9
 8001e80:	08001fc9 	.word	0x08001fc9
 8001e84:	08001fc9 	.word	0x08001fc9
 8001e88:	08001fc9 	.word	0x08001fc9
 8001e8c:	08001fc9 	.word	0x08001fc9
 8001e90:	08001fc9 	.word	0x08001fc9
 8001e94:	08001fc9 	.word	0x08001fc9
 8001e98:	08001fc9 	.word	0x08001fc9
 8001e9c:	08001fc9 	.word	0x08001fc9
 8001ea0:	08001fc9 	.word	0x08001fc9
 8001ea4:	08001fa9 	.word	0x08001fa9
 8001ea8:	08001fc9 	.word	0x08001fc9
 8001eac:	08001fc9 	.word	0x08001fc9
 8001eb0:	08001fc9 	.word	0x08001fc9
 8001eb4:	08001fc9 	.word	0x08001fc9
 8001eb8:	08001fc9 	.word	0x08001fc9
 8001ebc:	08001fc9 	.word	0x08001fc9
 8001ec0:	08001fc9 	.word	0x08001fc9
 8001ec4:	08001fc9 	.word	0x08001fc9
 8001ec8:	08001fc9 	.word	0x08001fc9
 8001ecc:	08001fc9 	.word	0x08001fc9
 8001ed0:	08001fc9 	.word	0x08001fc9
 8001ed4:	08001fc9 	.word	0x08001fc9
 8001ed8:	08001fc9 	.word	0x08001fc9
 8001edc:	08001fb1 	.word	0x08001fb1
 8001ee0:	08001fc9 	.word	0x08001fc9
 8001ee4:	08001fc9 	.word	0x08001fc9
 8001ee8:	08001fc9 	.word	0x08001fc9
 8001eec:	08001fc9 	.word	0x08001fc9
 8001ef0:	08001fc9 	.word	0x08001fc9
 8001ef4:	08001fc9 	.word	0x08001fc9
 8001ef8:	08001fc9 	.word	0x08001fc9
 8001efc:	08001fc9 	.word	0x08001fc9
 8001f00:	08001fc9 	.word	0x08001fc9
 8001f04:	08001fc9 	.word	0x08001fc9
 8001f08:	08001fc9 	.word	0x08001fc9
 8001f0c:	08001fc9 	.word	0x08001fc9
 8001f10:	08001fc9 	.word	0x08001fc9
 8001f14:	08001fc9 	.word	0x08001fc9
 8001f18:	08001fc9 	.word	0x08001fc9
 8001f1c:	08001fb9 	.word	0x08001fb9
 8001f20:	08001fc9 	.word	0x08001fc9
 8001f24:	08001fc9 	.word	0x08001fc9
 8001f28:	08001fc9 	.word	0x08001fc9
 8001f2c:	08001fc9 	.word	0x08001fc9
 8001f30:	08001fc9 	.word	0x08001fc9
 8001f34:	08001fc9 	.word	0x08001fc9
 8001f38:	08001fc9 	.word	0x08001fc9
 8001f3c:	08001fc9 	.word	0x08001fc9
 8001f40:	08001fc9 	.word	0x08001fc9
 8001f44:	08001fc9 	.word	0x08001fc9
 8001f48:	08001fc9 	.word	0x08001fc9
 8001f4c:	08001fc9 	.word	0x08001fc9
 8001f50:	08001fc9 	.word	0x08001fc9
 8001f54:	08001fc9 	.word	0x08001fc9
 8001f58:	08001fc9 	.word	0x08001fc9
 8001f5c:	08001fc9 	.word	0x08001fc9
 8001f60:	08001fc9 	.word	0x08001fc9
 8001f64:	08001fc1 	.word	0x08001fc1
			{
				case 0: spd = 2; break;
 8001f68:	4b32      	ldr	r3, [pc, #200]	@ (8002034 <GAME+0x280>)
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e02c      	b.n	8001fca <GAME+0x216>
				case 1: spd = 3; break;
 8001f70:	4b30      	ldr	r3, [pc, #192]	@ (8002034 <GAME+0x280>)
 8001f72:	2203      	movs	r2, #3
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e028      	b.n	8001fca <GAME+0x216>
				case 2:	spd = 4; break;
 8001f78:	4b2e      	ldr	r3, [pc, #184]	@ (8002034 <GAME+0x280>)
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	e024      	b.n	8001fca <GAME+0x216>
				case 4:	spd = 5; break;
 8001f80:	4b2c      	ldr	r3, [pc, #176]	@ (8002034 <GAME+0x280>)
 8001f82:	2205      	movs	r2, #5
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e020      	b.n	8001fca <GAME+0x216>
				case 8:	spd = 6; break;
 8001f88:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <GAME+0x280>)
 8001f8a:	2206      	movs	r2, #6
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e01c      	b.n	8001fca <GAME+0x216>
				case 14: spd = 7; break;
 8001f90:	4b28      	ldr	r3, [pc, #160]	@ (8002034 <GAME+0x280>)
 8001f92:	2207      	movs	r2, #7
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e018      	b.n	8001fca <GAME+0x216>
				case 22: spd = 8; break;
 8001f98:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <GAME+0x280>)
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	e014      	b.n	8001fca <GAME+0x216>
				case 32: spd = 9; break;
 8001fa0:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <GAME+0x280>)
 8001fa2:	2209      	movs	r2, #9
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e010      	b.n	8001fca <GAME+0x216>
				case 44: spd = 10; break;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <GAME+0x280>)
 8001faa:	220a      	movs	r2, #10
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	e00c      	b.n	8001fca <GAME+0x216>
				case 58: spd = 11; break;
 8001fb0:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <GAME+0x280>)
 8001fb2:	220b      	movs	r2, #11
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e008      	b.n	8001fca <GAME+0x216>
				case 74: spd = 12; break;
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <GAME+0x280>)
 8001fba:	220c      	movs	r2, #12
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e004      	b.n	8001fca <GAME+0x216>
				case 92: spd = 13; break;
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <GAME+0x280>)
 8001fc2:	220d      	movs	r2, #13
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	e000      	b.n	8001fca <GAME+0x216>
				default: break;
 8001fc8:	bf00      	nop
			}
		}

		DinoAnimation();
 8001fca:	f7ff fc59 	bl	8001880 <DinoAnimation>
		ObstacleAnimation(spd);
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <GAME+0x280>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fd50 	bl	8001a78 <ObstacleAnimation>
		DinoAnimation();
		ObstacleAnimation(spd);
	}


}
 8001fd8:	e024      	b.n	8002024 <GAME+0x270>
	else if(CollisionDetector() == 1)
 8001fda:	f7ff fbc7 	bl	800176c <CollisionDetector>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d104      	bne.n	8001fee <GAME+0x23a>
			DinoAnimation();
 8001fe4:	f7ff fc4c 	bl	8001880 <DinoAnimation>
			EndGame();
 8001fe8:	f7ff fe84 	bl	8001cf4 <EndGame>
}
 8001fec:	e01a      	b.n	8002024 <GAME+0x270>
	else if(CollisionDetector() == 2)		// game pending for a moment (get closer to obstacle, but over the game anyway)
 8001fee:	f7ff fbbd 	bl	800176c <CollisionDetector>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d115      	bne.n	8002024 <GAME+0x270>
		if(refresh==0)
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <GAME+0x274>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10a      	bne.n	8002016 <GAME+0x262>
			POINT_COLOR=GRAY;
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <GAME+0x278>)
 8002002:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8002006:	801a      	strh	r2, [r3, #0]
			LCD_DrawLine(0,190,320,190);
 8002008:	23be      	movs	r3, #190	@ 0xbe
 800200a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800200e:	21be      	movs	r1, #190	@ 0xbe
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff f8cf 	bl	80011b4 <LCD_DrawLine>
		DinoAnimation();
 8002016:	f7ff fc33 	bl	8001880 <DinoAnimation>
		ObstacleAnimation(spd);
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <GAME+0x280>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fd2a 	bl	8001a78 <ObstacleAnimation>
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000168 	.word	0x20000168
 800202c:	20000094 	.word	0x20000094
 8002030:	200000b8 	.word	0x200000b8
 8002034:	20000009 	.word	0x20000009

08002038 <DrawDino>:
// ------------------------------------- FIGURES ---------------------------------------
// -------------------------------------------------------------------------------------

// dino
void DrawDino(uint16_t altitude,uint8_t left_leg, uint8_t right_leg)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af02      	add	r7, sp, #8
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
 8002042:	460b      	mov	r3, r1
 8002044:	717b      	strb	r3, [r7, #5]
 8002046:	4613      	mov	r3, r2
 8002048:	713b      	strb	r3, [r7, #4]
	// ----------- HEAD -----------
	LCD_Fill(27,160 - altitude,42,170 - altitude,GRAY);      // head
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8002050:	b299      	uxth	r1, r3
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	f1c3 03aa 	rsb	r3, r3, #170	@ 0xaa
 8002058:	b29b      	uxth	r3, r3
 800205a:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800205e:	9200      	str	r2, [sp, #0]
 8002060:	222a      	movs	r2, #42	@ 0x2a
 8002062:	201b      	movs	r0, #27
 8002064:	f7ff f84e 	bl	8001104 <LCD_Fill>
	LCD_Fill(25,162 - altitude,45,172 - altitude,GRAY);
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	f1c3 03a2 	rsb	r3, r3, #162	@ 0xa2
 800206e:	b299      	uxth	r1, r3
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 8002076:	b29b      	uxth	r3, r3
 8002078:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800207c:	9200      	str	r2, [sp, #0]
 800207e:	222d      	movs	r2, #45	@ 0x2d
 8002080:	2019      	movs	r0, #25
 8002082:	f7ff f83f 	bl	8001104 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8002086:	4ba7      	ldr	r3, [pc, #668]	@ (8002324 <DrawDino+0x2ec>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	2b2b      	cmp	r3, #43	@ 0x2b
 800208c:	d803      	bhi.n	8002096 <DrawDino+0x5e>
 800208e:	4ba5      	ldr	r3, [pc, #660]	@ (8002324 <DrawDino+0x2ec>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d12c      	bne.n	80020f0 <DrawDino+0xb8>
	{
		LCD_Fill(25,158 - altitude,26,161 - altitude,RUBBER);		// clear head top 1
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 800209c:	b299      	uxth	r1, r3
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020aa:	9200      	str	r2, [sp, #0]
 80020ac:	221a      	movs	r2, #26
 80020ae:	2019      	movs	r0, #25
 80020b0:	f7ff f828 	bl	8001104 <LCD_Fill>
		LCD_Fill(27,156 - altitude,42,159 - altitude,RUBBER);		// clear head top 2
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	f1c3 039c 	rsb	r3, r3, #156	@ 0x9c
 80020ba:	b299      	uxth	r1, r3
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	f1c3 039f 	rsb	r3, r3, #159	@ 0x9f
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020c8:	9200      	str	r2, [sp, #0]
 80020ca:	222a      	movs	r2, #42	@ 0x2a
 80020cc:	201b      	movs	r0, #27
 80020ce:	f7ff f819 	bl	8001104 <LCD_Fill>
		LCD_Fill(43,158 - altitude,45,161 - altitude,RUBBER);		// clear head top 3
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 80020d8:	b299      	uxth	r1, r3
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020e6:	9200      	str	r2, [sp, #0]
 80020e8:	222d      	movs	r2, #45	@ 0x2d
 80020ea:	202b      	movs	r0, #43	@ 0x2b
 80020ec:	f7ff f80a 	bl	8001104 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 80020f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002324 <DrawDino+0x2ec>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	2b2c      	cmp	r3, #44	@ 0x2c
 80020f6:	d81d      	bhi.n	8002134 <DrawDino+0xfc>
	{
		LCD_Fill(37,173 - altitude,45,174 - altitude,RUBBER);		// clear head bottom
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 80020fe:	b299      	uxth	r1, r3
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 8002106:	b29b      	uxth	r3, r3
 8002108:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	222d      	movs	r2, #45	@ 0x2d
 8002110:	2025      	movs	r0, #37	@ 0x25
 8002112:	f7fe fff7 	bl	8001104 <LCD_Fill>
		LCD_Fill(42,173 - altitude,45,177 - altitude,RUBBER);		// clear head bottom
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 800211c:	b299      	uxth	r1, r3
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8002124:	b29b      	uxth	r3, r3
 8002126:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800212a:	9200      	str	r2, [sp, #0]
 800212c:	222d      	movs	r2, #45	@ 0x2d
 800212e:	202a      	movs	r0, #42	@ 0x2a
 8002130:	f7fe ffe8 	bl	8001104 <LCD_Fill>
	}



	// ----------- EYE -----------
	LCD_Fill(30,163 - altitude,32,166 - altitude,RUBBER);     // eye
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	f1c3 03a3 	rsb	r3, r3, #163	@ 0xa3
 800213a:	b299      	uxth	r1, r3
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	f1c3 03a6 	rsb	r3, r3, #166	@ 0xa6
 8002142:	b29b      	uxth	r3, r3
 8002144:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002148:	9200      	str	r2, [sp, #0]
 800214a:	2220      	movs	r2, #32
 800214c:	201e      	movs	r0, #30
 800214e:	f7fe ffd9 	bl	8001104 <LCD_Fill>



	// ----------- MOUTH -----------
	LCD_Fill(25,172 - altitude,36,175 - altitude,GRAY);      // mouth
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	f1c3 03ac 	rsb	r3, r3, #172	@ 0xac
 8002158:	b299      	uxth	r1, r3
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 8002160:	b29b      	uxth	r3, r3
 8002162:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8002166:	9200      	str	r2, [sp, #0]
 8002168:	2224      	movs	r2, #36	@ 0x24
 800216a:	2019      	movs	r0, #25
 800216c:	f7fe ffca 	bl	8001104 <LCD_Fill>
	LCD_Fill(25,175 - altitude,41,176 - altitude,GRAY);      // mouth (tongue)
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 8002176:	b299      	uxth	r1, r3
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 800217e:	b29b      	uxth	r3, r3
 8002180:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8002184:	9200      	str	r2, [sp, #0]
 8002186:	2229      	movs	r2, #41	@ 0x29
 8002188:	2019      	movs	r0, #25
 800218a:	f7fe ffbb 	bl	8001104 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 800218e:	4b65      	ldr	r3, [pc, #404]	@ (8002324 <DrawDino+0x2ec>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	2b2b      	cmp	r3, #43	@ 0x2b
 8002194:	d803      	bhi.n	800219e <DrawDino+0x166>
 8002196:	4b63      	ldr	r3, [pc, #396]	@ (8002324 <DrawDino+0x2ec>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10e      	bne.n	80021bc <DrawDino+0x184>
	{
		LCD_Fill(37,173 - altitude,45,174 - altitude,RUBBER);		// clear mouth (tongue) top
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 80021a4:	b299      	uxth	r1, r3
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021b2:	9200      	str	r2, [sp, #0]
 80021b4:	222d      	movs	r2, #45	@ 0x2d
 80021b6:	2025      	movs	r0, #37	@ 0x25
 80021b8:	f7fe ffa4 	bl	8001104 <LCD_Fill>
	}

	if(jump_step <=44)	// going up
 80021bc:	4b59      	ldr	r3, [pc, #356]	@ (8002324 <DrawDino+0x2ec>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	2b2c      	cmp	r3, #44	@ 0x2c
 80021c2:	d80e      	bhi.n	80021e2 <DrawDino+0x1aa>
	{
		LCD_Fill(36,177 - altitude,41,180 - altitude,RUBBER);      // clear mouth (tongue) bottom
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 80021ca:	b299      	uxth	r1, r3
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021d8:	9200      	str	r2, [sp, #0]
 80021da:	2229      	movs	r2, #41	@ 0x29
 80021dc:	2024      	movs	r0, #36	@ 0x24
 80021de:	f7fe ff91 	bl	8001104 <LCD_Fill>
	}



	// ----------- NECK & CHEST -----------
	LCD_Fill(25,176 - altitude,35,177 - altitude,GRAY);     // neck
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 80021e8:	b299      	uxth	r1, r3
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80021f6:	9200      	str	r2, [sp, #0]
 80021f8:	2223      	movs	r2, #35	@ 0x23
 80021fa:	2019      	movs	r0, #25
 80021fc:	f7fe ff82 	bl	8001104 <LCD_Fill>
	LCD_Fill(23,177 - altitude,35,192 - altitude,GRAY);     // neck & chest
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 8002206:	b299      	uxth	r1, r3
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 800220e:	b29b      	uxth	r3, r3
 8002210:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8002214:	9200      	str	r2, [sp, #0]
 8002216:	2223      	movs	r2, #35	@ 0x23
 8002218:	2017      	movs	r0, #23
 800221a:	f7fe ff73 	bl	8001104 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 800221e:	4b41      	ldr	r3, [pc, #260]	@ (8002324 <DrawDino+0x2ec>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	2b2b      	cmp	r3, #43	@ 0x2b
 8002224:	d803      	bhi.n	800222e <DrawDino+0x1f6>
 8002226:	4b3f      	ldr	r3, [pc, #252]	@ (8002324 <DrawDino+0x2ec>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10e      	bne.n	800224c <DrawDino+0x214>
	{
		LCD_Fill(23,173 - altitude,24,176 - altitude,RUBBER);     // clear neck & chest top
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
 8002234:	b299      	uxth	r1, r3
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 800223c:	b29b      	uxth	r3, r3
 800223e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002242:	9200      	str	r2, [sp, #0]
 8002244:	2218      	movs	r2, #24
 8002246:	2017      	movs	r0, #23
 8002248:	f7fe ff5c 	bl	8001104 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 800224c:	4b35      	ldr	r3, [pc, #212]	@ (8002324 <DrawDino+0x2ec>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	2b2c      	cmp	r3, #44	@ 0x2c
 8002252:	d80e      	bhi.n	8002272 <DrawDino+0x23a>
	{
		LCD_Fill(33,193 - altitude,35,196 - altitude,RUBBER);    // clear neck & chest bottom
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	f1c3 03c1 	rsb	r3, r3, #193	@ 0xc1
 800225a:	b299      	uxth	r1, r3
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 8002262:	b29b      	uxth	r3, r3
 8002264:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002268:	9200      	str	r2, [sp, #0]
 800226a:	2223      	movs	r2, #35	@ 0x23
 800226c:	2021      	movs	r0, #33	@ 0x21
 800226e:	f7fe ff49 	bl	8001104 <LCD_Fill>
	}



	// ----------- ARM -----------
	LCD_Fill(35,181 - altitude,39,183 - altitude,GRAY);      // arm1
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 8002278:	b299      	uxth	r1, r3
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	f1c3 03b7 	rsb	r3, r3, #183	@ 0xb7
 8002280:	b29b      	uxth	r3, r3
 8002282:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8002286:	9200      	str	r2, [sp, #0]
 8002288:	2227      	movs	r2, #39	@ 0x27
 800228a:	2023      	movs	r0, #35	@ 0x23
 800228c:	f7fe ff3a 	bl	8001104 <LCD_Fill>
	LCD_Fill(37,181 - altitude,39,185 - altitude,GRAY);		 // arm2
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 8002296:	b299      	uxth	r1, r3
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	f1c3 03b9 	rsb	r3, r3, #185	@ 0xb9
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80022a4:	9200      	str	r2, [sp, #0]
 80022a6:	2227      	movs	r2, #39	@ 0x27
 80022a8:	2025      	movs	r0, #37	@ 0x25
 80022aa:	f7fe ff2b 	bl	8001104 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 80022ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <DrawDino+0x2ec>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	2b2b      	cmp	r3, #43	@ 0x2b
 80022b4:	d803      	bhi.n	80022be <DrawDino+0x286>
 80022b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <DrawDino+0x2ec>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10e      	bne.n	80022dc <DrawDino+0x2a4>
	{
		LCD_Fill(36,177 - altitude,41,178 - altitude,RUBBER);      // clear arm1 & arm2 top
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	f1c3 03b1 	rsb	r3, r3, #177	@ 0xb1
 80022c4:	b299      	uxth	r1, r3
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	f1c3 03b2 	rsb	r3, r3, #178	@ 0xb2
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	2229      	movs	r2, #41	@ 0x29
 80022d6:	2024      	movs	r0, #36	@ 0x24
 80022d8:	f7fe ff14 	bl	8001104 <LCD_Fill>
	}

	if(jump_step <=44)	// going up
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <DrawDino+0x2ec>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	2b2c      	cmp	r3, #44	@ 0x2c
 80022e2:	d821      	bhi.n	8002328 <DrawDino+0x2f0>
	{
		LCD_Fill(35,184 - altitude,36,187 - altitude,RUBBER);      // clear arm1 bottom
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	f1c3 03b8 	rsb	r3, r3, #184	@ 0xb8
 80022ea:	b299      	uxth	r1, r3
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	f1c3 03bb 	rsb	r3, r3, #187	@ 0xbb
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022f8:	9200      	str	r2, [sp, #0]
 80022fa:	2224      	movs	r2, #36	@ 0x24
 80022fc:	2023      	movs	r0, #35	@ 0x23
 80022fe:	f7fe ff01 	bl	8001104 <LCD_Fill>
		LCD_Fill(37,186 - altitude,39,189 - altitude,RUBBER);      // clear arm2 bottom
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	f1c3 03ba 	rsb	r3, r3, #186	@ 0xba
 8002308:	b299      	uxth	r1, r3
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	f1c3 03bd 	rsb	r3, r3, #189	@ 0xbd
 8002310:	b29b      	uxth	r3, r3
 8002312:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002316:	9200      	str	r2, [sp, #0]
 8002318:	2227      	movs	r2, #39	@ 0x27
 800231a:	2025      	movs	r0, #37	@ 0x25
 800231c:	f7fe fef2 	bl	8001104 <LCD_Fill>
 8002320:	e002      	b.n	8002328 <DrawDino+0x2f0>
 8002322:	bf00      	nop
 8002324:	200000ac 	.word	0x200000ac
	}



	// ----------- BODY -----------
	LCD_Fill(20,180 - altitude,32,195 - altitude,GRAY);     // body1
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 800232e:	b299      	uxth	r1, r3
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 8002336:	b29b      	uxth	r3, r3
 8002338:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800233c:	9200      	str	r2, [sp, #0]
 800233e:	2220      	movs	r2, #32
 8002340:	2014      	movs	r0, #20
 8002342:	f7fe fedf 	bl	8001104 <LCD_Fill>
	LCD_Fill(17,182 - altitude,30,197 - altitude,GRAY);     // body2
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 800234c:	b299      	uxth	r1, r3
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8002354:	b29b      	uxth	r3, r3
 8002356:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800235a:	9200      	str	r2, [sp, #0]
 800235c:	221e      	movs	r2, #30
 800235e:	2011      	movs	r0, #17
 8002360:	f7fe fed0 	bl	8001104 <LCD_Fill>
	LCD_Fill(12,185 - altitude,27,197 - altitude,GRAY);     // body3
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	f1c3 03b9 	rsb	r3, r3, #185	@ 0xb9
 800236a:	b299      	uxth	r1, r3
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8002372:	b29b      	uxth	r3, r3
 8002374:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8002378:	9200      	str	r2, [sp, #0]
 800237a:	221b      	movs	r2, #27
 800237c:	200c      	movs	r0, #12
 800237e:	f7fe fec1 	bl	8001104 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 8002382:	4bb2      	ldr	r3, [pc, #712]	@ (800264c <DrawDino+0x614>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	2b2b      	cmp	r3, #43	@ 0x2b
 8002388:	d803      	bhi.n	8002392 <DrawDino+0x35a>
 800238a:	4bb0      	ldr	r3, [pc, #704]	@ (800264c <DrawDino+0x614>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d12c      	bne.n	80023ec <DrawDino+0x3b4>
	{
		LCD_Fill(20,176 - altitude,22,179 - altitude,RUBBER);    // clear body1 top
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 8002398:	b299      	uxth	r1, r3
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023a6:	9200      	str	r2, [sp, #0]
 80023a8:	2216      	movs	r2, #22
 80023aa:	2014      	movs	r0, #20
 80023ac:	f7fe feaa 	bl	8001104 <LCD_Fill>
		LCD_Fill(17,178 - altitude,19,181 - altitude,RUBBER);    // clear body2 top
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	f1c3 03b2 	rsb	r3, r3, #178	@ 0xb2
 80023b6:	b299      	uxth	r1, r3
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 80023be:	b29b      	uxth	r3, r3
 80023c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023c4:	9200      	str	r2, [sp, #0]
 80023c6:	2213      	movs	r2, #19
 80023c8:	2011      	movs	r0, #17
 80023ca:	f7fe fe9b 	bl	8001104 <LCD_Fill>
		LCD_Fill(13,181 - altitude,16,184 - altitude,RUBBER);    // clear body3 top (tail part)
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 80023d4:	b299      	uxth	r1, r3
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	f1c3 03b8 	rsb	r3, r3, #184	@ 0xb8
 80023dc:	b29b      	uxth	r3, r3
 80023de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023e2:	9200      	str	r2, [sp, #0]
 80023e4:	2210      	movs	r2, #16
 80023e6:	200d      	movs	r0, #13
 80023e8:	f7fe fe8c 	bl	8001104 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 80023ec:	4b97      	ldr	r3, [pc, #604]	@ (800264c <DrawDino+0x614>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80023f2:	d83b      	bhi.n	800246c <DrawDino+0x434>
	{
		LCD_Fill(31,196 - altitude,32,199 - altitude,RUBBER);    // clear body1 bottom
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 80023fa:	b299      	uxth	r1, r3
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	f1c3 03c7 	rsb	r3, r3, #199	@ 0xc7
 8002402:	b29b      	uxth	r3, r3
 8002404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002408:	9200      	str	r2, [sp, #0]
 800240a:	2220      	movs	r2, #32
 800240c:	201f      	movs	r0, #31
 800240e:	f7fe fe79 	bl	8001104 <LCD_Fill>
		LCD_Fill(28,198 - altitude,30,201 - altitude,RUBBER);    // clear body2 bottom
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	f1c3 03c6 	rsb	r3, r3, #198	@ 0xc6
 8002418:	b299      	uxth	r1, r3
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f1c3 03c9 	rsb	r3, r3, #201	@ 0xc9
 8002420:	b29b      	uxth	r3, r3
 8002422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002426:	9200      	str	r2, [sp, #0]
 8002428:	221e      	movs	r2, #30
 800242a:	201c      	movs	r0, #28
 800242c:	f7fe fe6a 	bl	8001104 <LCD_Fill>
		LCD_Fill(12,197 - altitude,14,200 - altitude,RUBBER);    // clear body3 leg break 1 bottom
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8002436:	b299      	uxth	r1, r3
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800243e:	b29b      	uxth	r3, r3
 8002440:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002444:	9200      	str	r2, [sp, #0]
 8002446:	220e      	movs	r2, #14
 8002448:	200c      	movs	r0, #12
 800244a:	f7fe fe5b 	bl	8001104 <LCD_Fill>
		LCD_Fill(20,197 - altitude,22,202 - altitude,RUBBER);    // clear body3 leg break 2 bottom
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8002454:	b299      	uxth	r1, r3
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 800245c:	b29b      	uxth	r3, r3
 800245e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002462:	9200      	str	r2, [sp, #0]
 8002464:	2216      	movs	r2, #22
 8002466:	2014      	movs	r0, #20
 8002468:	f7fe fe4c 	bl	8001104 <LCD_Fill>
	}



	// ----------- TAIL -----------
	LCD_Fill(10,182 - altitude,12,195 - altitude,GRAY);     // tail1
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	f1c3 03b6 	rsb	r3, r3, #182	@ 0xb6
 8002472:	b299      	uxth	r1, r3
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	f1c3 03c3 	rsb	r3, r3, #195	@ 0xc3
 800247a:	b29b      	uxth	r3, r3
 800247c:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8002480:	9200      	str	r2, [sp, #0]
 8002482:	220c      	movs	r2, #12
 8002484:	200a      	movs	r0, #10
 8002486:	f7fe fe3d 	bl	8001104 <LCD_Fill>
	LCD_Fill(8,180 - altitude,10,192 - altitude,GRAY);		// tail2
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8002490:	b299      	uxth	r1, r3
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 8002498:	b29b      	uxth	r3, r3
 800249a:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 800249e:	9200      	str	r2, [sp, #0]
 80024a0:	220a      	movs	r2, #10
 80024a2:	2008      	movs	r0, #8
 80024a4:	f7fe fe2e 	bl	8001104 <LCD_Fill>
	LCD_Fill(7,175 - altitude,8,188 - altitude,GRAY);		// tail3
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	f1c3 03af 	rsb	r3, r3, #175	@ 0xaf
 80024ae:	b299      	uxth	r1, r3
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	f1c3 03bc 	rsb	r3, r3, #188	@ 0xbc
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80024bc:	9200      	str	r2, [sp, #0]
 80024be:	2208      	movs	r2, #8
 80024c0:	2007      	movs	r0, #7
 80024c2:	f7fe fe1f 	bl	8001104 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 80024c6:	4b61      	ldr	r3, [pc, #388]	@ (800264c <DrawDino+0x614>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	2b2b      	cmp	r3, #43	@ 0x2b
 80024cc:	d803      	bhi.n	80024d6 <DrawDino+0x49e>
 80024ce:	4b5f      	ldr	r3, [pc, #380]	@ (800264c <DrawDino+0x614>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d12c      	bne.n	8002530 <DrawDino+0x4f8>
	{
		LCD_Fill(10,178 - altitude,12,181 - altitude,RUBBER);	// clear tail1 top
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	f1c3 03b2 	rsb	r3, r3, #178	@ 0xb2
 80024dc:	b299      	uxth	r1, r3
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	f1c3 03b5 	rsb	r3, r3, #181	@ 0xb5
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ea:	9200      	str	r2, [sp, #0]
 80024ec:	220c      	movs	r2, #12
 80024ee:	200a      	movs	r0, #10
 80024f0:	f7fe fe08 	bl	8001104 <LCD_Fill>
		LCD_Fill(9,176 - altitude,10,179 - altitude,RUBBER);		// clear tail2 top
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	f1c3 03b0 	rsb	r3, r3, #176	@ 0xb0
 80024fa:	b299      	uxth	r1, r3
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	f1c3 03b3 	rsb	r3, r3, #179	@ 0xb3
 8002502:	b29b      	uxth	r3, r3
 8002504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002508:	9200      	str	r2, [sp, #0]
 800250a:	220a      	movs	r2, #10
 800250c:	2009      	movs	r0, #9
 800250e:	f7fe fdf9 	bl	8001104 <LCD_Fill>
		LCD_Fill(7,171 - altitude,8,174 - altitude,RUBBER);		// clear tail3 top
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	f1c3 03ab 	rsb	r3, r3, #171	@ 0xab
 8002518:	b299      	uxth	r1, r3
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	f1c3 03ae 	rsb	r3, r3, #174	@ 0xae
 8002520:	b29b      	uxth	r3, r3
 8002522:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002526:	9200      	str	r2, [sp, #0]
 8002528:	2208      	movs	r2, #8
 800252a:	2007      	movs	r0, #7
 800252c:	f7fe fdea 	bl	8001104 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 8002530:	4b46      	ldr	r3, [pc, #280]	@ (800264c <DrawDino+0x614>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	2b2c      	cmp	r3, #44	@ 0x2c
 8002536:	d82c      	bhi.n	8002592 <DrawDino+0x55a>
	{
		LCD_Fill(10,196 - altitude,12,199 - altitude,RUBBER);	// clear tail1 bottom
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 800253e:	b299      	uxth	r1, r3
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	f1c3 03c7 	rsb	r3, r3, #199	@ 0xc7
 8002546:	b29b      	uxth	r3, r3
 8002548:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800254c:	9200      	str	r2, [sp, #0]
 800254e:	220c      	movs	r2, #12
 8002550:	200a      	movs	r0, #10
 8002552:	f7fe fdd7 	bl	8001104 <LCD_Fill>
		LCD_Fill(8,193 - altitude,9,196 - altitude,RUBBER);		// clear tail2 bottom
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	f1c3 03c1 	rsb	r3, r3, #193	@ 0xc1
 800255c:	b299      	uxth	r1, r3
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	f1c3 03c4 	rsb	r3, r3, #196	@ 0xc4
 8002564:	b29b      	uxth	r3, r3
 8002566:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800256a:	9200      	str	r2, [sp, #0]
 800256c:	2209      	movs	r2, #9
 800256e:	2008      	movs	r0, #8
 8002570:	f7fe fdc8 	bl	8001104 <LCD_Fill>
		LCD_Fill(6,189 - altitude,7,192 - altitude,RUBBER);		// clear tail3 bottom
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	f1c3 03bd 	rsb	r3, r3, #189	@ 0xbd
 800257a:	b299      	uxth	r1, r3
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	f1c3 03c0 	rsb	r3, r3, #192	@ 0xc0
 8002582:	b29b      	uxth	r3, r3
 8002584:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002588:	9200      	str	r2, [sp, #0]
 800258a:	2207      	movs	r2, #7
 800258c:	2006      	movs	r0, #6
 800258e:	f7fe fdb9 	bl	8001104 <LCD_Fill>
	}



	// ----------- RIGHT LEG -----------
	LCD_Fill(23,197 - altitude,27,200 - altitude,GRAY);      						// right leg
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 8002598:	b299      	uxth	r1, r3
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80025a6:	9200      	str	r2, [sp, #0]
 80025a8:	221b      	movs	r2, #27
 80025aa:	2017      	movs	r0, #23
 80025ac:	f7fe fdaa 	bl	8001104 <LCD_Fill>
	LCD_Fill(25,200 - altitude - right_leg,27,207 - altitude - right_leg,GRAY);		// leg animation
 80025b0:	793b      	ldrb	r3, [r7, #4]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	4413      	add	r3, r2
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 80025be:	b299      	uxth	r1, r3
 80025c0:	793b      	ldrb	r3, [r7, #4]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	4413      	add	r3, r2
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80025d4:	9200      	str	r2, [sp, #0]
 80025d6:	221b      	movs	r2, #27
 80025d8:	2019      	movs	r0, #25
 80025da:	f7fe fd93 	bl	8001104 <LCD_Fill>
	LCD_Fill(27,205 - altitude - right_leg,30,207 - altitude - right_leg,GRAY);
 80025de:	793b      	ldrb	r3, [r7, #4]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	4413      	add	r3, r2
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f1c3 03cd 	rsb	r3, r3, #205	@ 0xcd
 80025ec:	b299      	uxth	r1, r3
 80025ee:	793b      	ldrb	r3, [r7, #4]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	4413      	add	r3, r2
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8002602:	9200      	str	r2, [sp, #0]
 8002604:	221e      	movs	r2, #30
 8002606:	201b      	movs	r0, #27
 8002608:	f7fe fd7c 	bl	8001104 <LCD_Fill>

	LCD_Fill(23,202 - altitude - right_leg,24,204 - altitude - right_leg,RUBBER);	// clear thigh
 800260c:	793b      	ldrb	r3, [r7, #4]
 800260e:	b29a      	uxth	r2, r3
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	4413      	add	r3, r2
 8002614:	b29b      	uxth	r3, r3
 8002616:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 800261a:	b299      	uxth	r1, r3
 800261c:	793b      	ldrb	r3, [r7, #4]
 800261e:	b29a      	uxth	r2, r3
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	4413      	add	r3, r2
 8002624:	b29b      	uxth	r3, r3
 8002626:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 800262a:	b29b      	uxth	r3, r3
 800262c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002630:	9200      	str	r2, [sp, #0]
 8002632:	2218      	movs	r2, #24
 8002634:	2017      	movs	r0, #23
 8002636:	f7fe fd65 	bl	8001104 <LCD_Fill>

	if(jump_step>=44 || (jump_step == 0))	// going down
 800263a:	4b04      	ldr	r3, [pc, #16]	@ (800264c <DrawDino+0x614>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	2b2b      	cmp	r3, #43	@ 0x2b
 8002640:	d806      	bhi.n	8002650 <DrawDino+0x618>
 8002642:	4b02      	ldr	r3, [pc, #8]	@ (800264c <DrawDino+0x614>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d119      	bne.n	800267e <DrawDino+0x646>
 800264a:	e001      	b.n	8002650 <DrawDino+0x618>
 800264c:	200000ac 	.word	0x200000ac
	{
		LCD_Fill(28,202 - altitude - right_leg,30,204 - altitude - right_leg,RUBBER);	// clear foot top
 8002650:	793b      	ldrb	r3, [r7, #4]
 8002652:	b29a      	uxth	r2, r3
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	4413      	add	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 800265e:	b299      	uxth	r1, r3
 8002660:	793b      	ldrb	r3, [r7, #4]
 8002662:	b29a      	uxth	r2, r3
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	4413      	add	r3, r2
 8002668:	b29b      	uxth	r3, r3
 800266a:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 800266e:	b29b      	uxth	r3, r3
 8002670:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002674:	9200      	str	r2, [sp, #0]
 8002676:	221e      	movs	r2, #30
 8002678:	201c      	movs	r0, #28
 800267a:	f7fe fd43 	bl	8001104 <LCD_Fill>

	}
	if(jump_step <=44)	// going up
 800267e:	4b56      	ldr	r3, [pc, #344]	@ (80027d8 <DrawDino+0x7a0>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	2b2c      	cmp	r3, #44	@ 0x2c
 8002684:	d816      	bhi.n	80026b4 <DrawDino+0x67c>
	{
		LCD_Fill(23,209 - altitude - right_leg,30,212 - altitude - right_leg,RUBBER);	// clear foot bottom
 8002686:	793b      	ldrb	r3, [r7, #4]
 8002688:	b29a      	uxth	r2, r3
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	4413      	add	r3, r2
 800268e:	b29b      	uxth	r3, r3
 8002690:	f1c3 03d1 	rsb	r3, r3, #209	@ 0xd1
 8002694:	b299      	uxth	r1, r3
 8002696:	793b      	ldrb	r3, [r7, #4]
 8002698:	b29a      	uxth	r2, r3
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	4413      	add	r3, r2
 800269e:	b29b      	uxth	r3, r3
 80026a0:	f1c3 03d4 	rsb	r3, r3, #212	@ 0xd4
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026aa:	9200      	str	r2, [sp, #0]
 80026ac:	221e      	movs	r2, #30
 80026ae:	2017      	movs	r0, #23
 80026b0:	f7fe fd28 	bl	8001104 <LCD_Fill>
	}



	// ----------- LEFT LEG -----------
	LCD_Fill(15,197 - altitude,19,200 - altitude,GRAY);      						// left leg
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	f1c3 03c5 	rsb	r3, r3, #197	@ 0xc5
 80026ba:	b299      	uxth	r1, r3
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80026c8:	9200      	str	r2, [sp, #0]
 80026ca:	2213      	movs	r2, #19
 80026cc:	200f      	movs	r0, #15
 80026ce:	f7fe fd19 	bl	8001104 <LCD_Fill>
	LCD_Fill(15,200 - altitude - left_leg,17,207 - altitude - left_leg,GRAY);		// leg animation
 80026d2:	797b      	ldrb	r3, [r7, #5]
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	4413      	add	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 80026e0:	b299      	uxth	r1, r3
 80026e2:	797b      	ldrb	r3, [r7, #5]
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4413      	add	r3, r2
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 80026f6:	9200      	str	r2, [sp, #0]
 80026f8:	2211      	movs	r2, #17
 80026fa:	200f      	movs	r0, #15
 80026fc:	f7fe fd02 	bl	8001104 <LCD_Fill>
	LCD_Fill(17,205 - altitude - left_leg,20,207 - altitude - left_leg,GRAY);
 8002700:	797b      	ldrb	r3, [r7, #5]
 8002702:	b29a      	uxth	r2, r3
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	4413      	add	r3, r2
 8002708:	b29b      	uxth	r3, r3
 800270a:	f1c3 03cd 	rsb	r3, r3, #205	@ 0xcd
 800270e:	b299      	uxth	r1, r3
 8002710:	797b      	ldrb	r3, [r7, #5]
 8002712:	b29a      	uxth	r2, r3
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	4413      	add	r3, r2
 8002718:	b29b      	uxth	r3, r3
 800271a:	f1c3 03cf 	rsb	r3, r3, #207	@ 0xcf
 800271e:	b29b      	uxth	r3, r3
 8002720:	f245 22aa 	movw	r2, #21162	@ 0x52aa
 8002724:	9200      	str	r2, [sp, #0]
 8002726:	2214      	movs	r2, #20
 8002728:	2011      	movs	r0, #17
 800272a:	f7fe fceb 	bl	8001104 <LCD_Fill>

	if((jump_step>=44) || (jump_step == 0))	// going down
 800272e:	4b2a      	ldr	r3, [pc, #168]	@ (80027d8 <DrawDino+0x7a0>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	2b2b      	cmp	r3, #43	@ 0x2b
 8002734:	d803      	bhi.n	800273e <DrawDino+0x706>
 8002736:	4b28      	ldr	r3, [pc, #160]	@ (80027d8 <DrawDino+0x7a0>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d116      	bne.n	800276c <DrawDino+0x734>
	{
		LCD_Fill(18,202 - altitude - left_leg,20,204 - altitude - left_leg,RUBBER);		// clear foot top with thigh
 800273e:	797b      	ldrb	r3, [r7, #5]
 8002740:	b29a      	uxth	r2, r3
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	4413      	add	r3, r2
 8002746:	b29b      	uxth	r3, r3
 8002748:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 800274c:	b299      	uxth	r1, r3
 800274e:	797b      	ldrb	r3, [r7, #5]
 8002750:	b29a      	uxth	r2, r3
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	4413      	add	r3, r2
 8002756:	b29b      	uxth	r3, r3
 8002758:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 800275c:	b29b      	uxth	r3, r3
 800275e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002762:	9200      	str	r2, [sp, #0]
 8002764:	2214      	movs	r2, #20
 8002766:	2012      	movs	r0, #18
 8002768:	f7fe fccc 	bl	8001104 <LCD_Fill>
	}
	if(jump_step <=44)	// going up
 800276c:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <DrawDino+0x7a0>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	2b2c      	cmp	r3, #44	@ 0x2c
 8002772:	d82d      	bhi.n	80027d0 <DrawDino+0x798>
	{
		LCD_Fill(18,202 - altitude - left_leg,20,204 - altitude - left_leg,RUBBER);		// clear foot top with thigh
 8002774:	797b      	ldrb	r3, [r7, #5]
 8002776:	b29a      	uxth	r2, r3
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	4413      	add	r3, r2
 800277c:	b29b      	uxth	r3, r3
 800277e:	f1c3 03ca 	rsb	r3, r3, #202	@ 0xca
 8002782:	b299      	uxth	r1, r3
 8002784:	797b      	ldrb	r3, [r7, #5]
 8002786:	b29a      	uxth	r2, r3
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	4413      	add	r3, r2
 800278c:	b29b      	uxth	r3, r3
 800278e:	f1c3 03cc 	rsb	r3, r3, #204	@ 0xcc
 8002792:	b29b      	uxth	r3, r3
 8002794:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002798:	9200      	str	r2, [sp, #0]
 800279a:	2214      	movs	r2, #20
 800279c:	2012      	movs	r0, #18
 800279e:	f7fe fcb1 	bl	8001104 <LCD_Fill>
		LCD_Fill(15,209 - altitude - left_leg,20,212 - altitude - left_leg,RUBBER);		// clear foot bottom
 80027a2:	797b      	ldrb	r3, [r7, #5]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	4413      	add	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f1c3 03d1 	rsb	r3, r3, #209	@ 0xd1
 80027b0:	b299      	uxth	r1, r3
 80027b2:	797b      	ldrb	r3, [r7, #5]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	4413      	add	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f1c3 03d4 	rsb	r3, r3, #212	@ 0xd4
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027c6:	9200      	str	r2, [sp, #0]
 80027c8:	2214      	movs	r2, #20
 80027ca:	200f      	movs	r0, #15
 80027cc:	f7fe fc9a 	bl	8001104 <LCD_Fill>
	}
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200000ac 	.word	0x200000ac

080027dc <DrawObstacle1>:


// obstacle 1
void DrawObstacle1(uint16_t shift)	// single BIG
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	4603      	mov	r3, r0
 80027e4:	80fb      	strh	r3, [r7, #6]
	// ----------- VERTICAL PART -----------
	LCD_Fill(353 - shift,150,359 - shift,153,GRAY);     // vertical
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	f5c3 73b0 	rsb	r3, r3, #352	@ 0x160
 80027ec:	3301      	adds	r3, #1
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	b218      	sxth	r0, r3
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 80027f8:	3301      	adds	r3, #1
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	b21a      	sxth	r2, r3
 80027fe:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2399      	movs	r3, #153	@ 0x99
 8002806:	2196      	movs	r1, #150	@ 0x96
 8002808:	f7fe fc7c 	bl	8001104 <LCD_Fill>
	LCD_Fill(352 - shift,153,360 - shift,210,GRAY);
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	f5c3 73b0 	rsb	r3, r3, #352	@ 0x160
 8002812:	b29b      	uxth	r3, r3
 8002814:	b218      	sxth	r0, r3
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 800281c:	b29b      	uxth	r3, r3
 800281e:	b21a      	sxth	r2, r3
 8002820:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	23d2      	movs	r3, #210	@ 0xd2
 8002828:	2199      	movs	r1, #153	@ 0x99
 800282a:	f7fe fc6b 	bl	8001104 <LCD_Fill>

	LCD_Fill(360 - shift,150,366 - shift,153,RUBBER);		// clear vertical
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8002834:	b29b      	uxth	r3, r3
 8002836:	b218      	sxth	r0, r3
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 800283e:	b29b      	uxth	r3, r3
 8002840:	b21a      	sxth	r2, r3
 8002842:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2399      	movs	r3, #153	@ 0x99
 800284a:	2196      	movs	r1, #150	@ 0x96
 800284c:	f7fe fc5a 	bl	8001104 <LCD_Fill>
	LCD_Fill(361 - shift,153,367 - shift,161,RUBBER);		// clear vertical upper1
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8002856:	3301      	adds	r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	b218      	sxth	r0, r3
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8002862:	3301      	adds	r3, #1
 8002864:	b29b      	uxth	r3, r3
 8002866:	b21a      	sxth	r2, r3
 8002868:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	23a1      	movs	r3, #161	@ 0xa1
 8002870:	2199      	movs	r1, #153	@ 0x99
 8002872:	f7fe fc47 	bl	8001104 <LCD_Fill>
	LCD_Fill(361 - shift,162,365 - shift,174,RUBBER);		// clear vertical upper2
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 800287c:	3301      	adds	r3, #1
 800287e:	b29b      	uxth	r3, r3
 8002880:	b218      	sxth	r0, r3
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8002888:	3301      	adds	r3, #1
 800288a:	b29b      	uxth	r3, r3
 800288c:	b21a      	sxth	r2, r3
 800288e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	23ae      	movs	r3, #174	@ 0xae
 8002896:	21a2      	movs	r1, #162	@ 0xa2
 8002898:	f7fe fc34 	bl	8001104 <LCD_Fill>
	LCD_Fill(361 - shift,181,367 - shift,210,RUBBER);		// clear vertical lower
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 80028a2:	3301      	adds	r3, #1
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	b218      	sxth	r0, r3
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 80028ae:	3301      	adds	r3, #1
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	23d2      	movs	r3, #210	@ 0xd2
 80028bc:	21b5      	movs	r1, #181	@ 0xb5
 80028be:	f7fe fc21 	bl	8001104 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(342 - shift,175,370 - shift,180,GRAY);     // horizontal
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	f5c3 73ab 	rsb	r3, r3, #342	@ 0x156
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b218      	sxth	r0, r3
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	b21a      	sxth	r2, r3
 80028d6:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	23b4      	movs	r3, #180	@ 0xb4
 80028de:	21af      	movs	r1, #175	@ 0xaf
 80028e0:	f7fe fc10 	bl	8001104 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(341 - shift,165,345 - shift,167,GRAY);     // left
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	f5c3 73aa 	rsb	r3, r3, #340	@ 0x154
 80028ea:	3301      	adds	r3, #1
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	b218      	sxth	r0, r3
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 80028f6:	3301      	adds	r3, #1
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	23a7      	movs	r3, #167	@ 0xa7
 8002904:	21a5      	movs	r1, #165	@ 0xa5
 8002906:	f7fe fbfd 	bl	8001104 <LCD_Fill>
	LCD_Fill(340 - shift,167,346 - shift,178,GRAY);
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	f5c3 73aa 	rsb	r3, r3, #340	@ 0x154
 8002910:	b29b      	uxth	r3, r3
 8002912:	b218      	sxth	r0, r3
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 800291a:	b29b      	uxth	r3, r3
 800291c:	b21a      	sxth	r2, r3
 800291e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	23b2      	movs	r3, #178	@ 0xb2
 8002926:	21a7      	movs	r1, #167	@ 0xa7
 8002928:	f7fe fbec 	bl	8001104 <LCD_Fill>

	LCD_Fill(346 - shift,165,351 - shift,167,RUBBER);		// clear left
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 8002932:	b29b      	uxth	r3, r3
 8002934:	b218      	sxth	r0, r3
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 800293c:	3301      	adds	r3, #1
 800293e:	b29b      	uxth	r3, r3
 8002940:	b21a      	sxth	r2, r3
 8002942:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	23a7      	movs	r3, #167	@ 0xa7
 800294a:	21a5      	movs	r1, #165	@ 0xa5
 800294c:	f7fe fbda 	bl	8001104 <LCD_Fill>
	LCD_Fill(347 - shift,167,351 - shift,174,RUBBER);		// clear left
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 8002956:	3301      	adds	r3, #1
 8002958:	b29b      	uxth	r3, r3
 800295a:	b218      	sxth	r0, r3
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8002962:	3301      	adds	r3, #1
 8002964:	b29b      	uxth	r3, r3
 8002966:	b21a      	sxth	r2, r3
 8002968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	23ae      	movs	r3, #174	@ 0xae
 8002970:	21a7      	movs	r1, #167	@ 0xa7
 8002972:	f7fe fbc7 	bl	8001104 <LCD_Fill>


	// ----------- RIGHT PART -----------
	LCD_Fill(367 - shift,160,371 - shift,162,GRAY);     // right
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 800297c:	3301      	adds	r3, #1
 800297e:	b29b      	uxth	r3, r3
 8002980:	b218      	sxth	r0, r3
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 8002988:	3301      	adds	r3, #1
 800298a:	b29b      	uxth	r3, r3
 800298c:	b21a      	sxth	r2, r3
 800298e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	23a2      	movs	r3, #162	@ 0xa2
 8002996:	21a0      	movs	r1, #160	@ 0xa0
 8002998:	f7fe fbb4 	bl	8001104 <LCD_Fill>
	LCD_Fill(366 - shift,162,372 - shift,178,GRAY);
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	b218      	sxth	r0, r3
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	23b2      	movs	r3, #178	@ 0xb2
 80029b8:	21a2      	movs	r1, #162	@ 0xa2
 80029ba:	f7fe fba3 	bl	8001104 <LCD_Fill>

	LCD_Fill(372 - shift,160,378 - shift,162,RUBBER);     // clear right
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	b218      	sxth	r0, r3
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b21a      	sxth	r2, r3
 80029d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	23a2      	movs	r3, #162	@ 0xa2
 80029da:	21a0      	movs	r1, #160	@ 0xa0
 80029dc:	f7fe fb92 	bl	8001104 <LCD_Fill>
	LCD_Fill(373 - shift,162,379 - shift,178,RUBBER);
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 80029e6:	3301      	adds	r3, #1
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b218      	sxth	r0, r3
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 80029f2:	3301      	adds	r3, #1
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	b21a      	sxth	r2, r3
 80029f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	23b2      	movs	r3, #178	@ 0xb2
 8002a00:	21a2      	movs	r1, #162	@ 0xa2
 8002a02:	f7fe fb7f 	bl	8001104 <LCD_Fill>
	LCD_Fill(371 - shift,179,378 - shift,181,RUBBER);
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	b218      	sxth	r0, r3
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	23b5      	movs	r3, #181	@ 0xb5
 8002a24:	21b3      	movs	r1, #179	@ 0xb3
 8002a26:	f7fe fb6d 	bl	8001104 <LCD_Fill>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <DrawObstacle2>:


// obstacle 2
void DrawObstacle2(uint16_t shift)	// single small
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af02      	add	r7, sp, #8
 8002a38:	4603      	mov	r3, r0
 8002a3a:	80fb      	strh	r3, [r7, #6]
	// ----------- VERTICAL PART -----------
	LCD_Fill(353 - shift,170,357 - shift,172,GRAY);      // vertical
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	f5c3 73b0 	rsb	r3, r3, #352	@ 0x160
 8002a42:	3301      	adds	r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b218      	sxth	r0, r3
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b21a      	sxth	r2, r3
 8002a54:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	23ac      	movs	r3, #172	@ 0xac
 8002a5c:	21aa      	movs	r1, #170	@ 0xaa
 8002a5e:	f7fe fb51 	bl	8001104 <LCD_Fill>
	LCD_Fill(352 - shift,172,358 - shift,210,GRAY);
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	f5c3 73b0 	rsb	r3, r3, #352	@ 0x160
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	b218      	sxth	r0, r3
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	23d2      	movs	r3, #210	@ 0xd2
 8002a7e:	21ac      	movs	r1, #172	@ 0xac
 8002a80:	f7fe fb40 	bl	8001104 <LCD_Fill>

	LCD_Fill(358 - shift,170,364 - shift,172,RUBBER);		// clear vertical
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	b218      	sxth	r0, r3
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	b21a      	sxth	r2, r3
 8002a98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	23ac      	movs	r3, #172	@ 0xac
 8002aa0:	21aa      	movs	r1, #170	@ 0xaa
 8002aa2:	f7fe fb2f 	bl	8001104 <LCD_Fill>
	LCD_Fill(359 - shift,172,365 - shift,179,RUBBER);		// clear vertical upper1
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 8002aac:	3301      	adds	r3, #1
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	b218      	sxth	r0, r3
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	b21a      	sxth	r2, r3
 8002abe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	23b3      	movs	r3, #179	@ 0xb3
 8002ac6:	21ac      	movs	r1, #172	@ 0xac
 8002ac8:	f7fe fb1c 	bl	8001104 <LCD_Fill>
	LCD_Fill(359 - shift,180,361 - shift,185,RUBBER);		// clear vertical upper2
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	b218      	sxth	r0, r3
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	b21a      	sxth	r2, r3
 8002ae4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	23b9      	movs	r3, #185	@ 0xb9
 8002aec:	21b4      	movs	r1, #180	@ 0xb4
 8002aee:	f7fe fb09 	bl	8001104 <LCD_Fill>
	LCD_Fill(359 - shift,191,365 - shift,210,RUBBER);		// clear vertical lower
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	f5c3 73b3 	rsb	r3, r3, #358	@ 0x166
 8002af8:	3301      	adds	r3, #1
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	b218      	sxth	r0, r3
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8002b04:	3301      	adds	r3, #1
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	b21a      	sxth	r2, r3
 8002b0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	23d2      	movs	r3, #210	@ 0xd2
 8002b12:	21bf      	movs	r1, #191	@ 0xbf
 8002b14:	f7fe faf6 	bl	8001104 <LCD_Fill>

	// ----------- HORIZONTAL PART -----------
	LCD_Fill(346 - shift,186,364 - shift,190,GRAY);      // horizontal
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	b218      	sxth	r0, r3
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	b21a      	sxth	r2, r3
 8002b2c:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	23be      	movs	r3, #190	@ 0xbe
 8002b34:	21ba      	movs	r1, #186	@ 0xba
 8002b36:	f7fe fae5 	bl	8001104 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(345 - shift,177,347 - shift,178,GRAY);     // left
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 8002b40:	3301      	adds	r3, #1
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	b218      	sxth	r0, r3
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	b21a      	sxth	r2, r3
 8002b52:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	23b2      	movs	r3, #178	@ 0xb2
 8002b5a:	21b1      	movs	r1, #177	@ 0xb1
 8002b5c:	f7fe fad2 	bl	8001104 <LCD_Fill>
	LCD_Fill(344 - shift,178,348 - shift,188,GRAY);
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	b218      	sxth	r0, r3
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	f5c3 73ae 	rsb	r3, r3, #348	@ 0x15c
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	b21a      	sxth	r2, r3
 8002b74:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	23bc      	movs	r3, #188	@ 0xbc
 8002b7c:	21b2      	movs	r1, #178	@ 0xb2
 8002b7e:	f7fe fac1 	bl	8001104 <LCD_Fill>

	LCD_Fill(348 - shift,177,351 - shift,178,RUBBER);		// clear left1
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	f5c3 73ae 	rsb	r3, r3, #348	@ 0x15c
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	b218      	sxth	r0, r3
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8002b92:	3301      	adds	r3, #1
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	b21a      	sxth	r2, r3
 8002b98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	23b2      	movs	r3, #178	@ 0xb2
 8002ba0:	21b1      	movs	r1, #177	@ 0xb1
 8002ba2:	f7fe faaf 	bl	8001104 <LCD_Fill>
	LCD_Fill(349 - shift,179,351 - shift,185,RUBBER);		// clear left2
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	f5c3 73ae 	rsb	r3, r3, #348	@ 0x15c
 8002bac:	3301      	adds	r3, #1
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	b218      	sxth	r0, r3
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8002bb8:	3301      	adds	r3, #1
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	b21a      	sxth	r2, r3
 8002bbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	23b9      	movs	r3, #185	@ 0xb9
 8002bc6:	21b3      	movs	r1, #179	@ 0xb3
 8002bc8:	f7fe fa9c 	bl	8001104 <LCD_Fill>

	// ----------- RIGHT PART -----------
	LCD_Fill(362 - shift,180,365 - shift,181,GRAY);      // right
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	b218      	sxth	r0, r3
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8002bdc:	3301      	adds	r3, #1
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	b21a      	sxth	r2, r3
 8002be2:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	23b5      	movs	r3, #181	@ 0xb5
 8002bea:	21b4      	movs	r1, #180	@ 0xb4
 8002bec:	f7fe fa8a 	bl	8001104 <LCD_Fill>
	LCD_Fill(361 - shift,181,366 - shift,188,GRAY);
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	b218      	sxth	r0, r3
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	b21a      	sxth	r2, r3
 8002c06:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	23bc      	movs	r3, #188	@ 0xbc
 8002c0e:	21b5      	movs	r1, #181	@ 0xb5
 8002c10:	f7fe fa78 	bl	8001104 <LCD_Fill>

	LCD_Fill(366 - shift,180,372 - shift,181,RUBBER);      // clear right
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	b218      	sxth	r0, r3
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	b21a      	sxth	r2, r3
 8002c28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	23b5      	movs	r3, #181	@ 0xb5
 8002c30:	21b4      	movs	r1, #180	@ 0xb4
 8002c32:	f7fe fa67 	bl	8001104 <LCD_Fill>
	LCD_Fill(367 - shift,181,373 - shift,188,RUBBER);
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	f5c3 73b7 	rsb	r3, r3, #366	@ 0x16e
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	b218      	sxth	r0, r3
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 8002c48:	3301      	adds	r3, #1
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	b21a      	sxth	r2, r3
 8002c4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	23bc      	movs	r3, #188	@ 0xbc
 8002c56:	21b5      	movs	r1, #181	@ 0xb5
 8002c58:	f7fe fa54 	bl	8001104 <LCD_Fill>
	LCD_Fill(365 - shift,189,372 - shift,190,RUBBER);
 8002c5c:	88fb      	ldrh	r3, [r7, #6]
 8002c5e:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8002c62:	3301      	adds	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b218      	sxth	r0, r3
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	f5c3 73ba 	rsb	r3, r3, #372	@ 0x174
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	b21a      	sxth	r2, r3
 8002c72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	23be      	movs	r3, #190	@ 0xbe
 8002c7a:	21bd      	movs	r1, #189	@ 0xbd
 8002c7c:	f7fe fa42 	bl	8001104 <LCD_Fill>
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <DrawObstacle3>:


// obstacle 3
void DrawObstacle3(uint16_t shift)		// BIG & small
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
	// big one
	// ----------- VERTICAL PART -----------
	LCD_Fill(357 - shift,150,361 - shift,153,GRAY);     // vertical1
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 8002c98:	3301      	adds	r3, #1
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	b218      	sxth	r0, r3
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	b21a      	sxth	r2, r3
 8002caa:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2399      	movs	r3, #153	@ 0x99
 8002cb2:	2196      	movs	r1, #150	@ 0x96
 8002cb4:	f7fe fa26 	bl	8001104 <LCD_Fill>
	LCD_Fill(356 - shift,153,362 - shift,210,GRAY);
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	f5c3 73b2 	rsb	r3, r3, #356	@ 0x164
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	b218      	sxth	r0, r3
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	23d2      	movs	r3, #210	@ 0xd2
 8002cd4:	2199      	movs	r1, #153	@ 0x99
 8002cd6:	f7fe fa15 	bl	8001104 <LCD_Fill>

	LCD_Fill(362 - shift,150,368 - shift,152,RUBBER);		// clear vertical1
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	b218      	sxth	r0, r3
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	f5c3 73b8 	rsb	r3, r3, #368	@ 0x170
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	b21a      	sxth	r2, r3
 8002cee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2398      	movs	r3, #152	@ 0x98
 8002cf6:	2196      	movs	r1, #150	@ 0x96
 8002cf8:	f7fe fa04 	bl	8001104 <LCD_Fill>
	LCD_Fill(363 - shift,153,369 - shift,174,RUBBER);		// clear vertical1 upper
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8002d02:	3301      	adds	r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	b218      	sxth	r0, r3
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	f5c3 73b8 	rsb	r3, r3, #368	@ 0x170
 8002d0e:	3301      	adds	r3, #1
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	b21a      	sxth	r2, r3
 8002d14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	23ae      	movs	r3, #174	@ 0xae
 8002d1c:	2199      	movs	r1, #153	@ 0x99
 8002d1e:	f7fe f9f1 	bl	8001104 <LCD_Fill>
	LCD_Fill(363 - shift,181,369 - shift,210,RUBBER);		// clear vertical1 lower
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	f5c3 73b5 	rsb	r3, r3, #362	@ 0x16a
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	b218      	sxth	r0, r3
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	f5c3 73b8 	rsb	r3, r3, #368	@ 0x170
 8002d34:	3301      	adds	r3, #1
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	b21a      	sxth	r2, r3
 8002d3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	23d2      	movs	r3, #210	@ 0xd2
 8002d42:	21b5      	movs	r1, #181	@ 0xb5
 8002d44:	f7fe f9de 	bl	8001104 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(346 - shift,175,374 - shift,180,GRAY);     // horizontal1
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	f5c3 73ad 	rsb	r3, r3, #346	@ 0x15a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	b218      	sxth	r0, r3
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	b21a      	sxth	r2, r3
 8002d5c:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	23b4      	movs	r3, #180	@ 0xb4
 8002d64:	21af      	movs	r1, #175	@ 0xaf
 8002d66:	f7fe f9cd 	bl	8001104 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(345 - shift,160,349 - shift,162,GRAY);     // left1
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 8002d70:	3301      	adds	r3, #1
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	b218      	sxth	r0, r3
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	f5c3 73ae 	rsb	r3, r3, #348	@ 0x15c
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	b21a      	sxth	r2, r3
 8002d82:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	23a2      	movs	r3, #162	@ 0xa2
 8002d8a:	21a0      	movs	r1, #160	@ 0xa0
 8002d8c:	f7fe f9ba 	bl	8001104 <LCD_Fill>
	LCD_Fill(344 - shift,162,350 - shift,178,GRAY);
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	f5c3 73ac 	rsb	r3, r3, #344	@ 0x158
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	b218      	sxth	r0, r3
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b21a      	sxth	r2, r3
 8002da4:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	23b2      	movs	r3, #178	@ 0xb2
 8002dac:	21a2      	movs	r1, #162	@ 0xa2
 8002dae:	f7fe f9a9 	bl	8001104 <LCD_Fill>

	LCD_Fill(350 - shift,160,355 - shift,162,RUBBER);     // clear left1
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	b218      	sxth	r0, r3
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	f5c3 73b1 	rsb	r3, r3, #354	@ 0x162
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	b21a      	sxth	r2, r3
 8002dc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	23a2      	movs	r3, #162	@ 0xa2
 8002dd0:	21a0      	movs	r1, #160	@ 0xa0
 8002dd2:	f7fe f997 	bl	8001104 <LCD_Fill>
	LCD_Fill(351 - shift,162,355 - shift,174,RUBBER);
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	f5c3 73af 	rsb	r3, r3, #350	@ 0x15e
 8002ddc:	3301      	adds	r3, #1
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	b218      	sxth	r0, r3
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	f5c3 73b1 	rsb	r3, r3, #354	@ 0x162
 8002de8:	3301      	adds	r3, #1
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	b21a      	sxth	r2, r3
 8002dee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	23ae      	movs	r3, #174	@ 0xae
 8002df6:	21a2      	movs	r1, #162	@ 0xa2
 8002df8:	f7fe f984 	bl	8001104 <LCD_Fill>

	// ----------- RIGHT PART -----------
	LCD_Fill(371 - shift,165,375 - shift,167,GRAY);     // right1
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 8002e02:	3301      	adds	r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b218      	sxth	r0, r3
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8002e0e:	3301      	adds	r3, #1
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	23a7      	movs	r3, #167	@ 0xa7
 8002e1c:	21a5      	movs	r1, #165	@ 0xa5
 8002e1e:	f7fe f971 	bl	8001104 <LCD_Fill>
	LCD_Fill(370 - shift,167,376 - shift,178,GRAY);
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	f5c3 73b9 	rsb	r3, r3, #370	@ 0x172
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	b218      	sxth	r0, r3
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	b21a      	sxth	r2, r3
 8002e36:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	23b2      	movs	r3, #178	@ 0xb2
 8002e3e:	21a7      	movs	r1, #167	@ 0xa7
 8002e40:	f7fe f960 	bl	8001104 <LCD_Fill>

	LCD_Fill(376 - shift,165,382 - shift,167,RUBBER);     // clear right1
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	b218      	sxth	r0, r3
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	b21a      	sxth	r2, r3
 8002e58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	23a7      	movs	r3, #167	@ 0xa7
 8002e60:	21a5      	movs	r1, #165	@ 0xa5
 8002e62:	f7fe f94f 	bl	8001104 <LCD_Fill>
	LCD_Fill(377 - shift,167,383 - shift,178,RUBBER);
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	f5c3 73bc 	rsb	r3, r3, #376	@ 0x178
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	b218      	sxth	r0, r3
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8002e78:	3301      	adds	r3, #1
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	b21a      	sxth	r2, r3
 8002e7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	23b2      	movs	r3, #178	@ 0xb2
 8002e86:	21a7      	movs	r1, #167	@ 0xa7
 8002e88:	f7fe f93c 	bl	8001104 <LCD_Fill>
	LCD_Fill(375 - shift,179,381 - shift,180,RUBBER);
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	f5c3 73bb 	rsb	r3, r3, #374	@ 0x176
 8002e92:	3301      	adds	r3, #1
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b218      	sxth	r0, r3
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	b21a      	sxth	r2, r3
 8002ea4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	23b4      	movs	r3, #180	@ 0xb4
 8002eac:	21b3      	movs	r1, #179	@ 0xb3
 8002eae:	f7fe f929 	bl	8001104 <LCD_Fill>



	// small one
	// ----------- VERTICAL PART -----------
	LCD_Fill(388 - shift,170,392 - shift,172,GRAY);     // vertical2
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	f5c3 73c2 	rsb	r3, r3, #388	@ 0x184
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	b218      	sxth	r0, r3
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	b21a      	sxth	r2, r3
 8002ec6:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	23ac      	movs	r3, #172	@ 0xac
 8002ece:	21aa      	movs	r1, #170	@ 0xaa
 8002ed0:	f7fe f918 	bl	8001104 <LCD_Fill>
	LCD_Fill(387 - shift,172,393 - shift,210,GRAY);
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 8002eda:	3301      	adds	r3, #1
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	b218      	sxth	r0, r3
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	b21a      	sxth	r2, r3
 8002eec:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	23d2      	movs	r3, #210	@ 0xd2
 8002ef4:	21ac      	movs	r1, #172	@ 0xac
 8002ef6:	f7fe f905 	bl	8001104 <LCD_Fill>

	LCD_Fill(393 - shift,170,399 - shift,172,RUBBER);		// clear vertical2
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	f5c3 73c4 	rsb	r3, r3, #392	@ 0x188
 8002f00:	3301      	adds	r3, #1
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	b218      	sxth	r0, r3
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	b21a      	sxth	r2, r3
 8002f12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	23ac      	movs	r3, #172	@ 0xac
 8002f1a:	21aa      	movs	r1, #170	@ 0xaa
 8002f1c:	f7fe f8f2 	bl	8001104 <LCD_Fill>
	LCD_Fill(394 - shift,172,400 - shift,176,RUBBER);		// clear vertical2 upper1
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	b218      	sxth	r0, r3
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	b21a      	sxth	r2, r3
 8002f34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	23b0      	movs	r3, #176	@ 0xb0
 8002f3c:	21ac      	movs	r1, #172	@ 0xac
 8002f3e:	f7fe f8e1 	bl	8001104 <LCD_Fill>
	LCD_Fill(394 - shift,177,396 - shift,185,RUBBER);		// clear vertical2 upper2
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	b218      	sxth	r0, r3
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	b21a      	sxth	r2, r3
 8002f56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	23b9      	movs	r3, #185	@ 0xb9
 8002f5e:	21b1      	movs	r1, #177	@ 0xb1
 8002f60:	f7fe f8d0 	bl	8001104 <LCD_Fill>
	LCD_Fill(394 - shift,191,400 - shift,210,RUBBER);		// clear vertical2 lower
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	f5c3 73c5 	rsb	r3, r3, #394	@ 0x18a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	b218      	sxth	r0, r3
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	b21a      	sxth	r2, r3
 8002f78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	23d2      	movs	r3, #210	@ 0xd2
 8002f80:	21bf      	movs	r1, #191	@ 0xbf
 8002f82:	f7fe f8bf 	bl	8001104 <LCD_Fill>


	// ----------- HORIZONTAL PART -----------
	LCD_Fill(381 - shift,186,399 - shift,190,GRAY);     // horizontal2
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	b218      	sxth	r0, r3
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8002f98:	3301      	adds	r3, #1
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	b21a      	sxth	r2, r3
 8002f9e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	23be      	movs	r3, #190	@ 0xbe
 8002fa6:	21ba      	movs	r1, #186	@ 0xba
 8002fa8:	f7fe f8ac 	bl	8001104 <LCD_Fill>


	// ----------- LEFT PART -----------
	LCD_Fill(380 - shift,180,382 - shift,181,GRAY);     // left2
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	b218      	sxth	r0, r3
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	b21a      	sxth	r2, r3
 8002fc0:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	23b5      	movs	r3, #181	@ 0xb5
 8002fc8:	21b4      	movs	r1, #180	@ 0xb4
 8002fca:	f7fe f89b 	bl	8001104 <LCD_Fill>
	LCD_Fill(379 - shift,181,383 - shift,188,GRAY);
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	f5c3 73bd 	rsb	r3, r3, #378	@ 0x17a
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	b218      	sxth	r0, r3
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	b21a      	sxth	r2, r3
 8002fe6:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	23bc      	movs	r3, #188	@ 0xbc
 8002fee:	21b5      	movs	r1, #181	@ 0xb5
 8002ff0:	f7fe f888 	bl	8001104 <LCD_Fill>

	LCD_Fill(383 - shift,180,386 - shift,181,RUBBER);     // clear left2
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	f5c3 73bf 	rsb	r3, r3, #382	@ 0x17e
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	b218      	sxth	r0, r3
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 8003006:	b29b      	uxth	r3, r3
 8003008:	b21a      	sxth	r2, r3
 800300a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	23b5      	movs	r3, #181	@ 0xb5
 8003012:	21b4      	movs	r1, #180	@ 0xb4
 8003014:	f7fe f876 	bl	8001104 <LCD_Fill>
	LCD_Fill(384 - shift,181,386 - shift,185,RUBBER);
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	f5c3 73c0 	rsb	r3, r3, #384	@ 0x180
 800301e:	b29b      	uxth	r3, r3
 8003020:	b218      	sxth	r0, r3
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	f5c3 73c1 	rsb	r3, r3, #386	@ 0x182
 8003028:	b29b      	uxth	r3, r3
 800302a:	b21a      	sxth	r2, r3
 800302c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	23b9      	movs	r3, #185	@ 0xb9
 8003034:	21b5      	movs	r1, #181	@ 0xb5
 8003036:	f7fe f865 	bl	8001104 <LCD_Fill>


	// ----------- RIGHT PART -----------
	LCD_Fill(397 - shift,177,400 - shift,178,GRAY);     // right2
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8003040:	3301      	adds	r3, #1
 8003042:	b29b      	uxth	r3, r3
 8003044:	b218      	sxth	r0, r3
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 800304c:	b29b      	uxth	r3, r3
 800304e:	b21a      	sxth	r2, r3
 8003050:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	23b2      	movs	r3, #178	@ 0xb2
 8003058:	21b1      	movs	r1, #177	@ 0xb1
 800305a:	f7fe f853 	bl	8001104 <LCD_Fill>
	LCD_Fill(396 - shift,178,401 - shift,188,GRAY);
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	f5c3 73c6 	rsb	r3, r3, #396	@ 0x18c
 8003064:	b29b      	uxth	r3, r3
 8003066:	b218      	sxth	r0, r3
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 800306e:	3301      	adds	r3, #1
 8003070:	b29b      	uxth	r3, r3
 8003072:	b21a      	sxth	r2, r3
 8003074:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	23bc      	movs	r3, #188	@ 0xbc
 800307c:	21b2      	movs	r1, #178	@ 0xb2
 800307e:	f7fe f841 	bl	8001104 <LCD_Fill>

	LCD_Fill(401 - shift,177,407 - shift,178,RUBBER);     // clear right2
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8003088:	3301      	adds	r3, #1
 800308a:	b29b      	uxth	r3, r3
 800308c:	b218      	sxth	r0, r3
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	f5c3 73cb 	rsb	r3, r3, #406	@ 0x196
 8003094:	3301      	adds	r3, #1
 8003096:	b29b      	uxth	r3, r3
 8003098:	b21a      	sxth	r2, r3
 800309a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	23b2      	movs	r3, #178	@ 0xb2
 80030a2:	21b1      	movs	r1, #177	@ 0xb1
 80030a4:	f7fe f82e 	bl	8001104 <LCD_Fill>
	LCD_Fill(402 - shift,178,408 - shift,188,RUBBER);
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	f5c3 73c9 	rsb	r3, r3, #402	@ 0x192
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	b218      	sxth	r0, r3
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	f5c3 73cc 	rsb	r3, r3, #408	@ 0x198
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	b21a      	sxth	r2, r3
 80030bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	23bc      	movs	r3, #188	@ 0xbc
 80030c4:	21b2      	movs	r1, #178	@ 0xb2
 80030c6:	f7fe f81d 	bl	8001104 <LCD_Fill>
	LCD_Fill(400 - shift,189,406 - shift,190,RUBBER);
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	b218      	sxth	r0, r3
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	f5c3 73cb 	rsb	r3, r3, #406	@ 0x196
 80030da:	b29b      	uxth	r3, r3
 80030dc:	b21a      	sxth	r2, r3
 80030de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	23be      	movs	r3, #190	@ 0xbe
 80030e6:	21bd      	movs	r1, #189	@ 0xbd
 80030e8:	f7fe f80c 	bl	8001104 <LCD_Fill>
	LCD_Fill(399 - shift,190,405 - shift,191,RUBBER);
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 80030f2:	3301      	adds	r3, #1
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	b218      	sxth	r0, r3
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	f5c3 73ca 	rsb	r3, r3, #404	@ 0x194
 80030fe:	3301      	adds	r3, #1
 8003100:	b29b      	uxth	r3, r3
 8003102:	b21a      	sxth	r2, r3
 8003104:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	23bf      	movs	r3, #191	@ 0xbf
 800310c:	21be      	movs	r1, #190	@ 0xbe
 800310e:	f7fd fff9 	bl	8001104 <LCD_Fill>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <GameOverText>:


void GameOverText(void)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af02      	add	r7, sp, #8
	LCD_Fill(85,52,107,67,GRAY); // G
 8003120:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2343      	movs	r3, #67	@ 0x43
 8003128:	226b      	movs	r2, #107	@ 0x6b
 800312a:	2134      	movs	r1, #52	@ 0x34
 800312c:	2055      	movs	r0, #85	@ 0x55
 800312e:	f7fd ffe9 	bl	8001104 <LCD_Fill>
	LCD_Fill(85,67,97,92,GRAY); // G
 8003132:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	235c      	movs	r3, #92	@ 0x5c
 800313a:	2261      	movs	r2, #97	@ 0x61
 800313c:	2143      	movs	r1, #67	@ 0x43
 800313e:	2055      	movs	r0, #85	@ 0x55
 8003140:	f7fd ffe0 	bl	8001104 <LCD_Fill>
	LCD_Fill(102,75,112,80,GRAY); // G
 8003144:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2350      	movs	r3, #80	@ 0x50
 800314c:	2270      	movs	r2, #112	@ 0x70
 800314e:	214b      	movs	r1, #75	@ 0x4b
 8003150:	2066      	movs	r0, #102	@ 0x66
 8003152:	f7fd ffd7 	bl	8001104 <LCD_Fill>
	LCD_Fill(105,75,112,87,GRAY); // G
 8003156:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2357      	movs	r3, #87	@ 0x57
 800315e:	2270      	movs	r2, #112	@ 0x70
 8003160:	214b      	movs	r1, #75	@ 0x4b
 8003162:	2069      	movs	r0, #105	@ 0x69
 8003164:	f7fd ffce 	bl	8001104 <LCD_Fill>
	LCD_Fill(85,87,112,97,GRAY); // G
 8003168:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2361      	movs	r3, #97	@ 0x61
 8003170:	2270      	movs	r2, #112	@ 0x70
 8003172:	2157      	movs	r1, #87	@ 0x57
 8003174:	2055      	movs	r0, #85	@ 0x55
 8003176:	f7fd ffc5 	bl	8001104 <LCD_Fill>

	LCD_Fill(115,52,140,67,GRAY); // A
 800317a:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2343      	movs	r3, #67	@ 0x43
 8003182:	228c      	movs	r2, #140	@ 0x8c
 8003184:	2134      	movs	r1, #52	@ 0x34
 8003186:	2073      	movs	r0, #115	@ 0x73
 8003188:	f7fd ffbc 	bl	8001104 <LCD_Fill>
	LCD_Fill(115,67,125,97,GRAY);  // A
 800318c:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2361      	movs	r3, #97	@ 0x61
 8003194:	227d      	movs	r2, #125	@ 0x7d
 8003196:	2143      	movs	r1, #67	@ 0x43
 8003198:	2073      	movs	r0, #115	@ 0x73
 800319a:	f7fd ffb3 	bl	8001104 <LCD_Fill>
	LCD_Fill(130,67,140,97,GRAY); // A
 800319e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2361      	movs	r3, #97	@ 0x61
 80031a6:	228c      	movs	r2, #140	@ 0x8c
 80031a8:	2143      	movs	r1, #67	@ 0x43
 80031aa:	2082      	movs	r0, #130	@ 0x82
 80031ac:	f7fd ffaa 	bl	8001104 <LCD_Fill>
	LCD_Fill(120,82,135,87,GRAY); // A
 80031b0:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2357      	movs	r3, #87	@ 0x57
 80031b8:	2287      	movs	r2, #135	@ 0x87
 80031ba:	2152      	movs	r1, #82	@ 0x52
 80031bc:	2078      	movs	r0, #120	@ 0x78
 80031be:	f7fd ffa1 	bl	8001104 <LCD_Fill>

	LCD_Fill(147,52,162,97,GRAY); // M
 80031c2:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2361      	movs	r3, #97	@ 0x61
 80031ca:	22a2      	movs	r2, #162	@ 0xa2
 80031cc:	2134      	movs	r1, #52	@ 0x34
 80031ce:	2093      	movs	r0, #147	@ 0x93
 80031d0:	f7fd ff98 	bl	8001104 <LCD_Fill>
	LCD_Fill(162,52,185,67,GRAY); // M
 80031d4:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2343      	movs	r3, #67	@ 0x43
 80031dc:	22b9      	movs	r2, #185	@ 0xb9
 80031de:	2134      	movs	r1, #52	@ 0x34
 80031e0:	20a2      	movs	r0, #162	@ 0xa2
 80031e2:	f7fd ff8f 	bl	8001104 <LCD_Fill>
	LCD_Fill(167,67,177,97,GRAY); // M
 80031e6:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2361      	movs	r3, #97	@ 0x61
 80031ee:	22b1      	movs	r2, #177	@ 0xb1
 80031f0:	2143      	movs	r1, #67	@ 0x43
 80031f2:	20a7      	movs	r0, #167	@ 0xa7
 80031f4:	f7fd ff86 	bl	8001104 <LCD_Fill>
	LCD_Fill(182,52,197,97,GRAY); // M
 80031f8:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	2361      	movs	r3, #97	@ 0x61
 8003200:	22c5      	movs	r2, #197	@ 0xc5
 8003202:	2134      	movs	r1, #52	@ 0x34
 8003204:	20b6      	movs	r0, #182	@ 0xb6
 8003206:	f7fd ff7d 	bl	8001104 <LCD_Fill>

	LCD_Fill(205,52,220,97,GRAY); // E
 800320a:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2361      	movs	r3, #97	@ 0x61
 8003212:	22dc      	movs	r2, #220	@ 0xdc
 8003214:	2134      	movs	r1, #52	@ 0x34
 8003216:	20cd      	movs	r0, #205	@ 0xcd
 8003218:	f7fd ff74 	bl	8001104 <LCD_Fill>
	LCD_Fill(220,52,230,67,GRAY); // E
 800321c:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	2343      	movs	r3, #67	@ 0x43
 8003224:	22e6      	movs	r2, #230	@ 0xe6
 8003226:	2134      	movs	r1, #52	@ 0x34
 8003228:	20dc      	movs	r0, #220	@ 0xdc
 800322a:	f7fd ff6b 	bl	8001104 <LCD_Fill>
	LCD_Fill(220,72,230,82,GRAY); // E
 800322e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2352      	movs	r3, #82	@ 0x52
 8003236:	22e6      	movs	r2, #230	@ 0xe6
 8003238:	2148      	movs	r1, #72	@ 0x48
 800323a:	20dc      	movs	r0, #220	@ 0xdc
 800323c:	f7fd ff62 	bl	8001104 <LCD_Fill>
	LCD_Fill(220,87,230,97,GRAY); // E
 8003240:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2361      	movs	r3, #97	@ 0x61
 8003248:	22e6      	movs	r2, #230	@ 0xe6
 800324a:	2157      	movs	r1, #87	@ 0x57
 800324c:	20dc      	movs	r0, #220	@ 0xdc
 800324e:	f7fd ff59 	bl	8001104 <LCD_Fill>

	LCD_Fill(85,112,100,157,GRAY); // O
 8003252:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	239d      	movs	r3, #157	@ 0x9d
 800325a:	2264      	movs	r2, #100	@ 0x64
 800325c:	2170      	movs	r1, #112	@ 0x70
 800325e:	2055      	movs	r0, #85	@ 0x55
 8003260:	f7fd ff50 	bl	8001104 <LCD_Fill>
	LCD_Fill(100,112,115,127,GRAY); // O
 8003264:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	237f      	movs	r3, #127	@ 0x7f
 800326c:	2273      	movs	r2, #115	@ 0x73
 800326e:	2170      	movs	r1, #112	@ 0x70
 8003270:	2064      	movs	r0, #100	@ 0x64
 8003272:	f7fd ff47 	bl	8001104 <LCD_Fill>
	LCD_Fill(115,127,130,142,GRAY); // O
 8003276:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	238e      	movs	r3, #142	@ 0x8e
 800327e:	2282      	movs	r2, #130	@ 0x82
 8003280:	217f      	movs	r1, #127	@ 0x7f
 8003282:	2073      	movs	r0, #115	@ 0x73
 8003284:	f7fd ff3e 	bl	8001104 <LCD_Fill>
	LCD_Fill(100,142,130,157,GRAY); // O
 8003288:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	239d      	movs	r3, #157	@ 0x9d
 8003290:	2282      	movs	r2, #130	@ 0x82
 8003292:	218e      	movs	r1, #142	@ 0x8e
 8003294:	2064      	movs	r0, #100	@ 0x64
 8003296:	f7fd ff35 	bl	8001104 <LCD_Fill>

	LCD_Fill(137,112,147,147,GRAY); // V
 800329a:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	2393      	movs	r3, #147	@ 0x93
 80032a2:	2293      	movs	r2, #147	@ 0x93
 80032a4:	2170      	movs	r1, #112	@ 0x70
 80032a6:	2089      	movs	r0, #137	@ 0x89
 80032a8:	f7fd ff2c 	bl	8001104 <LCD_Fill>
	LCD_Fill(147,147,157,157,GRAY); // V
 80032ac:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	239d      	movs	r3, #157	@ 0x9d
 80032b4:	229d      	movs	r2, #157	@ 0x9d
 80032b6:	2193      	movs	r1, #147	@ 0x93
 80032b8:	2093      	movs	r0, #147	@ 0x93
 80032ba:	f7fd ff23 	bl	8001104 <LCD_Fill>
	LCD_Fill(157,112,167,147,GRAY); // V
 80032be:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	2393      	movs	r3, #147	@ 0x93
 80032c6:	22a7      	movs	r2, #167	@ 0xa7
 80032c8:	2170      	movs	r1, #112	@ 0x70
 80032ca:	209d      	movs	r0, #157	@ 0x9d
 80032cc:	f7fd ff1a 	bl	8001104 <LCD_Fill>

	LCD_Fill(175,112,190,157,GRAY); // E
 80032d0:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	239d      	movs	r3, #157	@ 0x9d
 80032d8:	22be      	movs	r2, #190	@ 0xbe
 80032da:	2170      	movs	r1, #112	@ 0x70
 80032dc:	20af      	movs	r0, #175	@ 0xaf
 80032de:	f7fd ff11 	bl	8001104 <LCD_Fill>
	LCD_Fill(190,112,200,127,GRAY); // E
 80032e2:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	237f      	movs	r3, #127	@ 0x7f
 80032ea:	22c8      	movs	r2, #200	@ 0xc8
 80032ec:	2170      	movs	r1, #112	@ 0x70
 80032ee:	20be      	movs	r0, #190	@ 0xbe
 80032f0:	f7fd ff08 	bl	8001104 <LCD_Fill>
	LCD_Fill(190,132,200,142,GRAY); // E
 80032f4:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	238e      	movs	r3, #142	@ 0x8e
 80032fc:	22c8      	movs	r2, #200	@ 0xc8
 80032fe:	2184      	movs	r1, #132	@ 0x84
 8003300:	20be      	movs	r0, #190	@ 0xbe
 8003302:	f7fd feff 	bl	8001104 <LCD_Fill>
	LCD_Fill(190,147,200,157,GRAY); // E
 8003306:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	239d      	movs	r3, #157	@ 0x9d
 800330e:	22c8      	movs	r2, #200	@ 0xc8
 8003310:	2193      	movs	r1, #147	@ 0x93
 8003312:	20be      	movs	r0, #190	@ 0xbe
 8003314:	f7fd fef6 	bl	8001104 <LCD_Fill>

	LCD_Fill(207,112,222,157,GRAY); // R
 8003318:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	239d      	movs	r3, #157	@ 0x9d
 8003320:	22de      	movs	r2, #222	@ 0xde
 8003322:	2170      	movs	r1, #112	@ 0x70
 8003324:	20cf      	movs	r0, #207	@ 0xcf
 8003326:	f7fd feed 	bl	8001104 <LCD_Fill>
	LCD_Fill(222,112,232,127,GRAY); // R
 800332a:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	237f      	movs	r3, #127	@ 0x7f
 8003332:	22e8      	movs	r2, #232	@ 0xe8
 8003334:	2170      	movs	r1, #112	@ 0x70
 8003336:	20de      	movs	r0, #222	@ 0xde
 8003338:	f7fd fee4 	bl	8001104 <LCD_Fill>
	LCD_Fill(232,127,242,142,GRAY); // R
 800333c:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	238e      	movs	r3, #142	@ 0x8e
 8003344:	22f2      	movs	r2, #242	@ 0xf2
 8003346:	217f      	movs	r1, #127	@ 0x7f
 8003348:	20e8      	movs	r0, #232	@ 0xe8
 800334a:	f7fd fedb 	bl	8001104 <LCD_Fill>
	LCD_Fill(222,122,232,132,GRAY); // R
 800334e:	f245 23aa 	movw	r3, #21162	@ 0x52aa
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2384      	movs	r3, #132	@ 0x84
 8003356:	22e8      	movs	r2, #232	@ 0xe8
 8003358:	217a      	movs	r1, #122	@ 0x7a
 800335a:	20de      	movs	r0, #222	@ 0xde
 800335c:	f7fd fed2 	bl	8001104 <LCD_Fill>

}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <RandomNumbers>:
/* USER CODE BEGIN 0 */

uint32_t adc_value;

void RandomNumbers(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	  HAL_ADC_Start(&hadc2); // ADC start conversion
 800336c:	480a      	ldr	r0, [pc, #40]	@ (8003398 <RandomNumbers+0x30>)
 800336e:	f000 fd87 	bl	8003e80 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8003372:	f04f 31ff 	mov.w	r1, #4294967295
 8003376:	4808      	ldr	r0, [pc, #32]	@ (8003398 <RandomNumbers+0x30>)
 8003378:	f000 fece 	bl	8004118 <HAL_ADC_PollForConversion>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d105      	bne.n	800338e <RandomNumbers+0x26>
	  {
		  adc_value = HAL_ADC_GetValue(&hadc2); // ADC value
 8003382:	4805      	ldr	r0, [pc, #20]	@ (8003398 <RandomNumbers+0x30>)
 8003384:	f000 ffca 	bl	800431c <HAL_ADC_GetValue>
 8003388:	4603      	mov	r3, r0
 800338a:	4a04      	ldr	r2, [pc, #16]	@ (800339c <RandomNumbers+0x34>)
 800338c:	6013      	str	r3, [r2, #0]
	  }
	  HAL_ADC_Stop(&hadc2); // ADC stop conversion
 800338e:	4802      	ldr	r0, [pc, #8]	@ (8003398 <RandomNumbers+0x30>)
 8003390:	f000 fe8c 	bl	80040ac <HAL_ADC_Stop>
}
 8003394:	bf00      	nop
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200000c8 	.word	0x200000c8
 800339c:	20000164 	.word	0x20000164

080033a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033a4:	f000 fb0c 	bl	80039c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033a8:	f000 f814 	bl	80033d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ac:	f000 f922 	bl	80035f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80033b0:	f000 f8d2 	bl	8003558 <MX_TIM2_Init>
  MX_ADC2_Init();
 80033b4:	f000 f872 	bl	800349c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  delay_init(72);			// delay initialization (System Clock [MHz])
 80033b8:	2048      	movs	r0, #72	@ 0x48
 80033ba:	f7fe f8dd 	bl	8001578 <delay_init>
  ILI9341_paradriver_Init();			// initialization of LCD driver
 80033be:	f7fd f82d 	bl	800041c <ILI9341_paradriver_Init>

  HAL_TIM_Base_Start_IT(&htim2);	// timer start (60Hz refresh rate)
 80033c2:	4803      	ldr	r0, [pc, #12]	@ (80033d0 <main+0x30>)
 80033c4:	f003 fba4 	bl	8006b10 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	GAME();
 80033c8:	f7fe fcf4 	bl	8001db4 <GAME>
 80033cc:	e7fc      	b.n	80033c8 <main+0x28>
 80033ce:	bf00      	nop
 80033d0:	20000118 	.word	0x20000118

080033d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b0a6      	sub	sp, #152	@ 0x98
 80033d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033da:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80033de:	2228      	movs	r2, #40	@ 0x28
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f004 f810 	bl	8007408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	2258      	movs	r2, #88	@ 0x58
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 f802 	bl	8007408 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003404:	2302      	movs	r3, #2
 8003406:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003408:	2301      	movs	r3, #1
 800340a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800340c:	2310      	movs	r3, #16
 800340e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003412:	2302      	movs	r3, #2
 8003414:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800341c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003420:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003424:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800342e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003432:	4618      	mov	r0, r3
 8003434:	f001 fed2 	bl	80051dc <HAL_RCC_OscConfig>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800343e:	f000 f969 	bl	8003714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003442:	230f      	movs	r3, #15
 8003444:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003446:	2302      	movs	r3, #2
 8003448:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800344a:	2300      	movs	r3, #0
 800344c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800344e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003452:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003454:	2300      	movs	r3, #0
 8003456:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003458:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800345c:	2102      	movs	r1, #2
 800345e:	4618      	mov	r0, r3
 8003460:	f002 ff10 	bl	8006284 <HAL_RCC_ClockConfig>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800346a:	f000 f953 	bl	8003714 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <SystemClock_Config+0xc4>)
 8003470:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003472:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8003478:	2300      	movs	r3, #0
 800347a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800347c:	1d3b      	adds	r3, r7, #4
 800347e:	4618      	mov	r0, r3
 8003480:	f003 f8d0 	bl	8006624 <HAL_RCCEx_PeriphCLKConfig>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800348a:	f000 f943 	bl	8003714 <Error_Handler>
  }
}
 800348e:	bf00      	nop
 8003490:	3798      	adds	r7, #152	@ 0x98
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	00100080 	.word	0x00100080

0800349c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034a2:	463b      	mov	r3, r7
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
 80034b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80034b2:	4b27      	ldr	r3, [pc, #156]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034b4:	4a27      	ldr	r2, [pc, #156]	@ (8003554 <MX_ADC2_Init+0xb8>)
 80034b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80034b8:	4b25      	ldr	r3, [pc, #148]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80034be:	4b24      	ldr	r3, [pc, #144]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80034c4:	4b22      	ldr	r3, [pc, #136]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80034ca:	4b21      	ldr	r3, [pc, #132]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80034d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034da:	2200      	movs	r2, #0
 80034dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034de:	4b1c      	ldr	r3, [pc, #112]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80034ea:	4b19      	ldr	r3, [pc, #100]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80034f0:	4b17      	ldr	r3, [pc, #92]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034f8:	4b15      	ldr	r3, [pc, #84]	@ (8003550 <MX_ADC2_Init+0xb4>)
 80034fa:	2204      	movs	r2, #4
 80034fc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80034fe:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <MX_ADC2_Init+0xb4>)
 8003500:	2200      	movs	r2, #0
 8003502:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003504:	4b12      	ldr	r3, [pc, #72]	@ (8003550 <MX_ADC2_Init+0xb4>)
 8003506:	2200      	movs	r2, #0
 8003508:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800350a:	4811      	ldr	r0, [pc, #68]	@ (8003550 <MX_ADC2_Init+0xb4>)
 800350c:	f000 fabe 	bl	8003a8c <HAL_ADC_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8003516:	f000 f8fd 	bl	8003714 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800351a:	2303      	movs	r3, #3
 800351c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800351e:	2301      	movs	r3, #1
 8003520:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800352a:	2300      	movs	r3, #0
 800352c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003532:	463b      	mov	r3, r7
 8003534:	4619      	mov	r1, r3
 8003536:	4806      	ldr	r0, [pc, #24]	@ (8003550 <MX_ADC2_Init+0xb4>)
 8003538:	f000 fefe 	bl	8004338 <HAL_ADC_ConfigChannel>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8003542:	f000 f8e7 	bl	8003714 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003546:	bf00      	nop
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200000c8 	.word	0x200000c8
 8003554:	50000100 	.word	0x50000100

08003558 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800355e:	f107 0310 	add.w	r3, r7, #16
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003576:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <MX_TIM2_Init+0x98>)
 8003578:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800357c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 178;
 800357e:	4b1c      	ldr	r3, [pc, #112]	@ (80035f0 <MX_TIM2_Init+0x98>)
 8003580:	22b2      	movs	r2, #178	@ 0xb2
 8003582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003584:	4b1a      	ldr	r3, [pc, #104]	@ (80035f0 <MX_TIM2_Init+0x98>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 800358a:	4b19      	ldr	r3, [pc, #100]	@ (80035f0 <MX_TIM2_Init+0x98>)
 800358c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8003590:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003592:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <MX_TIM2_Init+0x98>)
 8003594:	2200      	movs	r2, #0
 8003596:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003598:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <MX_TIM2_Init+0x98>)
 800359a:	2200      	movs	r2, #0
 800359c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800359e:	4814      	ldr	r0, [pc, #80]	@ (80035f0 <MX_TIM2_Init+0x98>)
 80035a0:	f003 fa5e 	bl	8006a60 <HAL_TIM_Base_Init>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80035aa:	f000 f8b3 	bl	8003714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035b4:	f107 0310 	add.w	r3, r7, #16
 80035b8:	4619      	mov	r1, r3
 80035ba:	480d      	ldr	r0, [pc, #52]	@ (80035f0 <MX_TIM2_Init+0x98>)
 80035bc:	f003 fc1a 	bl	8006df4 <HAL_TIM_ConfigClockSource>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80035c6:	f000 f8a5 	bl	8003714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035d2:	1d3b      	adds	r3, r7, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4806      	ldr	r0, [pc, #24]	@ (80035f0 <MX_TIM2_Init+0x98>)
 80035d8:	f003 fe4c 	bl	8007274 <HAL_TIMEx_MasterConfigSynchronization>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80035e2:	f000 f897 	bl	8003714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80035e6:	bf00      	nop
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000118 	.word	0x20000118

080035f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fa:	f107 030c 	add.w	r3, r7, #12
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	60da      	str	r2, [r3, #12]
 8003608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800360a:	4b3f      	ldr	r3, [pc, #252]	@ (8003708 <MX_GPIO_Init+0x114>)
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4a3e      	ldr	r2, [pc, #248]	@ (8003708 <MX_GPIO_Init+0x114>)
 8003610:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003614:	6153      	str	r3, [r2, #20]
 8003616:	4b3c      	ldr	r3, [pc, #240]	@ (8003708 <MX_GPIO_Init+0x114>)
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003622:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <MX_GPIO_Init+0x114>)
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	4a38      	ldr	r2, [pc, #224]	@ (8003708 <MX_GPIO_Init+0x114>)
 8003628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800362c:	6153      	str	r3, [r2, #20]
 800362e:	4b36      	ldr	r3, [pc, #216]	@ (8003708 <MX_GPIO_Init+0x114>)
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800363a:	4b33      	ldr	r3, [pc, #204]	@ (8003708 <MX_GPIO_Init+0x114>)
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	4a32      	ldr	r2, [pc, #200]	@ (8003708 <MX_GPIO_Init+0x114>)
 8003640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003644:	6153      	str	r3, [r2, #20]
 8003646:	4b30      	ldr	r3, [pc, #192]	@ (8003708 <MX_GPIO_Init+0x114>)
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003652:	2201      	movs	r2, #1
 8003654:	211f      	movs	r1, #31
 8003656:	482d      	ldr	r0, [pc, #180]	@ (800370c <MX_GPIO_Init+0x118>)
 8003658:	f001 fda8 	bl	80051ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800365c:	2200      	movs	r2, #0
 800365e:	21aa      	movs	r1, #170	@ 0xaa
 8003660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003664:	f001 fda2 	bl	80051ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003668:	2201      	movs	r2, #1
 800366a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800366e:	4828      	ldr	r0, [pc, #160]	@ (8003710 <MX_GPIO_Init+0x11c>)
 8003670:	f001 fd9c 	bl	80051ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003674:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800367e:	2301      	movs	r3, #1
 8003680:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003682:	f107 030c 	add.w	r3, r7, #12
 8003686:	4619      	mov	r1, r3
 8003688:	4820      	ldr	r0, [pc, #128]	@ (800370c <MX_GPIO_Init+0x118>)
 800368a:	f001 fbed 	bl	8004e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800368e:	231f      	movs	r3, #31
 8003690:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003692:	2301      	movs	r3, #1
 8003694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369e:	f107 030c 	add.w	r3, r7, #12
 80036a2:	4619      	mov	r1, r3
 80036a4:	4819      	ldr	r0, [pc, #100]	@ (800370c <MX_GPIO_Init+0x118>)
 80036a6:	f001 fbdf 	bl	8004e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 80036aa:	23aa      	movs	r3, #170	@ 0xaa
 80036ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ae:	2301      	movs	r3, #1
 80036b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036b2:	2301      	movs	r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036b6:	2303      	movs	r3, #3
 80036b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	4619      	mov	r1, r3
 80036c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036c4:	f001 fbd0 	bl	8004e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80036c8:	2314      	movs	r3, #20
 80036ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036d0:	2301      	movs	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	4619      	mov	r1, r3
 80036da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036de:	f001 fbc3 	bl	8004e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80036e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036e6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e8:	2301      	movs	r3, #1
 80036ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f4:	f107 030c 	add.w	r3, r7, #12
 80036f8:	4619      	mov	r1, r3
 80036fa:	4805      	ldr	r0, [pc, #20]	@ (8003710 <MX_GPIO_Init+0x11c>)
 80036fc:	f001 fbb4 	bl	8004e68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003700:	bf00      	nop
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000
 800370c:	48000800 	.word	0x48000800
 8003710:	48000400 	.word	0x48000400

08003714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003718:	b672      	cpsid	i
}
 800371a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <Error_Handler+0x8>

08003720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003726:	4b0f      	ldr	r3, [pc, #60]	@ (8003764 <HAL_MspInit+0x44>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	4a0e      	ldr	r2, [pc, #56]	@ (8003764 <HAL_MspInit+0x44>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6193      	str	r3, [r2, #24]
 8003732:	4b0c      	ldr	r3, [pc, #48]	@ (8003764 <HAL_MspInit+0x44>)
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	607b      	str	r3, [r7, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800373e:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <HAL_MspInit+0x44>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4a08      	ldr	r2, [pc, #32]	@ (8003764 <HAL_MspInit+0x44>)
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003748:	61d3      	str	r3, [r2, #28]
 800374a:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <HAL_MspInit+0x44>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000

08003768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	@ 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a15      	ldr	r2, [pc, #84]	@ (80037dc <HAL_ADC_MspInit+0x74>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d124      	bne.n	80037d4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800378a:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <HAL_ADC_MspInit+0x78>)
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	4a14      	ldr	r2, [pc, #80]	@ (80037e0 <HAL_ADC_MspInit+0x78>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003794:	6153      	str	r3, [r2, #20]
 8003796:	4b12      	ldr	r3, [pc, #72]	@ (80037e0 <HAL_ADC_MspInit+0x78>)
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <HAL_ADC_MspInit+0x78>)
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	4a0e      	ldr	r2, [pc, #56]	@ (80037e0 <HAL_ADC_MspInit+0x78>)
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ac:	6153      	str	r3, [r2, #20]
 80037ae:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <HAL_ADC_MspInit+0x78>)
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037ba:	2340      	movs	r3, #64	@ 0x40
 80037bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037be:	2303      	movs	r3, #3
 80037c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c6:	f107 0314 	add.w	r3, r7, #20
 80037ca:	4619      	mov	r1, r3
 80037cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037d0:	f001 fb4a 	bl	8004e68 <HAL_GPIO_Init>

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 80037d4:	bf00      	nop
 80037d6:	3728      	adds	r7, #40	@ 0x28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	50000100 	.word	0x50000100
 80037e0:	40021000 	.word	0x40021000

080037e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f4:	d113      	bne.n	800381e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003828 <HAL_TIM_Base_MspInit+0x44>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003828 <HAL_TIM_Base_MspInit+0x44>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	61d3      	str	r3, [r2, #28]
 8003802:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <HAL_TIM_Base_MspInit+0x44>)
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	201c      	movs	r0, #28
 8003814:	f001 fad5 	bl	8004dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003818:	201c      	movs	r0, #28
 800381a:	f001 faee 	bl	8004dfa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000

0800382c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <NMI_Handler+0x4>

08003834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <HardFault_Handler+0x4>

0800383c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003840:	bf00      	nop
 8003842:	e7fd      	b.n	8003840 <MemManage_Handler+0x4>

08003844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <BusFault_Handler+0x4>

0800384c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <UsageFault_Handler+0x4>

08003854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003882:	f000 f8e3 	bl	8003a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003890:	480f      	ldr	r0, [pc, #60]	@ (80038d0 <TIM2_IRQHandler+0x44>)
 8003892:	f003 f9ad 	bl	8006bf0 <HAL_TIM_IRQHandler>
  }
  else
  {
	  refresh = 0;
  }*/
refresh++;
 8003896:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <TIM2_IRQHandler+0x48>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4b0d      	ldr	r3, [pc, #52]	@ (80038d4 <TIM2_IRQHandler+0x48>)
 80038a0:	701a      	strb	r2, [r3, #0]
if(refresh>1)
 80038a2:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <TIM2_IRQHandler+0x48>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d902      	bls.n	80038b0 <TIM2_IRQHandler+0x24>
{
	refresh=0;
 80038aa:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <TIM2_IRQHandler+0x48>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
}

obs_refresh++;
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <TIM2_IRQHandler+0x4c>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <TIM2_IRQHandler+0x4c>)
 80038ba:	701a      	strb	r2, [r3, #0]
if(obs_refresh>3)
 80038bc:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <TIM2_IRQHandler+0x4c>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d902      	bls.n	80038ca <TIM2_IRQHandler+0x3e>
{
	obs_refresh=0;
 80038c4:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <TIM2_IRQHandler+0x4c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]
}



  /* USER CODE END TIM2_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000118 	.word	0x20000118
 80038d4:	20000168 	.word	0x20000168
 80038d8:	20000169 	.word	0x20000169

080038dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038e4:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <_sbrk+0x5c>)
 80038e6:	4b15      	ldr	r3, [pc, #84]	@ (800393c <_sbrk+0x60>)
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038f0:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <_sbrk+0x64>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038f8:	4b11      	ldr	r3, [pc, #68]	@ (8003940 <_sbrk+0x64>)
 80038fa:	4a12      	ldr	r2, [pc, #72]	@ (8003944 <_sbrk+0x68>)
 80038fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038fe:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <_sbrk+0x64>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	429a      	cmp	r2, r3
 800390a:	d207      	bcs.n	800391c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800390c:	f003 fd84 	bl	8007418 <__errno>
 8003910:	4603      	mov	r3, r0
 8003912:	220c      	movs	r2, #12
 8003914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	e009      	b.n	8003930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800391c:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <_sbrk+0x64>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003922:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <_sbrk+0x64>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	4a05      	ldr	r2, [pc, #20]	@ (8003940 <_sbrk+0x64>)
 800392c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800392e:	68fb      	ldr	r3, [r7, #12]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20010000 	.word	0x20010000
 800393c:	00000400 	.word	0x00000400
 8003940:	2000016c 	.word	0x2000016c
 8003944:	200002c0 	.word	0x200002c0

08003948 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800394c:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <SystemInit+0x20>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003952:	4a05      	ldr	r2, [pc, #20]	@ (8003968 <SystemInit+0x20>)
 8003954:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003958:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800396c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003970:	f7ff ffea 	bl	8003948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003974:	480c      	ldr	r0, [pc, #48]	@ (80039a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003976:	490d      	ldr	r1, [pc, #52]	@ (80039ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003978:	4a0d      	ldr	r2, [pc, #52]	@ (80039b0 <LoopForever+0xe>)
  movs r3, #0
 800397a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800397c:	e002      	b.n	8003984 <LoopCopyDataInit>

0800397e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800397e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003982:	3304      	adds	r3, #4

08003984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003988:	d3f9      	bcc.n	800397e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800398a:	4a0a      	ldr	r2, [pc, #40]	@ (80039b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800398c:	4c0a      	ldr	r4, [pc, #40]	@ (80039b8 <LoopForever+0x16>)
  movs r3, #0
 800398e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003990:	e001      	b.n	8003996 <LoopFillZerobss>

08003992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003994:	3204      	adds	r2, #4

08003996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003998:	d3fb      	bcc.n	8003992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800399a:	f003 fd43 	bl	8007424 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800399e:	f7ff fcff 	bl	80033a0 <main>

080039a2 <LoopForever>:

LoopForever:
    b LoopForever
 80039a2:	e7fe      	b.n	80039a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80039a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80039a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80039b0:	08008804 	.word	0x08008804
  ldr r2, =_sbss
 80039b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80039b8:	200002bc 	.word	0x200002bc

080039bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039bc:	e7fe      	b.n	80039bc <ADC1_2_IRQHandler>
	...

080039c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039c4:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <HAL_Init+0x28>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a07      	ldr	r2, [pc, #28]	@ (80039e8 <HAL_Init+0x28>)
 80039ca:	f043 0310 	orr.w	r3, r3, #16
 80039ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d0:	2003      	movs	r0, #3
 80039d2:	f001 f9eb 	bl	8004dac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039d6:	200f      	movs	r0, #15
 80039d8:	f000 f808 	bl	80039ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039dc:	f7ff fea0 	bl	8003720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40022000 	.word	0x40022000

080039ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039f4:	4b12      	ldr	r3, [pc, #72]	@ (8003a40 <HAL_InitTick+0x54>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <HAL_InitTick+0x58>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fa03 	bl	8004e16 <HAL_SYSTICK_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e00e      	b.n	8003a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b0f      	cmp	r3, #15
 8003a1e:	d80a      	bhi.n	8003a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a20:	2200      	movs	r2, #0
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f001 f9cb 	bl	8004dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a2c:	4a06      	ldr	r2, [pc, #24]	@ (8003a48 <HAL_InitTick+0x5c>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	2000000c 	.word	0x2000000c
 8003a44:	20000014 	.word	0x20000014
 8003a48:	20000010 	.word	0x20000010

08003a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a50:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <HAL_IncTick+0x20>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <HAL_IncTick+0x24>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	4a04      	ldr	r2, [pc, #16]	@ (8003a70 <HAL_IncTick+0x24>)
 8003a5e:	6013      	str	r3, [r2, #0]
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000014 	.word	0x20000014
 8003a70:	20000170 	.word	0x20000170

08003a74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return uwTick;  
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <HAL_GetTick+0x14>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000170 	.word	0x20000170

08003a8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b09a      	sub	sp, #104	@ 0x68
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e1e3      	b.n	8003e74 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d176      	bne.n	8003bac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d152      	bne.n	8003b6c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fe41 	bl	8003768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d13b      	bne.n	8003b6c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 ff6d 	bl	80049d4 <ADC_Disable>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d12f      	bne.n	8003b6c <HAL_ADC_Init+0xe0>
 8003b0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d12b      	bne.n	8003b6c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b1c:	f023 0302 	bic.w	r3, r3, #2
 8003b20:	f043 0202 	orr.w	r2, r3, #2
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b36:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003b46:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b48:	4b92      	ldr	r3, [pc, #584]	@ (8003d94 <HAL_ADC_Init+0x308>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a92      	ldr	r2, [pc, #584]	@ (8003d98 <HAL_ADC_Init+0x30c>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	0c9a      	lsrs	r2, r3, #18
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b5e:	e002      	b.n	8003b66 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f9      	bne.n	8003b60 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b88:	d110      	bne.n	8003bac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	f023 0312 	bic.w	r3, r3, #18
 8003b92:	f043 0210 	orr.w	r2, r3, #16
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	f043 0201 	orr.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f040 8150 	bne.w	8003e5a <HAL_ADC_Init+0x3ce>
 8003bba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 814b 	bne.w	8003e5a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 8143 	bne.w	8003e5a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003bdc:	f043 0202 	orr.w	r2, r3, #2
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bec:	d004      	beq.n	8003bf8 <HAL_ADC_Init+0x16c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a6a      	ldr	r2, [pc, #424]	@ (8003d9c <HAL_ADC_Init+0x310>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_Init+0x170>
 8003bf8:	4b69      	ldr	r3, [pc, #420]	@ (8003da0 <HAL_ADC_Init+0x314>)
 8003bfa:	e000      	b.n	8003bfe <HAL_ADC_Init+0x172>
 8003bfc:	4b69      	ldr	r3, [pc, #420]	@ (8003da4 <HAL_ADC_Init+0x318>)
 8003bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c08:	d102      	bne.n	8003c10 <HAL_ADC_Init+0x184>
 8003c0a:	4b64      	ldr	r3, [pc, #400]	@ (8003d9c <HAL_ADC_Init+0x310>)
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e01a      	b.n	8003c46 <HAL_ADC_Init+0x1ba>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a61      	ldr	r2, [pc, #388]	@ (8003d9c <HAL_ADC_Init+0x310>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d103      	bne.n	8003c22 <HAL_ADC_Init+0x196>
 8003c1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e011      	b.n	8003c46 <HAL_ADC_Init+0x1ba>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a60      	ldr	r2, [pc, #384]	@ (8003da8 <HAL_ADC_Init+0x31c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d102      	bne.n	8003c32 <HAL_ADC_Init+0x1a6>
 8003c2c:	4b5f      	ldr	r3, [pc, #380]	@ (8003dac <HAL_ADC_Init+0x320>)
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e009      	b.n	8003c46 <HAL_ADC_Init+0x1ba>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a5d      	ldr	r2, [pc, #372]	@ (8003dac <HAL_ADC_Init+0x320>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d102      	bne.n	8003c42 <HAL_ADC_Init+0x1b6>
 8003c3c:	4b5a      	ldr	r3, [pc, #360]	@ (8003da8 <HAL_ADC_Init+0x31c>)
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e001      	b.n	8003c46 <HAL_ADC_Init+0x1ba>
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d108      	bne.n	8003c66 <HAL_ADC_Init+0x1da>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_ADC_Init+0x1da>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_ADC_Init+0x1dc>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d11c      	bne.n	8003ca6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d010      	beq.n	8003c94 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d107      	bne.n	8003c8e <HAL_ADC_Init+0x202>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_Init+0x202>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_ADC_Init+0x204>
 8003c8e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d108      	bne.n	8003ca6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ca4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	7e5b      	ldrb	r3, [r3, #25]
 8003caa:	035b      	lsls	r3, r3, #13
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cb0:	2a01      	cmp	r2, #1
 8003cb2:	d002      	beq.n	8003cba <HAL_ADC_Init+0x22e>
 8003cb4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003cb8:	e000      	b.n	8003cbc <HAL_ADC_Init+0x230>
 8003cba:	2200      	movs	r2, #0
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d11b      	bne.n	8003d12 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7e5b      	ldrb	r3, [r3, #25]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	045a      	lsls	r2, r3, #17
 8003cea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cf4:	e00d      	b.n	8003d12 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003cfe:	f043 0220 	orr.w	r2, r3, #32
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d054      	beq.n	8003dc4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a22      	ldr	r2, [pc, #136]	@ (8003da8 <HAL_ADC_Init+0x31c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_ADC_Init+0x2a2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a20      	ldr	r2, [pc, #128]	@ (8003dac <HAL_ADC_Init+0x320>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d140      	bne.n	8003db0 <HAL_ADC_Init+0x324>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d32:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8003d36:	d02a      	beq.n	8003d8e <HAL_ADC_Init+0x302>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d40:	d022      	beq.n	8003d88 <HAL_ADC_Init+0x2fc>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d46:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8003d4a:	d01a      	beq.n	8003d82 <HAL_ADC_Init+0x2f6>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8003d54:	d012      	beq.n	8003d7c <HAL_ADC_Init+0x2f0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8003d5e:	d00a      	beq.n	8003d76 <HAL_ADC_Init+0x2ea>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8003d68:	d002      	beq.n	8003d70 <HAL_ADC_Init+0x2e4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	e023      	b.n	8003db8 <HAL_ADC_Init+0x32c>
 8003d70:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003d74:	e020      	b.n	8003db8 <HAL_ADC_Init+0x32c>
 8003d76:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003d7a:	e01d      	b.n	8003db8 <HAL_ADC_Init+0x32c>
 8003d7c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003d80:	e01a      	b.n	8003db8 <HAL_ADC_Init+0x32c>
 8003d82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d86:	e017      	b.n	8003db8 <HAL_ADC_Init+0x32c>
 8003d88:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8003d8c:	e014      	b.n	8003db8 <HAL_ADC_Init+0x32c>
 8003d8e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003d92:	e011      	b.n	8003db8 <HAL_ADC_Init+0x32c>
 8003d94:	2000000c 	.word	0x2000000c
 8003d98:	431bde83 	.word	0x431bde83
 8003d9c:	50000100 	.word	0x50000100
 8003da0:	50000300 	.word	0x50000300
 8003da4:	50000700 	.word	0x50000700
 8003da8:	50000400 	.word	0x50000400
 8003dac:	50000500 	.word	0x50000500
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d114      	bne.n	8003dfc <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003de0:	f023 0302 	bic.w	r3, r3, #2
 8003de4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7e1b      	ldrb	r3, [r3, #24]
 8003dea:	039a      	lsls	r2, r3, #14
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	4b1e      	ldr	r3, [pc, #120]	@ (8003e7c <HAL_ADC_Init+0x3f0>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10c      	bne.n	8003e32 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	f023 010f 	bic.w	r1, r3, #15
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	1e5a      	subs	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e30:	e007      	b.n	8003e42 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 020f 	bic.w	r2, r2, #15
 8003e40:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	f023 0303 	bic.w	r3, r3, #3
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e58:	e00a      	b.n	8003e70 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	f023 0312 	bic.w	r3, r3, #18
 8003e62:	f043 0210 	orr.w	r2, r3, #16
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003e70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3768      	adds	r7, #104	@ 0x68
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	fff0c007 	.word	0xfff0c007

08003e80 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 80f9 	bne.w	800408e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_ADC_Start+0x2a>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e0f4      	b.n	8004094 <HAL_ADC_Start+0x214>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fd2a 	bl	800490c <ADC_Enable>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f040 80e0 	bne.w	8004084 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ee0:	d004      	beq.n	8003eec <HAL_ADC_Start+0x6c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6d      	ldr	r2, [pc, #436]	@ (800409c <HAL_ADC_Start+0x21c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d106      	bne.n	8003efa <HAL_ADC_Start+0x7a>
 8003eec:	4b6c      	ldr	r3, [pc, #432]	@ (80040a0 <HAL_ADC_Start+0x220>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <HAL_ADC_Start+0x9a>
 8003ef8:	e005      	b.n	8003f06 <HAL_ADC_Start+0x86>
 8003efa:	4b6a      	ldr	r3, [pc, #424]	@ (80040a4 <HAL_ADC_Start+0x224>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_ADC_Start+0x9a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f0e:	d004      	beq.n	8003f1a <HAL_ADC_Start+0x9a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a64      	ldr	r2, [pc, #400]	@ (80040a8 <HAL_ADC_Start+0x228>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d115      	bne.n	8003f46 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d036      	beq.n	8003fa2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f3c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003f44:	e02d      	b.n	8003fa2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f5a:	d004      	beq.n	8003f66 <HAL_ADC_Start+0xe6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a4e      	ldr	r2, [pc, #312]	@ (800409c <HAL_ADC_Start+0x21c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d10a      	bne.n	8003f7c <HAL_ADC_Start+0xfc>
 8003f66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e008      	b.n	8003f8e <HAL_ADC_Start+0x10e>
 8003f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80040a8 <HAL_ADC_Start+0x228>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf14      	ite	ne
 8003f88:	2301      	movne	r3, #1
 8003f8a:	2300      	moveq	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fae:	d106      	bne.n	8003fbe <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb4:	f023 0206 	bic.w	r2, r3, #6
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fbc:	e002      	b.n	8003fc4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	221c      	movs	r2, #28
 8003fd2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fdc:	d004      	beq.n	8003fe8 <HAL_ADC_Start+0x168>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800409c <HAL_ADC_Start+0x21c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d106      	bne.n	8003ff6 <HAL_ADC_Start+0x176>
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80040a0 <HAL_ADC_Start+0x220>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d03e      	beq.n	8004072 <HAL_ADC_Start+0x1f2>
 8003ff4:	e005      	b.n	8004002 <HAL_ADC_Start+0x182>
 8003ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80040a4 <HAL_ADC_Start+0x224>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d037      	beq.n	8004072 <HAL_ADC_Start+0x1f2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800400a:	d004      	beq.n	8004016 <HAL_ADC_Start+0x196>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a22      	ldr	r2, [pc, #136]	@ (800409c <HAL_ADC_Start+0x21c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d106      	bne.n	8004024 <HAL_ADC_Start+0x1a4>
 8004016:	4b22      	ldr	r3, [pc, #136]	@ (80040a0 <HAL_ADC_Start+0x220>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	2b05      	cmp	r3, #5
 8004020:	d027      	beq.n	8004072 <HAL_ADC_Start+0x1f2>
 8004022:	e005      	b.n	8004030 <HAL_ADC_Start+0x1b0>
 8004024:	4b1f      	ldr	r3, [pc, #124]	@ (80040a4 <HAL_ADC_Start+0x224>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	2b05      	cmp	r3, #5
 800402e:	d020      	beq.n	8004072 <HAL_ADC_Start+0x1f2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004038:	d004      	beq.n	8004044 <HAL_ADC_Start+0x1c4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a17      	ldr	r2, [pc, #92]	@ (800409c <HAL_ADC_Start+0x21c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d106      	bne.n	8004052 <HAL_ADC_Start+0x1d2>
 8004044:	4b16      	ldr	r3, [pc, #88]	@ (80040a0 <HAL_ADC_Start+0x220>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2b09      	cmp	r3, #9
 800404e:	d010      	beq.n	8004072 <HAL_ADC_Start+0x1f2>
 8004050:	e005      	b.n	800405e <HAL_ADC_Start+0x1de>
 8004052:	4b14      	ldr	r3, [pc, #80]	@ (80040a4 <HAL_ADC_Start+0x224>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	2b09      	cmp	r3, #9
 800405c:	d009      	beq.n	8004072 <HAL_ADC_Start+0x1f2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004066:	d004      	beq.n	8004072 <HAL_ADC_Start+0x1f2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0e      	ldr	r2, [pc, #56]	@ (80040a8 <HAL_ADC_Start+0x228>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10f      	bne.n	8004092 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0204 	orr.w	r2, r2, #4
 8004080:	609a      	str	r2, [r3, #8]
 8004082:	e006      	b.n	8004092 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800408c:	e001      	b.n	8004092 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800408e:	2302      	movs	r3, #2
 8004090:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	50000100 	.word	0x50000100
 80040a0:	50000300 	.word	0x50000300
 80040a4:	50000700 	.word	0x50000700
 80040a8:	50000400 	.word	0x50000400

080040ac <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_ADC_Stop+0x1a>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e023      	b.n	800410e <HAL_ADC_Stop+0x62>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80040ce:	216c      	movs	r1, #108	@ 0x6c
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fce5 	bl	8004aa0 <ADC_ConversionStop>
 80040d6:	4603      	mov	r3, r0
 80040d8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d111      	bne.n	8004104 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fc77 	bl	80049d4 <ADC_Disable>
 80040e6:	4603      	mov	r3, r0
 80040e8:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	f043 0201 	orr.w	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004122:	2300      	movs	r3, #0
 8004124:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	2b08      	cmp	r3, #8
 800412c:	d102      	bne.n	8004134 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800412e:	2308      	movs	r3, #8
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	e03a      	b.n	80041aa <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800413c:	d004      	beq.n	8004148 <HAL_ADC_PollForConversion+0x30>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a72      	ldr	r2, [pc, #456]	@ (800430c <HAL_ADC_PollForConversion+0x1f4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d101      	bne.n	800414c <HAL_ADC_PollForConversion+0x34>
 8004148:	4b71      	ldr	r3, [pc, #452]	@ (8004310 <HAL_ADC_PollForConversion+0x1f8>)
 800414a:	e000      	b.n	800414e <HAL_ADC_PollForConversion+0x36>
 800414c:	4b71      	ldr	r3, [pc, #452]	@ (8004314 <HAL_ADC_PollForConversion+0x1fc>)
 800414e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	2b00      	cmp	r3, #0
 800415a:	d112      	bne.n	8004182 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b01      	cmp	r3, #1
 8004168:	d11d      	bne.n	80041a6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f043 0220 	orr.w	r2, r3, #32
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e0bf      	b.n	8004302 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	f043 0220 	orr.w	r2, r3, #32
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0ad      	b.n	8004302 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80041a6:	230c      	movs	r3, #12
 80041a8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b2:	d004      	beq.n	80041be <HAL_ADC_PollForConversion+0xa6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a54      	ldr	r2, [pc, #336]	@ (800430c <HAL_ADC_PollForConversion+0x1f4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d106      	bne.n	80041cc <HAL_ADC_PollForConversion+0xb4>
 80041be:	4b54      	ldr	r3, [pc, #336]	@ (8004310 <HAL_ADC_PollForConversion+0x1f8>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d010      	beq.n	80041ec <HAL_ADC_PollForConversion+0xd4>
 80041ca:	e005      	b.n	80041d8 <HAL_ADC_PollForConversion+0xc0>
 80041cc:	4b51      	ldr	r3, [pc, #324]	@ (8004314 <HAL_ADC_PollForConversion+0x1fc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <HAL_ADC_PollForConversion+0xd4>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041e0:	d004      	beq.n	80041ec <HAL_ADC_PollForConversion+0xd4>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a4c      	ldr	r2, [pc, #304]	@ (8004318 <HAL_ADC_PollForConversion+0x200>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d104      	bne.n	80041f6 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	e00f      	b.n	8004216 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041fe:	d004      	beq.n	800420a <HAL_ADC_PollForConversion+0xf2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a41      	ldr	r2, [pc, #260]	@ (800430c <HAL_ADC_PollForConversion+0x1f4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d102      	bne.n	8004210 <HAL_ADC_PollForConversion+0xf8>
 800420a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800420e:	e000      	b.n	8004212 <HAL_ADC_PollForConversion+0xfa>
 8004210:	4b41      	ldr	r3, [pc, #260]	@ (8004318 <HAL_ADC_PollForConversion+0x200>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8004216:	f7ff fc2d 	bl	8003a74 <HAL_GetTick>
 800421a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800421c:	e021      	b.n	8004262 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d01d      	beq.n	8004262 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d007      	beq.n	800423c <HAL_ADC_PollForConversion+0x124>
 800422c:	f7ff fc22 	bl	8003a74 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d212      	bcs.n	8004262 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10b      	bne.n	8004262 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	f043 0204 	orr.w	r2, r3, #4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e04f      	b.n	8004302 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0d6      	beq.n	800421e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004286:	2b00      	cmp	r3, #0
 8004288:	d131      	bne.n	80042ee <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8004290:	2b00      	cmp	r3, #0
 8004292:	d12c      	bne.n	80042ee <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d125      	bne.n	80042ee <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d112      	bne.n	80042d6 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d112      	bne.n	80042ee <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	f043 0201 	orr.w	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80042d4:	e00b      	b.n	80042ee <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	f043 0201 	orr.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d103      	bne.n	8004300 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	50000100 	.word	0x50000100
 8004310:	50000300 	.word	0x50000300
 8004314:	50000700 	.word	0x50000700
 8004318:	50000400 	.word	0x50000400

0800431c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004338:	b480      	push	{r7}
 800433a:	b09b      	sub	sp, #108	@ 0x6c
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_ADC_ConfigChannel+0x22>
 8004356:	2302      	movs	r3, #2
 8004358:	e2c8      	b.n	80048ec <HAL_ADC_ConfigChannel+0x5b4>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	f040 82ac 	bne.w	80048ca <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b04      	cmp	r3, #4
 8004378:	d81c      	bhi.n	80043b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4413      	add	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	461a      	mov	r2, r3
 800438e:	231f      	movs	r3, #31
 8004390:	4093      	lsls	r3, r2
 8004392:	43db      	mvns	r3, r3
 8004394:	4019      	ands	r1, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4413      	add	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	fa00 f203 	lsl.w	r2, r0, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80043b2:	e063      	b.n	800447c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b09      	cmp	r3, #9
 80043ba:	d81e      	bhi.n	80043fa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	3b1e      	subs	r3, #30
 80043d0:	221f      	movs	r2, #31
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	4019      	ands	r1, r3
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4413      	add	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	3b1e      	subs	r3, #30
 80043ec:	fa00 f203 	lsl.w	r2, r0, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80043f8:	e040      	b.n	800447c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b0e      	cmp	r3, #14
 8004400:	d81e      	bhi.n	8004440 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	3b3c      	subs	r3, #60	@ 0x3c
 8004416:	221f      	movs	r2, #31
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	4019      	ands	r1, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4413      	add	r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	3b3c      	subs	r3, #60	@ 0x3c
 8004432:	fa00 f203 	lsl.w	r2, r0, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	639a      	str	r2, [r3, #56]	@ 0x38
 800443e:	e01d      	b.n	800447c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	3b5a      	subs	r3, #90	@ 0x5a
 8004454:	221f      	movs	r2, #31
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	4019      	ands	r1, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	4413      	add	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	3b5a      	subs	r3, #90	@ 0x5a
 8004470:	fa00 f203 	lsl.w	r2, r0, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b00      	cmp	r3, #0
 8004488:	f040 80e5 	bne.w	8004656 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b09      	cmp	r3, #9
 8004492:	d91c      	bls.n	80044ce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6999      	ldr	r1, [r3, #24]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4413      	add	r3, r2
 80044a4:	3b1e      	subs	r3, #30
 80044a6:	2207      	movs	r2, #7
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	4019      	ands	r1, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6898      	ldr	r0, [r3, #8]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	4413      	add	r3, r2
 80044be:	3b1e      	subs	r3, #30
 80044c0:	fa00 f203 	lsl.w	r2, r0, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	619a      	str	r2, [r3, #24]
 80044cc:	e019      	b.n	8004502 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6959      	ldr	r1, [r3, #20]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	4413      	add	r3, r2
 80044de:	2207      	movs	r2, #7
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	4019      	ands	r1, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	6898      	ldr	r0, [r3, #8]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	fa00 f203 	lsl.w	r2, r0, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	08db      	lsrs	r3, r3, #3
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	3b01      	subs	r3, #1
 8004520:	2b03      	cmp	r3, #3
 8004522:	d84f      	bhi.n	80045c4 <HAL_ADC_ConfigChannel+0x28c>
 8004524:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <HAL_ADC_ConfigChannel+0x1f4>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	0800453d 	.word	0x0800453d
 8004530:	0800455f 	.word	0x0800455f
 8004534:	08004581 	.word	0x08004581
 8004538:	080045a3 	.word	0x080045a3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004542:	4b99      	ldr	r3, [pc, #612]	@ (80047a8 <HAL_ADC_ConfigChannel+0x470>)
 8004544:	4013      	ands	r3, r2
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	0691      	lsls	r1, r2, #26
 800454c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800454e:	430a      	orrs	r2, r1
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800455a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800455c:	e07b      	b.n	8004656 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004564:	4b90      	ldr	r3, [pc, #576]	@ (80047a8 <HAL_ADC_ConfigChannel+0x470>)
 8004566:	4013      	ands	r3, r2
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	0691      	lsls	r1, r2, #26
 800456e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004570:	430a      	orrs	r2, r1
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800457c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800457e:	e06a      	b.n	8004656 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004586:	4b88      	ldr	r3, [pc, #544]	@ (80047a8 <HAL_ADC_ConfigChannel+0x470>)
 8004588:	4013      	ands	r3, r2
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	0691      	lsls	r1, r2, #26
 8004590:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004592:	430a      	orrs	r2, r1
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800459e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80045a0:	e059      	b.n	8004656 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045a8:	4b7f      	ldr	r3, [pc, #508]	@ (80047a8 <HAL_ADC_ConfigChannel+0x470>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	0691      	lsls	r1, r2, #26
 80045b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80045b4:	430a      	orrs	r2, r1
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80045c0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80045c2:	e048      	b.n	8004656 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	069b      	lsls	r3, r3, #26
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d107      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80045e6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	069b      	lsls	r3, r3, #26
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d107      	bne.n	800460c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800460a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004612:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	069b      	lsls	r3, r3, #26
 800461c:	429a      	cmp	r2, r3
 800461e:	d107      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800462e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004636:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	069b      	lsls	r3, r3, #26
 8004640:	429a      	cmp	r2, r3
 8004642:	d107      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004652:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8004654:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d108      	bne.n	8004676 <HAL_ADC_ConfigChannel+0x33e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_ADC_ConfigChannel+0x33e>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <HAL_ADC_ConfigChannel+0x340>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 8131 	bne.w	80048e0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d00f      	beq.n	80046a6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2201      	movs	r2, #1
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43da      	mvns	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	400a      	ands	r2, r1
 80046a0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80046a4:	e049      	b.n	800473a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2201      	movs	r2, #1
 80046b4:	409a      	lsls	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b09      	cmp	r3, #9
 80046c6:	d91c      	bls.n	8004702 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	3b1b      	subs	r3, #27
 80046da:	2207      	movs	r2, #7
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	4019      	ands	r1, r3
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6898      	ldr	r0, [r3, #8]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	3b1b      	subs	r3, #27
 80046f4:	fa00 f203 	lsl.w	r2, r0, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	619a      	str	r2, [r3, #24]
 8004700:	e01b      	b.n	800473a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6959      	ldr	r1, [r3, #20]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	4613      	mov	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	2207      	movs	r2, #7
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	4019      	ands	r1, r3
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6898      	ldr	r0, [r3, #8]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	fa00 f203 	lsl.w	r2, r0, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004742:	d004      	beq.n	800474e <HAL_ADC_ConfigChannel+0x416>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a18      	ldr	r2, [pc, #96]	@ (80047ac <HAL_ADC_ConfigChannel+0x474>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d101      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x41a>
 800474e:	4b18      	ldr	r3, [pc, #96]	@ (80047b0 <HAL_ADC_ConfigChannel+0x478>)
 8004750:	e000      	b.n	8004754 <HAL_ADC_ConfigChannel+0x41c>
 8004752:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <HAL_ADC_ConfigChannel+0x47c>)
 8004754:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b10      	cmp	r3, #16
 800475c:	d105      	bne.n	800476a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800475e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004766:	2b00      	cmp	r3, #0
 8004768:	d015      	beq.n	8004796 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800476e:	2b11      	cmp	r3, #17
 8004770:	d105      	bne.n	800477e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00b      	beq.n	8004796 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004782:	2b12      	cmp	r3, #18
 8004784:	f040 80ac 	bne.w	80048e0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004788:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004790:	2b00      	cmp	r3, #0
 8004792:	f040 80a5 	bne.w	80048e0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800479e:	d10b      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x480>
 80047a0:	4b02      	ldr	r3, [pc, #8]	@ (80047ac <HAL_ADC_ConfigChannel+0x474>)
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	e023      	b.n	80047ee <HAL_ADC_ConfigChannel+0x4b6>
 80047a6:	bf00      	nop
 80047a8:	83fff000 	.word	0x83fff000
 80047ac:	50000100 	.word	0x50000100
 80047b0:	50000300 	.word	0x50000300
 80047b4:	50000700 	.word	0x50000700
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a4e      	ldr	r2, [pc, #312]	@ (80048f8 <HAL_ADC_ConfigChannel+0x5c0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d103      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x492>
 80047c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e011      	b.n	80047ee <HAL_ADC_ConfigChannel+0x4b6>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a4b      	ldr	r2, [pc, #300]	@ (80048fc <HAL_ADC_ConfigChannel+0x5c4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d102      	bne.n	80047da <HAL_ADC_ConfigChannel+0x4a2>
 80047d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004900 <HAL_ADC_ConfigChannel+0x5c8>)
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	e009      	b.n	80047ee <HAL_ADC_ConfigChannel+0x4b6>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a48      	ldr	r2, [pc, #288]	@ (8004900 <HAL_ADC_ConfigChannel+0x5c8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d102      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x4b2>
 80047e4:	4b45      	ldr	r3, [pc, #276]	@ (80048fc <HAL_ADC_ConfigChannel+0x5c4>)
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	e001      	b.n	80047ee <HAL_ADC_ConfigChannel+0x4b6>
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d108      	bne.n	800480e <HAL_ADC_ConfigChannel+0x4d6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_ADC_ConfigChannel+0x4d6>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_ADC_ConfigChannel+0x4d8>
 800480e:	2300      	movs	r3, #0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d150      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004814:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004816:	2b00      	cmp	r3, #0
 8004818:	d010      	beq.n	800483c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d107      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x4fe>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x4fe>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <HAL_ADC_ConfigChannel+0x500>
 8004836:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004838:	2b00      	cmp	r3, #0
 800483a:	d13c      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b10      	cmp	r3, #16
 8004842:	d11d      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x548>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800484c:	d118      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800484e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004858:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800485a:	4b2a      	ldr	r3, [pc, #168]	@ (8004904 <HAL_ADC_ConfigChannel+0x5cc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2a      	ldr	r2, [pc, #168]	@ (8004908 <HAL_ADC_ConfigChannel+0x5d0>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	0c9a      	lsrs	r2, r3, #18
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004870:	e002      	b.n	8004878 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	3b01      	subs	r3, #1
 8004876:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f9      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800487e:	e02e      	b.n	80048de <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b11      	cmp	r3, #17
 8004886:	d10b      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x568>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004890:	d106      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800489a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800489c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800489e:	e01e      	b.n	80048de <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b12      	cmp	r3, #18
 80048a6:	d11a      	bne.n	80048de <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80048a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80048b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048b2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80048b4:	e013      	b.n	80048de <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	f043 0220 	orr.w	r2, r3, #32
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80048c8:	e00a      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80048dc:	e000      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80048de:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80048e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	376c      	adds	r7, #108	@ 0x6c
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	50000100 	.word	0x50000100
 80048fc:	50000400 	.word	0x50000400
 8004900:	50000500 	.word	0x50000500
 8004904:	2000000c 	.word	0x2000000c
 8004908:	431bde83 	.word	0x431bde83

0800490c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d108      	bne.n	8004938 <ADC_Enable+0x2c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <ADC_Enable+0x2c>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <ADC_Enable+0x2e>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d143      	bne.n	80049c6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	4b22      	ldr	r3, [pc, #136]	@ (80049d0 <ADC_Enable+0xc4>)
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00d      	beq.n	8004968 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	f043 0210 	orr.w	r2, r3, #16
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495c:	f043 0201 	orr.w	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e02f      	b.n	80049c8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004978:	f7ff f87c 	bl	8003a74 <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800497e:	e01b      	b.n	80049b8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004980:	f7ff f878 	bl	8003a74 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d914      	bls.n	80049b8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b01      	cmp	r3, #1
 800499a:	d00d      	beq.n	80049b8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a0:	f043 0210 	orr.w	r2, r3, #16
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ac:	f043 0201 	orr.w	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e007      	b.n	80049c8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d1dc      	bne.n	8004980 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	8000003f 	.word	0x8000003f

080049d4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d108      	bne.n	8004a00 <ADC_Disable+0x2c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <ADC_Disable+0x2c>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <ADC_Disable+0x2e>
 8004a00:	2300      	movs	r3, #0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d047      	beq.n	8004a96 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 030d 	and.w	r3, r3, #13
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d10f      	bne.n	8004a34 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0202 	orr.w	r2, r2, #2
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004a2c:	f7ff f822 	bl	8003a74 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004a32:	e029      	b.n	8004a88 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a38:	f043 0210 	orr.w	r2, r3, #16
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a44:	f043 0201 	orr.w	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e023      	b.n	8004a98 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a50:	f7ff f810 	bl	8003a74 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d914      	bls.n	8004a88 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d10d      	bne.n	8004a88 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	f043 0210 	orr.w	r2, r3, #16
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7c:	f043 0201 	orr.w	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e007      	b.n	8004a98 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d0dc      	beq.n	8004a50 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 809b 	beq.w	8004bfc <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ad4:	d12a      	bne.n	8004b2c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d126      	bne.n	8004b2c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d122      	bne.n	8004b2c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004ae6:	230c      	movs	r3, #12
 8004ae8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004aea:	e014      	b.n	8004b16 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4a46      	ldr	r2, [pc, #280]	@ (8004c08 <ADC_ConversionStop+0x168>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d90d      	bls.n	8004b10 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	f043 0210 	orr.w	r2, r3, #16
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b04:	f043 0201 	orr.w	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e076      	b.n	8004bfe <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	3301      	adds	r3, #1
 8004b14:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b20:	2b40      	cmp	r3, #64	@ 0x40
 8004b22:	d1e3      	bne.n	8004aec <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2240      	movs	r2, #64	@ 0x40
 8004b2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b60      	cmp	r3, #96	@ 0x60
 8004b30:	d015      	beq.n	8004b5e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d10e      	bne.n	8004b5e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d107      	bne.n	8004b5e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0210 	orr.w	r2, r2, #16
 8004b5c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b0c      	cmp	r3, #12
 8004b62:	d015      	beq.n	8004b90 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d10e      	bne.n	8004b90 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d107      	bne.n	8004b90 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0220 	orr.w	r2, r2, #32
 8004b8e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b60      	cmp	r3, #96	@ 0x60
 8004b94:	d005      	beq.n	8004ba2 <ADC_ConversionStop+0x102>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b6c      	cmp	r3, #108	@ 0x6c
 8004b9a:	d105      	bne.n	8004ba8 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004b9c:	230c      	movs	r3, #12
 8004b9e:	617b      	str	r3, [r7, #20]
        break;
 8004ba0:	e005      	b.n	8004bae <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	617b      	str	r3, [r7, #20]
        break;
 8004ba6:	e002      	b.n	8004bae <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004ba8:	2304      	movs	r3, #4
 8004baa:	617b      	str	r3, [r7, #20]
        break;
 8004bac:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004bae:	f7fe ff61 	bl	8003a74 <HAL_GetTick>
 8004bb2:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004bb4:	e01b      	b.n	8004bee <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004bb6:	f7fe ff5d 	bl	8003a74 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b0b      	cmp	r3, #11
 8004bc2:	d914      	bls.n	8004bee <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00d      	beq.n	8004bee <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f043 0210 	orr.w	r2, r3, #16
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f043 0201 	orr.w	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e007      	b.n	8004bfe <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1dc      	bne.n	8004bb6 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	000993ff 	.word	0x000993ff

08004c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <__NVIC_SetPriorityGrouping+0x44>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c3e:	4a04      	ldr	r2, [pc, #16]	@ (8004c50 <__NVIC_SetPriorityGrouping+0x44>)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	60d3      	str	r3, [r2, #12]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	e000ed00 	.word	0xe000ed00

08004c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c58:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <__NVIC_GetPriorityGrouping+0x18>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	f003 0307 	and.w	r3, r3, #7
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	db0b      	blt.n	8004c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	f003 021f 	and.w	r2, r3, #31
 8004c88:	4907      	ldr	r1, [pc, #28]	@ (8004ca8 <__NVIC_EnableIRQ+0x38>)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	2001      	movs	r0, #1
 8004c92:	fa00 f202 	lsl.w	r2, r0, r2
 8004c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	e000e100 	.word	0xe000e100

08004cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	db0a      	blt.n	8004cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	490c      	ldr	r1, [pc, #48]	@ (8004cf8 <__NVIC_SetPriority+0x4c>)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	0112      	lsls	r2, r2, #4
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	440b      	add	r3, r1
 8004cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cd4:	e00a      	b.n	8004cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4908      	ldr	r1, [pc, #32]	@ (8004cfc <__NVIC_SetPriority+0x50>)
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	3b04      	subs	r3, #4
 8004ce4:	0112      	lsls	r2, r2, #4
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	440b      	add	r3, r1
 8004cea:	761a      	strb	r2, [r3, #24]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000e100 	.word	0xe000e100
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	@ 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f1c3 0307 	rsb	r3, r3, #7
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	bf28      	it	cs
 8004d1e:	2304      	movcs	r3, #4
 8004d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d902      	bls.n	8004d30 <NVIC_EncodePriority+0x30>
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3b03      	subs	r3, #3
 8004d2e:	e000      	b.n	8004d32 <NVIC_EncodePriority+0x32>
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d34:	f04f 32ff 	mov.w	r2, #4294967295
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	401a      	ands	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d48:	f04f 31ff 	mov.w	r1, #4294967295
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	43d9      	mvns	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d58:	4313      	orrs	r3, r2
         );
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3724      	adds	r7, #36	@ 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d78:	d301      	bcc.n	8004d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e00f      	b.n	8004d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <SysTick_Config+0x40>)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d86:	210f      	movs	r1, #15
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	f7ff ff8e 	bl	8004cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d90:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <SysTick_Config+0x40>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d96:	4b04      	ldr	r3, [pc, #16]	@ (8004da8 <SysTick_Config+0x40>)
 8004d98:	2207      	movs	r2, #7
 8004d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	e000e010 	.word	0xe000e010

08004dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff ff29 	bl	8004c0c <__NVIC_SetPriorityGrouping>
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b086      	sub	sp, #24
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	4603      	mov	r3, r0
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dd4:	f7ff ff3e 	bl	8004c54 <__NVIC_GetPriorityGrouping>
 8004dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	6978      	ldr	r0, [r7, #20]
 8004de0:	f7ff ff8e 	bl	8004d00 <NVIC_EncodePriority>
 8004de4:	4602      	mov	r2, r0
 8004de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff ff5d 	bl	8004cac <__NVIC_SetPriority>
}
 8004df2:	bf00      	nop
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	4603      	mov	r3, r0
 8004e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff ff31 	bl	8004c70 <__NVIC_EnableIRQ>
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff ffa2 	bl	8004d68 <SysTick_Config>
 8004e24:	4603      	mov	r3, r0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d106      	bne.n	8004e4c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004e3e:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a08      	ldr	r2, [pc, #32]	@ (8004e64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004e44:	f043 0304 	orr.w	r3, r3, #4
 8004e48:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004e4a:	e005      	b.n	8004e58 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004e4c:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a04      	ldr	r2, [pc, #16]	@ (8004e64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004e52:	f023 0304 	bic.w	r3, r3, #4
 8004e56:	6013      	str	r3, [r2, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	e000e010 	.word	0xe000e010

08004e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e76:	e160      	b.n	800513a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	fa01 f303 	lsl.w	r3, r1, r3
 8004e84:	4013      	ands	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 8152 	beq.w	8005134 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d005      	beq.n	8004ea8 <HAL_GPIO_Init+0x40>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d130      	bne.n	8004f0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ede:	2201      	movs	r2, #1
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4013      	ands	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	091b      	lsrs	r3, r3, #4
 8004ef4:	f003 0201 	and.w	r2, r3, #1
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d017      	beq.n	8004f46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	2203      	movs	r2, #3
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	43db      	mvns	r3, r3
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d123      	bne.n	8004f9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	08da      	lsrs	r2, r3, #3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3208      	adds	r2, #8
 8004f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	220f      	movs	r2, #15
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4013      	ands	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	08da      	lsrs	r2, r3, #3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3208      	adds	r2, #8
 8004f94:	6939      	ldr	r1, [r7, #16]
 8004f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	43db      	mvns	r3, r3
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 0203 	and.w	r2, r3, #3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80ac 	beq.w	8005134 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8005158 <HAL_GPIO_Init+0x2f0>)
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8005158 <HAL_GPIO_Init+0x2f0>)
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	6193      	str	r3, [r2, #24]
 8004fe8:	4b5b      	ldr	r3, [pc, #364]	@ (8005158 <HAL_GPIO_Init+0x2f0>)
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ff4:	4a59      	ldr	r2, [pc, #356]	@ (800515c <HAL_GPIO_Init+0x2f4>)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	089b      	lsrs	r3, r3, #2
 8004ffa:	3302      	adds	r3, #2
 8004ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005000:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	220f      	movs	r2, #15
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	43db      	mvns	r3, r3
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4013      	ands	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800501e:	d025      	beq.n	800506c <HAL_GPIO_Init+0x204>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a4f      	ldr	r2, [pc, #316]	@ (8005160 <HAL_GPIO_Init+0x2f8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d01f      	beq.n	8005068 <HAL_GPIO_Init+0x200>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a4e      	ldr	r2, [pc, #312]	@ (8005164 <HAL_GPIO_Init+0x2fc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d019      	beq.n	8005064 <HAL_GPIO_Init+0x1fc>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a4d      	ldr	r2, [pc, #308]	@ (8005168 <HAL_GPIO_Init+0x300>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <HAL_GPIO_Init+0x1f8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a4c      	ldr	r2, [pc, #304]	@ (800516c <HAL_GPIO_Init+0x304>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00d      	beq.n	800505c <HAL_GPIO_Init+0x1f4>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a4b      	ldr	r2, [pc, #300]	@ (8005170 <HAL_GPIO_Init+0x308>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <HAL_GPIO_Init+0x1f0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a4a      	ldr	r2, [pc, #296]	@ (8005174 <HAL_GPIO_Init+0x30c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d101      	bne.n	8005054 <HAL_GPIO_Init+0x1ec>
 8005050:	2306      	movs	r3, #6
 8005052:	e00c      	b.n	800506e <HAL_GPIO_Init+0x206>
 8005054:	2307      	movs	r3, #7
 8005056:	e00a      	b.n	800506e <HAL_GPIO_Init+0x206>
 8005058:	2305      	movs	r3, #5
 800505a:	e008      	b.n	800506e <HAL_GPIO_Init+0x206>
 800505c:	2304      	movs	r3, #4
 800505e:	e006      	b.n	800506e <HAL_GPIO_Init+0x206>
 8005060:	2303      	movs	r3, #3
 8005062:	e004      	b.n	800506e <HAL_GPIO_Init+0x206>
 8005064:	2302      	movs	r3, #2
 8005066:	e002      	b.n	800506e <HAL_GPIO_Init+0x206>
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_GPIO_Init+0x206>
 800506c:	2300      	movs	r3, #0
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	f002 0203 	and.w	r2, r2, #3
 8005074:	0092      	lsls	r2, r2, #2
 8005076:	4093      	lsls	r3, r2
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800507e:	4937      	ldr	r1, [pc, #220]	@ (800515c <HAL_GPIO_Init+0x2f4>)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	3302      	adds	r3, #2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800508c:	4b3a      	ldr	r3, [pc, #232]	@ (8005178 <HAL_GPIO_Init+0x310>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	43db      	mvns	r3, r3
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4013      	ands	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80050b0:	4a31      	ldr	r2, [pc, #196]	@ (8005178 <HAL_GPIO_Init+0x310>)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050b6:	4b30      	ldr	r3, [pc, #192]	@ (8005178 <HAL_GPIO_Init+0x310>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	43db      	mvns	r3, r3
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4013      	ands	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80050da:	4a27      	ldr	r2, [pc, #156]	@ (8005178 <HAL_GPIO_Init+0x310>)
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050e0:	4b25      	ldr	r3, [pc, #148]	@ (8005178 <HAL_GPIO_Init+0x310>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	43db      	mvns	r3, r3
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4013      	ands	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005104:	4a1c      	ldr	r2, [pc, #112]	@ (8005178 <HAL_GPIO_Init+0x310>)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800510a:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <HAL_GPIO_Init+0x310>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	43db      	mvns	r3, r3
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4013      	ands	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800512e:	4a12      	ldr	r2, [pc, #72]	@ (8005178 <HAL_GPIO_Init+0x310>)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	3301      	adds	r3, #1
 8005138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	f47f ae97 	bne.w	8004e78 <HAL_GPIO_Init+0x10>
  }
}
 800514a:	bf00      	nop
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40021000 	.word	0x40021000
 800515c:	40010000 	.word	0x40010000
 8005160:	48000400 	.word	0x48000400
 8005164:	48000800 	.word	0x48000800
 8005168:	48000c00 	.word	0x48000c00
 800516c:	48001000 	.word	0x48001000
 8005170:	48001400 	.word	0x48001400
 8005174:	48001800 	.word	0x48001800
 8005178:	40010400 	.word	0x40010400

0800517c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	887b      	ldrh	r3, [r7, #2]
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
 8005198:	e001      	b.n	800519e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800519a:	2300      	movs	r3, #0
 800519c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	807b      	strh	r3, [r7, #2]
 80051b8:	4613      	mov	r3, r2
 80051ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051bc:	787b      	ldrb	r3, [r7, #1]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051c2:	887a      	ldrh	r2, [r7, #2]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051c8:	e002      	b.n	80051d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051ca:	887a      	ldrh	r2, [r7, #2]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80051ec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f001 b83a 	b.w	8006276 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005202:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005206:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 816f 	beq.w	80054f6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005218:	4bb5      	ldr	r3, [pc, #724]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 030c 	and.w	r3, r3, #12
 8005220:	2b04      	cmp	r3, #4
 8005222:	d00c      	beq.n	800523e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005224:	4bb2      	ldr	r3, [pc, #712]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f003 030c 	and.w	r3, r3, #12
 800522c:	2b08      	cmp	r3, #8
 800522e:	d15c      	bne.n	80052ea <HAL_RCC_OscConfig+0x10e>
 8005230:	4baf      	ldr	r3, [pc, #700]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800523c:	d155      	bne.n	80052ea <HAL_RCC_OscConfig+0x10e>
 800523e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005242:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005246:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800524a:	fa93 f3a3 	rbit	r3, r3
 800524e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005252:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005256:	fab3 f383 	clz	r3, r3
 800525a:	b2db      	uxtb	r3, r3
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	d102      	bne.n	8005270 <HAL_RCC_OscConfig+0x94>
 800526a:	4ba1      	ldr	r3, [pc, #644]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	e015      	b.n	800529c <HAL_RCC_OscConfig+0xc0>
 8005270:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005274:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005278:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800527c:	fa93 f3a3 	rbit	r3, r3
 8005280:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8005284:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005288:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800528c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8005290:	fa93 f3a3 	rbit	r3, r3
 8005294:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005298:	4b95      	ldr	r3, [pc, #596]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052a0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80052a4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80052a8:	fa92 f2a2 	rbit	r2, r2
 80052ac:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80052b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80052b4:	fab2 f282 	clz	r2, r2
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	f042 0220 	orr.w	r2, r2, #32
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	f002 021f 	and.w	r2, r2, #31
 80052c4:	2101      	movs	r1, #1
 80052c6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8111 	beq.w	80054f4 <HAL_RCC_OscConfig+0x318>
 80052d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 8108 	bne.w	80054f4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f000 bfc6 	b.w	8006276 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052fa:	d106      	bne.n	800530a <HAL_RCC_OscConfig+0x12e>
 80052fc:	4b7c      	ldr	r3, [pc, #496]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a7b      	ldr	r2, [pc, #492]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	e036      	b.n	8005378 <HAL_RCC_OscConfig+0x19c>
 800530a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800530e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10c      	bne.n	8005334 <HAL_RCC_OscConfig+0x158>
 800531a:	4b75      	ldr	r3, [pc, #468]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a74      	ldr	r2, [pc, #464]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	4b72      	ldr	r3, [pc, #456]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a71      	ldr	r2, [pc, #452]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 800532c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e021      	b.n	8005378 <HAL_RCC_OscConfig+0x19c>
 8005334:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005338:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x184>
 8005346:	4b6a      	ldr	r3, [pc, #424]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a69      	ldr	r2, [pc, #420]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 800534c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	4b67      	ldr	r3, [pc, #412]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a66      	ldr	r2, [pc, #408]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0x19c>
 8005360:	4b63      	ldr	r3, [pc, #396]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a62      	ldr	r2, [pc, #392]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4b60      	ldr	r3, [pc, #384]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a5f      	ldr	r2, [pc, #380]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005376:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800537c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d059      	beq.n	800543c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005388:	f7fe fb74 	bl	8003a74 <HAL_GetTick>
 800538c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005390:	e00a      	b.n	80053a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005392:	f7fe fb6f 	bl	8003a74 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b64      	cmp	r3, #100	@ 0x64
 80053a0:	d902      	bls.n	80053a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	f000 bf67 	b.w	8006276 <HAL_RCC_OscConfig+0x109a>
 80053a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053ac:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80053b4:	fa93 f3a3 	rbit	r3, r3
 80053b8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80053bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c0:	fab3 f383 	clz	r3, r3
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d102      	bne.n	80053da <HAL_RCC_OscConfig+0x1fe>
 80053d4:	4b46      	ldr	r3, [pc, #280]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	e015      	b.n	8005406 <HAL_RCC_OscConfig+0x22a>
 80053da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053de:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80053e6:	fa93 f3a3 	rbit	r3, r3
 80053ea:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80053ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053f2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80053f6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80053fa:	fa93 f3a3 	rbit	r3, r3
 80053fe:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005402:	4b3b      	ldr	r3, [pc, #236]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 8005404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005406:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800540a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800540e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8005412:	fa92 f2a2 	rbit	r2, r2
 8005416:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800541a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800541e:	fab2 f282 	clz	r2, r2
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	f042 0220 	orr.w	r2, r2, #32
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	f002 021f 	and.w	r2, r2, #31
 800542e:	2101      	movs	r1, #1
 8005430:	fa01 f202 	lsl.w	r2, r1, r2
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0ab      	beq.n	8005392 <HAL_RCC_OscConfig+0x1b6>
 800543a:	e05c      	b.n	80054f6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fe fb1a 	bl	8003a74 <HAL_GetTick>
 8005440:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005444:	e00a      	b.n	800545c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005446:	f7fe fb15 	bl	8003a74 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	@ 0x64
 8005454:	d902      	bls.n	800545c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	f000 bf0d 	b.w	8006276 <HAL_RCC_OscConfig+0x109a>
 800545c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005460:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005464:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005468:	fa93 f3a3 	rbit	r3, r3
 800546c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8005470:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005474:	fab3 f383 	clz	r3, r3
 8005478:	b2db      	uxtb	r3, r3
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	d102      	bne.n	800548e <HAL_RCC_OscConfig+0x2b2>
 8005488:	4b19      	ldr	r3, [pc, #100]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	e015      	b.n	80054ba <HAL_RCC_OscConfig+0x2de>
 800548e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005492:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005496:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800549a:	fa93 f3a3 	rbit	r3, r3
 800549e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80054a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054a6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80054aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80054ae:	fa93 f3a3 	rbit	r3, r3
 80054b2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80054b6:	4b0e      	ldr	r3, [pc, #56]	@ (80054f0 <HAL_RCC_OscConfig+0x314>)
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80054be:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80054c2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80054c6:	fa92 f2a2 	rbit	r2, r2
 80054ca:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80054ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80054d2:	fab2 f282 	clz	r2, r2
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	f042 0220 	orr.w	r2, r2, #32
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	f002 021f 	and.w	r2, r2, #31
 80054e2:	2101      	movs	r1, #1
 80054e4:	fa01 f202 	lsl.w	r2, r1, r2
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1ab      	bne.n	8005446 <HAL_RCC_OscConfig+0x26a>
 80054ee:	e002      	b.n	80054f6 <HAL_RCC_OscConfig+0x31a>
 80054f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 817f 	beq.w	800580a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800550c:	4ba7      	ldr	r3, [pc, #668]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 030c 	and.w	r3, r3, #12
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00c      	beq.n	8005532 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005518:	4ba4      	ldr	r3, [pc, #656]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 030c 	and.w	r3, r3, #12
 8005520:	2b08      	cmp	r3, #8
 8005522:	d173      	bne.n	800560c <HAL_RCC_OscConfig+0x430>
 8005524:	4ba1      	ldr	r3, [pc, #644]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800552c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005530:	d16c      	bne.n	800560c <HAL_RCC_OscConfig+0x430>
 8005532:	2302      	movs	r3, #2
 8005534:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800553c:	fa93 f3a3 	rbit	r3, r3
 8005540:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8005544:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005548:	fab3 f383 	clz	r3, r3
 800554c:	b2db      	uxtb	r3, r3
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	d102      	bne.n	8005562 <HAL_RCC_OscConfig+0x386>
 800555c:	4b93      	ldr	r3, [pc, #588]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	e013      	b.n	800558a <HAL_RCC_OscConfig+0x3ae>
 8005562:	2302      	movs	r3, #2
 8005564:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005568:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800556c:	fa93 f3a3 	rbit	r3, r3
 8005570:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8005574:	2302      	movs	r3, #2
 8005576:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800557a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800557e:	fa93 f3a3 	rbit	r3, r3
 8005582:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005586:	4b89      	ldr	r3, [pc, #548]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	2202      	movs	r2, #2
 800558c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8005590:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8005594:	fa92 f2a2 	rbit	r2, r2
 8005598:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800559c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80055a0:	fab2 f282 	clz	r2, r2
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	f042 0220 	orr.w	r2, r2, #32
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	f002 021f 	and.w	r2, r2, #31
 80055b0:	2101      	movs	r1, #1
 80055b2:	fa01 f202 	lsl.w	r2, r1, r2
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <HAL_RCC_OscConfig+0x3f6>
 80055bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d002      	beq.n	80055d2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f000 be52 	b.w	8006276 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d2:	4b76      	ldr	r3, [pc, #472]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	21f8      	movs	r1, #248	@ 0xf8
 80055e8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ec:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80055f0:	fa91 f1a1 	rbit	r1, r1
 80055f4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80055f8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80055fc:	fab1 f181 	clz	r1, r1
 8005600:	b2c9      	uxtb	r1, r1
 8005602:	408b      	lsls	r3, r1
 8005604:	4969      	ldr	r1, [pc, #420]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 8005606:	4313      	orrs	r3, r2
 8005608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800560a:	e0fe      	b.n	800580a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800560c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005610:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8088 	beq.w	800572e <HAL_RCC_OscConfig+0x552>
 800561e:	2301      	movs	r3, #1
 8005620:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8005628:	fa93 f3a3 	rbit	r3, r3
 800562c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8005630:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005634:	fab3 f383 	clz	r3, r3
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800563e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	461a      	mov	r2, r3
 8005646:	2301      	movs	r3, #1
 8005648:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564a:	f7fe fa13 	bl	8003a74 <HAL_GetTick>
 800564e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005652:	e00a      	b.n	800566a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005654:	f7fe fa0e 	bl	8003a74 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d902      	bls.n	800566a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	f000 be06 	b.w	8006276 <HAL_RCC_OscConfig+0x109a>
 800566a:	2302      	movs	r3, #2
 800566c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005670:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005674:	fa93 f3a3 	rbit	r3, r3
 8005678:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800567c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005680:	fab3 f383 	clz	r3, r3
 8005684:	b2db      	uxtb	r3, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d102      	bne.n	800569a <HAL_RCC_OscConfig+0x4be>
 8005694:	4b45      	ldr	r3, [pc, #276]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	e013      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e6>
 800569a:	2302      	movs	r3, #2
 800569c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80056a4:	fa93 f3a3 	rbit	r3, r3
 80056a8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80056ac:	2302      	movs	r3, #2
 80056ae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80056b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80056b6:	fa93 f3a3 	rbit	r3, r3
 80056ba:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80056be:	4b3b      	ldr	r3, [pc, #236]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 80056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c2:	2202      	movs	r2, #2
 80056c4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80056c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80056cc:	fa92 f2a2 	rbit	r2, r2
 80056d0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80056d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80056d8:	fab2 f282 	clz	r2, r2
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	f042 0220 	orr.w	r2, r2, #32
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	f002 021f 	and.w	r2, r2, #31
 80056e8:	2101      	movs	r1, #1
 80056ea:	fa01 f202 	lsl.w	r2, r1, r2
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0af      	beq.n	8005654 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f4:	4b2d      	ldr	r3, [pc, #180]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005700:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	21f8      	movs	r1, #248	@ 0xf8
 800570a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8005712:	fa91 f1a1 	rbit	r1, r1
 8005716:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800571a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800571e:	fab1 f181 	clz	r1, r1
 8005722:	b2c9      	uxtb	r1, r1
 8005724:	408b      	lsls	r3, r1
 8005726:	4921      	ldr	r1, [pc, #132]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 8005728:	4313      	orrs	r3, r2
 800572a:	600b      	str	r3, [r1, #0]
 800572c:	e06d      	b.n	800580a <HAL_RCC_OscConfig+0x62e>
 800572e:	2301      	movs	r3, #1
 8005730:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005734:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8005738:	fa93 f3a3 	rbit	r3, r3
 800573c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8005740:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005744:	fab3 f383 	clz	r3, r3
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800574e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	461a      	mov	r2, r3
 8005756:	2300      	movs	r3, #0
 8005758:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575a:	f7fe f98b 	bl	8003a74 <HAL_GetTick>
 800575e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005762:	e00a      	b.n	800577a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005764:	f7fe f986 	bl	8003a74 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d902      	bls.n	800577a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	f000 bd7e 	b.w	8006276 <HAL_RCC_OscConfig+0x109a>
 800577a:	2302      	movs	r3, #2
 800577c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005780:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005784:	fa93 f3a3 	rbit	r3, r3
 8005788:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800578c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	b2db      	uxtb	r3, r3
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	b2db      	uxtb	r3, r3
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d105      	bne.n	80057b0 <HAL_RCC_OscConfig+0x5d4>
 80057a4:	4b01      	ldr	r3, [pc, #4]	@ (80057ac <HAL_RCC_OscConfig+0x5d0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	e016      	b.n	80057d8 <HAL_RCC_OscConfig+0x5fc>
 80057aa:	bf00      	nop
 80057ac:	40021000 	.word	0x40021000
 80057b0:	2302      	movs	r3, #2
 80057b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80057ba:	fa93 f3a3 	rbit	r3, r3
 80057be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80057c2:	2302      	movs	r3, #2
 80057c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80057c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80057cc:	fa93 f3a3 	rbit	r3, r3
 80057d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80057d4:	4bbf      	ldr	r3, [pc, #764]	@ (8005ad4 <HAL_RCC_OscConfig+0x8f8>)
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d8:	2202      	movs	r2, #2
 80057da:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80057de:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80057e2:	fa92 f2a2 	rbit	r2, r2
 80057e6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80057ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80057ee:	fab2 f282 	clz	r2, r2
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	f042 0220 	orr.w	r2, r2, #32
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	f002 021f 	and.w	r2, r2, #31
 80057fe:	2101      	movs	r1, #1
 8005800:	fa01 f202 	lsl.w	r2, r1, r2
 8005804:	4013      	ands	r3, r2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1ac      	bne.n	8005764 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800580e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 8113 	beq.w	8005a46 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005820:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005824:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d07c      	beq.n	800592a <HAL_RCC_OscConfig+0x74e>
 8005830:	2301      	movs	r3, #1
 8005832:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583a:	fa93 f3a3 	rbit	r3, r3
 800583e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8005842:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005846:	fab3 f383 	clz	r3, r3
 800584a:	b2db      	uxtb	r3, r3
 800584c:	461a      	mov	r2, r3
 800584e:	4ba2      	ldr	r3, [pc, #648]	@ (8005ad8 <HAL_RCC_OscConfig+0x8fc>)
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	461a      	mov	r2, r3
 8005856:	2301      	movs	r3, #1
 8005858:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800585a:	f7fe f90b 	bl	8003a74 <HAL_GetTick>
 800585e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005862:	e00a      	b.n	800587a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005864:	f7fe f906 	bl	8003a74 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d902      	bls.n	800587a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	f000 bcfe 	b.w	8006276 <HAL_RCC_OscConfig+0x109a>
 800587a:	2302      	movs	r3, #2
 800587c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005884:	fa93 f2a3 	rbit	r2, r3
 8005888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800588c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800589a:	2202      	movs	r2, #2
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	fa93 f2a3 	rbit	r2, r3
 80058ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80058be:	2202      	movs	r2, #2
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	fa93 f2a3 	rbit	r2, r3
 80058d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80058d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058da:	4b7e      	ldr	r3, [pc, #504]	@ (8005ad4 <HAL_RCC_OscConfig+0x8f8>)
 80058dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80058e6:	2102      	movs	r1, #2
 80058e8:	6019      	str	r1, [r3, #0]
 80058ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	fa93 f1a3 	rbit	r1, r3
 80058f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005900:	6019      	str	r1, [r3, #0]
  return result;
 8005902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005906:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	fab3 f383 	clz	r3, r3
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	2101      	movs	r1, #1
 800591e:	fa01 f303 	lsl.w	r3, r1, r3
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d09d      	beq.n	8005864 <HAL_RCC_OscConfig+0x688>
 8005928:	e08d      	b.n	8005a46 <HAL_RCC_OscConfig+0x86a>
 800592a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800592e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005932:	2201      	movs	r2, #1
 8005934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005936:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800593a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	fa93 f2a3 	rbit	r2, r3
 8005944:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005948:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800594c:	601a      	str	r2, [r3, #0]
  return result;
 800594e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005952:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005956:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005958:	fab3 f383 	clz	r3, r3
 800595c:	b2db      	uxtb	r3, r3
 800595e:	461a      	mov	r2, r3
 8005960:	4b5d      	ldr	r3, [pc, #372]	@ (8005ad8 <HAL_RCC_OscConfig+0x8fc>)
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	461a      	mov	r2, r3
 8005968:	2300      	movs	r3, #0
 800596a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800596c:	f7fe f882 	bl	8003a74 <HAL_GetTick>
 8005970:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005974:	e00a      	b.n	800598c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005976:	f7fe f87d 	bl	8003a74 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d902      	bls.n	800598c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	f000 bc75 	b.w	8006276 <HAL_RCC_OscConfig+0x109a>
 800598c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005990:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005994:	2202      	movs	r2, #2
 8005996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800599c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	fa93 f2a3 	rbit	r2, r3
 80059a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80059b8:	2202      	movs	r2, #2
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	fa93 f2a3 	rbit	r2, r3
 80059ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80059dc:	2202      	movs	r2, #2
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	fa93 f2a3 	rbit	r2, r3
 80059ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80059f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f8:	4b36      	ldr	r3, [pc, #216]	@ (8005ad4 <HAL_RCC_OscConfig+0x8f8>)
 80059fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a04:	2102      	movs	r1, #2
 8005a06:	6019      	str	r1, [r3, #0]
 8005a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	fa93 f1a3 	rbit	r1, r3
 8005a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a1a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005a1e:	6019      	str	r1, [r3, #0]
  return result;
 8005a20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a24:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	fab3 f383 	clz	r3, r3
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d197      	bne.n	8005976 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 81a5 	beq.w	8005da6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a62:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad4 <HAL_RCC_OscConfig+0x8f8>)
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d116      	bne.n	8005a9c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a6e:	4b19      	ldr	r3, [pc, #100]	@ (8005ad4 <HAL_RCC_OscConfig+0x8f8>)
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	4a18      	ldr	r2, [pc, #96]	@ (8005ad4 <HAL_RCC_OscConfig+0x8f8>)
 8005a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a78:	61d3      	str	r3, [r2, #28]
 8005a7a:	4b16      	ldr	r3, [pc, #88]	@ (8005ad4 <HAL_RCC_OscConfig+0x8f8>)
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a94:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005adc <HAL_RCC_OscConfig+0x900>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d121      	bne.n	8005aec <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8005adc <HAL_RCC_OscConfig+0x900>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a0b      	ldr	r2, [pc, #44]	@ (8005adc <HAL_RCC_OscConfig+0x900>)
 8005aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ab2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ab4:	f7fd ffde 	bl	8003a74 <HAL_GetTick>
 8005ab8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005abc:	e010      	b.n	8005ae0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005abe:	f7fd ffd9 	bl	8003a74 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b64      	cmp	r3, #100	@ 0x64
 8005acc:	d908      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e3d1      	b.n	8006276 <HAL_RCC_OscConfig+0x109a>
 8005ad2:	bf00      	nop
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	10908120 	.word	0x10908120
 8005adc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae0:	4b8d      	ldr	r3, [pc, #564]	@ (8005d18 <HAL_RCC_OscConfig+0xb3c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0e8      	beq.n	8005abe <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005af0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d106      	bne.n	8005b0a <HAL_RCC_OscConfig+0x92e>
 8005afc:	4b87      	ldr	r3, [pc, #540]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	4a86      	ldr	r2, [pc, #536]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	6213      	str	r3, [r2, #32]
 8005b08:	e035      	b.n	8005b76 <HAL_RCC_OscConfig+0x99a>
 8005b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10c      	bne.n	8005b34 <HAL_RCC_OscConfig+0x958>
 8005b1a:	4b80      	ldr	r3, [pc, #512]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	4a7f      	ldr	r2, [pc, #508]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	6213      	str	r3, [r2, #32]
 8005b26:	4b7d      	ldr	r3, [pc, #500]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	6213      	str	r3, [r2, #32]
 8005b32:	e020      	b.n	8005b76 <HAL_RCC_OscConfig+0x99a>
 8005b34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	2b05      	cmp	r3, #5
 8005b42:	d10c      	bne.n	8005b5e <HAL_RCC_OscConfig+0x982>
 8005b44:	4b75      	ldr	r3, [pc, #468]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	4a74      	ldr	r2, [pc, #464]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b4a:	f043 0304 	orr.w	r3, r3, #4
 8005b4e:	6213      	str	r3, [r2, #32]
 8005b50:	4b72      	ldr	r3, [pc, #456]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	4a71      	ldr	r2, [pc, #452]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	6213      	str	r3, [r2, #32]
 8005b5c:	e00b      	b.n	8005b76 <HAL_RCC_OscConfig+0x99a>
 8005b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	4a6e      	ldr	r2, [pc, #440]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	6213      	str	r3, [r2, #32]
 8005b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005b70:	f023 0304 	bic.w	r3, r3, #4
 8005b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8081 	beq.w	8005c8a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b88:	f7fd ff74 	bl	8003a74 <HAL_GetTick>
 8005b8c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b90:	e00b      	b.n	8005baa <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b92:	f7fd ff6f 	bl	8003a74 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e365      	b.n	8006276 <HAL_RCC_OscConfig+0x109a>
 8005baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	fa93 f2a3 	rbit	r2, r3
 8005bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bc8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bd2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bde:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	fa93 f2a3 	rbit	r2, r3
 8005be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005bf0:	601a      	str	r2, [r3, #0]
  return result;
 8005bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bf6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005bfa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfc:	fab3 f383 	clz	r3, r3
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	f043 0302 	orr.w	r3, r3, #2
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d102      	bne.n	8005c16 <HAL_RCC_OscConfig+0xa3a>
 8005c10:	4b42      	ldr	r3, [pc, #264]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	e013      	b.n	8005c3e <HAL_RCC_OscConfig+0xa62>
 8005c16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c1a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005c1e:	2202      	movs	r2, #2
 8005c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c26:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	fa93 f2a3 	rbit	r2, r3
 8005c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c34:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	4b38      	ldr	r3, [pc, #224]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005c42:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005c46:	2102      	movs	r1, #2
 8005c48:	6011      	str	r1, [r2, #0]
 8005c4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005c4e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	fa92 f1a2 	rbit	r1, r2
 8005c58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005c5c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8005c60:	6011      	str	r1, [r2, #0]
  return result;
 8005c62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005c66:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	fab2 f282 	clz	r2, r2
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	f002 021f 	and.w	r2, r2, #31
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d084      	beq.n	8005b92 <HAL_RCC_OscConfig+0x9b6>
 8005c88:	e083      	b.n	8005d92 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c8a:	f7fd fef3 	bl	8003a74 <HAL_GetTick>
 8005c8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c92:	e00b      	b.n	8005cac <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c94:	f7fd feee 	bl	8003a74 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e2e4      	b.n	8006276 <HAL_RCC_OscConfig+0x109a>
 8005cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cb0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cbc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	fa93 f2a3 	rbit	r2, r3
 8005cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cd4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005cd8:	2202      	movs	r2, #2
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ce0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	fa93 f2a3 	rbit	r2, r3
 8005cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cee:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005cf2:	601a      	str	r2, [r3, #0]
  return result;
 8005cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cf8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005cfc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cfe:	fab3 f383 	clz	r3, r3
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f043 0302 	orr.w	r3, r3, #2
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d106      	bne.n	8005d20 <HAL_RCC_OscConfig+0xb44>
 8005d12:	4b02      	ldr	r3, [pc, #8]	@ (8005d1c <HAL_RCC_OscConfig+0xb40>)
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	e017      	b.n	8005d48 <HAL_RCC_OscConfig+0xb6c>
 8005d18:	40007000 	.word	0x40007000
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d24:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005d28:	2202      	movs	r2, #2
 8005d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d30:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	fa93 f2a3 	rbit	r2, r3
 8005d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d3e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	4bb3      	ldr	r3, [pc, #716]	@ (8006014 <HAL_RCC_OscConfig+0xe38>)
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005d4c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005d50:	2102      	movs	r1, #2
 8005d52:	6011      	str	r1, [r2, #0]
 8005d54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005d58:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	fa92 f1a2 	rbit	r1, r2
 8005d62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005d66:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005d6a:	6011      	str	r1, [r2, #0]
  return result;
 8005d6c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005d70:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	fab2 f282 	clz	r2, r2
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	f002 021f 	and.w	r2, r2, #31
 8005d86:	2101      	movs	r1, #1
 8005d88:	fa01 f202 	lsl.w	r2, r1, r2
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d180      	bne.n	8005c94 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d92:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d105      	bne.n	8005da6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d9a:	4b9e      	ldr	r3, [pc, #632]	@ (8006014 <HAL_RCC_OscConfig+0xe38>)
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	4a9d      	ldr	r2, [pc, #628]	@ (8006014 <HAL_RCC_OscConfig+0xe38>)
 8005da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005da4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005daa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 825e 	beq.w	8006274 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005db8:	4b96      	ldr	r3, [pc, #600]	@ (8006014 <HAL_RCC_OscConfig+0xe38>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f003 030c 	and.w	r3, r3, #12
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	f000 821f 	beq.w	8006204 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005dca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	f040 8170 	bne.w	80060b8 <HAL_RCC_OscConfig+0xedc>
 8005dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ddc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005de0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005dea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	fa93 f2a3 	rbit	r2, r3
 8005df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005df8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005dfc:	601a      	str	r2, [r3, #0]
  return result;
 8005dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e02:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005e06:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e08:	fab3 f383 	clz	r3, r3
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005e12:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	461a      	mov	r2, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1e:	f7fd fe29 	bl	8003a74 <HAL_GetTick>
 8005e22:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e26:	e009      	b.n	8005e3c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e28:	f7fd fe24 	bl	8003a74 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e21c      	b.n	8006276 <HAL_RCC_OscConfig+0x109a>
 8005e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e40:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005e44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e4e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	fa93 f2a3 	rbit	r2, r3
 8005e58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e5c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005e60:	601a      	str	r2, [r3, #0]
  return result;
 8005e62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e66:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005e6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e6c:	fab3 f383 	clz	r3, r3
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d102      	bne.n	8005e86 <HAL_RCC_OscConfig+0xcaa>
 8005e80:	4b64      	ldr	r3, [pc, #400]	@ (8006014 <HAL_RCC_OscConfig+0xe38>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	e027      	b.n	8005ed6 <HAL_RCC_OscConfig+0xcfa>
 8005e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e8a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005e8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e98:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	fa93 f2a3 	rbit	r2, r3
 8005ea2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ea6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005eb0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005eb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ebe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	fa93 f2a3 	rbit	r2, r3
 8005ec8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ecc:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	4b50      	ldr	r3, [pc, #320]	@ (8006014 <HAL_RCC_OscConfig+0xe38>)
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005eda:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005ede:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005ee2:	6011      	str	r1, [r2, #0]
 8005ee4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005ee8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	fa92 f1a2 	rbit	r1, r2
 8005ef2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005ef6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005efa:	6011      	str	r1, [r2, #0]
  return result;
 8005efc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005f00:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	fab2 f282 	clz	r2, r2
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	f042 0220 	orr.w	r2, r2, #32
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	f002 021f 	and.w	r2, r2, #31
 8005f16:	2101      	movs	r1, #1
 8005f18:	fa01 f202 	lsl.w	r2, r1, r2
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d182      	bne.n	8005e28 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f22:	4b3c      	ldr	r3, [pc, #240]	@ (8006014 <HAL_RCC_OscConfig+0xe38>)
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	f023 020f 	bic.w	r2, r3, #15
 8005f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	4937      	ldr	r1, [pc, #220]	@ (8006014 <HAL_RCC_OscConfig+0xe38>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005f3c:	4b35      	ldr	r3, [pc, #212]	@ (8006014 <HAL_RCC_OscConfig+0xe38>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8005f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6a19      	ldr	r1, [r3, #32]
 8005f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	492d      	ldr	r1, [pc, #180]	@ (8006014 <HAL_RCC_OscConfig+0xe38>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	604b      	str	r3, [r1, #4]
 8005f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f68:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005f6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f76:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	fa93 f2a3 	rbit	r2, r3
 8005f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f84:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005f88:	601a      	str	r2, [r3, #0]
  return result;
 8005f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f8e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005f92:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f94:	fab3 f383 	clz	r3, r3
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005f9e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005faa:	f7fd fd63 	bl	8003a74 <HAL_GetTick>
 8005fae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fb2:	e009      	b.n	8005fc8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb4:	f7fd fd5e 	bl	8003a74 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e156      	b.n	8006276 <HAL_RCC_OscConfig+0x109a>
 8005fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005fcc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005fd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005fda:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	fa93 f2a3 	rbit	r2, r3
 8005fe4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005fe8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005fec:	601a      	str	r2, [r3, #0]
  return result;
 8005fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ff2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005ff6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ff8:	fab3 f383 	clz	r3, r3
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	b2db      	uxtb	r3, r3
 8006002:	f043 0301 	orr.w	r3, r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d105      	bne.n	8006018 <HAL_RCC_OscConfig+0xe3c>
 800600c:	4b01      	ldr	r3, [pc, #4]	@ (8006014 <HAL_RCC_OscConfig+0xe38>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	e02a      	b.n	8006068 <HAL_RCC_OscConfig+0xe8c>
 8006012:	bf00      	nop
 8006014:	40021000 	.word	0x40021000
 8006018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800601c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006020:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006026:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800602a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	fa93 f2a3 	rbit	r2, r3
 8006034:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006038:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006042:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006046:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006050:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	fa93 f2a3 	rbit	r2, r3
 800605a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800605e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	4b86      	ldr	r3, [pc, #536]	@ (8006280 <HAL_RCC_OscConfig+0x10a4>)
 8006066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006068:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800606c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006070:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006074:	6011      	str	r1, [r2, #0]
 8006076:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800607a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	fa92 f1a2 	rbit	r1, r2
 8006084:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006088:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800608c:	6011      	str	r1, [r2, #0]
  return result;
 800608e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006092:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	fab2 f282 	clz	r2, r2
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	f042 0220 	orr.w	r2, r2, #32
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	f002 021f 	and.w	r2, r2, #31
 80060a8:	2101      	movs	r1, #1
 80060aa:	fa01 f202 	lsl.w	r2, r1, r2
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f43f af7f 	beq.w	8005fb4 <HAL_RCC_OscConfig+0xdd8>
 80060b6:	e0dd      	b.n	8006274 <HAL_RCC_OscConfig+0x1098>
 80060b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060bc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80060c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060ca:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	fa93 f2a3 	rbit	r2, r3
 80060d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060d8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80060dc:	601a      	str	r2, [r3, #0]
  return result;
 80060de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060e2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80060e6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e8:	fab3 f383 	clz	r3, r3
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80060f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	461a      	mov	r2, r3
 80060fa:	2300      	movs	r3, #0
 80060fc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fe:	f7fd fcb9 	bl	8003a74 <HAL_GetTick>
 8006102:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006106:	e009      	b.n	800611c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006108:	f7fd fcb4 	bl	8003a74 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e0ac      	b.n	8006276 <HAL_RCC_OscConfig+0x109a>
 800611c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006120:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006124:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800612e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	fa93 f2a3 	rbit	r2, r3
 8006138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800613c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006140:	601a      	str	r2, [r3, #0]
  return result;
 8006142:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006146:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800614a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800614c:	fab3 f383 	clz	r3, r3
 8006150:	b2db      	uxtb	r3, r3
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b01      	cmp	r3, #1
 800615e:	d102      	bne.n	8006166 <HAL_RCC_OscConfig+0xf8a>
 8006160:	4b47      	ldr	r3, [pc, #284]	@ (8006280 <HAL_RCC_OscConfig+0x10a4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	e027      	b.n	80061b6 <HAL_RCC_OscConfig+0xfda>
 8006166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800616a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800616e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006174:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006178:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	fa93 f2a3 	rbit	r2, r3
 8006182:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006186:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006190:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006194:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800619e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	fa93 f2a3 	rbit	r2, r3
 80061a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061ac:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	4b33      	ldr	r3, [pc, #204]	@ (8006280 <HAL_RCC_OscConfig+0x10a4>)
 80061b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80061ba:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80061be:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80061c2:	6011      	str	r1, [r2, #0]
 80061c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80061c8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	fa92 f1a2 	rbit	r1, r2
 80061d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80061d6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80061da:	6011      	str	r1, [r2, #0]
  return result;
 80061dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80061e0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80061e4:	6812      	ldr	r2, [r2, #0]
 80061e6:	fab2 f282 	clz	r2, r2
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	f042 0220 	orr.w	r2, r2, #32
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	f002 021f 	and.w	r2, r2, #31
 80061f6:	2101      	movs	r1, #1
 80061f8:	fa01 f202 	lsl.w	r2, r1, r2
 80061fc:	4013      	ands	r3, r2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d182      	bne.n	8006108 <HAL_RCC_OscConfig+0xf2c>
 8006202:	e037      	b.n	8006274 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006204:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006208:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e02e      	b.n	8006276 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006218:	4b19      	ldr	r3, [pc, #100]	@ (8006280 <HAL_RCC_OscConfig+0x10a4>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006220:	4b17      	ldr	r3, [pc, #92]	@ (8006280 <HAL_RCC_OscConfig+0x10a4>)
 8006222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006224:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006228:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800622c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8006230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006234:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	429a      	cmp	r2, r3
 800623e:	d117      	bne.n	8006270 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006240:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8006244:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006248:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800624c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006254:	429a      	cmp	r2, r3
 8006256:	d10b      	bne.n	8006270 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800625c:	f003 020f 	and.w	r2, r3, #15
 8006260:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006264:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800626c:	429a      	cmp	r2, r3
 800626e:	d001      	beq.n	8006274 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40021000 	.word	0x40021000

08006284 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b09e      	sub	sp, #120	@ 0x78
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e162      	b.n	8006562 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800629c:	4b90      	ldr	r3, [pc, #576]	@ (80064e0 <HAL_RCC_ClockConfig+0x25c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d910      	bls.n	80062cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062aa:	4b8d      	ldr	r3, [pc, #564]	@ (80064e0 <HAL_RCC_ClockConfig+0x25c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f023 0207 	bic.w	r2, r3, #7
 80062b2:	498b      	ldr	r1, [pc, #556]	@ (80064e0 <HAL_RCC_ClockConfig+0x25c>)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ba:	4b89      	ldr	r3, [pc, #548]	@ (80064e0 <HAL_RCC_ClockConfig+0x25c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d001      	beq.n	80062cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e14a      	b.n	8006562 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d008      	beq.n	80062ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d8:	4b82      	ldr	r3, [pc, #520]	@ (80064e4 <HAL_RCC_ClockConfig+0x260>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	497f      	ldr	r1, [pc, #508]	@ (80064e4 <HAL_RCC_ClockConfig+0x260>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 80dc 	beq.w	80064b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d13c      	bne.n	800637a <HAL_RCC_ClockConfig+0xf6>
 8006300:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006304:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006308:	fa93 f3a3 	rbit	r3, r3
 800630c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800630e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006310:	fab3 f383 	clz	r3, r3
 8006314:	b2db      	uxtb	r3, r3
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	b2db      	uxtb	r3, r3
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b01      	cmp	r3, #1
 8006322:	d102      	bne.n	800632a <HAL_RCC_ClockConfig+0xa6>
 8006324:	4b6f      	ldr	r3, [pc, #444]	@ (80064e4 <HAL_RCC_ClockConfig+0x260>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	e00f      	b.n	800634a <HAL_RCC_ClockConfig+0xc6>
 800632a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800632e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006332:	fa93 f3a3 	rbit	r3, r3
 8006336:	667b      	str	r3, [r7, #100]	@ 0x64
 8006338:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800633c:	663b      	str	r3, [r7, #96]	@ 0x60
 800633e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006340:	fa93 f3a3 	rbit	r3, r3
 8006344:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006346:	4b67      	ldr	r3, [pc, #412]	@ (80064e4 <HAL_RCC_ClockConfig+0x260>)
 8006348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800634e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006350:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006352:	fa92 f2a2 	rbit	r2, r2
 8006356:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006358:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800635a:	fab2 f282 	clz	r2, r2
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	f042 0220 	orr.w	r2, r2, #32
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	f002 021f 	and.w	r2, r2, #31
 800636a:	2101      	movs	r1, #1
 800636c:	fa01 f202 	lsl.w	r2, r1, r2
 8006370:	4013      	ands	r3, r2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d17b      	bne.n	800646e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e0f3      	b.n	8006562 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d13c      	bne.n	80063fc <HAL_RCC_ClockConfig+0x178>
 8006382:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006386:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800638a:	fa93 f3a3 	rbit	r3, r3
 800638e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006392:	fab3 f383 	clz	r3, r3
 8006396:	b2db      	uxtb	r3, r3
 8006398:	095b      	lsrs	r3, r3, #5
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d102      	bne.n	80063ac <HAL_RCC_ClockConfig+0x128>
 80063a6:	4b4f      	ldr	r3, [pc, #316]	@ (80064e4 <HAL_RCC_ClockConfig+0x260>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	e00f      	b.n	80063cc <HAL_RCC_ClockConfig+0x148>
 80063ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063b4:	fa93 f3a3 	rbit	r3, r3
 80063b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063be:	643b      	str	r3, [r7, #64]	@ 0x40
 80063c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063c2:	fa93 f3a3 	rbit	r3, r3
 80063c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063c8:	4b46      	ldr	r3, [pc, #280]	@ (80064e4 <HAL_RCC_ClockConfig+0x260>)
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80063d0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80063d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063d4:	fa92 f2a2 	rbit	r2, r2
 80063d8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80063da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063dc:	fab2 f282 	clz	r2, r2
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	f042 0220 	orr.w	r2, r2, #32
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	f002 021f 	and.w	r2, r2, #31
 80063ec:	2101      	movs	r1, #1
 80063ee:	fa01 f202 	lsl.w	r2, r1, r2
 80063f2:	4013      	ands	r3, r2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d13a      	bne.n	800646e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e0b2      	b.n	8006562 <HAL_RCC_ClockConfig+0x2de>
 80063fc:	2302      	movs	r3, #2
 80063fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	fa93 f3a3 	rbit	r3, r3
 8006406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800640a:	fab3 f383 	clz	r3, r3
 800640e:	b2db      	uxtb	r3, r3
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b01      	cmp	r3, #1
 800641c:	d102      	bne.n	8006424 <HAL_RCC_ClockConfig+0x1a0>
 800641e:	4b31      	ldr	r3, [pc, #196]	@ (80064e4 <HAL_RCC_ClockConfig+0x260>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	e00d      	b.n	8006440 <HAL_RCC_ClockConfig+0x1bc>
 8006424:	2302      	movs	r3, #2
 8006426:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642a:	fa93 f3a3 	rbit	r3, r3
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006430:	2302      	movs	r3, #2
 8006432:	623b      	str	r3, [r7, #32]
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	fa93 f3a3 	rbit	r3, r3
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	4b29      	ldr	r3, [pc, #164]	@ (80064e4 <HAL_RCC_ClockConfig+0x260>)
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	2202      	movs	r2, #2
 8006442:	61ba      	str	r2, [r7, #24]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	fa92 f2a2 	rbit	r2, r2
 800644a:	617a      	str	r2, [r7, #20]
  return result;
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	fab2 f282 	clz	r2, r2
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	f042 0220 	orr.w	r2, r2, #32
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	f002 021f 	and.w	r2, r2, #31
 800645e:	2101      	movs	r1, #1
 8006460:	fa01 f202 	lsl.w	r2, r1, r2
 8006464:	4013      	ands	r3, r2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e079      	b.n	8006562 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800646e:	4b1d      	ldr	r3, [pc, #116]	@ (80064e4 <HAL_RCC_ClockConfig+0x260>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f023 0203 	bic.w	r2, r3, #3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	491a      	ldr	r1, [pc, #104]	@ (80064e4 <HAL_RCC_ClockConfig+0x260>)
 800647c:	4313      	orrs	r3, r2
 800647e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006480:	f7fd faf8 	bl	8003a74 <HAL_GetTick>
 8006484:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006486:	e00a      	b.n	800649e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006488:	f7fd faf4 	bl	8003a74 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006496:	4293      	cmp	r3, r2
 8006498:	d901      	bls.n	800649e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e061      	b.n	8006562 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649e:	4b11      	ldr	r3, [pc, #68]	@ (80064e4 <HAL_RCC_ClockConfig+0x260>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f003 020c 	and.w	r2, r3, #12
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d1eb      	bne.n	8006488 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <HAL_RCC_ClockConfig+0x25c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d214      	bcs.n	80064e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064be:	4b08      	ldr	r3, [pc, #32]	@ (80064e0 <HAL_RCC_ClockConfig+0x25c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f023 0207 	bic.w	r2, r3, #7
 80064c6:	4906      	ldr	r1, [pc, #24]	@ (80064e0 <HAL_RCC_ClockConfig+0x25c>)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ce:	4b04      	ldr	r3, [pc, #16]	@ (80064e0 <HAL_RCC_ClockConfig+0x25c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d005      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e040      	b.n	8006562 <HAL_RCC_ClockConfig+0x2de>
 80064e0:	40022000 	.word	0x40022000
 80064e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d008      	beq.n	8006506 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064f4:	4b1d      	ldr	r3, [pc, #116]	@ (800656c <HAL_RCC_ClockConfig+0x2e8>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	491a      	ldr	r1, [pc, #104]	@ (800656c <HAL_RCC_ClockConfig+0x2e8>)
 8006502:	4313      	orrs	r3, r2
 8006504:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0308 	and.w	r3, r3, #8
 800650e:	2b00      	cmp	r3, #0
 8006510:	d009      	beq.n	8006526 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006512:	4b16      	ldr	r3, [pc, #88]	@ (800656c <HAL_RCC_ClockConfig+0x2e8>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	4912      	ldr	r1, [pc, #72]	@ (800656c <HAL_RCC_ClockConfig+0x2e8>)
 8006522:	4313      	orrs	r3, r2
 8006524:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006526:	f000 f829 	bl	800657c <HAL_RCC_GetSysClockFreq>
 800652a:	4601      	mov	r1, r0
 800652c:	4b0f      	ldr	r3, [pc, #60]	@ (800656c <HAL_RCC_ClockConfig+0x2e8>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006534:	22f0      	movs	r2, #240	@ 0xf0
 8006536:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	fa92 f2a2 	rbit	r2, r2
 800653e:	60fa      	str	r2, [r7, #12]
  return result;
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	fab2 f282 	clz	r2, r2
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	40d3      	lsrs	r3, r2
 800654a:	4a09      	ldr	r2, [pc, #36]	@ (8006570 <HAL_RCC_ClockConfig+0x2ec>)
 800654c:	5cd3      	ldrb	r3, [r2, r3]
 800654e:	fa21 f303 	lsr.w	r3, r1, r3
 8006552:	4a08      	ldr	r2, [pc, #32]	@ (8006574 <HAL_RCC_ClockConfig+0x2f0>)
 8006554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006556:	4b08      	ldr	r3, [pc, #32]	@ (8006578 <HAL_RCC_ClockConfig+0x2f4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7fd fa46 	bl	80039ec <HAL_InitTick>
  
  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3778      	adds	r7, #120	@ 0x78
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40021000 	.word	0x40021000
 8006570:	08008790 	.word	0x08008790
 8006574:	2000000c 	.word	0x2000000c
 8006578:	20000010 	.word	0x20000010

0800657c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	2300      	movs	r3, #0
 8006590:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006596:	4b1f      	ldr	r3, [pc, #124]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x98>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f003 030c 	and.w	r3, r3, #12
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d002      	beq.n	80065ac <HAL_RCC_GetSysClockFreq+0x30>
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d003      	beq.n	80065b2 <HAL_RCC_GetSysClockFreq+0x36>
 80065aa:	e029      	b.n	8006600 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x9c>)
 80065ae:	613b      	str	r3, [r7, #16]
      break;
 80065b0:	e029      	b.n	8006606 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	0c9b      	lsrs	r3, r3, #18
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	4a18      	ldr	r2, [pc, #96]	@ (800661c <HAL_RCC_GetSysClockFreq+0xa0>)
 80065bc:	5cd3      	ldrb	r3, [r2, r3]
 80065be:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80065c0:	4b14      	ldr	r3, [pc, #80]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x98>)
 80065c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	4a15      	ldr	r2, [pc, #84]	@ (8006620 <HAL_RCC_GetSysClockFreq+0xa4>)
 80065ca:	5cd3      	ldrb	r3, [r2, r3]
 80065cc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80065d8:	4a0f      	ldr	r2, [pc, #60]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x9c>)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	fb02 f303 	mul.w	r3, r2, r3
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e007      	b.n	80065fa <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80065ea:	4a0b      	ldr	r2, [pc, #44]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x9c>)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	fb02 f303 	mul.w	r3, r2, r3
 80065f8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	613b      	str	r3, [r7, #16]
      break;
 80065fe:	e002      	b.n	8006606 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006600:	4b05      	ldr	r3, [pc, #20]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006602:	613b      	str	r3, [r7, #16]
      break;
 8006604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006606:	693b      	ldr	r3, [r7, #16]
}
 8006608:	4618      	mov	r0, r3
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	40021000 	.word	0x40021000
 8006618:	007a1200 	.word	0x007a1200
 800661c:	080087a0 	.word	0x080087a0
 8006620:	080087b0 	.word	0x080087b0

08006624 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b092      	sub	sp, #72	@ 0x48
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006634:	2300      	movs	r3, #0
 8006636:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 80d4 	beq.w	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006648:	4b4e      	ldr	r3, [pc, #312]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10e      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006654:	4b4b      	ldr	r3, [pc, #300]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	4a4a      	ldr	r2, [pc, #296]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800665a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800665e:	61d3      	str	r3, [r2, #28]
 8006660:	4b48      	ldr	r3, [pc, #288]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800666c:	2301      	movs	r3, #1
 800666e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006672:	4b45      	ldr	r3, [pc, #276]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667a:	2b00      	cmp	r3, #0
 800667c:	d118      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800667e:	4b42      	ldr	r3, [pc, #264]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a41      	ldr	r2, [pc, #260]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006688:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800668a:	f7fd f9f3 	bl	8003a74 <HAL_GetTick>
 800668e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006690:	e008      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006692:	f7fd f9ef 	bl	8003a74 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b64      	cmp	r3, #100	@ 0x64
 800669e:	d901      	bls.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e1d6      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a4:	4b38      	ldr	r3, [pc, #224]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066b0:	4b34      	ldr	r3, [pc, #208]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8084 	beq.w	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d07c      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066d0:	4b2c      	ldr	r3, [pc, #176]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80066de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e2:	fa93 f3a3 	rbit	r3, r3
 80066e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80066e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066ea:	fab3 f383 	clz	r3, r3
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	4b26      	ldr	r3, [pc, #152]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	461a      	mov	r2, r3
 80066fa:	2301      	movs	r3, #1
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006702:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	fa93 f3a3 	rbit	r3, r3
 800670a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800670c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800670e:	fab3 f383 	clz	r3, r3
 8006712:	b2db      	uxtb	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	4b1d      	ldr	r3, [pc, #116]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	461a      	mov	r2, r3
 800671e:	2300      	movs	r3, #0
 8006720:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006722:	4a18      	ldr	r2, [pc, #96]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006726:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d04b      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006732:	f7fd f99f 	bl	8003a74 <HAL_GetTick>
 8006736:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006738:	e00a      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fd f99b 	bl	8003a74 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006748:	4293      	cmp	r3, r2
 800674a:	d901      	bls.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e180      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006750:	2302      	movs	r3, #2
 8006752:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	fa93 f3a3 	rbit	r3, r3
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
 800675c:	2302      	movs	r3, #2
 800675e:	623b      	str	r3, [r7, #32]
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	fa93 f3a3 	rbit	r3, r3
 8006766:	61fb      	str	r3, [r7, #28]
  return result;
 8006768:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800676a:	fab3 f383 	clz	r3, r3
 800676e:	b2db      	uxtb	r3, r3
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f043 0302 	orr.w	r3, r3, #2
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d108      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800677e:	4b01      	ldr	r3, [pc, #4]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	e00d      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006784:	40021000 	.word	0x40021000
 8006788:	40007000 	.word	0x40007000
 800678c:	10908100 	.word	0x10908100
 8006790:	2302      	movs	r3, #2
 8006792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	fa93 f3a3 	rbit	r3, r3
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	4b9a      	ldr	r3, [pc, #616]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800679e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a0:	2202      	movs	r2, #2
 80067a2:	613a      	str	r2, [r7, #16]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	fa92 f2a2 	rbit	r2, r2
 80067aa:	60fa      	str	r2, [r7, #12]
  return result;
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	fab2 f282 	clz	r2, r2
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	f002 021f 	and.w	r2, r2, #31
 80067be:	2101      	movs	r1, #1
 80067c0:	fa01 f202 	lsl.w	r2, r1, r2
 80067c4:	4013      	ands	r3, r2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0b7      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80067ca:	4b8f      	ldr	r3, [pc, #572]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	498c      	ldr	r1, [pc, #560]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d105      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067e4:	4b88      	ldr	r3, [pc, #544]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	4a87      	ldr	r2, [pc, #540]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d008      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067fc:	4b82      	ldr	r3, [pc, #520]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006800:	f023 0203 	bic.w	r2, r3, #3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	497f      	ldr	r1, [pc, #508]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800680a:	4313      	orrs	r3, r2
 800680c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d008      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800681a:	4b7b      	ldr	r3, [pc, #492]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	4978      	ldr	r1, [pc, #480]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006828:	4313      	orrs	r3, r2
 800682a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006838:	4b73      	ldr	r3, [pc, #460]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800683a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	4970      	ldr	r1, [pc, #448]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006846:	4313      	orrs	r3, r2
 8006848:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	d008      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006856:	4b6c      	ldr	r3, [pc, #432]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685a:	f023 0210 	bic.w	r2, r3, #16
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	4969      	ldr	r1, [pc, #420]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006864:	4313      	orrs	r3, r2
 8006866:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d008      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006874:	4b64      	ldr	r3, [pc, #400]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006880:	4961      	ldr	r1, [pc, #388]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006882:	4313      	orrs	r3, r2
 8006884:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006892:	4b5d      	ldr	r3, [pc, #372]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006896:	f023 0220 	bic.w	r2, r3, #32
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	495a      	ldr	r1, [pc, #360]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068b0:	4b55      	ldr	r3, [pc, #340]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068bc:	4952      	ldr	r1, [pc, #328]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d008      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068ce:	4b4e      	ldr	r3, [pc, #312]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	494b      	ldr	r1, [pc, #300]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068ec:	4b46      	ldr	r3, [pc, #280]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	4943      	ldr	r1, [pc, #268]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006906:	2b00      	cmp	r3, #0
 8006908:	d008      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800690a:	4b3f      	ldr	r3, [pc, #252]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006916:	493c      	ldr	r1, [pc, #240]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006918:	4313      	orrs	r3, r2
 800691a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006924:	2b00      	cmp	r3, #0
 8006926:	d008      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006928:	4b37      	ldr	r3, [pc, #220]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800692a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006934:	4934      	ldr	r1, [pc, #208]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006936:	4313      	orrs	r3, r2
 8006938:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	d008      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006946:	4b30      	ldr	r3, [pc, #192]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	492d      	ldr	r1, [pc, #180]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006954:	4313      	orrs	r3, r2
 8006956:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006964:	4b28      	ldr	r3, [pc, #160]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006968:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006970:	4925      	ldr	r1, [pc, #148]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006972:	4313      	orrs	r3, r2
 8006974:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d008      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006982:	4b21      	ldr	r3, [pc, #132]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006986:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698e:	491e      	ldr	r1, [pc, #120]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006990:	4313      	orrs	r3, r2
 8006992:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80069a0:	4b19      	ldr	r3, [pc, #100]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80069a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ac:	4916      	ldr	r1, [pc, #88]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d008      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80069be:	4b12      	ldr	r3, [pc, #72]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ca:	490f      	ldr	r1, [pc, #60]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80069dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80069de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e8:	4907      	ldr	r1, [pc, #28]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80069fa:	4b03      	ldr	r3, [pc, #12]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80069fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fe:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	e002      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006a06:	bf00      	nop
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a0e:	4913      	ldr	r1, [pc, #76]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d008      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006a20:	4b0e      	ldr	r3, [pc, #56]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a2c:	490b      	ldr	r1, [pc, #44]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006a3e:	4b07      	ldr	r3, [pc, #28]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a42:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a4a:	4904      	ldr	r1, [pc, #16]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3748      	adds	r7, #72	@ 0x48
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40021000 	.word	0x40021000

08006a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e049      	b.n	8006b06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fc feac 	bl	80037e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	f000 faa4 	bl	8006fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d001      	beq.n	8006b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e04f      	b.n	8006bc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a23      	ldr	r2, [pc, #140]	@ (8006bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d01d      	beq.n	8006b86 <HAL_TIM_Base_Start_IT+0x76>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b52:	d018      	beq.n	8006b86 <HAL_TIM_Base_Start_IT+0x76>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1f      	ldr	r2, [pc, #124]	@ (8006bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d013      	beq.n	8006b86 <HAL_TIM_Base_Start_IT+0x76>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1e      	ldr	r2, [pc, #120]	@ (8006bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00e      	beq.n	8006b86 <HAL_TIM_Base_Start_IT+0x76>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d009      	beq.n	8006b86 <HAL_TIM_Base_Start_IT+0x76>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1b      	ldr	r2, [pc, #108]	@ (8006be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d004      	beq.n	8006b86 <HAL_TIM_Base_Start_IT+0x76>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a19      	ldr	r2, [pc, #100]	@ (8006be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d115      	bne.n	8006bb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	4b17      	ldr	r3, [pc, #92]	@ (8006bec <HAL_TIM_Base_Start_IT+0xdc>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b06      	cmp	r3, #6
 8006b96:	d015      	beq.n	8006bc4 <HAL_TIM_Base_Start_IT+0xb4>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b9e:	d011      	beq.n	8006bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0201 	orr.w	r2, r2, #1
 8006bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb0:	e008      	b.n	8006bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f042 0201 	orr.w	r2, r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e000      	b.n	8006bc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	40012c00 	.word	0x40012c00
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40013400 	.word	0x40013400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40015000 	.word	0x40015000
 8006bec:	00010007 	.word	0x00010007

08006bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d020      	beq.n	8006c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01b      	beq.n	8006c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0202 	mvn.w	r2, #2
 8006c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f9b7 	bl	8006fae <HAL_TIM_IC_CaptureCallback>
 8006c40:	e005      	b.n	8006c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f9a9 	bl	8006f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f9ba 	bl	8006fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d020      	beq.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01b      	beq.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0204 	mvn.w	r2, #4
 8006c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f991 	bl	8006fae <HAL_TIM_IC_CaptureCallback>
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f983 	bl	8006f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f994 	bl	8006fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d020      	beq.n	8006cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01b      	beq.n	8006cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0208 	mvn.w	r2, #8
 8006cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f96b 	bl	8006fae <HAL_TIM_IC_CaptureCallback>
 8006cd8:	e005      	b.n	8006ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f95d 	bl	8006f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f96e 	bl	8006fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d020      	beq.n	8006d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01b      	beq.n	8006d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f06f 0210 	mvn.w	r2, #16
 8006d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f945 	bl	8006fae <HAL_TIM_IC_CaptureCallback>
 8006d24:	e005      	b.n	8006d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f937 	bl	8006f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f948 	bl	8006fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00c      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f06f 0201 	mvn.w	r2, #1
 8006d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f915 	bl	8006f86 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00c      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d007      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fb10 	bl	80073a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00c      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fb08 	bl	80073b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00c      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f907 	bl	8006fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00c      	beq.n	8006dec <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0220 	mvn.w	r2, #32
 8006de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fad0 	bl	800738c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d101      	bne.n	8006e10 <HAL_TIM_ConfigClockSource+0x1c>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	e0b6      	b.n	8006f7e <HAL_TIM_ConfigClockSource+0x18a>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e4c:	d03e      	beq.n	8006ecc <HAL_TIM_ConfigClockSource+0xd8>
 8006e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e52:	f200 8087 	bhi.w	8006f64 <HAL_TIM_ConfigClockSource+0x170>
 8006e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e5a:	f000 8086 	beq.w	8006f6a <HAL_TIM_ConfigClockSource+0x176>
 8006e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e62:	d87f      	bhi.n	8006f64 <HAL_TIM_ConfigClockSource+0x170>
 8006e64:	2b70      	cmp	r3, #112	@ 0x70
 8006e66:	d01a      	beq.n	8006e9e <HAL_TIM_ConfigClockSource+0xaa>
 8006e68:	2b70      	cmp	r3, #112	@ 0x70
 8006e6a:	d87b      	bhi.n	8006f64 <HAL_TIM_ConfigClockSource+0x170>
 8006e6c:	2b60      	cmp	r3, #96	@ 0x60
 8006e6e:	d050      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x11e>
 8006e70:	2b60      	cmp	r3, #96	@ 0x60
 8006e72:	d877      	bhi.n	8006f64 <HAL_TIM_ConfigClockSource+0x170>
 8006e74:	2b50      	cmp	r3, #80	@ 0x50
 8006e76:	d03c      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0xfe>
 8006e78:	2b50      	cmp	r3, #80	@ 0x50
 8006e7a:	d873      	bhi.n	8006f64 <HAL_TIM_ConfigClockSource+0x170>
 8006e7c:	2b40      	cmp	r3, #64	@ 0x40
 8006e7e:	d058      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x13e>
 8006e80:	2b40      	cmp	r3, #64	@ 0x40
 8006e82:	d86f      	bhi.n	8006f64 <HAL_TIM_ConfigClockSource+0x170>
 8006e84:	2b30      	cmp	r3, #48	@ 0x30
 8006e86:	d064      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0x15e>
 8006e88:	2b30      	cmp	r3, #48	@ 0x30
 8006e8a:	d86b      	bhi.n	8006f64 <HAL_TIM_ConfigClockSource+0x170>
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d060      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0x15e>
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d867      	bhi.n	8006f64 <HAL_TIM_ConfigClockSource+0x170>
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d05c      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0x15e>
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d05a      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0x15e>
 8006e9c:	e062      	b.n	8006f64 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eae:	f000 f9c1 	bl	8007234 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	609a      	str	r2, [r3, #8]
      break;
 8006eca:	e04f      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006edc:	f000 f9aa 	bl	8007234 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eee:	609a      	str	r2, [r3, #8]
      break;
 8006ef0:	e03c      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efe:	461a      	mov	r2, r3
 8006f00:	f000 f91e 	bl	8007140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2150      	movs	r1, #80	@ 0x50
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f977 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006f10:	e02c      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f000 f93d 	bl	800719e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2160      	movs	r1, #96	@ 0x60
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 f967 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006f30:	e01c      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f000 f8fe 	bl	8007140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2140      	movs	r1, #64	@ 0x40
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 f957 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006f50:	e00c      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	f000 f94e 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006f62:	e003      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
      break;
 8006f68:	e000      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a48      	ldr	r2, [pc, #288]	@ (8007120 <TIM_Base_SetConfig+0x134>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700a:	d00f      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a45      	ldr	r2, [pc, #276]	@ (8007124 <TIM_Base_SetConfig+0x138>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00b      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a44      	ldr	r2, [pc, #272]	@ (8007128 <TIM_Base_SetConfig+0x13c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d007      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a43      	ldr	r2, [pc, #268]	@ (800712c <TIM_Base_SetConfig+0x140>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d003      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a42      	ldr	r2, [pc, #264]	@ (8007130 <TIM_Base_SetConfig+0x144>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d108      	bne.n	800703e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a37      	ldr	r2, [pc, #220]	@ (8007120 <TIM_Base_SetConfig+0x134>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d01f      	beq.n	8007086 <TIM_Base_SetConfig+0x9a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800704c:	d01b      	beq.n	8007086 <TIM_Base_SetConfig+0x9a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a34      	ldr	r2, [pc, #208]	@ (8007124 <TIM_Base_SetConfig+0x138>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d017      	beq.n	8007086 <TIM_Base_SetConfig+0x9a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a33      	ldr	r2, [pc, #204]	@ (8007128 <TIM_Base_SetConfig+0x13c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <TIM_Base_SetConfig+0x9a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a32      	ldr	r2, [pc, #200]	@ (800712c <TIM_Base_SetConfig+0x140>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00f      	beq.n	8007086 <TIM_Base_SetConfig+0x9a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a32      	ldr	r2, [pc, #200]	@ (8007134 <TIM_Base_SetConfig+0x148>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00b      	beq.n	8007086 <TIM_Base_SetConfig+0x9a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a31      	ldr	r2, [pc, #196]	@ (8007138 <TIM_Base_SetConfig+0x14c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d007      	beq.n	8007086 <TIM_Base_SetConfig+0x9a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a30      	ldr	r2, [pc, #192]	@ (800713c <TIM_Base_SetConfig+0x150>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d003      	beq.n	8007086 <TIM_Base_SetConfig+0x9a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a2b      	ldr	r2, [pc, #172]	@ (8007130 <TIM_Base_SetConfig+0x144>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d108      	bne.n	8007098 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800708c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4313      	orrs	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a18      	ldr	r2, [pc, #96]	@ (8007120 <TIM_Base_SetConfig+0x134>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d013      	beq.n	80070ec <TIM_Base_SetConfig+0x100>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a19      	ldr	r2, [pc, #100]	@ (800712c <TIM_Base_SetConfig+0x140>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00f      	beq.n	80070ec <TIM_Base_SetConfig+0x100>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a19      	ldr	r2, [pc, #100]	@ (8007134 <TIM_Base_SetConfig+0x148>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00b      	beq.n	80070ec <TIM_Base_SetConfig+0x100>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a18      	ldr	r2, [pc, #96]	@ (8007138 <TIM_Base_SetConfig+0x14c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d007      	beq.n	80070ec <TIM_Base_SetConfig+0x100>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a17      	ldr	r2, [pc, #92]	@ (800713c <TIM_Base_SetConfig+0x150>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d003      	beq.n	80070ec <TIM_Base_SetConfig+0x100>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a12      	ldr	r2, [pc, #72]	@ (8007130 <TIM_Base_SetConfig+0x144>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d103      	bne.n	80070f4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	691a      	ldr	r2, [r3, #16]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b01      	cmp	r3, #1
 8007104:	d105      	bne.n	8007112 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f023 0201 	bic.w	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	611a      	str	r2, [r3, #16]
  }
}
 8007112:	bf00      	nop
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40012c00 	.word	0x40012c00
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800
 800712c:	40013400 	.word	0x40013400
 8007130:	40015000 	.word	0x40015000
 8007134:	40014000 	.word	0x40014000
 8007138:	40014400 	.word	0x40014400
 800713c:	40014800 	.word	0x40014800

08007140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f023 0201 	bic.w	r2, r3, #1
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800716a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f023 030a 	bic.w	r3, r3, #10
 800717c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4313      	orrs	r3, r2
 8007184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800719e:	b480      	push	{r7}
 80071a0:	b087      	sub	sp, #28
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	f023 0210 	bic.w	r2, r3, #16
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	031b      	lsls	r3, r3, #12
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	621a      	str	r2, [r3, #32]
}
 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	f043 0307 	orr.w	r3, r3, #7
 8007220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	609a      	str	r2, [r3, #8]
}
 8007228:	bf00      	nop
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800724e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	021a      	lsls	r2, r3, #8
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	431a      	orrs	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4313      	orrs	r3, r2
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	4313      	orrs	r3, r2
 8007260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	609a      	str	r2, [r3, #8]
}
 8007268:	bf00      	nop
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007288:	2302      	movs	r3, #2
 800728a:	e06d      	b.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a30      	ldr	r2, [pc, #192]	@ (8007374 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d009      	beq.n	80072ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a2f      	ldr	r2, [pc, #188]	@ (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d004      	beq.n	80072ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a2d      	ldr	r2, [pc, #180]	@ (800737c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d108      	bne.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007374 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d01d      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007308:	d018      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a1c      	ldr	r2, [pc, #112]	@ (8007380 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d013      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a1a      	ldr	r2, [pc, #104]	@ (8007384 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00e      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a15      	ldr	r2, [pc, #84]	@ (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a16      	ldr	r2, [pc, #88]	@ (8007388 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a11      	ldr	r2, [pc, #68]	@ (800737c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d10c      	bne.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007342:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	4313      	orrs	r3, r2
 800734c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	40012c00 	.word	0x40012c00
 8007378:	40013400 	.word	0x40013400
 800737c:	40015000 	.word	0x40015000
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800
 8007388:	40014000 	.word	0x40014000

0800738c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <siprintf>:
 80073c8:	b40e      	push	{r1, r2, r3}
 80073ca:	b500      	push	{lr}
 80073cc:	b09c      	sub	sp, #112	@ 0x70
 80073ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80073d0:	9002      	str	r0, [sp, #8]
 80073d2:	9006      	str	r0, [sp, #24]
 80073d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80073d8:	4809      	ldr	r0, [pc, #36]	@ (8007400 <siprintf+0x38>)
 80073da:	9107      	str	r1, [sp, #28]
 80073dc:	9104      	str	r1, [sp, #16]
 80073de:	4909      	ldr	r1, [pc, #36]	@ (8007404 <siprintf+0x3c>)
 80073e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e4:	9105      	str	r1, [sp, #20]
 80073e6:	6800      	ldr	r0, [r0, #0]
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	a902      	add	r1, sp, #8
 80073ec:	f000 f994 	bl	8007718 <_svfiprintf_r>
 80073f0:	9b02      	ldr	r3, [sp, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	b01c      	add	sp, #112	@ 0x70
 80073f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073fc:	b003      	add	sp, #12
 80073fe:	4770      	bx	lr
 8007400:	20000018 	.word	0x20000018
 8007404:	ffff0208 	.word	0xffff0208

08007408 <memset>:
 8007408:	4402      	add	r2, r0
 800740a:	4603      	mov	r3, r0
 800740c:	4293      	cmp	r3, r2
 800740e:	d100      	bne.n	8007412 <memset+0xa>
 8007410:	4770      	bx	lr
 8007412:	f803 1b01 	strb.w	r1, [r3], #1
 8007416:	e7f9      	b.n	800740c <memset+0x4>

08007418 <__errno>:
 8007418:	4b01      	ldr	r3, [pc, #4]	@ (8007420 <__errno+0x8>)
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20000018 	.word	0x20000018

08007424 <__libc_init_array>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	4d0d      	ldr	r5, [pc, #52]	@ (800745c <__libc_init_array+0x38>)
 8007428:	4c0d      	ldr	r4, [pc, #52]	@ (8007460 <__libc_init_array+0x3c>)
 800742a:	1b64      	subs	r4, r4, r5
 800742c:	10a4      	asrs	r4, r4, #2
 800742e:	2600      	movs	r6, #0
 8007430:	42a6      	cmp	r6, r4
 8007432:	d109      	bne.n	8007448 <__libc_init_array+0x24>
 8007434:	4d0b      	ldr	r5, [pc, #44]	@ (8007464 <__libc_init_array+0x40>)
 8007436:	4c0c      	ldr	r4, [pc, #48]	@ (8007468 <__libc_init_array+0x44>)
 8007438:	f000 fc66 	bl	8007d08 <_init>
 800743c:	1b64      	subs	r4, r4, r5
 800743e:	10a4      	asrs	r4, r4, #2
 8007440:	2600      	movs	r6, #0
 8007442:	42a6      	cmp	r6, r4
 8007444:	d105      	bne.n	8007452 <__libc_init_array+0x2e>
 8007446:	bd70      	pop	{r4, r5, r6, pc}
 8007448:	f855 3b04 	ldr.w	r3, [r5], #4
 800744c:	4798      	blx	r3
 800744e:	3601      	adds	r6, #1
 8007450:	e7ee      	b.n	8007430 <__libc_init_array+0xc>
 8007452:	f855 3b04 	ldr.w	r3, [r5], #4
 8007456:	4798      	blx	r3
 8007458:	3601      	adds	r6, #1
 800745a:	e7f2      	b.n	8007442 <__libc_init_array+0x1e>
 800745c:	080087fc 	.word	0x080087fc
 8007460:	080087fc 	.word	0x080087fc
 8007464:	080087fc 	.word	0x080087fc
 8007468:	08008800 	.word	0x08008800

0800746c <__retarget_lock_acquire_recursive>:
 800746c:	4770      	bx	lr

0800746e <__retarget_lock_release_recursive>:
 800746e:	4770      	bx	lr

08007470 <_free_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4605      	mov	r5, r0
 8007474:	2900      	cmp	r1, #0
 8007476:	d041      	beq.n	80074fc <_free_r+0x8c>
 8007478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800747c:	1f0c      	subs	r4, r1, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	bfb8      	it	lt
 8007482:	18e4      	addlt	r4, r4, r3
 8007484:	f000 f8e0 	bl	8007648 <__malloc_lock>
 8007488:	4a1d      	ldr	r2, [pc, #116]	@ (8007500 <_free_r+0x90>)
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	b933      	cbnz	r3, 800749c <_free_r+0x2c>
 800748e:	6063      	str	r3, [r4, #4]
 8007490:	6014      	str	r4, [r2, #0]
 8007492:	4628      	mov	r0, r5
 8007494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007498:	f000 b8dc 	b.w	8007654 <__malloc_unlock>
 800749c:	42a3      	cmp	r3, r4
 800749e:	d908      	bls.n	80074b2 <_free_r+0x42>
 80074a0:	6820      	ldr	r0, [r4, #0]
 80074a2:	1821      	adds	r1, r4, r0
 80074a4:	428b      	cmp	r3, r1
 80074a6:	bf01      	itttt	eq
 80074a8:	6819      	ldreq	r1, [r3, #0]
 80074aa:	685b      	ldreq	r3, [r3, #4]
 80074ac:	1809      	addeq	r1, r1, r0
 80074ae:	6021      	streq	r1, [r4, #0]
 80074b0:	e7ed      	b.n	800748e <_free_r+0x1e>
 80074b2:	461a      	mov	r2, r3
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	b10b      	cbz	r3, 80074bc <_free_r+0x4c>
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d9fa      	bls.n	80074b2 <_free_r+0x42>
 80074bc:	6811      	ldr	r1, [r2, #0]
 80074be:	1850      	adds	r0, r2, r1
 80074c0:	42a0      	cmp	r0, r4
 80074c2:	d10b      	bne.n	80074dc <_free_r+0x6c>
 80074c4:	6820      	ldr	r0, [r4, #0]
 80074c6:	4401      	add	r1, r0
 80074c8:	1850      	adds	r0, r2, r1
 80074ca:	4283      	cmp	r3, r0
 80074cc:	6011      	str	r1, [r2, #0]
 80074ce:	d1e0      	bne.n	8007492 <_free_r+0x22>
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	6053      	str	r3, [r2, #4]
 80074d6:	4408      	add	r0, r1
 80074d8:	6010      	str	r0, [r2, #0]
 80074da:	e7da      	b.n	8007492 <_free_r+0x22>
 80074dc:	d902      	bls.n	80074e4 <_free_r+0x74>
 80074de:	230c      	movs	r3, #12
 80074e0:	602b      	str	r3, [r5, #0]
 80074e2:	e7d6      	b.n	8007492 <_free_r+0x22>
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	1821      	adds	r1, r4, r0
 80074e8:	428b      	cmp	r3, r1
 80074ea:	bf04      	itt	eq
 80074ec:	6819      	ldreq	r1, [r3, #0]
 80074ee:	685b      	ldreq	r3, [r3, #4]
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	bf04      	itt	eq
 80074f4:	1809      	addeq	r1, r1, r0
 80074f6:	6021      	streq	r1, [r4, #0]
 80074f8:	6054      	str	r4, [r2, #4]
 80074fa:	e7ca      	b.n	8007492 <_free_r+0x22>
 80074fc:	bd38      	pop	{r3, r4, r5, pc}
 80074fe:	bf00      	nop
 8007500:	200002b8 	.word	0x200002b8

08007504 <sbrk_aligned>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	4e0f      	ldr	r6, [pc, #60]	@ (8007544 <sbrk_aligned+0x40>)
 8007508:	460c      	mov	r4, r1
 800750a:	6831      	ldr	r1, [r6, #0]
 800750c:	4605      	mov	r5, r0
 800750e:	b911      	cbnz	r1, 8007516 <sbrk_aligned+0x12>
 8007510:	f000 fba6 	bl	8007c60 <_sbrk_r>
 8007514:	6030      	str	r0, [r6, #0]
 8007516:	4621      	mov	r1, r4
 8007518:	4628      	mov	r0, r5
 800751a:	f000 fba1 	bl	8007c60 <_sbrk_r>
 800751e:	1c43      	adds	r3, r0, #1
 8007520:	d103      	bne.n	800752a <sbrk_aligned+0x26>
 8007522:	f04f 34ff 	mov.w	r4, #4294967295
 8007526:	4620      	mov	r0, r4
 8007528:	bd70      	pop	{r4, r5, r6, pc}
 800752a:	1cc4      	adds	r4, r0, #3
 800752c:	f024 0403 	bic.w	r4, r4, #3
 8007530:	42a0      	cmp	r0, r4
 8007532:	d0f8      	beq.n	8007526 <sbrk_aligned+0x22>
 8007534:	1a21      	subs	r1, r4, r0
 8007536:	4628      	mov	r0, r5
 8007538:	f000 fb92 	bl	8007c60 <_sbrk_r>
 800753c:	3001      	adds	r0, #1
 800753e:	d1f2      	bne.n	8007526 <sbrk_aligned+0x22>
 8007540:	e7ef      	b.n	8007522 <sbrk_aligned+0x1e>
 8007542:	bf00      	nop
 8007544:	200002b4 	.word	0x200002b4

08007548 <_malloc_r>:
 8007548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800754c:	1ccd      	adds	r5, r1, #3
 800754e:	f025 0503 	bic.w	r5, r5, #3
 8007552:	3508      	adds	r5, #8
 8007554:	2d0c      	cmp	r5, #12
 8007556:	bf38      	it	cc
 8007558:	250c      	movcc	r5, #12
 800755a:	2d00      	cmp	r5, #0
 800755c:	4606      	mov	r6, r0
 800755e:	db01      	blt.n	8007564 <_malloc_r+0x1c>
 8007560:	42a9      	cmp	r1, r5
 8007562:	d904      	bls.n	800756e <_malloc_r+0x26>
 8007564:	230c      	movs	r3, #12
 8007566:	6033      	str	r3, [r6, #0]
 8007568:	2000      	movs	r0, #0
 800756a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800756e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007644 <_malloc_r+0xfc>
 8007572:	f000 f869 	bl	8007648 <__malloc_lock>
 8007576:	f8d8 3000 	ldr.w	r3, [r8]
 800757a:	461c      	mov	r4, r3
 800757c:	bb44      	cbnz	r4, 80075d0 <_malloc_r+0x88>
 800757e:	4629      	mov	r1, r5
 8007580:	4630      	mov	r0, r6
 8007582:	f7ff ffbf 	bl	8007504 <sbrk_aligned>
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	4604      	mov	r4, r0
 800758a:	d158      	bne.n	800763e <_malloc_r+0xf6>
 800758c:	f8d8 4000 	ldr.w	r4, [r8]
 8007590:	4627      	mov	r7, r4
 8007592:	2f00      	cmp	r7, #0
 8007594:	d143      	bne.n	800761e <_malloc_r+0xd6>
 8007596:	2c00      	cmp	r4, #0
 8007598:	d04b      	beq.n	8007632 <_malloc_r+0xea>
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	4639      	mov	r1, r7
 800759e:	4630      	mov	r0, r6
 80075a0:	eb04 0903 	add.w	r9, r4, r3
 80075a4:	f000 fb5c 	bl	8007c60 <_sbrk_r>
 80075a8:	4581      	cmp	r9, r0
 80075aa:	d142      	bne.n	8007632 <_malloc_r+0xea>
 80075ac:	6821      	ldr	r1, [r4, #0]
 80075ae:	1a6d      	subs	r5, r5, r1
 80075b0:	4629      	mov	r1, r5
 80075b2:	4630      	mov	r0, r6
 80075b4:	f7ff ffa6 	bl	8007504 <sbrk_aligned>
 80075b8:	3001      	adds	r0, #1
 80075ba:	d03a      	beq.n	8007632 <_malloc_r+0xea>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	442b      	add	r3, r5
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	f8d8 3000 	ldr.w	r3, [r8]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	bb62      	cbnz	r2, 8007624 <_malloc_r+0xdc>
 80075ca:	f8c8 7000 	str.w	r7, [r8]
 80075ce:	e00f      	b.n	80075f0 <_malloc_r+0xa8>
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	1b52      	subs	r2, r2, r5
 80075d4:	d420      	bmi.n	8007618 <_malloc_r+0xd0>
 80075d6:	2a0b      	cmp	r2, #11
 80075d8:	d917      	bls.n	800760a <_malloc_r+0xc2>
 80075da:	1961      	adds	r1, r4, r5
 80075dc:	42a3      	cmp	r3, r4
 80075de:	6025      	str	r5, [r4, #0]
 80075e0:	bf18      	it	ne
 80075e2:	6059      	strne	r1, [r3, #4]
 80075e4:	6863      	ldr	r3, [r4, #4]
 80075e6:	bf08      	it	eq
 80075e8:	f8c8 1000 	streq.w	r1, [r8]
 80075ec:	5162      	str	r2, [r4, r5]
 80075ee:	604b      	str	r3, [r1, #4]
 80075f0:	4630      	mov	r0, r6
 80075f2:	f000 f82f 	bl	8007654 <__malloc_unlock>
 80075f6:	f104 000b 	add.w	r0, r4, #11
 80075fa:	1d23      	adds	r3, r4, #4
 80075fc:	f020 0007 	bic.w	r0, r0, #7
 8007600:	1ac2      	subs	r2, r0, r3
 8007602:	bf1c      	itt	ne
 8007604:	1a1b      	subne	r3, r3, r0
 8007606:	50a3      	strne	r3, [r4, r2]
 8007608:	e7af      	b.n	800756a <_malloc_r+0x22>
 800760a:	6862      	ldr	r2, [r4, #4]
 800760c:	42a3      	cmp	r3, r4
 800760e:	bf0c      	ite	eq
 8007610:	f8c8 2000 	streq.w	r2, [r8]
 8007614:	605a      	strne	r2, [r3, #4]
 8007616:	e7eb      	b.n	80075f0 <_malloc_r+0xa8>
 8007618:	4623      	mov	r3, r4
 800761a:	6864      	ldr	r4, [r4, #4]
 800761c:	e7ae      	b.n	800757c <_malloc_r+0x34>
 800761e:	463c      	mov	r4, r7
 8007620:	687f      	ldr	r7, [r7, #4]
 8007622:	e7b6      	b.n	8007592 <_malloc_r+0x4a>
 8007624:	461a      	mov	r2, r3
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	42a3      	cmp	r3, r4
 800762a:	d1fb      	bne.n	8007624 <_malloc_r+0xdc>
 800762c:	2300      	movs	r3, #0
 800762e:	6053      	str	r3, [r2, #4]
 8007630:	e7de      	b.n	80075f0 <_malloc_r+0xa8>
 8007632:	230c      	movs	r3, #12
 8007634:	6033      	str	r3, [r6, #0]
 8007636:	4630      	mov	r0, r6
 8007638:	f000 f80c 	bl	8007654 <__malloc_unlock>
 800763c:	e794      	b.n	8007568 <_malloc_r+0x20>
 800763e:	6005      	str	r5, [r0, #0]
 8007640:	e7d6      	b.n	80075f0 <_malloc_r+0xa8>
 8007642:	bf00      	nop
 8007644:	200002b8 	.word	0x200002b8

08007648 <__malloc_lock>:
 8007648:	4801      	ldr	r0, [pc, #4]	@ (8007650 <__malloc_lock+0x8>)
 800764a:	f7ff bf0f 	b.w	800746c <__retarget_lock_acquire_recursive>
 800764e:	bf00      	nop
 8007650:	200002b0 	.word	0x200002b0

08007654 <__malloc_unlock>:
 8007654:	4801      	ldr	r0, [pc, #4]	@ (800765c <__malloc_unlock+0x8>)
 8007656:	f7ff bf0a 	b.w	800746e <__retarget_lock_release_recursive>
 800765a:	bf00      	nop
 800765c:	200002b0 	.word	0x200002b0

08007660 <__ssputs_r>:
 8007660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007664:	688e      	ldr	r6, [r1, #8]
 8007666:	461f      	mov	r7, r3
 8007668:	42be      	cmp	r6, r7
 800766a:	680b      	ldr	r3, [r1, #0]
 800766c:	4682      	mov	sl, r0
 800766e:	460c      	mov	r4, r1
 8007670:	4690      	mov	r8, r2
 8007672:	d82d      	bhi.n	80076d0 <__ssputs_r+0x70>
 8007674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007678:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800767c:	d026      	beq.n	80076cc <__ssputs_r+0x6c>
 800767e:	6965      	ldr	r5, [r4, #20]
 8007680:	6909      	ldr	r1, [r1, #16]
 8007682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007686:	eba3 0901 	sub.w	r9, r3, r1
 800768a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800768e:	1c7b      	adds	r3, r7, #1
 8007690:	444b      	add	r3, r9
 8007692:	106d      	asrs	r5, r5, #1
 8007694:	429d      	cmp	r5, r3
 8007696:	bf38      	it	cc
 8007698:	461d      	movcc	r5, r3
 800769a:	0553      	lsls	r3, r2, #21
 800769c:	d527      	bpl.n	80076ee <__ssputs_r+0x8e>
 800769e:	4629      	mov	r1, r5
 80076a0:	f7ff ff52 	bl	8007548 <_malloc_r>
 80076a4:	4606      	mov	r6, r0
 80076a6:	b360      	cbz	r0, 8007702 <__ssputs_r+0xa2>
 80076a8:	6921      	ldr	r1, [r4, #16]
 80076aa:	464a      	mov	r2, r9
 80076ac:	f000 fae8 	bl	8007c80 <memcpy>
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ba:	81a3      	strh	r3, [r4, #12]
 80076bc:	6126      	str	r6, [r4, #16]
 80076be:	6165      	str	r5, [r4, #20]
 80076c0:	444e      	add	r6, r9
 80076c2:	eba5 0509 	sub.w	r5, r5, r9
 80076c6:	6026      	str	r6, [r4, #0]
 80076c8:	60a5      	str	r5, [r4, #8]
 80076ca:	463e      	mov	r6, r7
 80076cc:	42be      	cmp	r6, r7
 80076ce:	d900      	bls.n	80076d2 <__ssputs_r+0x72>
 80076d0:	463e      	mov	r6, r7
 80076d2:	6820      	ldr	r0, [r4, #0]
 80076d4:	4632      	mov	r2, r6
 80076d6:	4641      	mov	r1, r8
 80076d8:	f000 faa8 	bl	8007c2c <memmove>
 80076dc:	68a3      	ldr	r3, [r4, #8]
 80076de:	1b9b      	subs	r3, r3, r6
 80076e0:	60a3      	str	r3, [r4, #8]
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	4433      	add	r3, r6
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	2000      	movs	r0, #0
 80076ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ee:	462a      	mov	r2, r5
 80076f0:	f000 fad4 	bl	8007c9c <_realloc_r>
 80076f4:	4606      	mov	r6, r0
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d1e0      	bne.n	80076bc <__ssputs_r+0x5c>
 80076fa:	6921      	ldr	r1, [r4, #16]
 80076fc:	4650      	mov	r0, sl
 80076fe:	f7ff feb7 	bl	8007470 <_free_r>
 8007702:	230c      	movs	r3, #12
 8007704:	f8ca 3000 	str.w	r3, [sl]
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800770e:	81a3      	strh	r3, [r4, #12]
 8007710:	f04f 30ff 	mov.w	r0, #4294967295
 8007714:	e7e9      	b.n	80076ea <__ssputs_r+0x8a>
	...

08007718 <_svfiprintf_r>:
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	4698      	mov	r8, r3
 800771e:	898b      	ldrh	r3, [r1, #12]
 8007720:	061b      	lsls	r3, r3, #24
 8007722:	b09d      	sub	sp, #116	@ 0x74
 8007724:	4607      	mov	r7, r0
 8007726:	460d      	mov	r5, r1
 8007728:	4614      	mov	r4, r2
 800772a:	d510      	bpl.n	800774e <_svfiprintf_r+0x36>
 800772c:	690b      	ldr	r3, [r1, #16]
 800772e:	b973      	cbnz	r3, 800774e <_svfiprintf_r+0x36>
 8007730:	2140      	movs	r1, #64	@ 0x40
 8007732:	f7ff ff09 	bl	8007548 <_malloc_r>
 8007736:	6028      	str	r0, [r5, #0]
 8007738:	6128      	str	r0, [r5, #16]
 800773a:	b930      	cbnz	r0, 800774a <_svfiprintf_r+0x32>
 800773c:	230c      	movs	r3, #12
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	f04f 30ff 	mov.w	r0, #4294967295
 8007744:	b01d      	add	sp, #116	@ 0x74
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	2340      	movs	r3, #64	@ 0x40
 800774c:	616b      	str	r3, [r5, #20]
 800774e:	2300      	movs	r3, #0
 8007750:	9309      	str	r3, [sp, #36]	@ 0x24
 8007752:	2320      	movs	r3, #32
 8007754:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007758:	f8cd 800c 	str.w	r8, [sp, #12]
 800775c:	2330      	movs	r3, #48	@ 0x30
 800775e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80078fc <_svfiprintf_r+0x1e4>
 8007762:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007766:	f04f 0901 	mov.w	r9, #1
 800776a:	4623      	mov	r3, r4
 800776c:	469a      	mov	sl, r3
 800776e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007772:	b10a      	cbz	r2, 8007778 <_svfiprintf_r+0x60>
 8007774:	2a25      	cmp	r2, #37	@ 0x25
 8007776:	d1f9      	bne.n	800776c <_svfiprintf_r+0x54>
 8007778:	ebba 0b04 	subs.w	fp, sl, r4
 800777c:	d00b      	beq.n	8007796 <_svfiprintf_r+0x7e>
 800777e:	465b      	mov	r3, fp
 8007780:	4622      	mov	r2, r4
 8007782:	4629      	mov	r1, r5
 8007784:	4638      	mov	r0, r7
 8007786:	f7ff ff6b 	bl	8007660 <__ssputs_r>
 800778a:	3001      	adds	r0, #1
 800778c:	f000 80a7 	beq.w	80078de <_svfiprintf_r+0x1c6>
 8007790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007792:	445a      	add	r2, fp
 8007794:	9209      	str	r2, [sp, #36]	@ 0x24
 8007796:	f89a 3000 	ldrb.w	r3, [sl]
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 809f 	beq.w	80078de <_svfiprintf_r+0x1c6>
 80077a0:	2300      	movs	r3, #0
 80077a2:	f04f 32ff 	mov.w	r2, #4294967295
 80077a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077aa:	f10a 0a01 	add.w	sl, sl, #1
 80077ae:	9304      	str	r3, [sp, #16]
 80077b0:	9307      	str	r3, [sp, #28]
 80077b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80077b8:	4654      	mov	r4, sl
 80077ba:	2205      	movs	r2, #5
 80077bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c0:	484e      	ldr	r0, [pc, #312]	@ (80078fc <_svfiprintf_r+0x1e4>)
 80077c2:	f7f8 fd0d 	bl	80001e0 <memchr>
 80077c6:	9a04      	ldr	r2, [sp, #16]
 80077c8:	b9d8      	cbnz	r0, 8007802 <_svfiprintf_r+0xea>
 80077ca:	06d0      	lsls	r0, r2, #27
 80077cc:	bf44      	itt	mi
 80077ce:	2320      	movmi	r3, #32
 80077d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077d4:	0711      	lsls	r1, r2, #28
 80077d6:	bf44      	itt	mi
 80077d8:	232b      	movmi	r3, #43	@ 0x2b
 80077da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077de:	f89a 3000 	ldrb.w	r3, [sl]
 80077e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e4:	d015      	beq.n	8007812 <_svfiprintf_r+0xfa>
 80077e6:	9a07      	ldr	r2, [sp, #28]
 80077e8:	4654      	mov	r4, sl
 80077ea:	2000      	movs	r0, #0
 80077ec:	f04f 0c0a 	mov.w	ip, #10
 80077f0:	4621      	mov	r1, r4
 80077f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077f6:	3b30      	subs	r3, #48	@ 0x30
 80077f8:	2b09      	cmp	r3, #9
 80077fa:	d94b      	bls.n	8007894 <_svfiprintf_r+0x17c>
 80077fc:	b1b0      	cbz	r0, 800782c <_svfiprintf_r+0x114>
 80077fe:	9207      	str	r2, [sp, #28]
 8007800:	e014      	b.n	800782c <_svfiprintf_r+0x114>
 8007802:	eba0 0308 	sub.w	r3, r0, r8
 8007806:	fa09 f303 	lsl.w	r3, r9, r3
 800780a:	4313      	orrs	r3, r2
 800780c:	9304      	str	r3, [sp, #16]
 800780e:	46a2      	mov	sl, r4
 8007810:	e7d2      	b.n	80077b8 <_svfiprintf_r+0xa0>
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	1d19      	adds	r1, r3, #4
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	9103      	str	r1, [sp, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	bfbb      	ittet	lt
 800781e:	425b      	neglt	r3, r3
 8007820:	f042 0202 	orrlt.w	r2, r2, #2
 8007824:	9307      	strge	r3, [sp, #28]
 8007826:	9307      	strlt	r3, [sp, #28]
 8007828:	bfb8      	it	lt
 800782a:	9204      	strlt	r2, [sp, #16]
 800782c:	7823      	ldrb	r3, [r4, #0]
 800782e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007830:	d10a      	bne.n	8007848 <_svfiprintf_r+0x130>
 8007832:	7863      	ldrb	r3, [r4, #1]
 8007834:	2b2a      	cmp	r3, #42	@ 0x2a
 8007836:	d132      	bne.n	800789e <_svfiprintf_r+0x186>
 8007838:	9b03      	ldr	r3, [sp, #12]
 800783a:	1d1a      	adds	r2, r3, #4
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	9203      	str	r2, [sp, #12]
 8007840:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007844:	3402      	adds	r4, #2
 8007846:	9305      	str	r3, [sp, #20]
 8007848:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800790c <_svfiprintf_r+0x1f4>
 800784c:	7821      	ldrb	r1, [r4, #0]
 800784e:	2203      	movs	r2, #3
 8007850:	4650      	mov	r0, sl
 8007852:	f7f8 fcc5 	bl	80001e0 <memchr>
 8007856:	b138      	cbz	r0, 8007868 <_svfiprintf_r+0x150>
 8007858:	9b04      	ldr	r3, [sp, #16]
 800785a:	eba0 000a 	sub.w	r0, r0, sl
 800785e:	2240      	movs	r2, #64	@ 0x40
 8007860:	4082      	lsls	r2, r0
 8007862:	4313      	orrs	r3, r2
 8007864:	3401      	adds	r4, #1
 8007866:	9304      	str	r3, [sp, #16]
 8007868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786c:	4824      	ldr	r0, [pc, #144]	@ (8007900 <_svfiprintf_r+0x1e8>)
 800786e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007872:	2206      	movs	r2, #6
 8007874:	f7f8 fcb4 	bl	80001e0 <memchr>
 8007878:	2800      	cmp	r0, #0
 800787a:	d036      	beq.n	80078ea <_svfiprintf_r+0x1d2>
 800787c:	4b21      	ldr	r3, [pc, #132]	@ (8007904 <_svfiprintf_r+0x1ec>)
 800787e:	bb1b      	cbnz	r3, 80078c8 <_svfiprintf_r+0x1b0>
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	3307      	adds	r3, #7
 8007884:	f023 0307 	bic.w	r3, r3, #7
 8007888:	3308      	adds	r3, #8
 800788a:	9303      	str	r3, [sp, #12]
 800788c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788e:	4433      	add	r3, r6
 8007890:	9309      	str	r3, [sp, #36]	@ 0x24
 8007892:	e76a      	b.n	800776a <_svfiprintf_r+0x52>
 8007894:	fb0c 3202 	mla	r2, ip, r2, r3
 8007898:	460c      	mov	r4, r1
 800789a:	2001      	movs	r0, #1
 800789c:	e7a8      	b.n	80077f0 <_svfiprintf_r+0xd8>
 800789e:	2300      	movs	r3, #0
 80078a0:	3401      	adds	r4, #1
 80078a2:	9305      	str	r3, [sp, #20]
 80078a4:	4619      	mov	r1, r3
 80078a6:	f04f 0c0a 	mov.w	ip, #10
 80078aa:	4620      	mov	r0, r4
 80078ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078b0:	3a30      	subs	r2, #48	@ 0x30
 80078b2:	2a09      	cmp	r2, #9
 80078b4:	d903      	bls.n	80078be <_svfiprintf_r+0x1a6>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0c6      	beq.n	8007848 <_svfiprintf_r+0x130>
 80078ba:	9105      	str	r1, [sp, #20]
 80078bc:	e7c4      	b.n	8007848 <_svfiprintf_r+0x130>
 80078be:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c2:	4604      	mov	r4, r0
 80078c4:	2301      	movs	r3, #1
 80078c6:	e7f0      	b.n	80078aa <_svfiprintf_r+0x192>
 80078c8:	ab03      	add	r3, sp, #12
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	462a      	mov	r2, r5
 80078ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007908 <_svfiprintf_r+0x1f0>)
 80078d0:	a904      	add	r1, sp, #16
 80078d2:	4638      	mov	r0, r7
 80078d4:	f3af 8000 	nop.w
 80078d8:	1c42      	adds	r2, r0, #1
 80078da:	4606      	mov	r6, r0
 80078dc:	d1d6      	bne.n	800788c <_svfiprintf_r+0x174>
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	065b      	lsls	r3, r3, #25
 80078e2:	f53f af2d 	bmi.w	8007740 <_svfiprintf_r+0x28>
 80078e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078e8:	e72c      	b.n	8007744 <_svfiprintf_r+0x2c>
 80078ea:	ab03      	add	r3, sp, #12
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	462a      	mov	r2, r5
 80078f0:	4b05      	ldr	r3, [pc, #20]	@ (8007908 <_svfiprintf_r+0x1f0>)
 80078f2:	a904      	add	r1, sp, #16
 80078f4:	4638      	mov	r0, r7
 80078f6:	f000 f879 	bl	80079ec <_printf_i>
 80078fa:	e7ed      	b.n	80078d8 <_svfiprintf_r+0x1c0>
 80078fc:	080087c0 	.word	0x080087c0
 8007900:	080087ca 	.word	0x080087ca
 8007904:	00000000 	.word	0x00000000
 8007908:	08007661 	.word	0x08007661
 800790c:	080087c6 	.word	0x080087c6

08007910 <_printf_common>:
 8007910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007914:	4616      	mov	r6, r2
 8007916:	4698      	mov	r8, r3
 8007918:	688a      	ldr	r2, [r1, #8]
 800791a:	690b      	ldr	r3, [r1, #16]
 800791c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007920:	4293      	cmp	r3, r2
 8007922:	bfb8      	it	lt
 8007924:	4613      	movlt	r3, r2
 8007926:	6033      	str	r3, [r6, #0]
 8007928:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800792c:	4607      	mov	r7, r0
 800792e:	460c      	mov	r4, r1
 8007930:	b10a      	cbz	r2, 8007936 <_printf_common+0x26>
 8007932:	3301      	adds	r3, #1
 8007934:	6033      	str	r3, [r6, #0]
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	0699      	lsls	r1, r3, #26
 800793a:	bf42      	ittt	mi
 800793c:	6833      	ldrmi	r3, [r6, #0]
 800793e:	3302      	addmi	r3, #2
 8007940:	6033      	strmi	r3, [r6, #0]
 8007942:	6825      	ldr	r5, [r4, #0]
 8007944:	f015 0506 	ands.w	r5, r5, #6
 8007948:	d106      	bne.n	8007958 <_printf_common+0x48>
 800794a:	f104 0a19 	add.w	sl, r4, #25
 800794e:	68e3      	ldr	r3, [r4, #12]
 8007950:	6832      	ldr	r2, [r6, #0]
 8007952:	1a9b      	subs	r3, r3, r2
 8007954:	42ab      	cmp	r3, r5
 8007956:	dc26      	bgt.n	80079a6 <_printf_common+0x96>
 8007958:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800795c:	6822      	ldr	r2, [r4, #0]
 800795e:	3b00      	subs	r3, #0
 8007960:	bf18      	it	ne
 8007962:	2301      	movne	r3, #1
 8007964:	0692      	lsls	r2, r2, #26
 8007966:	d42b      	bmi.n	80079c0 <_printf_common+0xb0>
 8007968:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800796c:	4641      	mov	r1, r8
 800796e:	4638      	mov	r0, r7
 8007970:	47c8      	blx	r9
 8007972:	3001      	adds	r0, #1
 8007974:	d01e      	beq.n	80079b4 <_printf_common+0xa4>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	6922      	ldr	r2, [r4, #16]
 800797a:	f003 0306 	and.w	r3, r3, #6
 800797e:	2b04      	cmp	r3, #4
 8007980:	bf02      	ittt	eq
 8007982:	68e5      	ldreq	r5, [r4, #12]
 8007984:	6833      	ldreq	r3, [r6, #0]
 8007986:	1aed      	subeq	r5, r5, r3
 8007988:	68a3      	ldr	r3, [r4, #8]
 800798a:	bf0c      	ite	eq
 800798c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007990:	2500      	movne	r5, #0
 8007992:	4293      	cmp	r3, r2
 8007994:	bfc4      	itt	gt
 8007996:	1a9b      	subgt	r3, r3, r2
 8007998:	18ed      	addgt	r5, r5, r3
 800799a:	2600      	movs	r6, #0
 800799c:	341a      	adds	r4, #26
 800799e:	42b5      	cmp	r5, r6
 80079a0:	d11a      	bne.n	80079d8 <_printf_common+0xc8>
 80079a2:	2000      	movs	r0, #0
 80079a4:	e008      	b.n	80079b8 <_printf_common+0xa8>
 80079a6:	2301      	movs	r3, #1
 80079a8:	4652      	mov	r2, sl
 80079aa:	4641      	mov	r1, r8
 80079ac:	4638      	mov	r0, r7
 80079ae:	47c8      	blx	r9
 80079b0:	3001      	adds	r0, #1
 80079b2:	d103      	bne.n	80079bc <_printf_common+0xac>
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295
 80079b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079bc:	3501      	adds	r5, #1
 80079be:	e7c6      	b.n	800794e <_printf_common+0x3e>
 80079c0:	18e1      	adds	r1, r4, r3
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	2030      	movs	r0, #48	@ 0x30
 80079c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079ca:	4422      	add	r2, r4
 80079cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079d4:	3302      	adds	r3, #2
 80079d6:	e7c7      	b.n	8007968 <_printf_common+0x58>
 80079d8:	2301      	movs	r3, #1
 80079da:	4622      	mov	r2, r4
 80079dc:	4641      	mov	r1, r8
 80079de:	4638      	mov	r0, r7
 80079e0:	47c8      	blx	r9
 80079e2:	3001      	adds	r0, #1
 80079e4:	d0e6      	beq.n	80079b4 <_printf_common+0xa4>
 80079e6:	3601      	adds	r6, #1
 80079e8:	e7d9      	b.n	800799e <_printf_common+0x8e>
	...

080079ec <_printf_i>:
 80079ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079f0:	7e0f      	ldrb	r7, [r1, #24]
 80079f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079f4:	2f78      	cmp	r7, #120	@ 0x78
 80079f6:	4691      	mov	r9, r2
 80079f8:	4680      	mov	r8, r0
 80079fa:	460c      	mov	r4, r1
 80079fc:	469a      	mov	sl, r3
 80079fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a02:	d807      	bhi.n	8007a14 <_printf_i+0x28>
 8007a04:	2f62      	cmp	r7, #98	@ 0x62
 8007a06:	d80a      	bhi.n	8007a1e <_printf_i+0x32>
 8007a08:	2f00      	cmp	r7, #0
 8007a0a:	f000 80d2 	beq.w	8007bb2 <_printf_i+0x1c6>
 8007a0e:	2f58      	cmp	r7, #88	@ 0x58
 8007a10:	f000 80b9 	beq.w	8007b86 <_printf_i+0x19a>
 8007a14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a1c:	e03a      	b.n	8007a94 <_printf_i+0xa8>
 8007a1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a22:	2b15      	cmp	r3, #21
 8007a24:	d8f6      	bhi.n	8007a14 <_printf_i+0x28>
 8007a26:	a101      	add	r1, pc, #4	@ (adr r1, 8007a2c <_printf_i+0x40>)
 8007a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a2c:	08007a85 	.word	0x08007a85
 8007a30:	08007a99 	.word	0x08007a99
 8007a34:	08007a15 	.word	0x08007a15
 8007a38:	08007a15 	.word	0x08007a15
 8007a3c:	08007a15 	.word	0x08007a15
 8007a40:	08007a15 	.word	0x08007a15
 8007a44:	08007a99 	.word	0x08007a99
 8007a48:	08007a15 	.word	0x08007a15
 8007a4c:	08007a15 	.word	0x08007a15
 8007a50:	08007a15 	.word	0x08007a15
 8007a54:	08007a15 	.word	0x08007a15
 8007a58:	08007b99 	.word	0x08007b99
 8007a5c:	08007ac3 	.word	0x08007ac3
 8007a60:	08007b53 	.word	0x08007b53
 8007a64:	08007a15 	.word	0x08007a15
 8007a68:	08007a15 	.word	0x08007a15
 8007a6c:	08007bbb 	.word	0x08007bbb
 8007a70:	08007a15 	.word	0x08007a15
 8007a74:	08007ac3 	.word	0x08007ac3
 8007a78:	08007a15 	.word	0x08007a15
 8007a7c:	08007a15 	.word	0x08007a15
 8007a80:	08007b5b 	.word	0x08007b5b
 8007a84:	6833      	ldr	r3, [r6, #0]
 8007a86:	1d1a      	adds	r2, r3, #4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6032      	str	r2, [r6, #0]
 8007a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a94:	2301      	movs	r3, #1
 8007a96:	e09d      	b.n	8007bd4 <_printf_i+0x1e8>
 8007a98:	6833      	ldr	r3, [r6, #0]
 8007a9a:	6820      	ldr	r0, [r4, #0]
 8007a9c:	1d19      	adds	r1, r3, #4
 8007a9e:	6031      	str	r1, [r6, #0]
 8007aa0:	0606      	lsls	r6, r0, #24
 8007aa2:	d501      	bpl.n	8007aa8 <_printf_i+0xbc>
 8007aa4:	681d      	ldr	r5, [r3, #0]
 8007aa6:	e003      	b.n	8007ab0 <_printf_i+0xc4>
 8007aa8:	0645      	lsls	r5, r0, #25
 8007aaa:	d5fb      	bpl.n	8007aa4 <_printf_i+0xb8>
 8007aac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ab0:	2d00      	cmp	r5, #0
 8007ab2:	da03      	bge.n	8007abc <_printf_i+0xd0>
 8007ab4:	232d      	movs	r3, #45	@ 0x2d
 8007ab6:	426d      	negs	r5, r5
 8007ab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007abc:	4859      	ldr	r0, [pc, #356]	@ (8007c24 <_printf_i+0x238>)
 8007abe:	230a      	movs	r3, #10
 8007ac0:	e011      	b.n	8007ae6 <_printf_i+0xfa>
 8007ac2:	6821      	ldr	r1, [r4, #0]
 8007ac4:	6833      	ldr	r3, [r6, #0]
 8007ac6:	0608      	lsls	r0, r1, #24
 8007ac8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007acc:	d402      	bmi.n	8007ad4 <_printf_i+0xe8>
 8007ace:	0649      	lsls	r1, r1, #25
 8007ad0:	bf48      	it	mi
 8007ad2:	b2ad      	uxthmi	r5, r5
 8007ad4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ad6:	4853      	ldr	r0, [pc, #332]	@ (8007c24 <_printf_i+0x238>)
 8007ad8:	6033      	str	r3, [r6, #0]
 8007ada:	bf14      	ite	ne
 8007adc:	230a      	movne	r3, #10
 8007ade:	2308      	moveq	r3, #8
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ae6:	6866      	ldr	r6, [r4, #4]
 8007ae8:	60a6      	str	r6, [r4, #8]
 8007aea:	2e00      	cmp	r6, #0
 8007aec:	bfa2      	ittt	ge
 8007aee:	6821      	ldrge	r1, [r4, #0]
 8007af0:	f021 0104 	bicge.w	r1, r1, #4
 8007af4:	6021      	strge	r1, [r4, #0]
 8007af6:	b90d      	cbnz	r5, 8007afc <_printf_i+0x110>
 8007af8:	2e00      	cmp	r6, #0
 8007afa:	d04b      	beq.n	8007b94 <_printf_i+0x1a8>
 8007afc:	4616      	mov	r6, r2
 8007afe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b02:	fb03 5711 	mls	r7, r3, r1, r5
 8007b06:	5dc7      	ldrb	r7, [r0, r7]
 8007b08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b0c:	462f      	mov	r7, r5
 8007b0e:	42bb      	cmp	r3, r7
 8007b10:	460d      	mov	r5, r1
 8007b12:	d9f4      	bls.n	8007afe <_printf_i+0x112>
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d10b      	bne.n	8007b30 <_printf_i+0x144>
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	07df      	lsls	r7, r3, #31
 8007b1c:	d508      	bpl.n	8007b30 <_printf_i+0x144>
 8007b1e:	6923      	ldr	r3, [r4, #16]
 8007b20:	6861      	ldr	r1, [r4, #4]
 8007b22:	4299      	cmp	r1, r3
 8007b24:	bfde      	ittt	le
 8007b26:	2330      	movle	r3, #48	@ 0x30
 8007b28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b30:	1b92      	subs	r2, r2, r6
 8007b32:	6122      	str	r2, [r4, #16]
 8007b34:	f8cd a000 	str.w	sl, [sp]
 8007b38:	464b      	mov	r3, r9
 8007b3a:	aa03      	add	r2, sp, #12
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	4640      	mov	r0, r8
 8007b40:	f7ff fee6 	bl	8007910 <_printf_common>
 8007b44:	3001      	adds	r0, #1
 8007b46:	d14a      	bne.n	8007bde <_printf_i+0x1f2>
 8007b48:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4c:	b004      	add	sp, #16
 8007b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	f043 0320 	orr.w	r3, r3, #32
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	4833      	ldr	r0, [pc, #204]	@ (8007c28 <_printf_i+0x23c>)
 8007b5c:	2778      	movs	r7, #120	@ 0x78
 8007b5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	6831      	ldr	r1, [r6, #0]
 8007b66:	061f      	lsls	r7, r3, #24
 8007b68:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b6c:	d402      	bmi.n	8007b74 <_printf_i+0x188>
 8007b6e:	065f      	lsls	r7, r3, #25
 8007b70:	bf48      	it	mi
 8007b72:	b2ad      	uxthmi	r5, r5
 8007b74:	6031      	str	r1, [r6, #0]
 8007b76:	07d9      	lsls	r1, r3, #31
 8007b78:	bf44      	itt	mi
 8007b7a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b7e:	6023      	strmi	r3, [r4, #0]
 8007b80:	b11d      	cbz	r5, 8007b8a <_printf_i+0x19e>
 8007b82:	2310      	movs	r3, #16
 8007b84:	e7ac      	b.n	8007ae0 <_printf_i+0xf4>
 8007b86:	4827      	ldr	r0, [pc, #156]	@ (8007c24 <_printf_i+0x238>)
 8007b88:	e7e9      	b.n	8007b5e <_printf_i+0x172>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	f023 0320 	bic.w	r3, r3, #32
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	e7f6      	b.n	8007b82 <_printf_i+0x196>
 8007b94:	4616      	mov	r6, r2
 8007b96:	e7bd      	b.n	8007b14 <_printf_i+0x128>
 8007b98:	6833      	ldr	r3, [r6, #0]
 8007b9a:	6825      	ldr	r5, [r4, #0]
 8007b9c:	6961      	ldr	r1, [r4, #20]
 8007b9e:	1d18      	adds	r0, r3, #4
 8007ba0:	6030      	str	r0, [r6, #0]
 8007ba2:	062e      	lsls	r6, r5, #24
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	d501      	bpl.n	8007bac <_printf_i+0x1c0>
 8007ba8:	6019      	str	r1, [r3, #0]
 8007baa:	e002      	b.n	8007bb2 <_printf_i+0x1c6>
 8007bac:	0668      	lsls	r0, r5, #25
 8007bae:	d5fb      	bpl.n	8007ba8 <_printf_i+0x1bc>
 8007bb0:	8019      	strh	r1, [r3, #0]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6123      	str	r3, [r4, #16]
 8007bb6:	4616      	mov	r6, r2
 8007bb8:	e7bc      	b.n	8007b34 <_printf_i+0x148>
 8007bba:	6833      	ldr	r3, [r6, #0]
 8007bbc:	1d1a      	adds	r2, r3, #4
 8007bbe:	6032      	str	r2, [r6, #0]
 8007bc0:	681e      	ldr	r6, [r3, #0]
 8007bc2:	6862      	ldr	r2, [r4, #4]
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f7f8 fb0a 	bl	80001e0 <memchr>
 8007bcc:	b108      	cbz	r0, 8007bd2 <_printf_i+0x1e6>
 8007bce:	1b80      	subs	r0, r0, r6
 8007bd0:	6060      	str	r0, [r4, #4]
 8007bd2:	6863      	ldr	r3, [r4, #4]
 8007bd4:	6123      	str	r3, [r4, #16]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bdc:	e7aa      	b.n	8007b34 <_printf_i+0x148>
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	4632      	mov	r2, r6
 8007be2:	4649      	mov	r1, r9
 8007be4:	4640      	mov	r0, r8
 8007be6:	47d0      	blx	sl
 8007be8:	3001      	adds	r0, #1
 8007bea:	d0ad      	beq.n	8007b48 <_printf_i+0x15c>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	079b      	lsls	r3, r3, #30
 8007bf0:	d413      	bmi.n	8007c1a <_printf_i+0x22e>
 8007bf2:	68e0      	ldr	r0, [r4, #12]
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	4298      	cmp	r0, r3
 8007bf8:	bfb8      	it	lt
 8007bfa:	4618      	movlt	r0, r3
 8007bfc:	e7a6      	b.n	8007b4c <_printf_i+0x160>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4632      	mov	r2, r6
 8007c02:	4649      	mov	r1, r9
 8007c04:	4640      	mov	r0, r8
 8007c06:	47d0      	blx	sl
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d09d      	beq.n	8007b48 <_printf_i+0x15c>
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	68e3      	ldr	r3, [r4, #12]
 8007c10:	9903      	ldr	r1, [sp, #12]
 8007c12:	1a5b      	subs	r3, r3, r1
 8007c14:	42ab      	cmp	r3, r5
 8007c16:	dcf2      	bgt.n	8007bfe <_printf_i+0x212>
 8007c18:	e7eb      	b.n	8007bf2 <_printf_i+0x206>
 8007c1a:	2500      	movs	r5, #0
 8007c1c:	f104 0619 	add.w	r6, r4, #25
 8007c20:	e7f5      	b.n	8007c0e <_printf_i+0x222>
 8007c22:	bf00      	nop
 8007c24:	080087d1 	.word	0x080087d1
 8007c28:	080087e2 	.word	0x080087e2

08007c2c <memmove>:
 8007c2c:	4288      	cmp	r0, r1
 8007c2e:	b510      	push	{r4, lr}
 8007c30:	eb01 0402 	add.w	r4, r1, r2
 8007c34:	d902      	bls.n	8007c3c <memmove+0x10>
 8007c36:	4284      	cmp	r4, r0
 8007c38:	4623      	mov	r3, r4
 8007c3a:	d807      	bhi.n	8007c4c <memmove+0x20>
 8007c3c:	1e43      	subs	r3, r0, #1
 8007c3e:	42a1      	cmp	r1, r4
 8007c40:	d008      	beq.n	8007c54 <memmove+0x28>
 8007c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c4a:	e7f8      	b.n	8007c3e <memmove+0x12>
 8007c4c:	4402      	add	r2, r0
 8007c4e:	4601      	mov	r1, r0
 8007c50:	428a      	cmp	r2, r1
 8007c52:	d100      	bne.n	8007c56 <memmove+0x2a>
 8007c54:	bd10      	pop	{r4, pc}
 8007c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c5e:	e7f7      	b.n	8007c50 <memmove+0x24>

08007c60 <_sbrk_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d06      	ldr	r5, [pc, #24]	@ (8007c7c <_sbrk_r+0x1c>)
 8007c64:	2300      	movs	r3, #0
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	f7fb fe36 	bl	80038dc <_sbrk>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_sbrk_r+0x1a>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_sbrk_r+0x1a>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	200002ac 	.word	0x200002ac

08007c80 <memcpy>:
 8007c80:	440a      	add	r2, r1
 8007c82:	4291      	cmp	r1, r2
 8007c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c88:	d100      	bne.n	8007c8c <memcpy+0xc>
 8007c8a:	4770      	bx	lr
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c96:	4291      	cmp	r1, r2
 8007c98:	d1f9      	bne.n	8007c8e <memcpy+0xe>
 8007c9a:	bd10      	pop	{r4, pc}

08007c9c <_realloc_r>:
 8007c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	4615      	mov	r5, r2
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	b921      	cbnz	r1, 8007cb2 <_realloc_r+0x16>
 8007ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cac:	4611      	mov	r1, r2
 8007cae:	f7ff bc4b 	b.w	8007548 <_malloc_r>
 8007cb2:	b92a      	cbnz	r2, 8007cc0 <_realloc_r+0x24>
 8007cb4:	f7ff fbdc 	bl	8007470 <_free_r>
 8007cb8:	2400      	movs	r4, #0
 8007cba:	4620      	mov	r0, r4
 8007cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc0:	f000 f81a 	bl	8007cf8 <_malloc_usable_size_r>
 8007cc4:	4285      	cmp	r5, r0
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	d802      	bhi.n	8007cd0 <_realloc_r+0x34>
 8007cca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007cce:	d8f4      	bhi.n	8007cba <_realloc_r+0x1e>
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	f7ff fc38 	bl	8007548 <_malloc_r>
 8007cd8:	4607      	mov	r7, r0
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d0ec      	beq.n	8007cb8 <_realloc_r+0x1c>
 8007cde:	42b5      	cmp	r5, r6
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	bf28      	it	cs
 8007ce6:	4632      	movcs	r2, r6
 8007ce8:	f7ff ffca 	bl	8007c80 <memcpy>
 8007cec:	4621      	mov	r1, r4
 8007cee:	4640      	mov	r0, r8
 8007cf0:	f7ff fbbe 	bl	8007470 <_free_r>
 8007cf4:	463c      	mov	r4, r7
 8007cf6:	e7e0      	b.n	8007cba <_realloc_r+0x1e>

08007cf8 <_malloc_usable_size_r>:
 8007cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cfc:	1f18      	subs	r0, r3, #4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	bfbc      	itt	lt
 8007d02:	580b      	ldrlt	r3, [r1, r0]
 8007d04:	18c0      	addlt	r0, r0, r3
 8007d06:	4770      	bx	lr

08007d08 <_init>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	bf00      	nop
 8007d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0e:	bc08      	pop	{r3}
 8007d10:	469e      	mov	lr, r3
 8007d12:	4770      	bx	lr

08007d14 <_fini>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	bf00      	nop
 8007d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1a:	bc08      	pop	{r3}
 8007d1c:	469e      	mov	lr, r3
 8007d1e:	4770      	bx	lr
