
STM32_ILI9341_PARA_LCD_withoutLVGL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002948  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab4  08002adc  08002adc  00003adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003590  08003590  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003590  08003590  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003590  08003590  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003590  08003590  00004590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003594  08003594  00004594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003598  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000038  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005005  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000136b  00000000  00000000  0000a041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000570  00000000  00000000  0000b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003f7  00000000  00000000  0000b920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f383  00000000  00000000  0000bd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006fbc  00000000  00000000  0002b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baf56  00000000  00000000  00032056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ecfac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001420  00000000  00000000  000ecff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000ee410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002ac4 	.word	0x08002ac4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002ac4 	.word	0x08002ac4

080001d4 <LCD_write>:
u16 DeviceCode;	 



void LCD_write(u16 VAL)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	80fb      	strh	r3, [r7, #6]
	LCD_CS_CLR;  
 80001de:	4b0a      	ldr	r3, [pc, #40]	@ (8000208 <LCD_write+0x34>)
 80001e0:	2202      	movs	r2, #2
 80001e2:	629a      	str	r2, [r3, #40]	@ 0x28
	DATAOUT(VAL);
 80001e4:	4a09      	ldr	r2, [pc, #36]	@ (800020c <LCD_write+0x38>)
 80001e6:	88fb      	ldrh	r3, [r7, #6]
 80001e8:	6153      	str	r3, [r2, #20]
	LCD_WR_CLR;
 80001ea:	4b07      	ldr	r3, [pc, #28]	@ (8000208 <LCD_write+0x34>)
 80001ec:	2208      	movs	r2, #8
 80001ee:	629a      	str	r2, [r3, #40]	@ 0x28
	LCD_WR_SET;
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <LCD_write+0x34>)
 80001f2:	2208      	movs	r2, #8
 80001f4:	619a      	str	r2, [r3, #24]
	LCD_CS_SET;
 80001f6:	4b04      	ldr	r3, [pc, #16]	@ (8000208 <LCD_write+0x34>)
 80001f8:	2202      	movs	r2, #2
 80001fa:	619a      	str	r2, [r3, #24]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	48000800 	.word	0x48000800
 800020c:	48000400 	.word	0x48000400

08000210 <LCD_WR_REG>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u16 data)
{ 
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	80fb      	strh	r3, [r7, #6]
   LCD_RS_CLR;     
 800021a:	4b06      	ldr	r3, [pc, #24]	@ (8000234 <LCD_WR_REG+0x24>)
 800021c:	2204      	movs	r2, #4
 800021e:	629a      	str	r2, [r3, #40]	@ 0x28
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
 8000220:	88fb      	ldrh	r3, [r7, #6]
 8000222:	021b      	lsls	r3, r3, #8
 8000224:	b29b      	uxth	r3, r3
 8000226:	4618      	mov	r0, r3
 8000228:	f7ff ffd4 	bl	80001d4 <LCD_write>
	 #else
	 LCD_write(data);
	 #endif
}
 800022c:	bf00      	nop
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	48000800 	.word	0x48000800

08000238 <LCD_WR_DATA>:
 * @function   :Write an 16-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u16 data)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	80fb      	strh	r3, [r7, #6]
	 LCD_RS_SET;
 8000242:	4b06      	ldr	r3, [pc, #24]	@ (800025c <LCD_WR_DATA+0x24>)
 8000244:	2204      	movs	r2, #4
 8000246:	619a      	str	r2, [r3, #24]
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
 8000248:	88fb      	ldrh	r3, [r7, #6]
 800024a:	021b      	lsls	r3, r3, #8
 800024c:	b29b      	uxth	r3, r3
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffc0 	bl	80001d4 <LCD_write>
	 #else
	 LCD_write(data);
	 #endif
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	48000800 	.word	0x48000800

08000260 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{	
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	460a      	mov	r2, r1
 800026a:	80fb      	strh	r3, [r7, #6]
 800026c:	4613      	mov	r3, r2
 800026e:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ffcc 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 8000278:	88bb      	ldrh	r3, [r7, #4]
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ffdc 	bl	8000238 <LCD_WR_DATA>
}	   
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 800028c:	4b03      	ldr	r3, [pc, #12]	@ (800029c <LCD_WriteRAM_Prepare+0x14>)
 800028e:	891b      	ldrh	r3, [r3, #8]
 8000290:	4618      	mov	r0, r3
 8000292:	f7ff ffbd 	bl	8000210 <LCD_WR_REG>
}	 
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000028 	.word	0x20000028

080002a0 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	80fb      	strh	r3, [r7, #6]
   LCD_RS_SET; 
 80002aa:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <Lcd_WriteData_16Bit+0x50>)
 80002ac:	2204      	movs	r2, #4
 80002ae:	619a      	str	r2, [r3, #24]
	 #if LCD_USE8BIT_MODEL
		LCD_CS_CLR;
 80002b0:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <Lcd_WriteData_16Bit+0x50>)
 80002b2:	2202      	movs	r2, #2
 80002b4:	629a      	str	r2, [r3, #40]	@ 0x28
		DATAOUT(Data);
 80002b6:	4a0f      	ldr	r2, [pc, #60]	@ (80002f4 <Lcd_WriteData_16Bit+0x54>)
 80002b8:	88fb      	ldrh	r3, [r7, #6]
 80002ba:	6153      	str	r3, [r2, #20]
		LCD_WR_CLR; 
 80002bc:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <Lcd_WriteData_16Bit+0x50>)
 80002be:	2208      	movs	r2, #8
 80002c0:	629a      	str	r2, [r3, #40]	@ 0x28
		LCD_WR_SET;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	@ (80002f0 <Lcd_WriteData_16Bit+0x50>)
 80002c4:	2208      	movs	r2, #8
 80002c6:	619a      	str	r2, [r3, #24]
		DATAOUT(Data<<8);
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	4a0a      	ldr	r2, [pc, #40]	@ (80002f4 <Lcd_WriteData_16Bit+0x54>)
 80002cc:	021b      	lsls	r3, r3, #8
 80002ce:	6153      	str	r3, [r2, #20]
		LCD_WR_CLR; 
 80002d0:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <Lcd_WriteData_16Bit+0x50>)
 80002d2:	2208      	movs	r2, #8
 80002d4:	629a      	str	r2, [r3, #40]	@ 0x28
		LCD_WR_SET;
 80002d6:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <Lcd_WriteData_16Bit+0x50>)
 80002d8:	2208      	movs	r2, #8
 80002da:	619a      	str	r2, [r3, #24]
		LCD_CS_SET;
 80002dc:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <Lcd_WriteData_16Bit+0x50>)
 80002de:	2202      	movs	r2, #2
 80002e0:	619a      	str	r2, [r3, #24]
 //  LCD_write(Data&0xFF00);
//	 LCD_write(Data<<8);
	 #else
	 LCD_write(Data);
	 #endif
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	48000800 	.word	0x48000800
 80002f4:	48000400 	.word	0x48000400

080002f8 <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	460a      	mov	r2, r1
 8000302:	80fb      	strh	r3, [r7, #6]
 8000304:	4613      	mov	r3, r2
 8000306:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 8000308:	88ba      	ldrh	r2, [r7, #4]
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	4611      	mov	r1, r2
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f9c0 	bl	8000694 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 8000314:	4b04      	ldr	r3, [pc, #16]	@ (8000328 <LCD_DrawPoint+0x30>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ffc1 	bl	80002a0 <Lcd_WriteData_16Bit>
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000038 	.word	0x20000038

0800032c <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	80fb      	strh	r3, [r7, #6]
  unsigned int i;//,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 8000336:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <LCD_Clear+0x58>)
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	3b01      	subs	r3, #1
 800033c:	b29a      	uxth	r2, r3
 800033e:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <LCD_Clear+0x58>)
 8000340:	885b      	ldrh	r3, [r3, #2]
 8000342:	3b01      	subs	r3, #1
 8000344:	b29b      	uxth	r3, r3
 8000346:	2100      	movs	r1, #0
 8000348:	2000      	movs	r0, #0
 800034a:	f000 f951 	bl	80005f0 <LCD_SetWindows>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	e006      	b.n	8000362 <LCD_Clear+0x36>
	{
 //   for(m=0;m<lcddev.width;m++)
  //  {	
			Lcd_WriteData_16Bit(Color);
 8000354:	88fb      	ldrh	r3, [r7, #6]
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ffa2 	bl	80002a0 <Lcd_WriteData_16Bit>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	3301      	adds	r3, #1
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <LCD_Clear+0x58>)
 8000364:	885b      	ldrh	r3, [r3, #2]
 8000366:	461a      	mov	r2, r3
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <LCD_Clear+0x58>)
 800036a:	881b      	ldrh	r3, [r3, #0]
 800036c:	fb02 f303 	mul.w	r3, r2, r3
 8000370:	461a      	mov	r2, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	4293      	cmp	r3, r2
 8000376:	d3ed      	bcc.n	8000354 <LCD_Clear+0x28>
	//	}
	}
} 
 8000378:	bf00      	nop
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000028 	.word	0x20000028

08000388 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 800038c:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <LCD_RESET+0x20>)
 800038e:	2201      	movs	r2, #1
 8000390:	629a      	str	r2, [r3, #40]	@ 0x28
	delay_ms(100);	
 8000392:	2064      	movs	r0, #100	@ 0x64
 8000394:	f000 fcb2 	bl	8000cfc <delay_ms>
	LCD_RST_SET;
 8000398:	4b03      	ldr	r3, [pc, #12]	@ (80003a8 <LCD_RESET+0x20>)
 800039a:	2201      	movs	r2, #1
 800039c:	619a      	str	r2, [r3, #24]
	delay_ms(50);
 800039e:	2032      	movs	r0, #50	@ 0x32
 80003a0:	f000 fcac 	bl	8000cfc <delay_ms>
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	48000800 	.word	0x48000800

080003ac <ILI9341_paradriver_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void ILI9341_paradriver_Init(void)
{  
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	//LCD_GPIOInit();	// already done with CUBE MX
 	LCD_RESET(); //LCD ��λ
 80003b0:	f7ff ffea 	bl	8000388 <LCD_RESET>
//*************2.4inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 80003b4:	20cf      	movs	r0, #207	@ 0xcf
 80003b6:	f7ff ff2b 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80003ba:	2000      	movs	r0, #0
 80003bc:	f7ff ff3c 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0xD9); //0xC1 
 80003c0:	20d9      	movs	r0, #217	@ 0xd9
 80003c2:	f7ff ff39 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0X30); 
 80003c6:	2030      	movs	r0, #48	@ 0x30
 80003c8:	f7ff ff36 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xED);  
 80003cc:	20ed      	movs	r0, #237	@ 0xed
 80003ce:	f7ff ff1f 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 80003d2:	2064      	movs	r0, #100	@ 0x64
 80003d4:	f7ff ff30 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x03); 
 80003d8:	2003      	movs	r0, #3
 80003da:	f7ff ff2d 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0X12); 
 80003de:	2012      	movs	r0, #18
 80003e0:	f7ff ff2a 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0X81); 
 80003e4:	2081      	movs	r0, #129	@ 0x81
 80003e6:	f7ff ff27 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);  
 80003ea:	20e8      	movs	r0, #232	@ 0xe8
 80003ec:	f7ff ff10 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 80003f0:	2085      	movs	r0, #133	@ 0x85
 80003f2:	f7ff ff21 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 80003f6:	2010      	movs	r0, #16
 80003f8:	f7ff ff1e 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A); 
 80003fc:	207a      	movs	r0, #122	@ 0x7a
 80003fe:	f7ff ff1b 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);  
 8000402:	20cb      	movs	r0, #203	@ 0xcb
 8000404:	f7ff ff04 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 8000408:	2039      	movs	r0, #57	@ 0x39
 800040a:	f7ff ff15 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C); 
 800040e:	202c      	movs	r0, #44	@ 0x2c
 8000410:	f7ff ff12 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8000414:	2000      	movs	r0, #0
 8000416:	f7ff ff0f 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x34); 
 800041a:	2034      	movs	r0, #52	@ 0x34
 800041c:	f7ff ff0c 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8000420:	2002      	movs	r0, #2
 8000422:	f7ff ff09 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);  
 8000426:	20f7      	movs	r0, #247	@ 0xf7
 8000428:	f7ff fef2 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 800042c:	2020      	movs	r0, #32
 800042e:	f7ff ff03 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);  
 8000432:	20ea      	movs	r0, #234	@ 0xea
 8000434:	f7ff feec 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000438:	2000      	movs	r0, #0
 800043a:	f7ff fefd 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 800043e:	2000      	movs	r0, #0
 8000440:	f7ff fefa 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control 
 8000444:	20c0      	movs	r0, #192	@ 0xc0
 8000446:	f7ff fee3 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 800044a:	201b      	movs	r0, #27
 800044c:	f7ff fef4 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control 
 8000450:	20c1      	movs	r0, #193	@ 0xc1
 8000452:	f7ff fedd 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] 0x01
 8000456:	2012      	movs	r0, #18
 8000458:	f7ff feee 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control 
 800045c:	20c5      	movs	r0, #197	@ 0xc5
 800045e:	f7ff fed7 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 	 //30
 8000462:	2008      	movs	r0, #8
 8000464:	f7ff fee8 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x26); 	 //30
 8000468:	2026      	movs	r0, #38	@ 0x26
 800046a:	f7ff fee5 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2 
 800046e:	20c7      	movs	r0, #199	@ 0xc7
 8000470:	f7ff fece 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0XB7); 
 8000474:	20b7      	movs	r0, #183	@ 0xb7
 8000476:	f7ff fedf 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control 
 800047a:	2036      	movs	r0, #54	@ 0x36
 800047c:	f7ff fec8 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 8000480:	2008      	movs	r0, #8
 8000482:	f7ff fed9 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);   
 8000486:	203a      	movs	r0, #58	@ 0x3a
 8000488:	f7ff fec2 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 800048c:	2055      	movs	r0, #85	@ 0x55
 800048e:	f7ff fed3 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);   
 8000492:	20b1      	movs	r0, #177	@ 0xb1
 8000494:	f7ff febc 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 8000498:	2000      	movs	r0, #0
 800049a:	f7ff fecd 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 800049e:	201a      	movs	r0, #26
 80004a0:	f7ff feca 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control 
 80004a4:	20b6      	movs	r0, #182	@ 0xb6
 80004a6:	f7ff feb3 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 80004aa:	200a      	movs	r0, #10
 80004ac:	f7ff fec4 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2); 
 80004b0:	20a2      	movs	r0, #162	@ 0xa2
 80004b2:	f7ff fec1 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80004b6:	20f2      	movs	r0, #242	@ 0xf2
 80004b8:	f7ff feaa 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 80004bc:	2000      	movs	r0, #0
 80004be:	f7ff febb 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected 
 80004c2:	2026      	movs	r0, #38	@ 0x26
 80004c4:	f7ff fea4 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 80004c8:	2001      	movs	r0, #1
 80004ca:	f7ff feb5 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma 
 80004ce:	20e0      	movs	r0, #224	@ 0xe0
 80004d0:	f7ff fe9e 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x0F); 
 80004d4:	200f      	movs	r0, #15
 80004d6:	f7ff feaf 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x1D); 
 80004da:	201d      	movs	r0, #29
 80004dc:	f7ff feac 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 80004e0:	201a      	movs	r0, #26
 80004e2:	f7ff fea9 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A); 
 80004e6:	200a      	movs	r0, #10
 80004e8:	f7ff fea6 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D); 
 80004ec:	200d      	movs	r0, #13
 80004ee:	f7ff fea3 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 80004f2:	2007      	movs	r0, #7
 80004f4:	f7ff fea0 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x49); 
 80004f8:	2049      	movs	r0, #73	@ 0x49
 80004fa:	f7ff fe9d 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0X66); 
 80004fe:	2066      	movs	r0, #102	@ 0x66
 8000500:	f7ff fe9a 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x3B); 
 8000504:	203b      	movs	r0, #59	@ 0x3b
 8000506:	f7ff fe97 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 800050a:	2007      	movs	r0, #7
 800050c:	f7ff fe94 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x11); 
 8000510:	2011      	movs	r0, #17
 8000512:	f7ff fe91 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x01); 
 8000516:	2001      	movs	r0, #1
 8000518:	f7ff fe8e 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x09); 
 800051c:	2009      	movs	r0, #9
 800051e:	f7ff fe8b 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x05); 
 8000522:	2005      	movs	r0, #5
 8000524:	f7ff fe88 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x04); 		 
 8000528:	2004      	movs	r0, #4
 800052a:	f7ff fe85 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma 
 800052e:	20e1      	movs	r0, #225	@ 0xe1
 8000530:	f7ff fe6e 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff fe7f 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x18); 
 800053a:	2018      	movs	r0, #24
 800053c:	f7ff fe7c 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x1D); 
 8000540:	201d      	movs	r0, #29
 8000542:	f7ff fe79 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8000546:	2002      	movs	r0, #2
 8000548:	f7ff fe76 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 800054c:	200f      	movs	r0, #15
 800054e:	f7ff fe73 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x04); 
 8000552:	2004      	movs	r0, #4
 8000554:	f7ff fe70 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x36); 
 8000558:	2036      	movs	r0, #54	@ 0x36
 800055a:	f7ff fe6d 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x13); 
 800055e:	2013      	movs	r0, #19
 8000560:	f7ff fe6a 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x4C); 
 8000564:	204c      	movs	r0, #76	@ 0x4c
 8000566:	f7ff fe67 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x07); 
 800056a:	2007      	movs	r0, #7
 800056c:	f7ff fe64 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x13); 
 8000570:	2013      	movs	r0, #19
 8000572:	f7ff fe61 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F); 
 8000576:	200f      	movs	r0, #15
 8000578:	f7ff fe5e 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x2E); 
 800057c:	202e      	movs	r0, #46	@ 0x2e
 800057e:	f7ff fe5b 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x2F); 
 8000582:	202f      	movs	r0, #47	@ 0x2f
 8000584:	f7ff fe58 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x05); 
 8000588:	2005      	movs	r0, #5
 800058a:	f7ff fe55 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0x2B); 
 800058e:	202b      	movs	r0, #43	@ 0x2b
 8000590:	f7ff fe3e 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff fe4f 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800059a:	2000      	movs	r0, #0
 800059c:	f7ff fe4c 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f7ff fe49 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80005a6:	203f      	movs	r0, #63	@ 0x3f
 80005a8:	f7ff fe46 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0x2A); 
 80005ac:	202a      	movs	r0, #42	@ 0x2a
 80005ae:	f7ff fe2f 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff fe40 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff fe3d 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff fe3a 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);	 
 80005c4:	20ef      	movs	r0, #239	@ 0xef
 80005c6:	f7ff fe37 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80005ca:	2011      	movs	r0, #17
 80005cc:	f7ff fe20 	bl	8000210 <LCD_WR_REG>
	delay_ms(120);
 80005d0:	2078      	movs	r0, #120	@ 0x78
 80005d2:	f000 fb93 	bl	8000cfc <delay_ms>
	LCD_WR_REG(0x29); //display on		
 80005d6:	2029      	movs	r0, #41	@ 0x29
 80005d8:	f7ff fe1a 	bl	8000210 <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 f86b 	bl	80006b8 <LCD_direction>
//	LCD_LED=1;//��������	 
	LCD_Clear(WHITE);//��ȫ����ɫ
 80005e2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80005e6:	f7ff fea1 	bl	800032c <LCD_Clear>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4604      	mov	r4, r0
 80005f8:	4608      	mov	r0, r1
 80005fa:	4611      	mov	r1, r2
 80005fc:	461a      	mov	r2, r3
 80005fe:	4623      	mov	r3, r4
 8000600:	80fb      	strh	r3, [r7, #6]
 8000602:	4603      	mov	r3, r0
 8000604:	80bb      	strh	r3, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
 800060a:	4613      	mov	r3, r2
 800060c:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 800060e:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <LCD_SetWindows+0xa0>)
 8000610:	899b      	ldrh	r3, [r3, #12]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fdfc 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	b29b      	uxth	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fe0a 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	b29b      	uxth	r3, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fe04 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	0a1b      	lsrs	r3, r3, #8
 8000634:	b29b      	uxth	r3, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fdfe 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	b29b      	uxth	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fdf8 	bl	8000238 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 8000648:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <LCD_SetWindows+0xa0>)
 800064a:	89db      	ldrh	r3, [r3, #14]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fddf 	bl	8000210 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8000652:	88bb      	ldrh	r3, [r7, #4]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	b29b      	uxth	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fded 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 800065e:	88bb      	ldrh	r3, [r7, #4]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	b29b      	uxth	r3, r3
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fde7 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 800066a:	883b      	ldrh	r3, [r7, #0]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	b29b      	uxth	r3, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fde1 	bl	8000238 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 8000676:	883b      	ldrh	r3, [r7, #0]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	b29b      	uxth	r3, r3
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fddb 	bl	8000238 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 8000682:	f7ff fe01 	bl	8000288 <LCD_WriteRAM_Prepare>
}   
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bd90      	pop	{r4, r7, pc}
 800068e:	bf00      	nop
 8000690:	20000028 	.word	0x20000028

08000694 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	80fb      	strh	r3, [r7, #6]
 80006a0:	4613      	mov	r3, r2
 80006a2:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 80006a4:	88bb      	ldrh	r3, [r7, #4]
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	88b9      	ldrh	r1, [r7, #4]
 80006aa:	88f8      	ldrh	r0, [r7, #6]
 80006ac:	f7ff ffa0 	bl	80005f0 <LCD_SetWindows>
} 
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 80006c2:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <LCD_direction+0xac>)
 80006c4:	222a      	movs	r2, #42	@ 0x2a
 80006c6:	819a      	strh	r2, [r3, #12]
			lcddev.setycmd=0x2B;
 80006c8:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <LCD_direction+0xac>)
 80006ca:	222b      	movs	r2, #43	@ 0x2b
 80006cc:	81da      	strh	r2, [r3, #14]
			lcddev.wramcmd=0x2C;
 80006ce:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <LCD_direction+0xac>)
 80006d0:	222c      	movs	r2, #44	@ 0x2c
 80006d2:	811a      	strh	r2, [r3, #8]
			lcddev.rramcmd=0x2E;
 80006d4:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <LCD_direction+0xac>)
 80006d6:	222e      	movs	r2, #46	@ 0x2e
 80006d8:	815a      	strh	r2, [r3, #10]
	switch(direction){		  
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d83b      	bhi.n	8000758 <LCD_direction+0xa0>
 80006e0:	a201      	add	r2, pc, #4	@ (adr r2, 80006e8 <LCD_direction+0x30>)
 80006e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e6:	bf00      	nop
 80006e8:	080006f9 	.word	0x080006f9
 80006ec:	08000711 	.word	0x08000711
 80006f0:	08000729 	.word	0x08000729
 80006f4:	08000741 	.word	0x08000741
		case 0:						 	 		
			lcddev.width=LCD_W;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <LCD_direction+0xac>)
 80006fa:	22f0      	movs	r2, #240	@ 0xf0
 80006fc:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 80006fe:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <LCD_direction+0xac>)
 8000700:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000704:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3));
 8000706:	2108      	movs	r1, #8
 8000708:	2036      	movs	r0, #54	@ 0x36
 800070a:	f7ff fda9 	bl	8000260 <LCD_WriteReg>
		break;
 800070e:	e024      	b.n	800075a <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 8000710:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <LCD_direction+0xac>)
 8000712:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000716:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <LCD_direction+0xac>)
 800071a:	22f0      	movs	r2, #240	@ 0xf0
 800071c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6));
 800071e:	2168      	movs	r1, #104	@ 0x68
 8000720:	2036      	movs	r0, #54	@ 0x36
 8000722:	f7ff fd9d 	bl	8000260 <LCD_WriteReg>
		break;
 8000726:	e018      	b.n	800075a <LCD_direction+0xa2>
		case 2:						 	 		
			lcddev.width=LCD_W;
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <LCD_direction+0xac>)
 800072a:	22f0      	movs	r2, #240	@ 0xf0
 800072c:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <LCD_direction+0xac>)
 8000730:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000734:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<4)|(1<<6));
 8000736:	21d8      	movs	r1, #216	@ 0xd8
 8000738:	2036      	movs	r0, #54	@ 0x36
 800073a:	f7ff fd91 	bl	8000260 <LCD_WriteReg>
		break;
 800073e:	e00c      	b.n	800075a <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 8000740:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <LCD_direction+0xac>)
 8000742:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000746:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <LCD_direction+0xac>)
 800074a:	22f0      	movs	r2, #240	@ 0xf0
 800074c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5)|(1<<4));
 800074e:	21b8      	movs	r1, #184	@ 0xb8
 8000750:	2036      	movs	r0, #54	@ 0x36
 8000752:	f7ff fd85 	bl	8000260 <LCD_WriteReg>
		break;	
 8000756:	e000      	b.n	800075a <LCD_direction+0xa2>
		default:break;
 8000758:	bf00      	nop
	}		
}	 
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000028 	.word	0x20000028

08000768 <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	4604      	mov	r4, r0
 8000770:	4608      	mov	r0, r1
 8000772:	4611      	mov	r1, r2
 8000774:	461a      	mov	r2, r3
 8000776:	4623      	mov	r3, r4
 8000778:	80fb      	strh	r3, [r7, #6]
 800077a:	4603      	mov	r3, r0
 800077c:	80bb      	strh	r3, [r7, #4]
 800077e:	460b      	mov	r3, r1
 8000780:	807b      	strh	r3, [r7, #2]
 8000782:	4613      	mov	r3, r2
 8000784:	803b      	strh	r3, [r7, #0]
	u16 i,j;
	u16 width=ex-sx+1; 		//�õ����Ŀ��
 8000786:	887a      	ldrh	r2, [r7, #2]
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	b29b      	uxth	r3, r3
 800078e:	3301      	adds	r3, #1
 8000790:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;		//�߶�
 8000792:	883a      	ldrh	r2, [r7, #0]
 8000794:	88bb      	ldrh	r3, [r7, #4]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	b29b      	uxth	r3, r3
 800079a:	3301      	adds	r3, #1
 800079c:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);//������ʾ����
 800079e:	883b      	ldrh	r3, [r7, #0]
 80007a0:	887a      	ldrh	r2, [r7, #2]
 80007a2:	88b9      	ldrh	r1, [r7, #4]
 80007a4:	88f8      	ldrh	r0, [r7, #6]
 80007a6:	f7ff ff23 	bl	80005f0 <LCD_SetWindows>
	for(i=0;i<height;i++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	81fb      	strh	r3, [r7, #14]
 80007ae:	e010      	b.n	80007d2 <LCD_Fill+0x6a>
	{
		for(j=0;j<width;j++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	81bb      	strh	r3, [r7, #12]
 80007b4:	e006      	b.n	80007c4 <LCD_Fill+0x5c>
		Lcd_WriteData_16Bit(color);	//д������
 80007b6:	8c3b      	ldrh	r3, [r7, #32]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd71 	bl	80002a0 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	3301      	adds	r3, #1
 80007c2:	81bb      	strh	r3, [r7, #12]
 80007c4:	89ba      	ldrh	r2, [r7, #12]
 80007c6:	897b      	ldrh	r3, [r7, #10]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d3f4      	bcc.n	80007b6 <LCD_Fill+0x4e>
	for(i=0;i<height;i++)
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	3301      	adds	r3, #1
 80007d0:	81fb      	strh	r3, [r7, #14]
 80007d2:	89fa      	ldrh	r2, [r7, #14]
 80007d4:	893b      	ldrh	r3, [r7, #8]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3ea      	bcc.n	80007b0 <LCD_Fill+0x48>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ���������Ϊȫ��
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <LCD_Fill+0x94>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	3b01      	subs	r3, #1
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <LCD_Fill+0x94>)
 80007e4:	885b      	ldrh	r3, [r3, #2]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff feff 	bl	80005f0 <LCD_SetWindows>
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd90      	pop	{r4, r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000028 	.word	0x20000028

08000800 <LCD_DrawLine>:
								x2:the ending x coordinate of the line
								y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b08d      	sub	sp, #52	@ 0x34
 8000804:	af00      	add	r7, sp, #0
 8000806:	4604      	mov	r4, r0
 8000808:	4608      	mov	r0, r1
 800080a:	4611      	mov	r1, r2
 800080c:	461a      	mov	r2, r3
 800080e:	4623      	mov	r3, r4
 8000810:	80fb      	strh	r3, [r7, #6]
 8000812:	4603      	mov	r3, r0
 8000814:	80bb      	strh	r3, [r7, #4]
 8000816:	460b      	mov	r3, r1
 8000818:	807b      	strh	r3, [r7, #2]
 800081a:	4613      	mov	r3, r2
 800081c:	803b      	strh	r3, [r7, #0]
	u16 t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;

	delta_x=x2-x1; //������������
 8000826:	887a      	ldrh	r2, [r7, #2]
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 800082e:	883a      	ldrh	r2, [r7, #0]
 8000830:	88bb      	ldrh	r3, [r7, #4]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 800083a:	88bb      	ldrh	r3, [r7, #4]
 800083c:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //���õ�������
 800083e:	6a3b      	ldr	r3, [r7, #32]
 8000840:	2b00      	cmp	r3, #0
 8000842:	dd02      	ble.n	800084a <LCD_DrawLine+0x4a>
 8000844:	2301      	movs	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e00b      	b.n	8000862 <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//��ֱ��
 800084a:	6a3b      	ldr	r3, [r7, #32]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <LCD_DrawLine+0x56>
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e005      	b.n	8000862 <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	6a3b      	ldr	r3, [r7, #32]
 800085e:	425b      	negs	r3, r3
 8000860:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	2b00      	cmp	r3, #0
 8000866:	dd02      	ble.n	800086e <LCD_DrawLine+0x6e>
 8000868:	2301      	movs	r3, #1
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	e00b      	b.n	8000886 <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//ˮƽ��
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <LCD_DrawLine+0x7a>
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	e005      	b.n	8000886 <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	425b      	negs	r3, r3
 8000884:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //ѡȡ��������������
 8000886:	6a3a      	ldr	r2, [r7, #32]
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	429a      	cmp	r2, r3
 800088c:	dd02      	ble.n	8000894 <LCD_DrawLine+0x94>
 800088e:	6a3b      	ldr	r3, [r7, #32]
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	e001      	b.n	8000898 <LCD_DrawLine+0x98>
	else distance=delta_y;
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//�������
 8000898:	2300      	movs	r3, #0
 800089a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800089c:	e02a      	b.n	80008f4 <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//����
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	b292      	uxth	r2, r2
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fd25 	bl	80002f8 <LCD_DrawPoint>
		xerr+=delta_x ;
 80008ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	4413      	add	r3, r2
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y ;
 80008b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	4413      	add	r3, r2
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 80008be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	dd07      	ble.n	80008d6 <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 80008c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	4413      	add	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80008d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	429a      	cmp	r2, r3
 80008dc:	dd07      	ble.n	80008ee <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 80008de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	4413      	add	r3, r2
 80008ec:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//�������
 80008ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80008f0:	3301      	adds	r3, #1
 80008f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80008f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	3301      	adds	r3, #1
 80008fa:	429a      	cmp	r2, r3
 80008fc:	ddcf      	ble.n	800089e <LCD_DrawLine+0x9e>
		}
	}
}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	3734      	adds	r7, #52	@ 0x34
 8000904:	46bd      	mov	sp, r7
 8000906:	bd90      	pop	{r4, r7, pc}

08000908 <LCD_DrawRectangle>:
								x2:the ending x coordinate of the rectangle
								y2:the ending y coordinate of the rectangle
 * @retvalue   :None
******************************************************************************/
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4604      	mov	r4, r0
 8000910:	4608      	mov	r0, r1
 8000912:	4611      	mov	r1, r2
 8000914:	461a      	mov	r2, r3
 8000916:	4623      	mov	r3, r4
 8000918:	80fb      	strh	r3, [r7, #6]
 800091a:	4603      	mov	r3, r0
 800091c:	80bb      	strh	r3, [r7, #4]
 800091e:	460b      	mov	r3, r1
 8000920:	807b      	strh	r3, [r7, #2]
 8000922:	4613      	mov	r3, r2
 8000924:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y1);
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	887a      	ldrh	r2, [r7, #2]
 800092a:	88b9      	ldrh	r1, [r7, #4]
 800092c:	88f8      	ldrh	r0, [r7, #6]
 800092e:	f7ff ff67 	bl	8000800 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x1,y2);
 8000932:	883b      	ldrh	r3, [r7, #0]
 8000934:	88fa      	ldrh	r2, [r7, #6]
 8000936:	88b9      	ldrh	r1, [r7, #4]
 8000938:	88f8      	ldrh	r0, [r7, #6]
 800093a:	f7ff ff61 	bl	8000800 <LCD_DrawLine>
	LCD_DrawLine(x1,y2,x2,y2);
 800093e:	883b      	ldrh	r3, [r7, #0]
 8000940:	887a      	ldrh	r2, [r7, #2]
 8000942:	8839      	ldrh	r1, [r7, #0]
 8000944:	88f8      	ldrh	r0, [r7, #6]
 8000946:	f7ff ff5b 	bl	8000800 <LCD_DrawLine>
	LCD_DrawLine(x2,y1,x2,y2);
 800094a:	883b      	ldrh	r3, [r7, #0]
 800094c:	887a      	ldrh	r2, [r7, #2]
 800094e:	88b9      	ldrh	r1, [r7, #4]
 8000950:	8878      	ldrh	r0, [r7, #2]
 8000952:	f7ff ff55 	bl	8000800 <LCD_DrawLine>
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bd90      	pop	{r4, r7, pc}
	...

08000960 <LCD_DrawFillRectangle>:
								x2:the ending x coordinate of the filled rectangle
								y2:the ending y coordinate of the filled rectangle
 * @retvalue   :None
******************************************************************************/
void LCD_DrawFillRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b085      	sub	sp, #20
 8000964:	af02      	add	r7, sp, #8
 8000966:	4604      	mov	r4, r0
 8000968:	4608      	mov	r0, r1
 800096a:	4611      	mov	r1, r2
 800096c:	461a      	mov	r2, r3
 800096e:	4623      	mov	r3, r4
 8000970:	80fb      	strh	r3, [r7, #6]
 8000972:	4603      	mov	r3, r0
 8000974:	80bb      	strh	r3, [r7, #4]
 8000976:	460b      	mov	r3, r1
 8000978:	807b      	strh	r3, [r7, #2]
 800097a:	4613      	mov	r3, r2
 800097c:	803b      	strh	r3, [r7, #0]
	LCD_Fill(x1,y1,x2,y2,POINT_COLOR);
 800097e:	4b07      	ldr	r3, [pc, #28]	@ (800099c <LCD_DrawFillRectangle+0x3c>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	883c      	ldrh	r4, [r7, #0]
 8000984:	887a      	ldrh	r2, [r7, #2]
 8000986:	88b9      	ldrh	r1, [r7, #4]
 8000988:	88f8      	ldrh	r0, [r7, #6]
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	4623      	mov	r3, r4
 800098e:	f7ff feeb 	bl	8000768 <LCD_Fill>
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	bf00      	nop
 800099c:	20000038 	.word	0x20000038

080009a0 <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4604      	mov	r4, r0
 80009a8:	4608      	mov	r0, r1
 80009aa:	4611      	mov	r1, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	4623      	mov	r3, r4
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	4603      	mov	r3, r0
 80009b4:	80bb      	strh	r3, [r7, #4]
 80009b6:	460b      	mov	r3, r1
 80009b8:	807b      	strh	r3, [r7, #2]
 80009ba:	4613      	mov	r3, r2
 80009bc:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;
 80009be:	4b62      	ldr	r3, [pc, #392]	@ (8000b48 <LCD_ShowChar+0x1a8>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	817b      	strh	r3, [r7, #10]

	num=num-' ';//�õ�ƫ�ƺ��ֵ
 80009c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009c8:	3b20      	subs	r3, #32
 80009ca:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 80009ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80009d2:	085b      	lsrs	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	4413      	add	r3, r2
 80009dc:	b29b      	uxth	r3, r3
 80009de:	3b01      	subs	r3, #1
 80009e0:	b29c      	uxth	r4, r3
 80009e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	3b01      	subs	r3, #1
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	88b9      	ldrh	r1, [r7, #4]
 80009f4:	88f8      	ldrh	r0, [r7, #6]
 80009f6:	4622      	mov	r2, r4
 80009f8:	f7ff fdfa 	bl	80005f0 <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 80009fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d143      	bne.n	8000a8c <LCD_ShowChar+0xec>
	{
		for(pos=0;pos<size;pos++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	73bb      	strb	r3, [r7, #14]
 8000a08:	e03a      	b.n	8000a80 <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8000a0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a0e:	2b0c      	cmp	r3, #12
 8000a10:	d10c      	bne.n	8000a2c <LCD_ShowChar+0x8c>
 8000a12:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a16:	7bb9      	ldrb	r1, [r7, #14]
 8000a18:	484c      	ldr	r0, [pc, #304]	@ (8000b4c <LCD_ShowChar+0x1ac>)
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	4413      	add	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4403      	add	r3, r0
 8000a24:	440b      	add	r3, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e008      	b.n	8000a3e <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 8000a2c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a30:	7bbb      	ldrb	r3, [r7, #14]
 8000a32:	4947      	ldr	r1, [pc, #284]	@ (8000b50 <LCD_ShowChar+0x1b0>)
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	440a      	add	r2, r1
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8000a3e:	2300      	movs	r3, #0
 8000a40:	737b      	strb	r3, [r7, #13]
 8000a42:	e013      	b.n	8000a6c <LCD_ShowChar+0xcc>
		    {
		        if(temp&0x01)Lcd_WriteData_16Bit(fc);
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d004      	beq.n	8000a58 <LCD_ShowChar+0xb8>
 8000a4e:	887b      	ldrh	r3, [r7, #2]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fc25 	bl	80002a0 <Lcd_WriteData_16Bit>
 8000a56:	e003      	b.n	8000a60 <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc);
 8000a58:	883b      	ldrh	r3, [r7, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fc20 	bl	80002a0 <Lcd_WriteData_16Bit>
				temp>>=1;
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	085b      	lsrs	r3, r3, #1
 8000a64:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8000a66:	7b7b      	ldrb	r3, [r7, #13]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	737b      	strb	r3, [r7, #13]
 8000a6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	7b7a      	ldrb	r2, [r7, #13]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d3e4      	bcc.n	8000a44 <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	73bb      	strb	r3, [r7, #14]
 8000a80:	7bba      	ldrb	r2, [r7, #14]
 8000a82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d3bf      	bcc.n	8000a0a <LCD_ShowChar+0x6a>
 8000a8a:	e049      	b.n	8000b20 <LCD_ShowChar+0x180>
		    }

		}
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73bb      	strb	r3, [r7, #14]
 8000a90:	e041      	b.n	8000b16 <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8000a92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a96:	2b0c      	cmp	r3, #12
 8000a98:	d10c      	bne.n	8000ab4 <LCD_ShowChar+0x114>
 8000a9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a9e:	7bb9      	ldrb	r1, [r7, #14]
 8000aa0:	482a      	ldr	r0, [pc, #168]	@ (8000b4c <LCD_ShowChar+0x1ac>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4403      	add	r3, r0
 8000aac:	440b      	add	r3, r1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	73fb      	strb	r3, [r7, #15]
 8000ab2:	e008      	b.n	8000ac6 <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 8000ab4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	4925      	ldr	r1, [pc, #148]	@ (8000b50 <LCD_ShowChar+0x1b0>)
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	440a      	add	r2, r1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	737b      	strb	r3, [r7, #13]
 8000aca:	e01a      	b.n	8000b02 <LCD_ShowChar+0x162>
		    {
				POINT_COLOR=fc;
 8000acc:	4a1e      	ldr	r2, [pc, #120]	@ (8000b48 <LCD_ShowChar+0x1a8>)
 8000ace:	887b      	ldrh	r3, [r7, #2]
 8000ad0:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00c      	beq.n	8000af6 <LCD_ShowChar+0x156>
 8000adc:	7b7b      	ldrb	r3, [r7, #13]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b298      	uxth	r0, r3
 8000ae6:	7bbb      	ldrb	r3, [r7, #14]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	88bb      	ldrh	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	4619      	mov	r1, r3
 8000af2:	f7ff fc01 	bl	80002f8 <LCD_DrawPoint>
		        temp>>=1;
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	085b      	lsrs	r3, r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8000afc:	7b7b      	ldrb	r3, [r7, #13]
 8000afe:	3301      	adds	r3, #1
 8000b00:	737b      	strb	r3, [r7, #13]
 8000b02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b06:	085b      	lsrs	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	7b7a      	ldrb	r2, [r7, #13]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d3dd      	bcc.n	8000acc <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	3301      	adds	r3, #1
 8000b14:	73bb      	strb	r3, [r7, #14]
 8000b16:	7bba      	ldrb	r2, [r7, #14]
 8000b18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d3b8      	bcc.n	8000a92 <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;
 8000b20:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <LCD_ShowChar+0x1a8>)
 8000b22:	897b      	ldrh	r3, [r7, #10]
 8000b24:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <LCD_ShowChar+0x1b4>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <LCD_ShowChar+0x1b4>)
 8000b30:	885b      	ldrh	r3, [r3, #2]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fd59 	bl	80005f0 <LCD_SetWindows>
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000038 	.word	0x20000038
 8000b4c:	08002afc 	.word	0x08002afc
 8000b50:	08002f70 	.word	0x08002f70
 8000b54:	20000028 	.word	0x20000028

08000b58 <Show_Str>:
								size:the size of English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af04      	add	r7, sp, #16
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
	u16 x0=x;
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ���������
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 8000b7e:	e061      	b.n	8000c44 <Show_Str+0xec>
    {
        if(!bHz)
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d15e      	bne.n	8000c44 <Show_Str+0xec>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size))
 8000b86:	88fa      	ldrh	r2, [r7, #6]
 8000b88:	4b33      	ldr	r3, [pc, #204]	@ (8000c58 <Show_Str+0x100>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b92:	085b      	lsrs	r3, r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	1acb      	subs	r3, r1, r3
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dc58      	bgt.n	8000c4e <Show_Str+0xf6>
 8000b9c:	88ba      	ldrh	r2, [r7, #4]
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c58 <Show_Str+0x100>)
 8000ba0:	885b      	ldrh	r3, [r3, #2]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	429a      	cmp	r2, r3
 8000bac:	dc4f      	bgt.n	8000c4e <Show_Str+0xf6>
			return;
	        if(*str>0x80)bHz=1;//����
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b80      	cmp	r3, #128	@ 0x80
 8000bb4:	d902      	bls.n	8000bbc <Show_Str+0x64>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e043      	b.n	8000c44 <Show_Str+0xec>
	        else              //�ַ�
	        {
		        if(*str==0x0D)//���з���
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b0d      	cmp	r3, #13
 8000bc2:	d10b      	bne.n	8000bdc <Show_Str+0x84>
		        {
		            y+=size;
 8000bc4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	88bb      	ldrh	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
					x=x0;
 8000bd0:	89bb      	ldrh	r3, [r7, #12]
 8000bd2:	80fb      	strh	r3, [r7, #6]
		            str++;
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
 8000bda:	e030      	b.n	8000c3e <Show_Str+0xe6>
		        }
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 8000bdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000be0:	2b10      	cmp	r3, #16
 8000be2:	d913      	bls.n	8000c0c <Show_Str+0xb4>
					{
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	883d      	ldrh	r5, [r7, #0]
 8000bea:	887c      	ldrh	r4, [r7, #2]
 8000bec:	88b9      	ldrh	r1, [r7, #4]
 8000bee:	88f8      	ldrh	r0, [r7, #6]
 8000bf0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000bf4:	9202      	str	r2, [sp, #8]
 8000bf6:	2210      	movs	r2, #16
 8000bf8:	9201      	str	r2, [sp, #4]
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	462b      	mov	r3, r5
 8000bfe:	4622      	mov	r2, r4
 8000c00:	f7ff fece 	bl	80009a0 <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ��
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	3308      	adds	r3, #8
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	e018      	b.n	8000c3e <Show_Str+0xe6>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	883d      	ldrh	r5, [r7, #0]
 8000c12:	887c      	ldrh	r4, [r7, #2]
 8000c14:	88b9      	ldrh	r1, [r7, #4]
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000c1c:	9202      	str	r2, [sp, #8]
 8000c1e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000c22:	9201      	str	r2, [sp, #4]
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	462b      	mov	r3, r5
 8000c28:	4622      	mov	r2, r4
 8000c2a:	f7ff feb9 	bl	80009a0 <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ��
 8000c2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c32:	085b      	lsrs	r3, r3, #1
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	80fb      	strh	r3, [r7, #6]
					}
				}
				str++;
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	3301      	adds	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
    while(*str!=0)//����δ����
 8000c44:	6a3b      	ldr	r3, [r7, #32]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d199      	bne.n	8000b80 <Show_Str+0x28>
 8000c4c:	e000      	b.n	8000c50 <Show_Str+0xf8>
			return;
 8000c4e:	bf00      	nop

	        }
        }
    }
}
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bdb0      	pop	{r4, r5, r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000028 	.word	0x20000028

08000c5c <delay_init>:
// Initialize delay function
// When using uC/OS, this function initializes the uC/OS clock tick.
// The SYSTICK clock is fixed to the AHB clock.
// SYSCLK: System clock frequency
void delay_init(u8 SYSCLK)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS                         // If OS support is needed
    u32 reload;
#endif
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); // SysTick frequency is HCLK
 8000c66:	2004      	movs	r0, #4
 8000c68:	f000 fb1e 	bl	80012a8 <HAL_SYSTICK_CLKSourceConfig>
    fac_us=SYSCLK;                        // fac_us is used regardless of OS usage
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4a03      	ldr	r2, [pc, #12]	@ (8000c7c <delay_init+0x20>)
 8000c70:	6013      	str	r3, [r2, #0]
    SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk; // Enable SysTick interrupt
    SysTick->LOAD=reload;                   // Interrupt every 1/OS_TICKS_PER_SEC second
    SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; // Enable SysTick
#else
#endif
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000003c 	.word	0x2000003c

08000c80 <delay_us>:

// Delay for nus microseconds
// nus: Number of microseconds to delay
// nus: 0~190887435 (maximum value is 2^32/fac_us when fac_us=22.5)
void delay_us(u32 nus)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	@ 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told,tnow,tcnt=0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
    u32 reload=SysTick->LOAD;                // Value of LOAD
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <delay_us+0x74>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	617b      	str	r3, [r7, #20]
    ticks=nus*fac_us;                        // Number of ticks needed
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <delay_us+0x78>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	613b      	str	r3, [r7, #16]
    told=SysTick->VAL;                        // Counter value upon entry
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <delay_us+0x74>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	61fb      	str	r3, [r7, #28]
    while(1)
    {
        tnow=SysTick->VAL;
 8000ca4:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <delay_us+0x74>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	60fb      	str	r3, [r7, #12]
        if(tnow!=told)
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d0f8      	beq.n	8000ca4 <delay_us+0x24>
        {
            if(tnow<told)tcnt+=told-tnow;    // Note that SYSTICK is a decrementing counter.
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d206      	bcs.n	8000cc8 <delay_us+0x48>
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	e007      	b.n	8000cd8 <delay_us+0x58>
            else tcnt+=reload-tnow+told;
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	1ad2      	subs	r2, r2, r3
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
            told=tnow;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	61fb      	str	r3, [r7, #28]
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d200      	bcs.n	8000ce6 <delay_us+0x66>
        tnow=SysTick->VAL;
 8000ce4:	e7de      	b.n	8000ca4 <delay_us+0x24>
            if(tcnt>=ticks)break;            // Exit if time exceeds or equals the delay time.
 8000ce6:	bf00      	nop
        }
    };
}
 8000ce8:	bf00      	nop
 8000cea:	3724      	adds	r7, #36	@ 0x24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e010 	.word	0xe000e010
 8000cf8:	2000003c 	.word	0x2000003c

08000cfc <delay_ms>:

// Delay for nms milliseconds
// nms: Number of milliseconds to delay
void delay_ms(u16 nms)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	80fb      	strh	r3, [r7, #6]
    u32 i;
    for(i=0;i<nms;i++) delay_us(1000);
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e006      	b.n	8000d1a <delay_ms+0x1e>
 8000d0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d10:	f7ff ffb6 	bl	8000c80 <delay_us>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	3301      	adds	r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3f4      	bcc.n	8000d0c <delay_ms+0x10>
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 f96d 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f843 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 f87d 	bl	8000e38 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  delay_init(72);			// delay initialization (System Clock [MHz])
 8000d3e:	2048      	movs	r0, #72	@ 0x48
 8000d40:	f7ff ff8c 	bl	8000c5c <delay_init>
  ILI9341_paradriver_Init();			// initialization of LCD driver
 8000d44:	f7ff fb32 	bl	80003ac <ILI9341_paradriver_Init>


  LCD_DrawRectangle(50,50,100,100);
 8000d48:	2364      	movs	r3, #100	@ 0x64
 8000d4a:	2264      	movs	r2, #100	@ 0x64
 8000d4c:	2132      	movs	r1, #50	@ 0x32
 8000d4e:	2032      	movs	r0, #50	@ 0x32
 8000d50:	f7ff fdda 	bl	8000908 <LCD_DrawRectangle>
  LCD_DrawFillRectangle(50,50,70,70);
 8000d54:	2346      	movs	r3, #70	@ 0x46
 8000d56:	2246      	movs	r2, #70	@ 0x46
 8000d58:	2132      	movs	r1, #50	@ 0x32
 8000d5a:	2032      	movs	r0, #50	@ 0x32
 8000d5c:	f7ff fe00 	bl	8000960 <LCD_DrawFillRectangle>
  LCD_DrawRectangle(140,50,190,100);
 8000d60:	2364      	movs	r3, #100	@ 0x64
 8000d62:	22be      	movs	r2, #190	@ 0xbe
 8000d64:	2132      	movs	r1, #50	@ 0x32
 8000d66:	208c      	movs	r0, #140	@ 0x8c
 8000d68:	f7ff fdce 	bl	8000908 <LCD_DrawRectangle>
  LCD_DrawFillRectangle(140,50,160,70);
 8000d6c:	2346      	movs	r3, #70	@ 0x46
 8000d6e:	22a0      	movs	r2, #160	@ 0xa0
 8000d70:	2132      	movs	r1, #50	@ 0x32
 8000d72:	208c      	movs	r0, #140	@ 0x8c
 8000d74:	f7ff fdf4 	bl	8000960 <LCD_DrawFillRectangle>
  Show_Str(100,270,WHITE,BLACK,"HELLO",24,0);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9302      	str	r3, [sp, #8]
 8000d7c:	2318      	movs	r3, #24
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <main+0x8c>)
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2300      	movs	r3, #0
 8000d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d8a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000d8e:	2064      	movs	r0, #100	@ 0x64
 8000d90:	f7ff fee2 	bl	8000b58 <Show_Str>
  Show_Str(35,300,RED,WHITE,"this is test program",16,1);
 8000d94:	2301      	movs	r3, #1
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2310      	movs	r3, #16
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <main+0x90>)
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000da4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000da8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000dac:	2023      	movs	r0, #35	@ 0x23
 8000dae:	f7ff fed3 	bl	8000b58 <Show_Str>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000db2:	bf00      	nop
 8000db4:	e7fd      	b.n	8000db2 <main+0x86>
 8000db6:	bf00      	nop
 8000db8:	08002adc 	.word	0x08002adc
 8000dbc:	08002ae4 	.word	0x08002ae4

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b090      	sub	sp, #64	@ 0x40
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0318 	add.w	r3, r7, #24
 8000dca:	2228      	movs	r2, #40	@ 0x28
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fe4c 	bl	8002a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de6:	2301      	movs	r3, #1
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dea:	2310      	movs	r3, #16
 8000dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fc14 	bl	8001624 <HAL_RCC_OscConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e02:	f000 f86f 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	230f      	movs	r3, #15
 8000e08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fc54 	bl	80026cc <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 f85b 	bl	8000ee4 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3740      	adds	r7, #64	@ 0x40
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <MX_GPIO_Init+0xa0>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a21      	ldr	r2, [pc, #132]	@ (8000ed8 <MX_GPIO_Init+0xa0>)
 8000e54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <MX_GPIO_Init+0xa0>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <MX_GPIO_Init+0xa0>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <MX_GPIO_Init+0xa0>)
 8000e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_GPIO_Init+0xa0>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e7e:	2201      	movs	r2, #1
 8000e80:	211f      	movs	r1, #31
 8000e82:	4816      	ldr	r0, [pc, #88]	@ (8000edc <MX_GPIO_Init+0xa4>)
 8000e84:	f000 fbb6 	bl	80015f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e8e:	4814      	ldr	r0, [pc, #80]	@ (8000ee0 <MX_GPIO_Init+0xa8>)
 8000e90:	f000 fbb0 	bl	80015f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e94:	231f      	movs	r3, #31
 8000e96:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480c      	ldr	r0, [pc, #48]	@ (8000edc <MX_GPIO_Init+0xa4>)
 8000eac:	f000 fa18 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000eb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eb4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <MX_GPIO_Init+0xa8>)
 8000eca:	f000 fa09 	bl	80012e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	48000800 	.word	0x48000800
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <Error_Handler+0x8>

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <HAL_MspInit+0x44>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a0e      	ldr	r2, [pc, #56]	@ (8000f34 <HAL_MspInit+0x44>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <HAL_MspInit+0x44>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <HAL_MspInit+0x44>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <HAL_MspInit+0x44>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_MspInit+0x44>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <NMI_Handler+0x4>

08000f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <MemManage_Handler+0x4>

08000f50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8e:	f000 f885 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff ffea 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	@ (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f001 fd47 	bl	8002a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff fe9d 	bl	8000d2c <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001000:	08003598 	.word	0x08003598
  ldr r2, =_sbss
 8001004:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001008:	20000044 	.word	0x20000044

0800100c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_2_IRQHandler>
	...

08001010 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_Init+0x28>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <HAL_Init+0x28>)
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f90d 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	200f      	movs	r0, #15
 8001028:	f000 f808 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff ff60 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40022000 	.word	0x40022000

0800103c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f917 	bl	800128e <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f000 f8ed 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	@ (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000000 	.word	0x20000000
 8001094:	20000008 	.word	0x20000008
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000040 	.word	0x20000040

080010c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000040 	.word	0x20000040

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	@ (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	@ (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	@ 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f7ff ff8e 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff47 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff5c 	bl	8001124 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff8e 	bl	8001194 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5d 	bl	8001140 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffb0 	bl	80011fc <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d106      	bne.n	80012c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80012c2:	e005      	b.n	80012d0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012ca:	f023 0304 	bic.w	r3, r3, #4
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e160      	b.n	80015b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8152 	beq.w	80015ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b01      	cmp	r3, #1
 8001312:	d005      	beq.n	8001320 <HAL_GPIO_Init+0x40>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d130      	bne.n	8001382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001356:	2201      	movs	r2, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	f003 0201 	and.w	r2, r3, #1
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b03      	cmp	r3, #3
 800138c:	d017      	beq.n	80013be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	2203      	movs	r2, #3
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d123      	bne.n	8001412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	6939      	ldr	r1, [r7, #16]
 800140e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0203 	and.w	r2, r3, #3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80ac 	beq.w	80015ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001454:	4b5e      	ldr	r3, [pc, #376]	@ (80015d0 <HAL_GPIO_Init+0x2f0>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a5d      	ldr	r2, [pc, #372]	@ (80015d0 <HAL_GPIO_Init+0x2f0>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b5b      	ldr	r3, [pc, #364]	@ (80015d0 <HAL_GPIO_Init+0x2f0>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800146c:	4a59      	ldr	r2, [pc, #356]	@ (80015d4 <HAL_GPIO_Init+0x2f4>)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001496:	d025      	beq.n	80014e4 <HAL_GPIO_Init+0x204>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a4f      	ldr	r2, [pc, #316]	@ (80015d8 <HAL_GPIO_Init+0x2f8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d01f      	beq.n	80014e0 <HAL_GPIO_Init+0x200>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a4e      	ldr	r2, [pc, #312]	@ (80015dc <HAL_GPIO_Init+0x2fc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d019      	beq.n	80014dc <HAL_GPIO_Init+0x1fc>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a4d      	ldr	r2, [pc, #308]	@ (80015e0 <HAL_GPIO_Init+0x300>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d013      	beq.n	80014d8 <HAL_GPIO_Init+0x1f8>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a4c      	ldr	r2, [pc, #304]	@ (80015e4 <HAL_GPIO_Init+0x304>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d00d      	beq.n	80014d4 <HAL_GPIO_Init+0x1f4>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a4b      	ldr	r2, [pc, #300]	@ (80015e8 <HAL_GPIO_Init+0x308>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d007      	beq.n	80014d0 <HAL_GPIO_Init+0x1f0>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a4a      	ldr	r2, [pc, #296]	@ (80015ec <HAL_GPIO_Init+0x30c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d101      	bne.n	80014cc <HAL_GPIO_Init+0x1ec>
 80014c8:	2306      	movs	r3, #6
 80014ca:	e00c      	b.n	80014e6 <HAL_GPIO_Init+0x206>
 80014cc:	2307      	movs	r3, #7
 80014ce:	e00a      	b.n	80014e6 <HAL_GPIO_Init+0x206>
 80014d0:	2305      	movs	r3, #5
 80014d2:	e008      	b.n	80014e6 <HAL_GPIO_Init+0x206>
 80014d4:	2304      	movs	r3, #4
 80014d6:	e006      	b.n	80014e6 <HAL_GPIO_Init+0x206>
 80014d8:	2303      	movs	r3, #3
 80014da:	e004      	b.n	80014e6 <HAL_GPIO_Init+0x206>
 80014dc:	2302      	movs	r3, #2
 80014de:	e002      	b.n	80014e6 <HAL_GPIO_Init+0x206>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <HAL_GPIO_Init+0x206>
 80014e4:	2300      	movs	r3, #0
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	f002 0203 	and.w	r2, r2, #3
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	4093      	lsls	r3, r2
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014f6:	4937      	ldr	r1, [pc, #220]	@ (80015d4 <HAL_GPIO_Init+0x2f4>)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001504:	4b3a      	ldr	r3, [pc, #232]	@ (80015f0 <HAL_GPIO_Init+0x310>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001528:	4a31      	ldr	r2, [pc, #196]	@ (80015f0 <HAL_GPIO_Init+0x310>)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800152e:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <HAL_GPIO_Init+0x310>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001552:	4a27      	ldr	r2, [pc, #156]	@ (80015f0 <HAL_GPIO_Init+0x310>)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001558:	4b25      	ldr	r3, [pc, #148]	@ (80015f0 <HAL_GPIO_Init+0x310>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800157c:	4a1c      	ldr	r2, [pc, #112]	@ (80015f0 <HAL_GPIO_Init+0x310>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001582:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_GPIO_Init+0x310>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <HAL_GPIO_Init+0x310>)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f47f ae97 	bne.w	80012f0 <HAL_GPIO_Init+0x10>
  }
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	48000400 	.word	0x48000400
 80015dc:	48000800 	.word	0x48000800
 80015e0:	48000c00 	.word	0x48000c00
 80015e4:	48001000 	.word	0x48001000
 80015e8:	48001400 	.word	0x48001400
 80015ec:	48001800 	.word	0x48001800
 80015f0:	40010400 	.word	0x40010400

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001610:	e002      	b.n	8001618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800162a:	af00      	add	r7, sp, #0
 800162c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001630:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001634:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	f001 b83a 	b.w	80026be <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 816f 	beq.w	800193e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001660:	4bb5      	ldr	r3, [pc, #724]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b04      	cmp	r3, #4
 800166a:	d00c      	beq.n	8001686 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800166c:	4bb2      	ldr	r3, [pc, #712]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d15c      	bne.n	8001732 <HAL_RCC_OscConfig+0x10e>
 8001678:	4baf      	ldr	r3, [pc, #700]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001684:	d155      	bne.n	8001732 <HAL_RCC_OscConfig+0x10e>
 8001686:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800168a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800169a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	095b      	lsrs	r3, r3, #5
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d102      	bne.n	80016b8 <HAL_RCC_OscConfig+0x94>
 80016b2:	4ba1      	ldr	r3, [pc, #644]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	e015      	b.n	80016e4 <HAL_RCC_OscConfig+0xc0>
 80016b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016bc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80016cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016d0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80016d4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80016e0:	4b95      	ldr	r3, [pc, #596]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 80016e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016e8:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80016ec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80016f0:	fa92 f2a2 	rbit	r2, r2
 80016f4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80016f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80016fc:	fab2 f282 	clz	r2, r2
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	f042 0220 	orr.w	r2, r2, #32
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8111 	beq.w	800193c <HAL_RCC_OscConfig+0x318>
 800171a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800171e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 8108 	bne.w	800193c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	f000 bfc6 	b.w	80026be <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001736:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x12e>
 8001744:	4b7c      	ldr	r3, [pc, #496]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a7b      	ldr	r2, [pc, #492]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 800174a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e036      	b.n	80017c0 <HAL_RCC_OscConfig+0x19c>
 8001752:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001756:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x158>
 8001762:	4b75      	ldr	r3, [pc, #468]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a74      	ldr	r2, [pc, #464]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 8001768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b72      	ldr	r3, [pc, #456]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a71      	ldr	r2, [pc, #452]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 8001774:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e021      	b.n	80017c0 <HAL_RCC_OscConfig+0x19c>
 800177c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001780:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x184>
 800178e:	4b6a      	ldr	r3, [pc, #424]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a69      	ldr	r2, [pc, #420]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b67      	ldr	r3, [pc, #412]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a66      	ldr	r2, [pc, #408]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0x19c>
 80017a8:	4b63      	ldr	r3, [pc, #396]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a62      	ldr	r2, [pc, #392]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b60      	ldr	r3, [pc, #384]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a5f      	ldr	r2, [pc, #380]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d059      	beq.n	8001884 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc78 	bl	80010c4 <HAL_GetTick>
 80017d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017da:	f7ff fc73 	bl	80010c4 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d902      	bls.n	80017f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	f000 bf67 	b.w	80026be <HAL_RCC_OscConfig+0x109a>
 80017f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017f4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001804:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d102      	bne.n	8001822 <HAL_RCC_OscConfig+0x1fe>
 800181c:	4b46      	ldr	r3, [pc, #280]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	e015      	b.n	800184e <HAL_RCC_OscConfig+0x22a>
 8001822:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001826:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001836:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800183a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800183e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001842:	fa93 f3a3 	rbit	r3, r3
 8001846:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800184a:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001852:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001856:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800185a:	fa92 f2a2 	rbit	r2, r2
 800185e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001862:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001866:	fab2 f282 	clz	r2, r2
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	f042 0220 	orr.w	r2, r2, #32
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	f002 021f 	and.w	r2, r2, #31
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f202 	lsl.w	r2, r1, r2
 800187c:	4013      	ands	r3, r2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0ab      	beq.n	80017da <HAL_RCC_OscConfig+0x1b6>
 8001882:	e05c      	b.n	800193e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fc1e 	bl	80010c4 <HAL_GetTick>
 8001888:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188e:	f7ff fc19 	bl	80010c4 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	@ 0x64
 800189c:	d902      	bls.n	80018a4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	f000 bf0d 	b.w	80026be <HAL_RCC_OscConfig+0x109a>
 80018a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018a8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80018b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2b2>
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x2de>
 80018d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018da:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80018ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018ee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80018f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <HAL_RCC_OscConfig+0x314>)
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001906:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800190a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800190e:	fa92 f2a2 	rbit	r2, r2
 8001912:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001916:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800191a:	fab2 f282 	clz	r2, r2
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f042 0220 	orr.w	r2, r2, #32
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f002 021f 	and.w	r2, r2, #31
 800192a:	2101      	movs	r1, #1
 800192c:	fa01 f202 	lsl.w	r2, r1, r2
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ab      	bne.n	800188e <HAL_RCC_OscConfig+0x26a>
 8001936:	e002      	b.n	800193e <HAL_RCC_OscConfig+0x31a>
 8001938:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001942:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 817f 	beq.w	8001c52 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001954:	4ba7      	ldr	r3, [pc, #668]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00c      	beq.n	800197a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001960:	4ba4      	ldr	r3, [pc, #656]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	d173      	bne.n	8001a54 <HAL_RCC_OscConfig+0x430>
 800196c:	4ba1      	ldr	r3, [pc, #644]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001978:	d16c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x430>
 800197a:	2302      	movs	r3, #2
 800197c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800198c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d102      	bne.n	80019aa <HAL_RCC_OscConfig+0x386>
 80019a4:	4b93      	ldr	r3, [pc, #588]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	e013      	b.n	80019d2 <HAL_RCC_OscConfig+0x3ae>
 80019aa:	2302      	movs	r3, #2
 80019ac:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80019bc:	2302      	movs	r3, #2
 80019be:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80019c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80019ce:	4b89      	ldr	r3, [pc, #548]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	2202      	movs	r2, #2
 80019d4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80019d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80019dc:	fa92 f2a2 	rbit	r2, r2
 80019e0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80019e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80019e8:	fab2 f282 	clz	r2, r2
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	f042 0220 	orr.w	r2, r2, #32
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	f002 021f 	and.w	r2, r2, #31
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00a      	beq.n	8001a1a <HAL_RCC_OscConfig+0x3f6>
 8001a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d002      	beq.n	8001a1a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	f000 be52 	b.w	80026be <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1a:	4b76      	ldr	r3, [pc, #472]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	21f8      	movs	r1, #248	@ 0xf8
 8001a30:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001a38:	fa91 f1a1 	rbit	r1, r1
 8001a3c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001a40:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001a44:	fab1 f181 	clz	r1, r1
 8001a48:	b2c9      	uxtb	r1, r1
 8001a4a:	408b      	lsls	r3, r1
 8001a4c:	4969      	ldr	r1, [pc, #420]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a52:	e0fe      	b.n	8001c52 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 8088 	beq.w	8001b76 <HAL_RCC_OscConfig+0x552>
 8001a66:	2301      	movs	r3, #1
 8001a68:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001a78:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a86:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2301      	movs	r3, #1
 8001a90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fb17 	bl	80010c4 <HAL_GetTick>
 8001a96:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fb12 	bl	80010c4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d902      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	f000 be06 	b.w	80026be <HAL_RCC_OscConfig+0x109a>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001ac4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d102      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x4be>
 8001adc:	4b45      	ldr	r3, [pc, #276]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	e013      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e6>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001af4:	2302      	movs	r3, #2
 8001af6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001afa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b06:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001b10:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001b14:	fa92 f2a2 	rbit	r2, r2
 8001b18:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001b1c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001b20:	fab2 f282 	clz	r2, r2
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f042 0220 	orr.w	r2, r2, #32
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	f002 021f 	and.w	r2, r2, #31
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0af      	beq.n	8001a9c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	21f8      	movs	r1, #248	@ 0xf8
 8001b52:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001b5a:	fa91 f1a1 	rbit	r1, r1
 8001b5e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001b62:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001b66:	fab1 f181 	clz	r1, r1
 8001b6a:	b2c9      	uxtb	r1, r1
 8001b6c:	408b      	lsls	r3, r1
 8001b6e:	4921      	ldr	r1, [pc, #132]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e06d      	b.n	8001c52 <HAL_RCC_OscConfig+0x62e>
 8001b76:	2301      	movs	r3, #1
 8001b78:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001b88:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b96:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fa8f 	bl	80010c4 <HAL_GetTick>
 8001ba6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bac:	f7ff fa8a 	bl	80010c4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d902      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	f000 bd7e 	b.w	80026be <HAL_RCC_OscConfig+0x109a>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001bd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5d4>
 8001bec:	4b01      	ldr	r3, [pc, #4]	@ (8001bf4 <HAL_RCC_OscConfig+0x5d0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	e016      	b.n	8001c20 <HAL_RCC_OscConfig+0x5fc>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c10:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c1c:	4bbf      	ldr	r3, [pc, #764]	@ (8001f1c <HAL_RCC_OscConfig+0x8f8>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	2202      	movs	r2, #2
 8001c22:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001c26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001c2a:	fa92 f2a2 	rbit	r2, r2
 8001c2e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001c32:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001c36:	fab2 f282 	clz	r2, r2
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f042 0220 	orr.w	r2, r2, #32
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f002 021f 	and.w	r2, r2, #31
 8001c46:	2101      	movs	r1, #1
 8001c48:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1ac      	bne.n	8001bac <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8113 	beq.w	8001e8e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d07c      	beq.n	8001d72 <HAL_RCC_OscConfig+0x74e>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001c8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	4ba2      	ldr	r3, [pc, #648]	@ (8001f20 <HAL_RCC_OscConfig+0x8fc>)
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fa0f 	bl	80010c4 <HAL_GetTick>
 8001ca6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cac:	f7ff fa0a 	bl	80010c4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d902      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	f000 bcfe 	b.w	80026be <HAL_RCC_OscConfig+0x109a>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ccc:	fa93 f2a3 	rbit	r2, r3
 8001cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	fa93 f2a3 	rbit	r2, r3
 8001cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d06:	2202      	movs	r2, #2
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	fa93 f2a3 	rbit	r2, r3
 8001d18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	4b7e      	ldr	r3, [pc, #504]	@ (8001f1c <HAL_RCC_OscConfig+0x8f8>)
 8001d24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d2e:	2102      	movs	r1, #2
 8001d30:	6019      	str	r1, [r3, #0]
 8001d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f1a3 	rbit	r1, r3
 8001d40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d48:	6019      	str	r1, [r3, #0]
  return result;
 8001d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	2101      	movs	r1, #1
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d09d      	beq.n	8001cac <HAL_RCC_OscConfig+0x688>
 8001d70:	e08d      	b.n	8001e8e <HAL_RCC_OscConfig+0x86a>
 8001d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d82:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d90:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d94:	601a      	str	r2, [r3, #0]
  return result;
 8001d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d9e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b5d      	ldr	r3, [pc, #372]	@ (8001f20 <HAL_RCC_OscConfig+0x8fc>)
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	461a      	mov	r2, r3
 8001db0:	2300      	movs	r3, #0
 8001db2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff f986 	bl	80010c4 <HAL_GetTick>
 8001db8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dbe:	f7ff f981 	bl	80010c4 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d902      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	f000 bc75 	b.w	80026be <HAL_RCC_OscConfig+0x109a>
 8001dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ddc:	2202      	movs	r2, #2
 8001dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	fa93 f2a3 	rbit	r2, r3
 8001dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e00:	2202      	movs	r2, #2
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	fa93 f2a3 	rbit	r2, r3
 8001e12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e16:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e20:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e24:	2202      	movs	r2, #2
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fa93 f2a3 	rbit	r2, r3
 8001e36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b36      	ldr	r3, [pc, #216]	@ (8001f1c <HAL_RCC_OscConfig+0x8f8>)
 8001e42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	6019      	str	r1, [r3, #0]
 8001e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f1a3 	rbit	r1, r3
 8001e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e62:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e66:	6019      	str	r1, [r3, #0]
  return result;
 8001e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d197      	bne.n	8001dbe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 81a5 	beq.w	80021ee <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <HAL_RCC_OscConfig+0x8f8>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d116      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b19      	ldr	r3, [pc, #100]	@ (8001f1c <HAL_RCC_OscConfig+0x8f8>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a18      	ldr	r2, [pc, #96]	@ (8001f1c <HAL_RCC_OscConfig+0x8f8>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <HAL_RCC_OscConfig+0x8f8>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001eca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ece:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001edc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <HAL_RCC_OscConfig+0x900>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d121      	bne.n	8001f34 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <HAL_RCC_OscConfig+0x900>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8001f24 <HAL_RCC_OscConfig+0x900>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efc:	f7ff f8e2 	bl	80010c4 <HAL_GetTick>
 8001f00:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	e010      	b.n	8001f28 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7ff f8dd 	bl	80010c4 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	@ 0x64
 8001f14:	d908      	bls.n	8001f28 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e3d1      	b.n	80026be <HAL_RCC_OscConfig+0x109a>
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	10908120 	.word	0x10908120
 8001f24:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	4b8d      	ldr	r3, [pc, #564]	@ (8002160 <HAL_RCC_OscConfig+0xb3c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0e8      	beq.n	8001f06 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x92e>
 8001f44:	4b87      	ldr	r3, [pc, #540]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a86      	ldr	r2, [pc, #536]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	e035      	b.n	8001fbe <HAL_RCC_OscConfig+0x99a>
 8001f52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x958>
 8001f62:	4b80      	ldr	r3, [pc, #512]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a7f      	ldr	r2, [pc, #508]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a7c      	ldr	r2, [pc, #496]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	e020      	b.n	8001fbe <HAL_RCC_OscConfig+0x99a>
 8001f7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x982>
 8001f8c:	4b75      	ldr	r3, [pc, #468]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a74      	ldr	r2, [pc, #464]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	4b72      	ldr	r3, [pc, #456]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a71      	ldr	r2, [pc, #452]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6213      	str	r3, [r2, #32]
 8001fa4:	e00b      	b.n	8001fbe <HAL_RCC_OscConfig+0x99a>
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	4b6c      	ldr	r3, [pc, #432]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a6b      	ldr	r2, [pc, #428]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8081 	beq.w	80020d2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd0:	f7ff f878 	bl	80010c4 <HAL_GetTick>
 8001fd4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	e00b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7ff f873 	bl	80010c4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e365      	b.n	80026be <HAL_RCC_OscConfig+0x109a>
 8001ff2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002002:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	fa93 f2a3 	rbit	r2, r3
 800200c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002010:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800201a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800201e:	2202      	movs	r2, #2
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002026:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	fa93 f2a3 	rbit	r2, r3
 8002030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002034:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002038:	601a      	str	r2, [r3, #0]
  return result;
 800203a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002042:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f043 0302 	orr.w	r3, r3, #2
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d102      	bne.n	800205e <HAL_RCC_OscConfig+0xa3a>
 8002058:	4b42      	ldr	r3, [pc, #264]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	e013      	b.n	8002086 <HAL_RCC_OscConfig+0xa62>
 800205e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002062:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002066:	2202      	movs	r2, #2
 8002068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	4b38      	ldr	r3, [pc, #224]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800208a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800208e:	2102      	movs	r1, #2
 8002090:	6011      	str	r1, [r2, #0]
 8002092:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002096:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	fa92 f1a2 	rbit	r1, r2
 80020a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020a4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80020a8:	6011      	str	r1, [r2, #0]
  return result;
 80020aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020ae:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	fab2 f282 	clz	r2, r2
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	f002 021f 	and.w	r2, r2, #31
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d084      	beq.n	8001fda <HAL_RCC_OscConfig+0x9b6>
 80020d0:	e083      	b.n	80021da <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7fe fff7 	bl	80010c4 <HAL_GetTick>
 80020d6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7fe fff2 	bl	80010c4 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e2e4      	b.n	80026be <HAL_RCC_OscConfig+0x109a>
 80020f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80020fc:	2202      	movs	r2, #2
 80020fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002104:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	fa93 f2a3 	rbit	r2, r3
 800210e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002112:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002120:	2202      	movs	r2, #2
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002128:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	fa93 f2a3 	rbit	r2, r3
 8002132:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002136:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800213a:	601a      	str	r2, [r3, #0]
  return result;
 800213c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002140:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002144:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d106      	bne.n	8002168 <HAL_RCC_OscConfig+0xb44>
 800215a:	4b02      	ldr	r3, [pc, #8]	@ (8002164 <HAL_RCC_OscConfig+0xb40>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	e017      	b.n	8002190 <HAL_RCC_OscConfig+0xb6c>
 8002160:	40007000 	.word	0x40007000
 8002164:	40021000 	.word	0x40021000
 8002168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002170:	2202      	movs	r2, #2
 8002172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002178:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002186:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	4bb3      	ldr	r3, [pc, #716]	@ (800245c <HAL_RCC_OscConfig+0xe38>)
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002194:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002198:	2102      	movs	r1, #2
 800219a:	6011      	str	r1, [r2, #0]
 800219c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021a0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	fa92 f1a2 	rbit	r1, r2
 80021aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021ae:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80021b2:	6011      	str	r1, [r2, #0]
  return result;
 80021b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021b8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	fab2 f282 	clz	r2, r2
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	f002 021f 	and.w	r2, r2, #31
 80021ce:	2101      	movs	r1, #1
 80021d0:	fa01 f202 	lsl.w	r2, r1, r2
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d180      	bne.n	80020dc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021da:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b9e      	ldr	r3, [pc, #632]	@ (800245c <HAL_RCC_OscConfig+0xe38>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a9d      	ldr	r2, [pc, #628]	@ (800245c <HAL_RCC_OscConfig+0xe38>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 825e 	beq.w	80026bc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002200:	4b96      	ldr	r3, [pc, #600]	@ (800245c <HAL_RCC_OscConfig+0xe38>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	f000 821f 	beq.w	800264c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002212:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b02      	cmp	r3, #2
 800221c:	f040 8170 	bne.w	8002500 <HAL_RCC_OscConfig+0xedc>
 8002220:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002224:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002228:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800222c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002232:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	fa93 f2a3 	rbit	r2, r3
 800223c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002240:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002244:	601a      	str	r2, [r3, #0]
  return result;
 8002246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800224a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800224e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800225a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	461a      	mov	r2, r3
 8002262:	2300      	movs	r3, #0
 8002264:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe ff2d 	bl	80010c4 <HAL_GetTick>
 800226a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226e:	e009      	b.n	8002284 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe ff28 	bl	80010c4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e21c      	b.n	80026be <HAL_RCC_OscConfig+0x109a>
 8002284:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002288:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800228c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002296:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	fa93 f2a3 	rbit	r2, r3
 80022a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022a8:	601a      	str	r2, [r3, #0]
  return result;
 80022aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d102      	bne.n	80022ce <HAL_RCC_OscConfig+0xcaa>
 80022c8:	4b64      	ldr	r3, [pc, #400]	@ (800245c <HAL_RCC_OscConfig+0xe38>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	e027      	b.n	800231e <HAL_RCC_OscConfig+0xcfa>
 80022ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80022fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002306:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002314:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	4b50      	ldr	r3, [pc, #320]	@ (800245c <HAL_RCC_OscConfig+0xe38>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002322:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002326:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800232a:	6011      	str	r1, [r2, #0]
 800232c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002330:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	fa92 f1a2 	rbit	r1, r2
 800233a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800233e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002342:	6011      	str	r1, [r2, #0]
  return result;
 8002344:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002348:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	fab2 f282 	clz	r2, r2
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	f042 0220 	orr.w	r2, r2, #32
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	f002 021f 	and.w	r2, r2, #31
 800235e:	2101      	movs	r1, #1
 8002360:	fa01 f202 	lsl.w	r2, r1, r2
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d182      	bne.n	8002270 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236a:	4b3c      	ldr	r3, [pc, #240]	@ (800245c <HAL_RCC_OscConfig+0xe38>)
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236e:	f023 020f 	bic.w	r2, r3, #15
 8002372:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002376:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	4937      	ldr	r1, [pc, #220]	@ (800245c <HAL_RCC_OscConfig+0xe38>)
 8002380:	4313      	orrs	r3, r2
 8002382:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002384:	4b35      	ldr	r3, [pc, #212]	@ (800245c <HAL_RCC_OscConfig+0xe38>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800238c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002390:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a19      	ldr	r1, [r3, #32]
 8002398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800239c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	492d      	ldr	r1, [pc, #180]	@ (800245c <HAL_RCC_OscConfig+0xe38>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
 80023ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80023b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	fa93 f2a3 	rbit	r2, r3
 80023c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023cc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023d0:	601a      	str	r2, [r3, #0]
  return result;
 80023d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023da:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	461a      	mov	r2, r3
 80023ee:	2301      	movs	r3, #1
 80023f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe fe67 	bl	80010c4 <HAL_GetTick>
 80023f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fa:	e009      	b.n	8002410 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fe62 	bl	80010c4 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e156      	b.n	80026be <HAL_RCC_OscConfig+0x109a>
 8002410:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002414:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002418:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800241c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002422:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fa93 f2a3 	rbit	r2, r3
 800242c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002430:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002434:	601a      	str	r2, [r3, #0]
  return result;
 8002436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800243a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800243e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0xe3c>
 8002454:	4b01      	ldr	r3, [pc, #4]	@ (800245c <HAL_RCC_OscConfig+0xe38>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	e02a      	b.n	80024b0 <HAL_RCC_OscConfig+0xe8c>
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002464:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002468:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800246c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002472:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002480:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800248e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002498:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	fa93 f2a3 	rbit	r2, r3
 80024a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	4b86      	ldr	r3, [pc, #536]	@ (80026c8 <HAL_RCC_OscConfig+0x10a4>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024b4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80024b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024bc:	6011      	str	r1, [r2, #0]
 80024be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	fa92 f1a2 	rbit	r1, r2
 80024cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024d0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80024d4:	6011      	str	r1, [r2, #0]
  return result;
 80024d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024da:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	fab2 f282 	clz	r2, r2
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	f042 0220 	orr.w	r2, r2, #32
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	f002 021f 	and.w	r2, r2, #31
 80024f0:	2101      	movs	r1, #1
 80024f2:	fa01 f202 	lsl.w	r2, r1, r2
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f43f af7f 	beq.w	80023fc <HAL_RCC_OscConfig+0xdd8>
 80024fe:	e0dd      	b.n	80026bc <HAL_RCC_OscConfig+0x1098>
 8002500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002504:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002508:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800250c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002512:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002520:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002524:	601a      	str	r2, [r3, #0]
  return result;
 8002526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800252e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800253a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	461a      	mov	r2, r3
 8002542:	2300      	movs	r3, #0
 8002544:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7fe fdbd 	bl	80010c4 <HAL_GetTick>
 800254a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254e:	e009      	b.n	8002564 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fdb8 	bl	80010c4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0ac      	b.n	80026be <HAL_RCC_OscConfig+0x109a>
 8002564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002568:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800256c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002576:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f2a3 	rbit	r2, r3
 8002580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002584:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002588:	601a      	str	r2, [r3, #0]
  return result;
 800258a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002592:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d102      	bne.n	80025ae <HAL_RCC_OscConfig+0xf8a>
 80025a8:	4b47      	ldr	r3, [pc, #284]	@ (80026c8 <HAL_RCC_OscConfig+0x10a4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	e027      	b.n	80025fe <HAL_RCC_OscConfig+0xfda>
 80025ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80025b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	fa93 f2a3 	rbit	r2, r3
 80025ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80025dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	fa93 f2a3 	rbit	r2, r3
 80025f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	4b33      	ldr	r3, [pc, #204]	@ (80026c8 <HAL_RCC_OscConfig+0x10a4>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002602:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002606:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800260a:	6011      	str	r1, [r2, #0]
 800260c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002610:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	fa92 f1a2 	rbit	r1, r2
 800261a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800261e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002622:	6011      	str	r1, [r2, #0]
  return result;
 8002624:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002628:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	fab2 f282 	clz	r2, r2
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	f042 0220 	orr.w	r2, r2, #32
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	f002 021f 	and.w	r2, r2, #31
 800263e:	2101      	movs	r1, #1
 8002640:	fa01 f202 	lsl.w	r2, r1, r2
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d182      	bne.n	8002550 <HAL_RCC_OscConfig+0xf2c>
 800264a:	e037      	b.n	80026bc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002650:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e02e      	b.n	80026be <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002660:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <HAL_RCC_OscConfig+0x10a4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002668:	4b17      	ldr	r3, [pc, #92]	@ (80026c8 <HAL_RCC_OscConfig+0x10a4>)
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002670:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002674:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	429a      	cmp	r2, r3
 8002686:	d117      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002688:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800268c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002694:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800269c:	429a      	cmp	r2, r3
 800269e:	d10b      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80026a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026a4:	f003 020f 	and.w	r2, r3, #15
 80026a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000

080026cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b09e      	sub	sp, #120	@ 0x78
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e162      	b.n	80029aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b90      	ldr	r3, [pc, #576]	@ (8002928 <HAL_RCC_ClockConfig+0x25c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d910      	bls.n	8002714 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b8d      	ldr	r3, [pc, #564]	@ (8002928 <HAL_RCC_ClockConfig+0x25c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 0207 	bic.w	r2, r3, #7
 80026fa:	498b      	ldr	r1, [pc, #556]	@ (8002928 <HAL_RCC_ClockConfig+0x25c>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b89      	ldr	r3, [pc, #548]	@ (8002928 <HAL_RCC_ClockConfig+0x25c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e14a      	b.n	80029aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002720:	4b82      	ldr	r3, [pc, #520]	@ (800292c <HAL_RCC_ClockConfig+0x260>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	497f      	ldr	r1, [pc, #508]	@ (800292c <HAL_RCC_ClockConfig+0x260>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80dc 	beq.w	80028f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d13c      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xf6>
 8002748:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800274c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d102      	bne.n	8002772 <HAL_RCC_ClockConfig+0xa6>
 800276c:	4b6f      	ldr	r3, [pc, #444]	@ (800292c <HAL_RCC_ClockConfig+0x260>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	e00f      	b.n	8002792 <HAL_RCC_ClockConfig+0xc6>
 8002772:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002776:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002780:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002784:	663b      	str	r3, [r7, #96]	@ 0x60
 8002786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002788:	fa93 f3a3 	rbit	r3, r3
 800278c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800278e:	4b67      	ldr	r3, [pc, #412]	@ (800292c <HAL_RCC_ClockConfig+0x260>)
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002796:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002798:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800279a:	fa92 f2a2 	rbit	r2, r2
 800279e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80027a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027a2:	fab2 f282 	clz	r2, r2
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	f042 0220 	orr.w	r2, r2, #32
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	f002 021f 	and.w	r2, r2, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f202 	lsl.w	r2, r1, r2
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d17b      	bne.n	80028b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e0f3      	b.n	80029aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d13c      	bne.n	8002844 <HAL_RCC_ClockConfig+0x178>
 80027ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80027d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d102      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x128>
 80027ee:	4b4f      	ldr	r3, [pc, #316]	@ (800292c <HAL_RCC_ClockConfig+0x260>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	e00f      	b.n	8002814 <HAL_RCC_ClockConfig+0x148>
 80027f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	647b      	str	r3, [r7, #68]	@ 0x44
 8002802:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002806:	643b      	str	r3, [r7, #64]	@ 0x40
 8002808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002810:	4b46      	ldr	r3, [pc, #280]	@ (800292c <HAL_RCC_ClockConfig+0x260>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002818:	63ba      	str	r2, [r7, #56]	@ 0x38
 800281a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800281c:	fa92 f2a2 	rbit	r2, r2
 8002820:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002822:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002824:	fab2 f282 	clz	r2, r2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	f042 0220 	orr.w	r2, r2, #32
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f002 021f 	and.w	r2, r2, #31
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f202 	lsl.w	r2, r1, r2
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d13a      	bne.n	80028b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0b2      	b.n	80029aa <HAL_RCC_ClockConfig+0x2de>
 8002844:	2302      	movs	r3, #2
 8002846:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d102      	bne.n	800286c <HAL_RCC_ClockConfig+0x1a0>
 8002866:	4b31      	ldr	r3, [pc, #196]	@ (800292c <HAL_RCC_ClockConfig+0x260>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	e00d      	b.n	8002888 <HAL_RCC_ClockConfig+0x1bc>
 800286c:	2302      	movs	r3, #2
 800286e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
 8002878:	2302      	movs	r3, #2
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	4b29      	ldr	r3, [pc, #164]	@ (800292c <HAL_RCC_ClockConfig+0x260>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	2202      	movs	r2, #2
 800288a:	61ba      	str	r2, [r7, #24]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	fa92 f2a2 	rbit	r2, r2
 8002892:	617a      	str	r2, [r7, #20]
  return result;
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	fab2 f282 	clz	r2, r2
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f042 0220 	orr.w	r2, r2, #32
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f002 021f 	and.w	r2, r2, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e079      	b.n	80029aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b1d      	ldr	r3, [pc, #116]	@ (800292c <HAL_RCC_ClockConfig+0x260>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	491a      	ldr	r1, [pc, #104]	@ (800292c <HAL_RCC_ClockConfig+0x260>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c8:	f7fe fbfc 	bl	80010c4 <HAL_GetTick>
 80028cc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7fe fbf8 	bl	80010c4 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e061      	b.n	80029aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b11      	ldr	r3, [pc, #68]	@ (800292c <HAL_RCC_ClockConfig+0x260>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <HAL_RCC_ClockConfig+0x25c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d214      	bcs.n	8002930 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <HAL_RCC_ClockConfig+0x25c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4906      	ldr	r1, [pc, #24]	@ (8002928 <HAL_RCC_ClockConfig+0x25c>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <HAL_RCC_ClockConfig+0x25c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e040      	b.n	80029aa <HAL_RCC_ClockConfig+0x2de>
 8002928:	40022000 	.word	0x40022000
 800292c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293c:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <HAL_RCC_ClockConfig+0x2e8>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	491a      	ldr	r1, [pc, #104]	@ (80029b4 <HAL_RCC_ClockConfig+0x2e8>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295a:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <HAL_RCC_ClockConfig+0x2e8>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4912      	ldr	r1, [pc, #72]	@ (80029b4 <HAL_RCC_ClockConfig+0x2e8>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800296e:	f000 f829 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 8002972:	4601      	mov	r1, r0
 8002974:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <HAL_RCC_ClockConfig+0x2e8>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800297c:	22f0      	movs	r2, #240	@ 0xf0
 800297e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	fa92 f2a2 	rbit	r2, r2
 8002986:	60fa      	str	r2, [r7, #12]
  return result;
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	fab2 f282 	clz	r2, r2
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	40d3      	lsrs	r3, r2
 8002992:	4a09      	ldr	r2, [pc, #36]	@ (80029b8 <HAL_RCC_ClockConfig+0x2ec>)
 8002994:	5cd3      	ldrb	r3, [r2, r3]
 8002996:	fa21 f303 	lsr.w	r3, r1, r3
 800299a:	4a08      	ldr	r2, [pc, #32]	@ (80029bc <HAL_RCC_ClockConfig+0x2f0>)
 800299c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800299e:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <HAL_RCC_ClockConfig+0x2f4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fb4a 	bl	800103c <HAL_InitTick>
  
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3778      	adds	r7, #120	@ 0x78
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	08003560 	.word	0x08003560
 80029bc:	20000000 	.word	0x20000000
 80029c0:	20000004 	.word	0x20000004

080029c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80029de:	4b1f      	ldr	r3, [pc, #124]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x98>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d002      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x30>
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d003      	beq.n	80029fa <HAL_RCC_GetSysClockFreq+0x36>
 80029f2:	e029      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029f6:	613b      	str	r3, [r7, #16]
      break;
 80029f8:	e029      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	0c9b      	lsrs	r3, r3, #18
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a04:	5cd3      	ldrb	r3, [r2, r3]
 8002a06:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002a08:	4b14      	ldr	r3, [pc, #80]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	4a15      	ldr	r2, [pc, #84]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a12:	5cd3      	ldrb	r3, [r2, r3]
 8002a14:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a20:	4a0f      	ldr	r2, [pc, #60]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e007      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a32:	4a0b      	ldr	r2, [pc, #44]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	613b      	str	r3, [r7, #16]
      break;
 8002a46:	e002      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a4a:	613b      	str	r3, [r7, #16]
      break;
 8002a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4e:	693b      	ldr	r3, [r7, #16]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	007a1200 	.word	0x007a1200
 8002a64:	08003570 	.word	0x08003570
 8002a68:	08003580 	.word	0x08003580

08002a6c <memset>:
 8002a6c:	4402      	add	r2, r0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d100      	bne.n	8002a76 <memset+0xa>
 8002a74:	4770      	bx	lr
 8002a76:	f803 1b01 	strb.w	r1, [r3], #1
 8002a7a:	e7f9      	b.n	8002a70 <memset+0x4>

08002a7c <__libc_init_array>:
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8002ab4 <__libc_init_array+0x38>)
 8002a80:	4c0d      	ldr	r4, [pc, #52]	@ (8002ab8 <__libc_init_array+0x3c>)
 8002a82:	1b64      	subs	r4, r4, r5
 8002a84:	10a4      	asrs	r4, r4, #2
 8002a86:	2600      	movs	r6, #0
 8002a88:	42a6      	cmp	r6, r4
 8002a8a:	d109      	bne.n	8002aa0 <__libc_init_array+0x24>
 8002a8c:	4d0b      	ldr	r5, [pc, #44]	@ (8002abc <__libc_init_array+0x40>)
 8002a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8002ac0 <__libc_init_array+0x44>)
 8002a90:	f000 f818 	bl	8002ac4 <_init>
 8002a94:	1b64      	subs	r4, r4, r5
 8002a96:	10a4      	asrs	r4, r4, #2
 8002a98:	2600      	movs	r6, #0
 8002a9a:	42a6      	cmp	r6, r4
 8002a9c:	d105      	bne.n	8002aaa <__libc_init_array+0x2e>
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
 8002aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa4:	4798      	blx	r3
 8002aa6:	3601      	adds	r6, #1
 8002aa8:	e7ee      	b.n	8002a88 <__libc_init_array+0xc>
 8002aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aae:	4798      	blx	r3
 8002ab0:	3601      	adds	r6, #1
 8002ab2:	e7f2      	b.n	8002a9a <__libc_init_array+0x1e>
 8002ab4:	08003590 	.word	0x08003590
 8002ab8:	08003590 	.word	0x08003590
 8002abc:	08003590 	.word	0x08003590
 8002ac0:	08003594 	.word	0x08003594

08002ac4 <_init>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	bf00      	nop
 8002ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aca:	bc08      	pop	{r3}
 8002acc:	469e      	mov	lr, r3
 8002ace:	4770      	bx	lr

08002ad0 <_fini>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr
